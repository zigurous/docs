{
  "api/Zigurous.Debug.Benchmark.html": {
    "href": "api/Zigurous.Debug.Benchmark.html",
    "title": "Class Benchmark | Debug Tools",
    "keywords": "Class Benchmark Measures the execution time of functions. Inheritance System.Object Benchmark Namespace : Zigurous.Debug public static class Benchmark Methods Compare(Action, Action, Int32, Boolean) Compares the execution time between foo and bar with a given amount of iterations . public static double Compare(Action foo, Action bar, int iterations, bool log = true) Parameter Description foo The first function to be executed. bar The second function to be executed. iterations The amount of times each function is executed. log Logs the result to the console. Returns Description System.Double The difference in execution time of the two functions in milliseconds. Measure(Action, Int32, Boolean) Measures the execution time of function with a given amount of iterations . public static double Measure(Action foo, int iterations, bool log = true) Parameter Description foo The function to be executed. iterations The amount of times the function is executed. log Logs the result to the console. Returns Description System.Double The execution time of the function in milliseconds. Run(Int32, Action[]) Performs a benchmark that runs each function a given amount of iterations . public static void Run(int iterations, params Action[] foobar) Parameter Description iterations The amount of times each function is executed. foobar The functions to be executed."
  },
  "api/Zigurous.Debug.Compare-1.html": {
    "href": "api/Zigurous.Debug.Compare-1.html",
    "title": "Class Compare<T> | Debug Tools",
    "keywords": "Class Compare<T> Compares how many results are equal between two functions. Inheritance System.Object Compare<T> Namespace : Zigurous.Debug public static class Compare<T> where T : IEquatable<T> Type Parameter Description T The type of value to compare. Methods Test(Func<T>, Func<T>, Int32, Boolean, Boolean) Tests the equality of the results of foo and bar with a given amount of iterations . public static float Test(Func<T> foo, Func<T> bar, int iterations, bool log = true, bool logIndividual = false) Parameter Description foo The first function to execute. bar The second function to execute. iterations The amount of times each function is executed. log Logs the final comparison result. logIndividual Logs the result of each iteration of the functions. Returns Description System.Single The percentage of equal results."
  },
  "api/Zigurous.Debug.FPSDisplay.html": {
    "href": "api/Zigurous.Debug.FPSDisplay.html",
    "title": "Class FPSDisplay | Debug Tools",
    "keywords": "Class FPSDisplay Displays the framerate of the application in realtime. Inheritance System.Object FPSDisplay Namespace : Zigurous.Debug public class FPSDisplay : MonoBehaviour Fields displayText The UI text that display the framerate. public Text displayText refreshRate The amount of seconds between display updates. public float refreshRate Properties decimals The number of decimal digits to display. public int decimals { get; set; } displayFormat The text format of the framerate display. public string displayFormat { get; protected set; } nextUpdate The time of the next framerate update. public float nextUpdate { get; } Methods SetDisplayFormat(Int32) Sets the text format of the framerate display. protected virtual void SetDisplayFormat(int decimals) Parameter Description decimals The number of decimal digits to display. UpdateDisplay(Single) Updates the display with the given framerate. protected virtual void UpdateDisplay(float fps) Parameter Description fps The framerate to display."
  },
  "api/Zigurous.Debug.html": {
    "href": "api/Zigurous.Debug.html",
    "title": "Namespace Zigurous.Debug | Debug Tools",
    "keywords": "Namespace Zigurous.Debug Classes Benchmark Measures the execution time of functions. Compare<T> Compares how many results are equal between two functions. FPSDisplay Displays the framerate of the application in realtime. Log Provides more robust console logging functions compared to UnityEngine.Debug."
  },
  "api/Zigurous.Debug.Log.html": {
    "href": "api/Zigurous.Debug.Log.html",
    "title": "Class Log | Debug Tools",
    "keywords": "Class Log Provides more robust console logging functions compared to UnityEngine.Debug. Inheritance System.Object Log Namespace : Zigurous.Debug public static class Log Fields delimiter The delimiter used when joining multiple messages into a single log message printed to the console. public static string delimiter nullReference The display string for any null references that are logged to the console. public static string nullReference prefix A prefix appended to every log message printed to the console. public static string prefix Methods Assertion(Object) Logs an assertion message to the Unity console. public static void Assertion(object message) Parameter Description message The message to log. Assertion(Object, String) Logs an assertion message to the Unity console with a custom prefix. public static void Assertion(object message, string prefix) Parameter Description message The message to log. prefix The prefix of the message. Assertion(Object, String, UnityEngine.Object) Logs an assertion message to the Unity console with a custom prefix under a given context. public static void Assertion(object message, string prefix, UnityEngine.Object context) Parameter Description message The message to log. prefix The prefix of the message. context The context of the message. Assertion(Object, UnityEngine.Object) Logs an assertion message to the Unity console under a given context. public static void Assertion(object message, UnityEngine.Object context) Parameter Description message The message to log. context The context of the message. Assertion(Object[]) Logs multiple assertion messages as a single message to the Unity console. public static void Assertion(params object[] messages) Parameter Description messages The messages to log. Error(Object) Logs an error message to the Unity console. public static void Error(object message) Parameter Description message The message to log. Error(Object, String) Logs an error message to the Unity console with a custom prefix. public static void Error(object message, string prefix) Parameter Description message The message to log. prefix The prefix of the message. Error(Object, String, UnityEngine.Object) Logs an error message to the Unity console with a custom prefix under a given context. public static void Error(object message, string prefix, UnityEngine.Object context) Parameter Description message The message to log. prefix The prefix of the message. context The context of the message. Error(Object, UnityEngine.Object) Logs an error message to the Unity console under a given context. public static void Error(object message, UnityEngine.Object context) Parameter Description message The message to log. context The context of the message. Error(Object[]) Logs multiple error messages as a single message to the Unity console. public static void Error(params object[] messages) Parameter Description messages The messages to log. Message(Object) Logs a message to the Unity console. public static void Message(object message) Parameter Description message The message to log. Message(Object, String) Logs a message to the Unity console with a custom prefix. public static void Message(object message, string prefix) Parameter Description message The message to log. prefix The prefix of the message. Message(Object, String, UnityEngine.Object) Logs a message to the Unity console with a custom prefix under a given context. public static void Message(object message, string prefix, UnityEngine.Object context) Parameter Description message The message to log. prefix The prefix of the message. context The context of the message. Message(Object, UnityEngine.Object) Logs a message to the Unity console under a given context. public static void Message(object message, UnityEngine.Object context) Parameter Description message The message to log. context The context of the message. Message(Object[]) Logs multiple messages as a single message to the Unity console. public static void Message(params object[] messages) Parameter Description messages The messages to log. Warning(Object) Logs a warning message to the Unity console. public static void Warning(object message) Parameter Description message The message to log. Warning(Object, String) Logs a warning message to the Unity console with a custom prefix. public static void Warning(object message, string prefix) Parameter Description message The message to log. prefix The prefix of the message. Warning(Object, String, UnityEngine.Object) Logs a warning message to the Unity console with a custom prefix under a given context. public static void Warning(object message, string prefix, UnityEngine.Object context) Parameter Description message The message to log. prefix The prefix of the message. context The context of the message. Warning(Object, UnityEngine.Object) Logs a warning message to the Unity console under a given context. public static void Warning(object message, UnityEngine.Object context) Parameter Description message The message to log. context The context of the message. Warning(Object[]) Logs multiple warning messages as a single message to the Unity console. public static void Warning(params object[] messages) Parameter Description messages The messages to log."
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "Changelog | Debug Tools",
    "keywords": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [1.2.0] - 2021/07/10 Added Static class Benchmark to replace ComparePerformance Static class Compare<T> to replace CompareResults<T> Overloads for logging messages with custom prefixes New Log.Assertion methods Removed MonoBehaviour ComparePerformance MonoBehaviour CompareResults<T> Changed Package description Documentation comments [FPSDisplay]: The SetDisplayFormat method can now be overriden [1.1.0] - 2021/06/28 Changed Improved FPS display formatting Namespace changed from DebugTools to Debug [AddComponentMenu] added to FPSDisplay [1.0.4] - 2021/04/13 Changed Package description Fixed Moved non-compiled assets outside of the Runtime directory [1.0.3] - 2021/03/26 Changed Renamed \"Debug\" class to \"Log\" to prevent naming conflict with Unity [1.0.2] - 2021/03/21 Changed Updated package metadata [1.0.1] - 2021/03/07 Changed Updated package metadata [1.0.0] - 2021/02/27 Added Enhanced console logging Performance and equality testing FPS Display Shaders Bitangets Normals Tangents UV1 UV2 VertexColor"
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "License | Debug Tools",
    "keywords": "License MIT License Copyright (c) 2021 Zigurous Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "manual/benchmarking.html": {
    "href": "manual/benchmarking.html",
    "title": "Benchmarking | Debug Tools",
    "keywords": "Benchmarking The Debug Tools package comes with a static class to perform function benchmark tests. The Benchmark class can be used to measure the execution time of a single function or the comparison between multiple functions. // Measures the execution time of Foo over 1000 iterations. float time = Benchmark.Measure(Foo, 1000); // Compares the difference in execution time between Foo and Bar over 1000 iterations. float difference = Benchmark.Compare(Foo, Bar, 1000); // Performs a benchmark the executes each function 1000 times. // The time of each function will be logged individually. // You can pass as many functions as you want. Benchmark.Run(1000, Foo, Bar, Baz); Compare Equality Alternatively, sometimes it is useful to test if the results of two functions are equal. The Debug Tools package comes with another static class Compare to handle these tests. The class uses generics to know the type of value you are looking to compare, and it returns the percentage of results that are equal. Compare<bool>.Test(Foo, Bar, 1000); Compare<float>.Test(Foo, Bar, 1000);"
  },
  "manual/framerate.html": {
    "href": "manual/framerate.html",
    "title": "Framerate Display | Debug Tools",
    "keywords": "Framerate Display The Debug Tools package comes with a script and prefab to display the framerate of the game in realtime. This can be useful if you need to know the framerate outside of the Unity editor. Prefab Simply drag the FPSDisplay.prefab into your scene, and you are done! It already comes pre-formatted and is contained within its own UI canvas. You can further customize the display to your liking. By default it is displayed in the top-right corner with zero decimal digits. Custom You can also create your own display if you prefer and add the FPSDisplay script to it manually. The script allows you to customize the number of decimal digits to display and how often you want it to refresh. At the minimum, you must pass a reference to a UI Text component that displays the framerate."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "Debug Tools | Debug Tools",
    "keywords": "Debug Tools The Debug Tools package contains assets and scripts for debugging Unity projects. Included in the package are scripts for enhanced console logging, benchmarking, displaying framerate, and more. The package also comes with shaders to visualize different vertex data. Reference Logging Benchmarking Framerate Display Debug Shaders"
  },
  "manual/installation.html": {
    "href": "manual/installation.html",
    "title": "Installation | Debug Tools",
    "keywords": "Installation Use the Unity Package Manager to install the Debug Tools package. Open the Package Manager in Window > Package Manager Click the add ( + ) button in the status bar Select Add package from git URL from the add menu Enter the following Git URL in the text box and click Add: https://github.com/zigurous/unity-debug-tools.git For more information on the Package Manager and installing packages, see the following pages: Unity's Package Manager Installing from a Git URL Importing Import the package namespace in each script or file you want to use it. Note : You may need to regenerate project files/assemblies first. using Zigurous.Debug; Source Code The source code for the Debug Tools package is in the following repository: https://github.com/zigurous/unity-debug-tools"
  },
  "manual/logging.html": {
    "href": "manual/logging.html",
    "title": "Logging | Debug Tools",
    "keywords": "Logging The Debug Tools package provides a static class with more robust logging functions compared to UnityEngine.Debug . The Log class can log messages, warnings, and errors to the console. One primary difference is you can log multiple messages through a single function call. Log.Message(a, b, c); Log.Warning(a, b, c); Log.Error(a, b, c); You can also provide a custom prefix to display for the message as well as a given context. Log.Message(foo, \"[Zigurous]:\"); Log.Warning(foo, \"[Zigurous]:\"); Log.Error(foo, \"[Zigurous]:\"); Log.Message(foo, context); Log.Warning(foo, context); Log.Error(foo, context); Customization You can customize the delimiter used when logging multiple messages, and you can set a global prefix that is displayed before each message in order to separate them from others. Log.delimiter = \",\"; Log.prefix = \"[Zigurous]:\"; The class also handles null checking to not cause any errors if you log an invalid object. You can even set the string that is displayed when a null reference is logged. Log.nullReference = \"Null\";"
  },
  "manual/shaders.html": {
    "href": "manual/shaders.html",
    "title": "Debug Shaders | Debug Tools",
    "keywords": "Debug Shaders The Debug Tools package comes with several shaders to visualize different vertex data. These shaders are located under Zigurous > Debug within the shader selection menu. UV v2f vert (appdata v) { v2f o; o.pos = UnityObjectToClipPos(v.vertex); o.uv = float4(v.texcoord.xy, 0, 0); return o; } Normals v2f vert (appdata v) { v2f o; o.pos = UnityObjectToClipPos(v.vertex); o.color.xyz = v.normal * 0.5 + 0.5; o.color.w = 1.0; return o; } Tangents v2f vert (appdata v) { v2f o; o.pos = UnityObjectToClipPos(v.vertex); o.color = v.tangent * 0.5 + 0.5; return o; } Bitangents v2f vert (appdata v) { v2f o; o.pos = UnityObjectToClipPos(v.vertex); float3 bitangent = cross(v.normal, v.tangent.xyz) * v.tangent.w; o.color.xyz = bitangent * 0.5 + 0.5; o.color.w = 1.0; return o; } Vertex Color v2f vert (appdata v) { v2f o; o.pos = UnityObjectToClipPos(v.vertex); o.color = v.color; return o; }"
  }
}