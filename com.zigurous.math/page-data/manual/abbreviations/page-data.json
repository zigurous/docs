{
    "componentChunkName": "component---src-pages-markdown-remark-frontmatter-slug-js",
    "path": "/manual/abbreviations",
    "result": {"data":{"markdownRemark":{"html":"<h1>Number Abbreviations</h1>\n<p>The <strong>Math Utils</strong> package comes with methods to convert numbers to abbreviated strings. This is very useful in games that display floating combat text, for example. By default, numbers are abbreviated to the thousands (\"K\"), millions (\"M\"), billions (\"B\"), and trillions (\"T\").</p>\n<pre><code class=\"language-csharp\">1_000.ToAbbreviatedString(); // \"1K\"\r\n1_000_000.ToAbbreviatedString(); // \"1M\"\r\n1_000_000_000.ToAbbreviatedString(); // \"1B\"\r\n1_000_000_000_000.ToAbbreviatedString(); // \"1T\"\n</code></pre>\n<hr/>\n<h2>ðŸ’¯ Custom Abbreviations</h2>\n<p>You can also provide your own custom abbreviations by creating a new <a href=\"/com.zigurous.math/api/Zigurous.Math/NumberAbbreviation\">NumberAbbreviation</a>.</p>\n<pre><code class=\"language-csharp\">NumberAbbreviation abbreviation = new NumberAbbreviation(factor, format);\r\nstring display = abbreviation.Format(number);\n</code></pre>\n<p>You can provide an array of number abbreviations to the <code>ToAbbreviatedString</code> function and it will select the first abbreviation possible. With this in mind, you usually want to order the abbreviations from largest to smallest.</p>\n<pre><code class=\"language-csharp\">NumberAbbreviation[] abbreviations;\r\nnumber.ToAbbreviatedString(abbreviations);\n</code></pre>","frontmatter":{"slug":"/manual/abbreviations","class":null,"title":""}}},"pageContext":{"id":"8557cab8-c0a1-599b-8e0c-2c0e52426dd9","frontmatter__slug":"/manual/abbreviations","__params":{"frontmatter__slug":"manual"}}},
    "staticQueryHashes": ["1119773448","2497133658","3218290725"]}