{"data":{"api":{"nodes":[{"items":[{"children":["Zigurous.Math.ArrayExtensions.Shuffle``1(``0[])","Zigurous.Math.ArrayExtensions.Shuffle``1(``0[],Random)","Zigurous.Math.ArrayExtensions.Sum(System.Double[])","Zigurous.Math.ArrayExtensions.Sum(System.Int32[])","Zigurous.Math.ArrayExtensions.Sum(System.Single[])"],"id":"ArrayExtensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"ArrayExtensions","nameWithType":"ArrayExtensions","namespace":"Zigurous.Math","parent":"Zigurous.Math","remarks":null,"summary":"\nExtension methods for arrays.\n","syntax":{"content":"public static class ArrayExtensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Math.ArrayExtensions"},{"children":null,"id":"Shuffle``1(``0[])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Shuffle<T>(T[])","nameWithType":"ArrayExtensions.Shuffle<T>(T[])","namespace":"Zigurous.Math","parent":"Zigurous.Math.ArrayExtensions","remarks":"The shuffle is done using the Fisher-Yates algorithm.","summary":"\nShuffles the array in place.\n","syntax":{"content":"public static void Shuffle<T>(this T[] array)","parameters":[{"description":"The array to shuffle.","id":"array","type":"{T}[]"}],"return":null,"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.Math.ArrayExtensions.Shuffle``1(``0[])"},{"children":null,"id":"Shuffle``1(``0[],Random)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Shuffle<T>(T[], Random)","nameWithType":"ArrayExtensions.Shuffle<T>(T[], Random)","namespace":"Zigurous.Math","parent":"Zigurous.Math.ArrayExtensions","remarks":"The shuffle is done using the Fisher-Yates algorithm.","summary":"\nShuffles the array in place using the given random number generator.\n","syntax":{"content":"public static void Shuffle<T>(this T[] array, Random rng)","parameters":[{"description":"The array to shuffle.","id":"array","type":"{T}[]"},{"description":"The random number generator to use.","id":"rng","type":"Global.Random"}],"return":null,"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.Math.ArrayExtensions.Shuffle``1(``0[],Random)"},{"children":null,"id":"Sum(System.Int32[])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Sum(Int32[])","nameWithType":"ArrayExtensions.Sum(Int32[])","namespace":"Zigurous.Math","parent":"Zigurous.Math.ArrayExtensions","remarks":null,"summary":"\nCalculates the sum of all elements in the array.\n","syntax":{"content":"public static int Sum(this int[] array)","parameters":[{"description":"The array to sum.","id":"array","type":"System.Int32[]"}],"return":{"description":"The sum of all elements in the array.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.ArrayExtensions.Sum(System.Int32[])"},{"children":null,"id":"Sum(System.Single[])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Sum(Single[])","nameWithType":"ArrayExtensions.Sum(Single[])","namespace":"Zigurous.Math","parent":"Zigurous.Math.ArrayExtensions","remarks":null,"summary":"\nCalculates the sum of all elements in the array.\n","syntax":{"content":"public static float Sum(this float[] array)","parameters":[{"description":"The array to sum.","id":"array","type":"System.Single[]"}],"return":{"description":"The sum of all elements in the array.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.ArrayExtensions.Sum(System.Single[])"},{"children":null,"id":"Sum(System.Double[])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Sum(Double[])","nameWithType":"ArrayExtensions.Sum(Double[])","namespace":"Zigurous.Math","parent":"Zigurous.Math.ArrayExtensions","remarks":null,"summary":"\nCalculates the sum of all elements in the array.\n","syntax":{"content":"public static double Sum(this double[] array)","parameters":[{"description":"The array to sum.","id":"array","type":"System.Double[]"}],"return":{"description":"The sum of all elements in the array.","type":"System.Double"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.ArrayExtensions.Sum(System.Double[])"}]},{"items":[{"children":["Zigurous.Math.BoundsExtensions.RandomPointInside(Bounds)","Zigurous.Math.BoundsExtensions.RandomPointInside(BoundsInt)"],"id":"BoundsExtensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"BoundsExtensions","nameWithType":"BoundsExtensions","namespace":"Zigurous.Math","parent":"Zigurous.Math","remarks":null,"summary":"\nExtension methods for bounds.\n","syntax":{"content":"public static class BoundsExtensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Math.BoundsExtensions"},{"children":null,"id":"RandomPointInside(Bounds)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"RandomPointInside(Bounds)","nameWithType":"BoundsExtensions.RandomPointInside(Bounds)","namespace":"Zigurous.Math","parent":"Zigurous.Math.BoundsExtensions","remarks":null,"summary":"\nReturns a random point inside the bounds.\n","syntax":{"content":"public static Vector3 RandomPointInside(this Bounds bounds)","parameters":[{"description":"The bounds to get a random point from.","id":"bounds","type":"Global.Bounds"}],"return":{"description":"A random point inside the bounds.","type":"Global.Vector3"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.BoundsExtensions.RandomPointInside(Bounds)"},{"children":null,"id":"RandomPointInside(BoundsInt)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"RandomPointInside(BoundsInt)","nameWithType":"BoundsExtensions.RandomPointInside(BoundsInt)","namespace":"Zigurous.Math","parent":"Zigurous.Math.BoundsExtensions","remarks":null,"summary":"\nReturns a random point inside the bounds.\n","syntax":{"content":"public static Vector3Int RandomPointInside(this BoundsInt bounds)","parameters":[{"description":"The bounds to get a random point from.","id":"bounds","type":"Global.BoundsInt"}],"return":{"description":"A random point inside the bounds.","type":"Global.Vector3Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.BoundsExtensions.RandomPointInside(BoundsInt)"}]},{"items":[{"children":["Zigurous.Math.Chance.Card.Clubs10","Zigurous.Math.Chance.Card.Clubs2","Zigurous.Math.Chance.Card.Clubs3","Zigurous.Math.Chance.Card.Clubs4","Zigurous.Math.Chance.Card.Clubs5","Zigurous.Math.Chance.Card.Clubs6","Zigurous.Math.Chance.Card.Clubs7","Zigurous.Math.Chance.Card.Clubs8","Zigurous.Math.Chance.Card.Clubs9","Zigurous.Math.Chance.Card.ClubsA","Zigurous.Math.Chance.Card.ClubsJ","Zigurous.Math.Chance.Card.ClubsK","Zigurous.Math.Chance.Card.ClubsQ","Zigurous.Math.Chance.Card.Diamonds10","Zigurous.Math.Chance.Card.Diamonds2","Zigurous.Math.Chance.Card.Diamonds3","Zigurous.Math.Chance.Card.Diamonds4","Zigurous.Math.Chance.Card.Diamonds5","Zigurous.Math.Chance.Card.Diamonds6","Zigurous.Math.Chance.Card.Diamonds7","Zigurous.Math.Chance.Card.Diamonds8","Zigurous.Math.Chance.Card.Diamonds9","Zigurous.Math.Chance.Card.DiamondsA","Zigurous.Math.Chance.Card.DiamondsJ","Zigurous.Math.Chance.Card.DiamondsK","Zigurous.Math.Chance.Card.DiamondsQ","Zigurous.Math.Chance.Card.Hearts10","Zigurous.Math.Chance.Card.Hearts2","Zigurous.Math.Chance.Card.Hearts3","Zigurous.Math.Chance.Card.Hearts4","Zigurous.Math.Chance.Card.Hearts5","Zigurous.Math.Chance.Card.Hearts6","Zigurous.Math.Chance.Card.Hearts7","Zigurous.Math.Chance.Card.Hearts8","Zigurous.Math.Chance.Card.Hearts9","Zigurous.Math.Chance.Card.HeartsA","Zigurous.Math.Chance.Card.HeartsJ","Zigurous.Math.Chance.Card.HeartsK","Zigurous.Math.Chance.Card.HeartsQ","Zigurous.Math.Chance.Card.Joker","Zigurous.Math.Chance.Card.None","Zigurous.Math.Chance.Card.Spades10","Zigurous.Math.Chance.Card.Spades2","Zigurous.Math.Chance.Card.Spades3","Zigurous.Math.Chance.Card.Spades4","Zigurous.Math.Chance.Card.Spades5","Zigurous.Math.Chance.Card.Spades6","Zigurous.Math.Chance.Card.Spades7","Zigurous.Math.Chance.Card.Spades8","Zigurous.Math.Chance.Card.Spades9","Zigurous.Math.Chance.Card.SpadesA","Zigurous.Math.Chance.Card.SpadesJ","Zigurous.Math.Chance.Card.SpadesK","Zigurous.Math.Chance.Card.SpadesQ"],"id":"Chance.Card","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Chance.Card","nameWithType":"Chance.Card","namespace":"Zigurous.Math","parent":"Zigurous.Math","remarks":null,"summary":"\nThe playing cards in a standard 52-card deck.\n","syntax":{"content":"public enum Card","parameters":null,"return":null,"typeParameters":null},"type":"Enum","uid":"Zigurous.Math.Chance.Card"},{"children":null,"id":"HeartsA","implements":null,"inheritance":null,"inheritedMembers":null,"name":"HeartsA","nameWithType":"Chance.Card.HeartsA","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"HeartsA = 0","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.HeartsA"},{"children":null,"id":"HeartsK","implements":null,"inheritance":null,"inheritedMembers":null,"name":"HeartsK","nameWithType":"Chance.Card.HeartsK","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"HeartsK = 1","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.HeartsK"},{"children":null,"id":"HeartsQ","implements":null,"inheritance":null,"inheritedMembers":null,"name":"HeartsQ","nameWithType":"Chance.Card.HeartsQ","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"HeartsQ = 2","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.HeartsQ"},{"children":null,"id":"HeartsJ","implements":null,"inheritance":null,"inheritedMembers":null,"name":"HeartsJ","nameWithType":"Chance.Card.HeartsJ","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"HeartsJ = 3","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.HeartsJ"},{"children":null,"id":"Hearts10","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Hearts10","nameWithType":"Chance.Card.Hearts10","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"Hearts10 = 4","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.Hearts10"},{"children":null,"id":"Hearts9","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Hearts9","nameWithType":"Chance.Card.Hearts9","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"Hearts9 = 5","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.Hearts9"},{"children":null,"id":"Hearts8","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Hearts8","nameWithType":"Chance.Card.Hearts8","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"Hearts8 = 6","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.Hearts8"},{"children":null,"id":"Hearts7","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Hearts7","nameWithType":"Chance.Card.Hearts7","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"Hearts7 = 7","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.Hearts7"},{"children":null,"id":"Hearts6","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Hearts6","nameWithType":"Chance.Card.Hearts6","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"Hearts6 = 8","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.Hearts6"},{"children":null,"id":"Hearts5","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Hearts5","nameWithType":"Chance.Card.Hearts5","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"Hearts5 = 9","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.Hearts5"},{"children":null,"id":"Hearts4","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Hearts4","nameWithType":"Chance.Card.Hearts4","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"Hearts4 = 10","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.Hearts4"},{"children":null,"id":"Hearts3","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Hearts3","nameWithType":"Chance.Card.Hearts3","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"Hearts3 = 11","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.Hearts3"},{"children":null,"id":"Hearts2","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Hearts2","nameWithType":"Chance.Card.Hearts2","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"Hearts2 = 12","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.Hearts2"},{"children":null,"id":"DiamondsA","implements":null,"inheritance":null,"inheritedMembers":null,"name":"DiamondsA","nameWithType":"Chance.Card.DiamondsA","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"DiamondsA = 13","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.DiamondsA"},{"children":null,"id":"DiamondsK","implements":null,"inheritance":null,"inheritedMembers":null,"name":"DiamondsK","nameWithType":"Chance.Card.DiamondsK","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"DiamondsK = 14","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.DiamondsK"},{"children":null,"id":"DiamondsQ","implements":null,"inheritance":null,"inheritedMembers":null,"name":"DiamondsQ","nameWithType":"Chance.Card.DiamondsQ","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"DiamondsQ = 15","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.DiamondsQ"},{"children":null,"id":"DiamondsJ","implements":null,"inheritance":null,"inheritedMembers":null,"name":"DiamondsJ","nameWithType":"Chance.Card.DiamondsJ","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"DiamondsJ = 16","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.DiamondsJ"},{"children":null,"id":"Diamonds10","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Diamonds10","nameWithType":"Chance.Card.Diamonds10","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"Diamonds10 = 17","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.Diamonds10"},{"children":null,"id":"Diamonds9","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Diamonds9","nameWithType":"Chance.Card.Diamonds9","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"Diamonds9 = 18","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.Diamonds9"},{"children":null,"id":"Diamonds8","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Diamonds8","nameWithType":"Chance.Card.Diamonds8","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"Diamonds8 = 19","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.Diamonds8"},{"children":null,"id":"Diamonds7","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Diamonds7","nameWithType":"Chance.Card.Diamonds7","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"Diamonds7 = 20","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.Diamonds7"},{"children":null,"id":"Diamonds6","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Diamonds6","nameWithType":"Chance.Card.Diamonds6","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"Diamonds6 = 21","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.Diamonds6"},{"children":null,"id":"Diamonds5","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Diamonds5","nameWithType":"Chance.Card.Diamonds5","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"Diamonds5 = 22","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.Diamonds5"},{"children":null,"id":"Diamonds4","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Diamonds4","nameWithType":"Chance.Card.Diamonds4","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"Diamonds4 = 23","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.Diamonds4"},{"children":null,"id":"Diamonds3","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Diamonds3","nameWithType":"Chance.Card.Diamonds3","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"Diamonds3 = 24","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.Diamonds3"},{"children":null,"id":"Diamonds2","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Diamonds2","nameWithType":"Chance.Card.Diamonds2","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"Diamonds2 = 25","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.Diamonds2"},{"children":null,"id":"SpadesA","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SpadesA","nameWithType":"Chance.Card.SpadesA","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"SpadesA = 26","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.SpadesA"},{"children":null,"id":"SpadesK","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SpadesK","nameWithType":"Chance.Card.SpadesK","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"SpadesK = 27","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.SpadesK"},{"children":null,"id":"SpadesQ","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SpadesQ","nameWithType":"Chance.Card.SpadesQ","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"SpadesQ = 28","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.SpadesQ"},{"children":null,"id":"SpadesJ","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SpadesJ","nameWithType":"Chance.Card.SpadesJ","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"SpadesJ = 29","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.SpadesJ"},{"children":null,"id":"Spades10","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Spades10","nameWithType":"Chance.Card.Spades10","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"Spades10 = 30","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.Spades10"},{"children":null,"id":"Spades9","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Spades9","nameWithType":"Chance.Card.Spades9","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"Spades9 = 31","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.Spades9"},{"children":null,"id":"Spades8","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Spades8","nameWithType":"Chance.Card.Spades8","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"Spades8 = 32","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.Spades8"},{"children":null,"id":"Spades7","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Spades7","nameWithType":"Chance.Card.Spades7","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"Spades7 = 33","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.Spades7"},{"children":null,"id":"Spades6","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Spades6","nameWithType":"Chance.Card.Spades6","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"Spades6 = 34","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.Spades6"},{"children":null,"id":"Spades5","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Spades5","nameWithType":"Chance.Card.Spades5","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"Spades5 = 35","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.Spades5"},{"children":null,"id":"Spades4","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Spades4","nameWithType":"Chance.Card.Spades4","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"Spades4 = 36","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.Spades4"},{"children":null,"id":"Spades3","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Spades3","nameWithType":"Chance.Card.Spades3","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"Spades3 = 37","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.Spades3"},{"children":null,"id":"Spades2","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Spades2","nameWithType":"Chance.Card.Spades2","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"Spades2 = 38","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.Spades2"},{"children":null,"id":"ClubsA","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ClubsA","nameWithType":"Chance.Card.ClubsA","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"ClubsA = 39","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.ClubsA"},{"children":null,"id":"ClubsK","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ClubsK","nameWithType":"Chance.Card.ClubsK","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"ClubsK = 40","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.ClubsK"},{"children":null,"id":"ClubsQ","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ClubsQ","nameWithType":"Chance.Card.ClubsQ","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"ClubsQ = 41","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.ClubsQ"},{"children":null,"id":"ClubsJ","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ClubsJ","nameWithType":"Chance.Card.ClubsJ","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"ClubsJ = 42","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.ClubsJ"},{"children":null,"id":"Clubs10","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clubs10","nameWithType":"Chance.Card.Clubs10","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"Clubs10 = 43","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.Clubs10"},{"children":null,"id":"Clubs9","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clubs9","nameWithType":"Chance.Card.Clubs9","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"Clubs9 = 44","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.Clubs9"},{"children":null,"id":"Clubs8","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clubs8","nameWithType":"Chance.Card.Clubs8","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"Clubs8 = 45","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.Clubs8"},{"children":null,"id":"Clubs7","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clubs7","nameWithType":"Chance.Card.Clubs7","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"Clubs7 = 46","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.Clubs7"},{"children":null,"id":"Clubs6","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clubs6","nameWithType":"Chance.Card.Clubs6","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"Clubs6 = 47","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.Clubs6"},{"children":null,"id":"Clubs5","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clubs5","nameWithType":"Chance.Card.Clubs5","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"Clubs5 = 48","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.Clubs5"},{"children":null,"id":"Clubs4","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clubs4","nameWithType":"Chance.Card.Clubs4","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"Clubs4 = 49","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.Clubs4"},{"children":null,"id":"Clubs3","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clubs3","nameWithType":"Chance.Card.Clubs3","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"Clubs3 = 50","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.Clubs3"},{"children":null,"id":"Clubs2","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clubs2","nameWithType":"Chance.Card.Clubs2","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"Clubs2 = 51","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.Clubs2"},{"children":null,"id":"Joker","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Joker","nameWithType":"Chance.Card.Joker","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"Joker = 52","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.Joker"},{"children":null,"id":"None","implements":null,"inheritance":null,"inheritedMembers":null,"name":"None","nameWithType":"Chance.Card.None","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Card","remarks":null,"summary":null,"syntax":{"content":"None = 53","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Card.None"}]},{"items":[{"children":["Zigurous.Math.Chance.Coin.Heads","Zigurous.Math.Chance.Coin.Tails"],"id":"Chance.Coin","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Chance.Coin","nameWithType":"Chance.Coin","namespace":"Zigurous.Math","parent":"Zigurous.Math","remarks":null,"summary":"\nThe sides of a coin.\n","syntax":{"content":"public enum Coin","parameters":null,"return":null,"typeParameters":null},"type":"Enum","uid":"Zigurous.Math.Chance.Coin"},{"children":null,"id":"Heads","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Heads","nameWithType":"Chance.Coin.Heads","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Coin","remarks":null,"summary":null,"syntax":{"content":"Heads = 0","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Coin"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Coin.Heads"},{"children":null,"id":"Tails","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Tails","nameWithType":"Chance.Coin.Tails","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Coin","remarks":null,"summary":null,"syntax":{"content":"Tails = 1","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Coin"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Coin.Tails"}]},{"items":[{"children":["Zigurous.Math.Chance.Suit.Clubs","Zigurous.Math.Chance.Suit.Diamonds","Zigurous.Math.Chance.Suit.Hearts","Zigurous.Math.Chance.Suit.Spades"],"id":"Chance.Suit","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Chance.Suit","nameWithType":"Chance.Suit","namespace":"Zigurous.Math","parent":"Zigurous.Math","remarks":null,"summary":"\nThe suits of a standard 52-card deck.\n","syntax":{"content":"public enum Suit","parameters":null,"return":null,"typeParameters":null},"type":"Enum","uid":"Zigurous.Math.Chance.Suit"},{"children":null,"id":"Hearts","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Hearts","nameWithType":"Chance.Suit.Hearts","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Suit","remarks":null,"summary":null,"syntax":{"content":"Hearts = 0","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Suit"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Suit.Hearts"},{"children":null,"id":"Diamonds","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Diamonds","nameWithType":"Chance.Suit.Diamonds","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Suit","remarks":null,"summary":null,"syntax":{"content":"Diamonds = 1","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Suit"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Suit.Diamonds"},{"children":null,"id":"Clubs","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clubs","nameWithType":"Chance.Suit.Clubs","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Suit","remarks":null,"summary":null,"syntax":{"content":"Clubs = 2","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Suit"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Suit.Clubs"},{"children":null,"id":"Spades","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Spades","nameWithType":"Chance.Suit.Spades","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance.Suit","remarks":null,"summary":null,"syntax":{"content":"Spades = 3","parameters":null,"return":{"description":null,"type":"Zigurous.Math.Chance.Suit"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.Chance.Suit.Spades"}]},{"items":[{"children":["Zigurous.Math.Chance.CoinFlip","Zigurous.Math.Chance.PositiveOrNegative","Zigurous.Math.Chance.PositiveOrNegative(System.Single)","Zigurous.Math.Chance.RandomBool","Zigurous.Math.Chance.RandomCard","Zigurous.Math.Chance.RandomSuit"],"id":"Chance","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"Chance","nameWithType":"Chance","namespace":"Zigurous.Math","parent":"Zigurous.Math","remarks":null,"summary":"\nFunctions for generating random chance values.\n","syntax":{"content":"public static class Chance","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Math.Chance"},{"children":null,"id":"RandomSuit","implements":null,"inheritance":null,"inheritedMembers":null,"name":"RandomSuit()","nameWithType":"Chance.RandomSuit()","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance","remarks":null,"summary":"\nReturns a random playing card suit.\n","syntax":{"content":"public static Chance.Suit RandomSuit()","parameters":null,"return":{"description":"A random playing card suit.","type":"Zigurous.Math.Chance.Suit"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Chance.RandomSuit"},{"children":null,"id":"RandomCard","implements":null,"inheritance":null,"inheritedMembers":null,"name":"RandomCard()","nameWithType":"Chance.RandomCard()","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance","remarks":null,"summary":"\nReturns a random card from a standard 52-card deck.\n","syntax":{"content":"public static Chance.Card RandomCard()","parameters":null,"return":{"description":"A random card from a standard 52-card deck.","type":"Zigurous.Math.Chance.Card"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Chance.RandomCard"},{"children":null,"id":"RandomBool","implements":null,"inheritance":null,"inheritedMembers":null,"name":"RandomBool()","nameWithType":"Chance.RandomBool()","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance","remarks":null,"summary":"\nReturns <code>true</code> or <code>false</code>, with 50-50 odds.\n","syntax":{"content":"public static bool RandomBool()","parameters":null,"return":{"description":"<code>true</code> or <code>false</code>, with 50-50 odds.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Chance.RandomBool"},{"children":null,"id":"PositiveOrNegative","implements":null,"inheritance":null,"inheritedMembers":null,"name":"PositiveOrNegative()","nameWithType":"Chance.PositiveOrNegative()","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance","remarks":null,"summary":"\nReturns <code>1f</code> or <code>-1f</code>, with 50-50 odds.\n","syntax":{"content":"public static float PositiveOrNegative()","parameters":null,"return":{"description":"<code>1f</code> or <code>-1f</code>, with 50-50 odds.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Chance.PositiveOrNegative"},{"children":null,"id":"PositiveOrNegative(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"PositiveOrNegative(Single)","nameWithType":"Chance.PositiveOrNegative(Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance","remarks":null,"summary":"\nReturns <code>-value</code> or <code>+value</code>, with 50-50 odds.\n","syntax":{"content":"public static float PositiveOrNegative(float value)","parameters":[{"description":"The value to be returned.","id":"value","type":"System.Single"}],"return":{"description":"<code>-value</code> or <code>+value</code>, with 50-50 odds.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Chance.PositiveOrNegative(System.Single)"},{"children":null,"id":"CoinFlip","implements":null,"inheritance":null,"inheritedMembers":null,"name":"CoinFlip()","nameWithType":"Chance.CoinFlip()","namespace":"Zigurous.Math","parent":"Zigurous.Math.Chance","remarks":null,"summary":"\nReturns <code>Heads</code> or <code>Tails</code>, with 50-50 odds.\n","syntax":{"content":"public static Chance.Coin CoinFlip()","parameters":null,"return":{"description":"<code>Heads</code> or <code>Tails</code>, with 50-50 odds.","type":"Zigurous.Math.Chance.Coin"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Chance.CoinFlip"}]},{"items":[{"children":["Zigurous.Math.ColliderExtensions.RandomPointInside(Collider)","Zigurous.Math.ColliderExtensions.RandomPointInside(Collider2D)"],"id":"ColliderExtensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"ColliderExtensions","nameWithType":"ColliderExtensions","namespace":"Zigurous.Math","parent":"Zigurous.Math","remarks":null,"summary":"\nExtension methods for colliders.\n","syntax":{"content":"public static class ColliderExtensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Math.ColliderExtensions"},{"children":null,"id":"RandomPointInside(Collider)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"RandomPointInside(Collider)","nameWithType":"ColliderExtensions.RandomPointInside(Collider)","namespace":"Zigurous.Math","parent":"Zigurous.Math.ColliderExtensions","remarks":null,"summary":"\nReturns a random point inside the collider&apos;s bounds.\n","syntax":{"content":"public static Vector3 RandomPointInside(this Collider collider)","parameters":[{"description":"The collider to get a random point from.","id":"collider","type":"Global.Collider"}],"return":{"description":"A random point inside the collider&apos;s bounds.","type":"Global.Vector3"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.ColliderExtensions.RandomPointInside(Collider)"},{"children":null,"id":"RandomPointInside(Collider2D)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"RandomPointInside(Collider2D)","nameWithType":"ColliderExtensions.RandomPointInside(Collider2D)","namespace":"Zigurous.Math","parent":"Zigurous.Math.ColliderExtensions","remarks":null,"summary":"\nReturns a random point inside the collider&apos;s bounds.\n","syntax":{"content":"public static Vector2 RandomPointInside(this Collider2D collider)","parameters":[{"description":"The collider to get a random point from.","id":"collider","type":"Global.Collider2D"}],"return":{"description":"A random point inside the collider&apos;s bounds.","type":"Global.Vector2"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.ColliderExtensions.RandomPointInside(Collider2D)"}]},{"items":[{"children":["Zigurous.Math.ComparableExtensions.IsBetween``1(``0,``0,``0,System.Boolean,System.Boolean)","Zigurous.Math.ComparableExtensions.IsBetweenExclusive``1(``0,``0,``0)","Zigurous.Math.ComparableExtensions.IsBetweenExclusiveInclusive``1(``0,``0,``0)","Zigurous.Math.ComparableExtensions.IsBetweenInclusive``1(``0,``0,``0)","Zigurous.Math.ComparableExtensions.IsBetweenInclusiveExclusive``1(``0,``0,``0)","Zigurous.Math.ComparableExtensions.Max``1(``0[])","Zigurous.Math.ComparableExtensions.Max``1(List{``0})","Zigurous.Math.ComparableExtensions.Min``1(``0[])","Zigurous.Math.ComparableExtensions.Min``1(List{``0})"],"id":"ComparableExtensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"ComparableExtensions","nameWithType":"ComparableExtensions","namespace":"Zigurous.Math","parent":"Zigurous.Math","remarks":null,"summary":"\nExtension methods for IComparable.\n","syntax":{"content":"public static class ComparableExtensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Math.ComparableExtensions"},{"children":null,"id":"IsBetween``1(``0,``0,``0,System.Boolean,System.Boolean)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsBetween<T>(T, T, T, Boolean, Boolean)","nameWithType":"ComparableExtensions.IsBetween<T>(T, T, T, Boolean, Boolean)","namespace":"Zigurous.Math","parent":"Zigurous.Math.ComparableExtensions","remarks":null,"summary":"\nChecks if the value is between a min and max value.\n","syntax":{"content":"public static bool IsBetween<T>(this T value, T min, T max, bool includeMin = true, bool includeMax = true)\n    where T : IComparable<T>","parameters":[{"description":"The value to check.","id":"value","type":"{T}"},{"description":"The minimum value.","id":"min","type":"{T}"},{"description":"The maximum value.","id":"max","type":"{T}"},{"description":"The minimum value is inclusive if true, exclusive if false.","id":"includeMin","type":"System.Boolean"},{"description":"The maximum value is inclusive if true, exclusive if false.","id":"includeMax","type":"System.Boolean"}],"return":{"description":"True if the value is between the min and max value.","type":"System.Boolean"},"typeParameters":[{"description":"The type of value to check.","id":"T"}]},"type":"Method","uid":"Zigurous.Math.ComparableExtensions.IsBetween``1(``0,``0,``0,System.Boolean,System.Boolean)"},{"children":null,"id":"IsBetweenInclusive``1(``0,``0,``0)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsBetweenInclusive<T>(T, T, T)","nameWithType":"ComparableExtensions.IsBetweenInclusive<T>(T, T, T)","namespace":"Zigurous.Math","parent":"Zigurous.Math.ComparableExtensions","remarks":null,"summary":"\nChecks if the value is in the range [min..max].\n","syntax":{"content":"public static bool IsBetweenInclusive<T>(this T value, T min, T max)\n    where T : IComparable<T>","parameters":[{"description":"The value to check.","id":"value","type":"{T}"},{"description":"The minimum value.","id":"min","type":"{T}"},{"description":"The maximum value.","id":"max","type":"{T}"}],"return":{"description":"True if the value is in the range [min..max].","type":"System.Boolean"},"typeParameters":[{"description":"The type of value to check.","id":"T"}]},"type":"Method","uid":"Zigurous.Math.ComparableExtensions.IsBetweenInclusive``1(``0,``0,``0)"},{"children":null,"id":"IsBetweenInclusiveExclusive``1(``0,``0,``0)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsBetweenInclusiveExclusive<T>(T, T, T)","nameWithType":"ComparableExtensions.IsBetweenInclusiveExclusive<T>(T, T, T)","namespace":"Zigurous.Math","parent":"Zigurous.Math.ComparableExtensions","remarks":null,"summary":"\nChecks if the value is in the range [min..max).\n","syntax":{"content":"public static bool IsBetweenInclusiveExclusive<T>(this T value, T min, T max)\n    where T : IComparable<T>","parameters":[{"description":"The value to check.","id":"value","type":"{T}"},{"description":"The minimum value.","id":"min","type":"{T}"},{"description":"The maximum value.","id":"max","type":"{T}"}],"return":{"description":"True if the value is in the range [min..max).","type":"System.Boolean"},"typeParameters":[{"description":"The type of value to check.","id":"T"}]},"type":"Method","uid":"Zigurous.Math.ComparableExtensions.IsBetweenInclusiveExclusive``1(``0,``0,``0)"},{"children":null,"id":"IsBetweenExclusive``1(``0,``0,``0)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsBetweenExclusive<T>(T, T, T)","nameWithType":"ComparableExtensions.IsBetweenExclusive<T>(T, T, T)","namespace":"Zigurous.Math","parent":"Zigurous.Math.ComparableExtensions","remarks":null,"summary":"\nChecks if the value is in the range (min..max).\n","syntax":{"content":"public static bool IsBetweenExclusive<T>(this T value, T min, T max)\n    where T : IComparable<T>","parameters":[{"description":"The value to check.","id":"value","type":"{T}"},{"description":"The minimum value.","id":"min","type":"{T}"},{"description":"The maximum value.","id":"max","type":"{T}"}],"return":{"description":"True if the value is in the range (min..max).","type":"System.Boolean"},"typeParameters":[{"description":"The type of value to check.","id":"T"}]},"type":"Method","uid":"Zigurous.Math.ComparableExtensions.IsBetweenExclusive``1(``0,``0,``0)"},{"children":null,"id":"IsBetweenExclusiveInclusive``1(``0,``0,``0)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsBetweenExclusiveInclusive<T>(T, T, T)","nameWithType":"ComparableExtensions.IsBetweenExclusiveInclusive<T>(T, T, T)","namespace":"Zigurous.Math","parent":"Zigurous.Math.ComparableExtensions","remarks":null,"summary":"\nChecks if the value is in the range (min..max].\n","syntax":{"content":"public static bool IsBetweenExclusiveInclusive<T>(this T value, T min, T max)\n    where T : IComparable<T>","parameters":[{"description":"The value to check.","id":"value","type":"{T}"},{"description":"The minimum value.","id":"min","type":"{T}"},{"description":"The maximum value.","id":"max","type":"{T}"}],"return":{"description":"True if the value is in the range (min..max].","type":"System.Boolean"},"typeParameters":[{"description":"The type of value to check.","id":"T"}]},"type":"Method","uid":"Zigurous.Math.ComparableExtensions.IsBetweenExclusiveInclusive``1(``0,``0,``0)"},{"children":null,"id":"Max``1(``0[])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Max<T>(T[])","nameWithType":"ComparableExtensions.Max<T>(T[])","namespace":"Zigurous.Math","parent":"Zigurous.Math.ComparableExtensions","remarks":null,"summary":"\nReturns the maximum value in the array.\n","syntax":{"content":"public static T Max<T>(this T[] values)\n    where T : IComparable<T>","parameters":[{"description":"The values to check.","id":"values","type":"{T}[]"}],"return":{"description":"The maximum value in the array.","type":"{T}"},"typeParameters":[{"description":"The type of value to check.","id":"T"}]},"type":"Method","uid":"Zigurous.Math.ComparableExtensions.Max``1(``0[])"},{"children":null,"id":"Max``1(List{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Max<T>(List<T>)","nameWithType":"ComparableExtensions.Max<T>(List<T>)","namespace":"Zigurous.Math","parent":"Zigurous.Math.ComparableExtensions","remarks":null,"summary":"\nReturns the maximum value in the list.\n","syntax":{"content":"public static T Max<T>(this List<T> values)\n    where T : IComparable<T>","parameters":[{"description":"The values to check.","id":"values","type":"Global.List{{T}}"}],"return":{"description":"The maximum value in the list.","type":"{T}"},"typeParameters":[{"description":"The type of value to check.","id":"T"}]},"type":"Method","uid":"Zigurous.Math.ComparableExtensions.Max``1(List{``0})"},{"children":null,"id":"Min``1(``0[])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Min<T>(T[])","nameWithType":"ComparableExtensions.Min<T>(T[])","namespace":"Zigurous.Math","parent":"Zigurous.Math.ComparableExtensions","remarks":null,"summary":"\nReturns the minimum value in the array.\n","syntax":{"content":"public static T Min<T>(this T[] values)\n    where T : IComparable<T>","parameters":[{"description":"The values to check.","id":"values","type":"{T}[]"}],"return":{"description":"The minimum value in the array.","type":"{T}"},"typeParameters":[{"description":"The type of value to check.","id":"T"}]},"type":"Method","uid":"Zigurous.Math.ComparableExtensions.Min``1(``0[])"},{"children":null,"id":"Min``1(List{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Min<T>(List<T>)","nameWithType":"ComparableExtensions.Min<T>(List<T>)","namespace":"Zigurous.Math","parent":"Zigurous.Math.ComparableExtensions","remarks":null,"summary":"\nReturns the minimum value in the list.\n","syntax":{"content":"public static T Min<T>(this List<T> values)\n    where T : IComparable<T>","parameters":[{"description":"The values to check.","id":"values","type":"Global.List{{T}}"}],"return":{"description":"The minimum value in the list.","type":"{T}"},"typeParameters":[{"description":"The type of value to check.","id":"T"}]},"type":"Method","uid":"Zigurous.Math.ComparableExtensions.Min``1(List{``0})"}]},{"items":[{"children":["Zigurous.Math.Dice.D10","Zigurous.Math.Dice.D10(System.Int32)","Zigurous.Math.Dice.D100","Zigurous.Math.Dice.D100(System.Int32)","Zigurous.Math.Dice.D12","Zigurous.Math.Dice.D12(System.Int32)","Zigurous.Math.Dice.D20","Zigurous.Math.Dice.D20(System.Int32)","Zigurous.Math.Dice.D4","Zigurous.Math.Dice.D4(System.Int32)","Zigurous.Math.Dice.D48","Zigurous.Math.Dice.D48(System.Int32)","Zigurous.Math.Dice.D6","Zigurous.Math.Dice.D6(System.Int32)","Zigurous.Math.Dice.D8","Zigurous.Math.Dice.D8(System.Int32)","Zigurous.Math.Dice.NSided(System.Int32)","Zigurous.Math.Dice.NSided(System.Int32,System.Int32)","Zigurous.Math.Dice.Roll(System.Int32[])","Zigurous.Math.Dice.Roll(System.Int32[],System.Int32)","Zigurous.Math.Dice.Roll``1(``0[])","Zigurous.Math.Dice.Roll``1(``0[],System.Int32[])"],"id":"Dice","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"Dice","nameWithType":"Dice","namespace":"Zigurous.Math","parent":"Zigurous.Math","remarks":null,"summary":"\nFunctions for rolling dice.\n","syntax":{"content":"public static class Dice","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Math.Dice"},{"children":null,"id":"D4","implements":null,"inheritance":null,"inheritedMembers":null,"name":"D4()","nameWithType":"Dice.D4()","namespace":"Zigurous.Math","parent":"Zigurous.Math.Dice","remarks":null,"summary":"\nRolls a 4-sided dice [1..4].\n","syntax":{"content":"public static int D4()","parameters":null,"return":{"description":"A random number on a 4-sided dice [1..4].","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Dice.D4"},{"children":null,"id":"D4(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"D4(Int32)","nameWithType":"Dice.D4(Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Dice","remarks":null,"summary":"\nRolls a 4-sided dice [1..4] <code data-dev-comment-type=\"paramref\" class=\"paramref\">n</code> times.\n","syntax":{"content":"public static int D4(int n)","parameters":[{"description":"The number of times to roll the dice.","id":"n","type":"System.Int32"}],"return":{"description":"The sum of the rolls.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Dice.D4(System.Int32)"},{"children":null,"id":"D6","implements":null,"inheritance":null,"inheritedMembers":null,"name":"D6()","nameWithType":"Dice.D6()","namespace":"Zigurous.Math","parent":"Zigurous.Math.Dice","remarks":null,"summary":"\nRolls a 6-sided dice [1..6].\n","syntax":{"content":"public static int D6()","parameters":null,"return":{"description":"A random number on a 6-sided dice [1..6].","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Dice.D6"},{"children":null,"id":"D6(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"D6(Int32)","nameWithType":"Dice.D6(Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Dice","remarks":null,"summary":"\nRolls a 6-sided dice [1..6] <code data-dev-comment-type=\"paramref\" class=\"paramref\">n</code> times.\n","syntax":{"content":"public static int D6(int n)","parameters":[{"description":"The number of times to roll the dice.","id":"n","type":"System.Int32"}],"return":{"description":"The sum of the rolls.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Dice.D6(System.Int32)"},{"children":null,"id":"D8","implements":null,"inheritance":null,"inheritedMembers":null,"name":"D8()","nameWithType":"Dice.D8()","namespace":"Zigurous.Math","parent":"Zigurous.Math.Dice","remarks":null,"summary":"\nRolls an 8-sided dice [1..8].\n","syntax":{"content":"public static int D8()","parameters":null,"return":{"description":"A random number on an 8-sided dice [1..8].","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Dice.D8"},{"children":null,"id":"D8(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"D8(Int32)","nameWithType":"Dice.D8(Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Dice","remarks":null,"summary":"\nRolls an 8-sided dice [1..8] <code data-dev-comment-type=\"paramref\" class=\"paramref\">n</code> times.\n","syntax":{"content":"public static int D8(int n)","parameters":[{"description":"The number of times to roll the dice.","id":"n","type":"System.Int32"}],"return":{"description":"The sum of the rolls.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Dice.D8(System.Int32)"},{"children":null,"id":"D10","implements":null,"inheritance":null,"inheritedMembers":null,"name":"D10()","nameWithType":"Dice.D10()","namespace":"Zigurous.Math","parent":"Zigurous.Math.Dice","remarks":null,"summary":"\nRolls a 10-sided dice [1..10].\n","syntax":{"content":"public static int D10()","parameters":null,"return":{"description":"A random number on a 10-sided dice [1..10].","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Dice.D10"},{"children":null,"id":"D10(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"D10(Int32)","nameWithType":"Dice.D10(Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Dice","remarks":null,"summary":"\nRolls a 10-sided dice [1..10] <code data-dev-comment-type=\"paramref\" class=\"paramref\">n</code> times.\n","syntax":{"content":"public static int D10(int n)","parameters":[{"description":"The number of times to roll the dice.","id":"n","type":"System.Int32"}],"return":{"description":"The sum of the rolls.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Dice.D10(System.Int32)"},{"children":null,"id":"D12","implements":null,"inheritance":null,"inheritedMembers":null,"name":"D12()","nameWithType":"Dice.D12()","namespace":"Zigurous.Math","parent":"Zigurous.Math.Dice","remarks":null,"summary":"\nRolls a 12-sided dice [1..12].\n","syntax":{"content":"public static int D12()","parameters":null,"return":{"description":"A random number on a 12-sided dice [1..12].","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Dice.D12"},{"children":null,"id":"D12(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"D12(Int32)","nameWithType":"Dice.D12(Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Dice","remarks":null,"summary":"\nRolls a 12-sided dice [1..12] <code data-dev-comment-type=\"paramref\" class=\"paramref\">n</code> times.\n","syntax":{"content":"public static int D12(int n)","parameters":[{"description":"The number of times to roll the dice.","id":"n","type":"System.Int32"}],"return":{"description":"The sum of the rolls.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Dice.D12(System.Int32)"},{"children":null,"id":"D20","implements":null,"inheritance":null,"inheritedMembers":null,"name":"D20()","nameWithType":"Dice.D20()","namespace":"Zigurous.Math","parent":"Zigurous.Math.Dice","remarks":null,"summary":"\nRolls a 20-sided dice [1..20].\n","syntax":{"content":"public static int D20()","parameters":null,"return":{"description":"A random number on a 20-sided dice [1..20].","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Dice.D20"},{"children":null,"id":"D20(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"D20(Int32)","nameWithType":"Dice.D20(Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Dice","remarks":null,"summary":"\nRolls a 20-sided dice [1..20] <code data-dev-comment-type=\"paramref\" class=\"paramref\">n</code> times.\n","syntax":{"content":"public static int D20(int n)","parameters":[{"description":"The number of times to roll the dice.","id":"n","type":"System.Int32"}],"return":{"description":"The sum of the rolls.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Dice.D20(System.Int32)"},{"children":null,"id":"D48","implements":null,"inheritance":null,"inheritedMembers":null,"name":"D48()","nameWithType":"Dice.D48()","namespace":"Zigurous.Math","parent":"Zigurous.Math.Dice","remarks":null,"summary":"\nRolls a 48-sided dice [1..48].\n","syntax":{"content":"public static int D48()","parameters":null,"return":{"description":"A random number on a 48-sided dice [1..48].","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Dice.D48"},{"children":null,"id":"D48(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"D48(Int32)","nameWithType":"Dice.D48(Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Dice","remarks":null,"summary":"\nRolls a 48-sided dice [1..48] <code data-dev-comment-type=\"paramref\" class=\"paramref\">n</code> times.\n","syntax":{"content":"public static int D48(int n)","parameters":[{"description":"The number of times to roll the dice.","id":"n","type":"System.Int32"}],"return":{"description":"The sum of the rolls.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Dice.D48(System.Int32)"},{"children":null,"id":"D100","implements":null,"inheritance":null,"inheritedMembers":null,"name":"D100()","nameWithType":"Dice.D100()","namespace":"Zigurous.Math","parent":"Zigurous.Math.Dice","remarks":null,"summary":"\nRolls a 100-sided dice [1..100].\n","syntax":{"content":"public static int D100()","parameters":null,"return":{"description":"A random number on a 100-sided dice [1..100].","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Dice.D100"},{"children":null,"id":"D100(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"D100(Int32)","nameWithType":"Dice.D100(Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Dice","remarks":null,"summary":"\nRolls a 100-sided dice [1..100] <code data-dev-comment-type=\"paramref\" class=\"paramref\">n</code> times.\n","syntax":{"content":"public static int D100(int n)","parameters":[{"description":"The number of times to roll the dice.","id":"n","type":"System.Int32"}],"return":{"description":"The sum of the rolls.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Dice.D100(System.Int32)"},{"children":null,"id":"NSided(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"NSided(Int32)","nameWithType":"Dice.NSided(Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Dice","remarks":null,"summary":"\nRolls an n-sided dice [1..<code data-dev-comment-type=\"paramref\" class=\"paramref\">n</code>].\n","syntax":{"content":"public static int NSided(int n)","parameters":[{"description":"The number of sides on the dice.","id":"n","type":"System.Int32"}],"return":{"description":"A random number on an n-sided dice [1..<code data-dev-comment-type=\"paramref\" class=\"paramref\">n</code>].","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Dice.NSided(System.Int32)"},{"children":null,"id":"NSided(System.Int32,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"NSided(Int32, Int32)","nameWithType":"Dice.NSided(Int32, Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Dice","remarks":null,"summary":"\nRolls an n-sided dice [1..<code data-dev-comment-type=\"paramref\" class=\"paramref\">n</code>] <code data-dev-comment-type=\"paramref\" class=\"paramref\">x</code> amount of times.\n","syntax":{"content":"public static int NSided(int n, int x)","parameters":[{"description":"The number of sides on the dice.","id":"n","type":"System.Int32"},{"description":"The number of times to roll the dice.","id":"x","type":"System.Int32"}],"return":{"description":"The sum of the rolls.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Dice.NSided(System.Int32,System.Int32)"},{"children":null,"id":"Roll(System.Int32[])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Roll(Int32[])","nameWithType":"Dice.Roll(Int32[])","namespace":"Zigurous.Math","parent":"Zigurous.Math.Dice","remarks":null,"summary":"\nRolls a custom dice.\n","syntax":{"content":"public static int Roll(int[] dice)","parameters":[{"description":"The numbered sides of the dice.","id":"dice","type":"System.Int32[]"}],"return":{"description":"A random number on the dice.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Dice.Roll(System.Int32[])"},{"children":null,"id":"Roll(System.Int32[],System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Roll(Int32[], Int32)","nameWithType":"Dice.Roll(Int32[], Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Dice","remarks":null,"summary":"\nRolls a custom dice <code data-dev-comment-type=\"paramref\" class=\"paramref\">n</code> amount of times.\n","syntax":{"content":"public static int Roll(int[] dice, int n)","parameters":[{"description":"The numbered sides of the dice.","id":"dice","type":"System.Int32[]"},{"description":"The number of times to roll the dice.","id":"n","type":"System.Int32"}],"return":{"description":"The sum of the rolls.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Dice.Roll(System.Int32[],System.Int32)"},{"children":null,"id":"Roll``1(``0[])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Roll<T>(T[])","nameWithType":"Dice.Roll<T>(T[])","namespace":"Zigurous.Math","parent":"Zigurous.Math.Dice","remarks":null,"summary":"\nRolls a custom dice.\n","syntax":{"content":"public static T Roll<T>(T[] dice)","parameters":[{"description":"The values of the dice.","id":"dice","type":"{T}[]"}],"return":{"description":"A random value on the dice.","type":"{T}"},"typeParameters":[{"description":"The type of values of the dice.","id":"T"}]},"type":"Method","uid":"Zigurous.Math.Dice.Roll``1(``0[])"},{"children":null,"id":"Roll``1(``0[],System.Int32[])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Roll<T>(T[], Int32[])","nameWithType":"Dice.Roll<T>(T[], Int32[])","namespace":"Zigurous.Math","parent":"Zigurous.Math.Dice","remarks":null,"summary":"\nRolls a custom dice with weighted probabilities.\n","syntax":{"content":"public static T Roll<T>(T[] dice, int[] weights)","parameters":[{"description":"The values of the dice.","id":"dice","type":"{T}[]"},{"description":"The probabilities of each value.","id":"weights","type":"System.Int32[]"}],"return":{"description":"A random value on the dice.","type":"{T}"},"typeParameters":[{"description":"The type of values of the dice.","id":"T"}]},"type":"Method","uid":"Zigurous.Math.Dice.Roll``1(``0[],System.Int32[])"}]},{"items":[{"children":["Zigurous.Math.DoubleEqualityComparer.digits","Zigurous.Math.DoubleEqualityComparer.Equals(System.Double,System.Double)","Zigurous.Math.DoubleEqualityComparer.GetHashCode(System.Double)"],"id":"DoubleEqualityComparer","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"DoubleEqualityComparer","nameWithType":"DoubleEqualityComparer","namespace":"Zigurous.Math","parent":"Zigurous.Math","remarks":null,"summary":"\nCompares the equality of double values using a specified amount of\ndecimal digits to compare.\n","syntax":{"content":"public sealed class DoubleEqualityComparer : IEqualityComparer<double>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Math.DoubleEqualityComparer"},{"children":null,"id":"digits","implements":null,"inheritance":null,"inheritedMembers":null,"name":"digits","nameWithType":"DoubleEqualityComparer.digits","namespace":"Zigurous.Math","parent":"Zigurous.Math.DoubleEqualityComparer","remarks":null,"summary":"\nThe number of decimal digits to compare when determining equality.\n","syntax":{"content":"public int digits","parameters":null,"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.DoubleEqualityComparer.digits"},{"children":null,"id":"Equals(System.Double,System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Equals(Double, Double)","nameWithType":"DoubleEqualityComparer.Equals(Double, Double)","namespace":"Zigurous.Math","parent":"Zigurous.Math.DoubleEqualityComparer","remarks":null,"summary":"\nChecks the equality of two double values.\n","syntax":{"content":"public bool Equals(double x, double y)","parameters":[{"description":"The first value to compare.","id":"x","type":"System.Double"},{"description":"The second value to compare.","id":"y","type":"System.Double"}],"return":{"description":"True if the values are equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.DoubleEqualityComparer.Equals(System.Double,System.Double)"},{"children":null,"id":"GetHashCode(System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetHashCode(Double)","nameWithType":"DoubleEqualityComparer.GetHashCode(Double)","namespace":"Zigurous.Math","parent":"Zigurous.Math.DoubleEqualityComparer","remarks":null,"summary":"\nReturns a hash code for the double value.\n","syntax":{"content":"public int GetHashCode(double value)","parameters":[{"description":"The value to get the hash code for.","id":"value","type":"System.Double"}],"return":{"description":"The hash code for the value.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.DoubleEqualityComparer.GetHashCode(System.Double)"}]},{"items":[{"children":["Zigurous.Math.DoubleExtensions.IsDividable(System.Double)","Zigurous.Math.DoubleExtensions.IsEqualTo(System.Double,System.Double,System.Double)","Zigurous.Math.DoubleExtensions.IsImaginaryNumber(System.Double)","Zigurous.Math.DoubleExtensions.IsInfinite(System.Double)","Zigurous.Math.DoubleExtensions.IsNaN(System.Double)","Zigurous.Math.DoubleExtensions.IsNegative(System.Double)","Zigurous.Math.DoubleExtensions.IsNegativeInfinity(System.Double)","Zigurous.Math.DoubleExtensions.IsPositive(System.Double)","Zigurous.Math.DoubleExtensions.IsPositiveInfinity(System.Double)","Zigurous.Math.DoubleExtensions.IsRealNumber(System.Double)","Zigurous.Math.DoubleExtensions.IsZero(System.Double,System.Double)","Zigurous.Math.DoubleExtensions.ToAbbreviatedString(System.Double)","Zigurous.Math.DoubleExtensions.ToAbbreviatedString(System.Double,Zigurous.Math.NumberAbbreviation[])","Zigurous.Math.DoubleExtensions.UnsetImaginary(System.Double@,System.Double)","Zigurous.Math.DoubleExtensions.UnsetInfinite(System.Double@,System.Double)","Zigurous.Math.DoubleExtensions.UnsetNaN(System.Double@,System.Double)","Zigurous.Math.DoubleExtensions.UnsetZero(System.Double@,System.Double,System.Double)"],"id":"DoubleExtensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"DoubleExtensions","nameWithType":"DoubleExtensions","namespace":"Zigurous.Math","parent":"Zigurous.Math","remarks":null,"summary":"\nExtension methods for doubles.\n","syntax":{"content":"public static class DoubleExtensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Math.DoubleExtensions"},{"children":null,"id":"IsNaN(System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsNaN(Double)","nameWithType":"DoubleExtensions.IsNaN(Double)","namespace":"Zigurous.Math","parent":"Zigurous.Math.DoubleExtensions","remarks":null,"summary":"\nChecks if the value is <code>NaN</code>.\n","syntax":{"content":"public static bool IsNaN(this double value)","parameters":[{"description":"The value to check.","id":"value","type":"System.Double"}],"return":{"description":"True if the value is <code>NaN</code>.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.DoubleExtensions.IsNaN(System.Double)"},{"children":null,"id":"IsInfinite(System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsInfinite(Double)","nameWithType":"DoubleExtensions.IsInfinite(Double)","namespace":"Zigurous.Math","parent":"Zigurous.Math.DoubleExtensions","remarks":null,"summary":"\nChecks if the value is infinite.\n","syntax":{"content":"public static bool IsInfinite(this double value)","parameters":[{"description":"The value to check.","id":"value","type":"System.Double"}],"return":{"description":"True if the value is infinite.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.DoubleExtensions.IsInfinite(System.Double)"},{"children":null,"id":"IsPositiveInfinity(System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsPositiveInfinity(Double)","nameWithType":"DoubleExtensions.IsPositiveInfinity(Double)","namespace":"Zigurous.Math","parent":"Zigurous.Math.DoubleExtensions","remarks":null,"summary":"\nChecks if the value is equal to positive infinity.\n","syntax":{"content":"public static bool IsPositiveInfinity(this double value)","parameters":[{"description":"The value to check.","id":"value","type":"System.Double"}],"return":{"description":"True if the value is equal to positive infinity.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.DoubleExtensions.IsPositiveInfinity(System.Double)"},{"children":null,"id":"IsNegativeInfinity(System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsNegativeInfinity(Double)","nameWithType":"DoubleExtensions.IsNegativeInfinity(Double)","namespace":"Zigurous.Math","parent":"Zigurous.Math.DoubleExtensions","remarks":null,"summary":"\nChecks if the value is equal to negative infinity.\n","syntax":{"content":"public static bool IsNegativeInfinity(this double value)","parameters":[{"description":"The value to check.","id":"value","type":"System.Double"}],"return":{"description":"True if the value is equal to negative infinity.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.DoubleExtensions.IsNegativeInfinity(System.Double)"},{"children":null,"id":"IsRealNumber(System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsRealNumber(Double)","nameWithType":"DoubleExtensions.IsRealNumber(Double)","namespace":"Zigurous.Math","parent":"Zigurous.Math.DoubleExtensions","remarks":null,"summary":"\nChecks if the value is a real number (not infinite and not\n<code>NaN</code>).\n","syntax":{"content":"public static bool IsRealNumber(this double value)","parameters":[{"description":"The value to check.","id":"value","type":"System.Double"}],"return":{"description":"True if the value is a real number.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.DoubleExtensions.IsRealNumber(System.Double)"},{"children":null,"id":"IsImaginaryNumber(System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsImaginaryNumber(Double)","nameWithType":"DoubleExtensions.IsImaginaryNumber(Double)","namespace":"Zigurous.Math","parent":"Zigurous.Math.DoubleExtensions","remarks":null,"summary":"\nChecks if the value is an imaginary number (infinite or <code>NaN</code>).\n","syntax":{"content":"public static bool IsImaginaryNumber(this double value)","parameters":[{"description":"The value to check.","id":"value","type":"System.Double"}],"return":{"description":"True if the value is an imaginary number.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.DoubleExtensions.IsImaginaryNumber(System.Double)"},{"children":null,"id":"IsDividable(System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsDividable(Double)","nameWithType":"DoubleExtensions.IsDividable(Double)","namespace":"Zigurous.Math","parent":"Zigurous.Math.DoubleExtensions","remarks":null,"summary":"\nChecks if the value can be divided (not zero, not infinite, and not\n<code>NaN</code>).\n","syntax":{"content":"public static bool IsDividable(this double value)","parameters":[{"description":"The value to check.","id":"value","type":"System.Double"}],"return":{"description":"True if the value can be divided.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.DoubleExtensions.IsDividable(System.Double)"},{"children":null,"id":"IsPositive(System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsPositive(Double)","nameWithType":"DoubleExtensions.IsPositive(Double)","namespace":"Zigurous.Math","parent":"Zigurous.Math.DoubleExtensions","remarks":null,"summary":"\nChecks if the value is positive.\n","syntax":{"content":"public static bool IsPositive(this double value)","parameters":[{"description":"The value to check.","id":"value","type":"System.Double"}],"return":{"description":"True if the value is positive.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.DoubleExtensions.IsPositive(System.Double)"},{"children":null,"id":"IsNegative(System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsNegative(Double)","nameWithType":"DoubleExtensions.IsNegative(Double)","namespace":"Zigurous.Math","parent":"Zigurous.Math.DoubleExtensions","remarks":null,"summary":"\nChecks if the value is negative.\n","syntax":{"content":"public static bool IsNegative(this double value)","parameters":[{"description":"The value to check.","id":"value","type":"System.Double"}],"return":{"description":"True if the value is negative.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.DoubleExtensions.IsNegative(System.Double)"},{"children":null,"id":"IsZero(System.Double,System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsZero(Double, Double)","nameWithType":"DoubleExtensions.IsZero(Double, Double)","namespace":"Zigurous.Math","parent":"Zigurous.Math.DoubleExtensions","remarks":null,"summary":"\nChecks if the value is zero given a margin of error specified by an\nepsilon.\n","syntax":{"content":"public static bool IsZero(this double value, double epsilon = 4.94065645841247E-324)","parameters":[{"description":"The value to check.","id":"value","type":"System.Double"},{"description":"The margin of error.","id":"epsilon","type":"System.Double"}],"return":{"description":"True if the value is zero.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.DoubleExtensions.IsZero(System.Double,System.Double)"},{"children":null,"id":"IsEqualTo(System.Double,System.Double,System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsEqualTo(Double, Double, Double)","nameWithType":"DoubleExtensions.IsEqualTo(Double, Double, Double)","namespace":"Zigurous.Math","parent":"Zigurous.Math.DoubleExtensions","remarks":null,"summary":"\nChecks for equality with another value given a margin of error\nspecified by an epsilon.\n","syntax":{"content":"public static bool IsEqualTo(this double lhs, double rhs, double epsilon = 4.94065645841247E-324)","parameters":[{"description":"The left-hand side of the equality check.","id":"lhs","type":"System.Double"},{"description":"The right-hand side of the equality check.","id":"rhs","type":"System.Double"},{"description":"The margin of error.","id":"epsilon","type":"System.Double"}],"return":{"description":"True if the values are equal.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.DoubleExtensions.IsEqualTo(System.Double,System.Double,System.Double)"},{"children":null,"id":"ToAbbreviatedString(System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ToAbbreviatedString(Double)","nameWithType":"DoubleExtensions.ToAbbreviatedString(Double)","namespace":"Zigurous.Math","parent":"Zigurous.Math.DoubleExtensions","remarks":null,"summary":"\nConverts the number to an abbreviated string, e.g. &quot;1k&quot; for 1000.\n","syntax":{"content":"public static string ToAbbreviatedString(this double value)","parameters":[{"description":"The number to abbreviate.","id":"value","type":"System.Double"}],"return":{"description":"The number abbreviated as a string, or the number as a string if no abbreviations apply.","type":"System.String"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.DoubleExtensions.ToAbbreviatedString(System.Double)"},{"children":null,"id":"ToAbbreviatedString(System.Double,Zigurous.Math.NumberAbbreviation[])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ToAbbreviatedString(Double, NumberAbbreviation[])","nameWithType":"DoubleExtensions.ToAbbreviatedString(Double, NumberAbbreviation[])","namespace":"Zigurous.Math","parent":"Zigurous.Math.DoubleExtensions","remarks":null,"summary":"\nConverts the number to an abbreviated string with a given set of\npossible abbreviations.\n","syntax":{"content":"public static string ToAbbreviatedString(this double value, NumberAbbreviation[] abbreviations)","parameters":[{"description":"The number to abbreviate.","id":"value","type":"System.Double"},{"description":"The possible abbreviations.","id":"abbreviations","type":"Zigurous.Math.NumberAbbreviation[]"}],"return":{"description":"The number abbreviated as a string, or the number as a string if no abbreviations apply.","type":"System.String"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.DoubleExtensions.ToAbbreviatedString(System.Double,Zigurous.Math.NumberAbbreviation[])"},{"children":null,"id":"UnsetImaginary(System.Double@,System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"UnsetImaginary(ref Double, Double)","nameWithType":"DoubleExtensions.UnsetImaginary(ref Double, Double)","namespace":"Zigurous.Math","parent":"Zigurous.Math.DoubleExtensions","remarks":null,"summary":"\nSets the value to a new value if the value is an imaginary number\n(infinite or <code>NaN</code>).\n","syntax":{"content":"public static void UnsetImaginary(this ref double value, double newValue = 0)","parameters":[{"description":"The value to check.","id":"value","type":"System.Double"},{"description":"The value to set if the original value is an imaginary number.","id":"newValue","type":"System.Double"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Math.DoubleExtensions.UnsetImaginary(System.Double@,System.Double)"},{"children":null,"id":"UnsetInfinite(System.Double@,System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"UnsetInfinite(ref Double, Double)","nameWithType":"DoubleExtensions.UnsetInfinite(ref Double, Double)","namespace":"Zigurous.Math","parent":"Zigurous.Math.DoubleExtensions","remarks":null,"summary":"\nSets the value to a new value if the value is an infinite number.\n","syntax":{"content":"public static void UnsetInfinite(this ref double value, double newValue = 0)","parameters":[{"description":"The value to check.","id":"value","type":"System.Double"},{"description":"The value to set if the original value is infinite.","id":"newValue","type":"System.Double"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Math.DoubleExtensions.UnsetInfinite(System.Double@,System.Double)"},{"children":null,"id":"UnsetNaN(System.Double@,System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"UnsetNaN(ref Double, Double)","nameWithType":"DoubleExtensions.UnsetNaN(ref Double, Double)","namespace":"Zigurous.Math","parent":"Zigurous.Math.DoubleExtensions","remarks":null,"summary":"\nSets the value to a new value if the value is <code>NaN</code>.\n","syntax":{"content":"public static void UnsetNaN(this ref double value, double newValue = 0)","parameters":[{"description":"The value to check.","id":"value","type":"System.Double"},{"description":"The value to set if the original value is <code>NaN</code>.","id":"newValue","type":"System.Double"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Math.DoubleExtensions.UnsetNaN(System.Double@,System.Double)"},{"children":null,"id":"UnsetZero(System.Double@,System.Double,System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"UnsetZero(ref Double, Double, Double)","nameWithType":"DoubleExtensions.UnsetZero(ref Double, Double, Double)","namespace":"Zigurous.Math","parent":"Zigurous.Math.DoubleExtensions","remarks":null,"summary":"\nSets the value to a new value if the value is zero given a margin of\nerror specified by an epsilon.\n","syntax":{"content":"public static void UnsetZero(this ref double value, double newValue = 4.94065645841247E-324, double epsilon = 4.94065645841247E-324)","parameters":[{"description":"The value to check.","id":"value","type":"System.Double"},{"description":"The value to set if the original value is zero.","id":"newValue","type":"System.Double"},{"description":"The margin of error.","id":"epsilon","type":"System.Double"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Math.DoubleExtensions.UnsetZero(System.Double@,System.Double,System.Double)"}]},{"items":[{"children":["Zigurous.Math.FloatEqualityComparer.digits","Zigurous.Math.FloatEqualityComparer.Equals(System.Single,System.Single)","Zigurous.Math.FloatEqualityComparer.GetHashCode(System.Single)"],"id":"FloatEqualityComparer","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"FloatEqualityComparer","nameWithType":"FloatEqualityComparer","namespace":"Zigurous.Math","parent":"Zigurous.Math","remarks":null,"summary":"\nCompares the equality of float values using a specified amount of\ndecimal digits to compare.\n","syntax":{"content":"public sealed class FloatEqualityComparer : IEqualityComparer<float>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Math.FloatEqualityComparer"},{"children":null,"id":"digits","implements":null,"inheritance":null,"inheritedMembers":null,"name":"digits","nameWithType":"FloatEqualityComparer.digits","namespace":"Zigurous.Math","parent":"Zigurous.Math.FloatEqualityComparer","remarks":null,"summary":"\nThe number of decimal digits to compare when determining equality.\n","syntax":{"content":"public int digits","parameters":null,"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.FloatEqualityComparer.digits"},{"children":null,"id":"Equals(System.Single,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Equals(Single, Single)","nameWithType":"FloatEqualityComparer.Equals(Single, Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.FloatEqualityComparer","remarks":null,"summary":"\nChecks the equality of two float values.\n","syntax":{"content":"public bool Equals(float x, float y)","parameters":[{"description":"The first value to compare.","id":"x","type":"System.Single"},{"description":"The second value to compare.","id":"y","type":"System.Single"}],"return":{"description":"True if the values are equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.FloatEqualityComparer.Equals(System.Single,System.Single)"},{"children":null,"id":"GetHashCode(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetHashCode(Single)","nameWithType":"FloatEqualityComparer.GetHashCode(Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.FloatEqualityComparer","remarks":null,"summary":"\nReturns a hash code for the float value.\n","syntax":{"content":"public int GetHashCode(float value)","parameters":[{"description":"The value to get the hash code for.","id":"value","type":"System.Single"}],"return":{"description":"The hash code for the value.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.FloatEqualityComparer.GetHashCode(System.Single)"}]},{"items":[{"children":["Zigurous.Math.FloatExtensions.IsDividable(System.Single)","Zigurous.Math.FloatExtensions.IsEqualTo(System.Single,System.Single,System.Single)","Zigurous.Math.FloatExtensions.IsImaginaryNumber(System.Single)","Zigurous.Math.FloatExtensions.IsInfinite(System.Single)","Zigurous.Math.FloatExtensions.IsNaN(System.Single)","Zigurous.Math.FloatExtensions.IsNegative(System.Single)","Zigurous.Math.FloatExtensions.IsNegativeInfinity(System.Single)","Zigurous.Math.FloatExtensions.IsPositive(System.Single)","Zigurous.Math.FloatExtensions.IsPositiveInfinity(System.Single)","Zigurous.Math.FloatExtensions.IsRealNumber(System.Single)","Zigurous.Math.FloatExtensions.IsZero(System.Single,System.Single)","Zigurous.Math.FloatExtensions.SAFE_FLOAT","Zigurous.Math.FloatExtensions.ToAbbreviatedString(System.Single)","Zigurous.Math.FloatExtensions.ToAbbreviatedString(System.Single,Zigurous.Math.NumberAbbreviation[])","Zigurous.Math.FloatExtensions.UnsetImaginary(System.Single@,System.Single)","Zigurous.Math.FloatExtensions.UnsetInfinite(System.Single@,System.Single)","Zigurous.Math.FloatExtensions.UnsetNaN(System.Single@,System.Single)","Zigurous.Math.FloatExtensions.UnsetZero(System.Single@,System.Single,System.Single)"],"id":"FloatExtensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"FloatExtensions","nameWithType":"FloatExtensions","namespace":"Zigurous.Math","parent":"Zigurous.Math","remarks":null,"summary":"\nExtension methods for floats.\n","syntax":{"content":"public static class FloatExtensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Math.FloatExtensions"},{"children":null,"id":"SAFE_FLOAT","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SAFE_FLOAT","nameWithType":"FloatExtensions.SAFE_FLOAT","namespace":"Zigurous.Math","parent":"Zigurous.Math.FloatExtensions","remarks":null,"summary":"\nSometimes Unity throws precision errors for really small numbers\nsuch as when setting transform values. Using <code>float.Epsilon</code>\ncan still cause issues so this value is intended to be a safer\nalternative.\n","syntax":{"content":"public const float SAFE_FLOAT = 1.4E-32F","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.FloatExtensions.SAFE_FLOAT"},{"children":null,"id":"IsNaN(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsNaN(Single)","nameWithType":"FloatExtensions.IsNaN(Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.FloatExtensions","remarks":null,"summary":"\nChecks if the value is <code>NaN</code>.\n","syntax":{"content":"public static bool IsNaN(this float value)","parameters":[{"description":"The value to check.","id":"value","type":"System.Single"}],"return":{"description":"True if the value is <code>NaN</code>.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.FloatExtensions.IsNaN(System.Single)"},{"children":null,"id":"IsInfinite(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsInfinite(Single)","nameWithType":"FloatExtensions.IsInfinite(Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.FloatExtensions","remarks":null,"summary":"\nChecks if the value is infinite.\n","syntax":{"content":"public static bool IsInfinite(this float value)","parameters":[{"description":"The value to check.","id":"value","type":"System.Single"}],"return":{"description":"True if the value is infinite.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.FloatExtensions.IsInfinite(System.Single)"},{"children":null,"id":"IsPositiveInfinity(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsPositiveInfinity(Single)","nameWithType":"FloatExtensions.IsPositiveInfinity(Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.FloatExtensions","remarks":null,"summary":"\nChecks if the value is equal to positive infinity.\n","syntax":{"content":"public static bool IsPositiveInfinity(this float value)","parameters":[{"description":"The value to check.","id":"value","type":"System.Single"}],"return":{"description":"True if the value is equal to positive infinity.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.FloatExtensions.IsPositiveInfinity(System.Single)"},{"children":null,"id":"IsNegativeInfinity(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsNegativeInfinity(Single)","nameWithType":"FloatExtensions.IsNegativeInfinity(Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.FloatExtensions","remarks":null,"summary":"\nChecks if the value is equal to negative infinity.\n","syntax":{"content":"public static bool IsNegativeInfinity(this float value)","parameters":[{"description":"The value to check.","id":"value","type":"System.Single"}],"return":{"description":"True if the value is equal to negative infinity.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.FloatExtensions.IsNegativeInfinity(System.Single)"},{"children":null,"id":"IsRealNumber(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsRealNumber(Single)","nameWithType":"FloatExtensions.IsRealNumber(Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.FloatExtensions","remarks":null,"summary":"\nChecks if the value is a real number (not infinite and not <code>NaN</code>).\n","syntax":{"content":"public static bool IsRealNumber(this float value)","parameters":[{"description":"The value to check.","id":"value","type":"System.Single"}],"return":{"description":"True if the value is a real number.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.FloatExtensions.IsRealNumber(System.Single)"},{"children":null,"id":"IsImaginaryNumber(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsImaginaryNumber(Single)","nameWithType":"FloatExtensions.IsImaginaryNumber(Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.FloatExtensions","remarks":null,"summary":"\nChecks if the value is an imaginary number (infinite or <code>NaN</code>).\n","syntax":{"content":"public static bool IsImaginaryNumber(this float value)","parameters":[{"description":"The value to check.","id":"value","type":"System.Single"}],"return":{"description":"True if the value is an imaginary number.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.FloatExtensions.IsImaginaryNumber(System.Single)"},{"children":null,"id":"IsDividable(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsDividable(Single)","nameWithType":"FloatExtensions.IsDividable(Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.FloatExtensions","remarks":null,"summary":"\nChecks if the value can be divided (not zero, not infinite, and not\n<code>NaN</code>).\n","syntax":{"content":"public static bool IsDividable(this float value)","parameters":[{"description":"The value to check.","id":"value","type":"System.Single"}],"return":{"description":"True if the value can be divided.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.FloatExtensions.IsDividable(System.Single)"},{"children":null,"id":"IsPositive(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsPositive(Single)","nameWithType":"FloatExtensions.IsPositive(Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.FloatExtensions","remarks":null,"summary":"\nChecks if the value is positive.\n","syntax":{"content":"public static bool IsPositive(this float value)","parameters":[{"description":"The value to check.","id":"value","type":"System.Single"}],"return":{"description":"True if the value is positive.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.FloatExtensions.IsPositive(System.Single)"},{"children":null,"id":"IsNegative(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsNegative(Single)","nameWithType":"FloatExtensions.IsNegative(Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.FloatExtensions","remarks":null,"summary":"\nChecks if the value is negative.\n","syntax":{"content":"public static bool IsNegative(this float value)","parameters":[{"description":"The value to check.","id":"value","type":"System.Single"}],"return":{"description":"True if the value is negative.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.FloatExtensions.IsNegative(System.Single)"},{"children":null,"id":"IsZero(System.Single,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsZero(Single, Single)","nameWithType":"FloatExtensions.IsZero(Single, Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.FloatExtensions","remarks":null,"summary":"\nChecks if the value is zero given a margin of error specified by an\nepsilon.\n","syntax":{"content":"public static bool IsZero(this float value, float epsilon = 1.401298E-45F)","parameters":[{"description":"The value to check.","id":"value","type":"System.Single"},{"description":"The margin of error.","id":"epsilon","type":"System.Single"}],"return":{"description":"True if the value is zero.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.FloatExtensions.IsZero(System.Single,System.Single)"},{"children":null,"id":"IsEqualTo(System.Single,System.Single,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsEqualTo(Single, Single, Single)","nameWithType":"FloatExtensions.IsEqualTo(Single, Single, Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.FloatExtensions","remarks":null,"summary":"\nChecks for equality with another value given a margin of error\nspecified by an epsilon.\n","syntax":{"content":"public static bool IsEqualTo(this float lhs, float rhs, float epsilon = 1.401298E-45F)","parameters":[{"description":"The left-hand side of the equality check.","id":"lhs","type":"System.Single"},{"description":"The right-hand side of the equality check.","id":"rhs","type":"System.Single"},{"description":"The margin of error.","id":"epsilon","type":"System.Single"}],"return":{"description":"True if the values are equal.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.FloatExtensions.IsEqualTo(System.Single,System.Single,System.Single)"},{"children":null,"id":"ToAbbreviatedString(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ToAbbreviatedString(Single)","nameWithType":"FloatExtensions.ToAbbreviatedString(Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.FloatExtensions","remarks":null,"summary":"\nConverts the number to an abbreviated string, e.g. &quot;1k&quot; for 1000.\n","syntax":{"content":"public static string ToAbbreviatedString(this float number)","parameters":[{"description":"The number to abbreviate.","id":"number","type":"System.Single"}],"return":{"description":"The number abbreviated as a string, or the number as a string if no abbreviations apply.","type":"System.String"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.FloatExtensions.ToAbbreviatedString(System.Single)"},{"children":null,"id":"ToAbbreviatedString(System.Single,Zigurous.Math.NumberAbbreviation[])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ToAbbreviatedString(Single, NumberAbbreviation[])","nameWithType":"FloatExtensions.ToAbbreviatedString(Single, NumberAbbreviation[])","namespace":"Zigurous.Math","parent":"Zigurous.Math.FloatExtensions","remarks":null,"summary":"\nConverts the number to an abbreviated string with a given set of\npossible abbreviations.\n","syntax":{"content":"public static string ToAbbreviatedString(this float number, NumberAbbreviation[] abbreviations)","parameters":[{"description":"The number to abbreviate.","id":"number","type":"System.Single"},{"description":"The abbreviations to use.","id":"abbreviations","type":"Zigurous.Math.NumberAbbreviation[]"}],"return":{"description":"The number abbreviated as a string, or the number as a string if no abbreviations apply.","type":"System.String"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.FloatExtensions.ToAbbreviatedString(System.Single,Zigurous.Math.NumberAbbreviation[])"},{"children":null,"id":"UnsetImaginary(System.Single@,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"UnsetImaginary(ref Single, Single)","nameWithType":"FloatExtensions.UnsetImaginary(ref Single, Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.FloatExtensions","remarks":null,"summary":"\nSets the value to a new value if the value is an imaginary number\n(infinite or <code>NaN</code>).\n","syntax":{"content":"public static void UnsetImaginary(this ref float value, float newValue = 0F)","parameters":[{"description":"The value to check.","id":"value","type":"System.Single"},{"description":"The value to set if the original value is an imaginary number.","id":"newValue","type":"System.Single"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Math.FloatExtensions.UnsetImaginary(System.Single@,System.Single)"},{"children":null,"id":"UnsetInfinite(System.Single@,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"UnsetInfinite(ref Single, Single)","nameWithType":"FloatExtensions.UnsetInfinite(ref Single, Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.FloatExtensions","remarks":null,"summary":"\nSets the value to a new value if the value is an infinite number.\n","syntax":{"content":"public static void UnsetInfinite(this ref float value, float newValue = 0F)","parameters":[{"description":"The value to check.","id":"value","type":"System.Single"},{"description":"The value to set if the original value is infinite.","id":"newValue","type":"System.Single"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Math.FloatExtensions.UnsetInfinite(System.Single@,System.Single)"},{"children":null,"id":"UnsetNaN(System.Single@,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"UnsetNaN(ref Single, Single)","nameWithType":"FloatExtensions.UnsetNaN(ref Single, Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.FloatExtensions","remarks":null,"summary":"\nSets the value to a new value if the value is <code>NaN</code>.\n","syntax":{"content":"public static void UnsetNaN(this ref float value, float newValue = 0F)","parameters":[{"description":"The value to check.","id":"value","type":"System.Single"},{"description":"The value to set if the original value is <code>NaN</code>.","id":"newValue","type":"System.Single"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Math.FloatExtensions.UnsetNaN(System.Single@,System.Single)"},{"children":null,"id":"UnsetZero(System.Single@,System.Single,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"UnsetZero(ref Single, Single, Single)","nameWithType":"FloatExtensions.UnsetZero(ref Single, Single, Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.FloatExtensions","remarks":null,"summary":"\nSets the value to a new value if the value is zero given a margin of\nerror specified by an epsilon.\n","syntax":{"content":"public static void UnsetZero(this ref float value, float newValue = 1.4E-32F, float epsilon = 1.401298E-45F)","parameters":[{"description":"The value to check.","id":"value","type":"System.Single"},{"description":"The value to set if the original value is zero.","id":"newValue","type":"System.Single"},{"description":"The margin of error.","id":"epsilon","type":"System.Single"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Math.FloatExtensions.UnsetZero(System.Single@,System.Single,System.Single)"}]},{"items":[{"children":["Zigurous.Math.IntExtensions.GetBits(System.Int32,System.Int32,System.Int32)","Zigurous.Math.IntExtensions.HasAnyFlag(System.Int32,System.Int32)","Zigurous.Math.IntExtensions.HasFlag(System.Int32,System.Int32)","Zigurous.Math.IntExtensions.IsEven(System.Int32)","Zigurous.Math.IntExtensions.IsNegative(System.Int32)","Zigurous.Math.IntExtensions.IsOdd(System.Int32)","Zigurous.Math.IntExtensions.IsPositive(System.Int32)","Zigurous.Math.IntExtensions.IsZero(System.Int32)","Zigurous.Math.IntExtensions.NumDigits(System.Int32)","Zigurous.Math.IntExtensions.ToAbbreviatedString(System.Int32)","Zigurous.Math.IntExtensions.ToAbbreviatedString(System.Int32,Zigurous.Math.NumberAbbreviation[])","Zigurous.Math.IntExtensions.ToBinaryString(System.Int32)"],"id":"IntExtensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"IntExtensions","nameWithType":"IntExtensions","namespace":"Zigurous.Math","parent":"Zigurous.Math","remarks":null,"summary":"\nExtension methods for ints.\n","syntax":{"content":"public static class IntExtensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Math.IntExtensions"},{"children":null,"id":"GetBits(System.Int32,System.Int32,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetBits(Int32, Int32, Int32)","nameWithType":"IntExtensions.GetBits(Int32, Int32, Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.IntExtensions","remarks":null,"summary":"\nReturns a subset of bits from the number.\n","syntax":{"content":"public static int GetBits(this int n, int amount, int offset)","parameters":[{"description":"The number to get bits from.","id":"n","type":"System.Int32"},{"description":"The amount of bits to return.","id":"amount","type":"System.Int32"},{"description":"The amount of bits to discard.","id":"offset","type":"System.Int32"}],"return":{"description":"The subset of bits.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.IntExtensions.GetBits(System.Int32,System.Int32,System.Int32)"},{"children":null,"id":"HasFlag(System.Int32,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"HasFlag(Int32, Int32)","nameWithType":"IntExtensions.HasFlag(Int32, Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.IntExtensions","remarks":null,"summary":"\nChecks if a given flag is set in the bitmask.\n<code>(mask &amp; flag) == flag</code>\n","syntax":{"content":"public static bool HasFlag(this int mask, int flag)","parameters":[{"description":"The mask to check.","id":"mask","type":"System.Int32"},{"description":"The flag to check for.","id":"flag","type":"System.Int32"}],"return":{"description":"True if the flag is set in the mask.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.IntExtensions.HasFlag(System.Int32,System.Int32)"},{"children":null,"id":"HasAnyFlag(System.Int32,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"HasAnyFlag(Int32, Int32)","nameWithType":"IntExtensions.HasAnyFlag(Int32, Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.IntExtensions","remarks":null,"summary":"\nChecks if any of the given flags are set in the bitmask.\n<code>(mask &amp; flags) != 0</code>\n","syntax":{"content":"public static bool HasAnyFlag(this int mask, int flags)","parameters":[{"description":"The mask to check.","id":"mask","type":"System.Int32"},{"description":"The flags to check for.","id":"flags","type":"System.Int32"}],"return":{"description":"True if any of the flags are set in the mask.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.IntExtensions.HasAnyFlag(System.Int32,System.Int32)"},{"children":null,"id":"IsEven(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsEven(Int32)","nameWithType":"IntExtensions.IsEven(Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.IntExtensions","remarks":null,"summary":"\nChecks if the number is even.\n<code>n % 2 == 0</code>\n","syntax":{"content":"public static bool IsEven(this int n)","parameters":[{"description":"The number to check.","id":"n","type":"System.Int32"}],"return":{"description":"True if the number is even.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.IntExtensions.IsEven(System.Int32)"},{"children":null,"id":"IsOdd(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsOdd(Int32)","nameWithType":"IntExtensions.IsOdd(Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.IntExtensions","remarks":null,"summary":"\nChecks if the number is odd.\n<code>n % 2 != 0</code>\n","syntax":{"content":"public static bool IsOdd(this int n)","parameters":[{"description":"The number to check.","id":"n","type":"System.Int32"}],"return":{"description":"True if the number is odd.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.IntExtensions.IsOdd(System.Int32)"},{"children":null,"id":"IsZero(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsZero(Int32)","nameWithType":"IntExtensions.IsZero(Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.IntExtensions","remarks":null,"summary":"\nChecks if the number is zero.\n<code>n == 0</code>\n","syntax":{"content":"public static bool IsZero(this int n)","parameters":[{"description":"The number to check.","id":"n","type":"System.Int32"}],"return":{"description":"True if the number is zero.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.IntExtensions.IsZero(System.Int32)"},{"children":null,"id":"IsPositive(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsPositive(Int32)","nameWithType":"IntExtensions.IsPositive(Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.IntExtensions","remarks":null,"summary":"\nChecks if the number is positive.\n<code>n > 0</code>\n","syntax":{"content":"public static bool IsPositive(this int n)","parameters":[{"description":"The number to check.","id":"n","type":"System.Int32"}],"return":{"description":"True if the number is positive.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.IntExtensions.IsPositive(System.Int32)"},{"children":null,"id":"IsNegative(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsNegative(Int32)","nameWithType":"IntExtensions.IsNegative(Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.IntExtensions","remarks":null,"summary":"\nChecks if the number is negative.\n<code>n &lt; 0</code>\n","syntax":{"content":"public static bool IsNegative(this int n)","parameters":[{"description":"The number to check.","id":"n","type":"System.Int32"}],"return":{"description":"True if the number is negative.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.IntExtensions.IsNegative(System.Int32)"},{"children":null,"id":"NumDigits(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"NumDigits(Int32)","nameWithType":"IntExtensions.NumDigits(Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.IntExtensions","remarks":null,"summary":"\nReturns the number of digits in the number.\n","syntax":{"content":"public static int NumDigits(this int n)","parameters":[{"description":"The number to check.","id":"n","type":"System.Int32"}],"return":{"description":"The number of digits in the number.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.IntExtensions.NumDigits(System.Int32)"},{"children":null,"id":"ToAbbreviatedString(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ToAbbreviatedString(Int32)","nameWithType":"IntExtensions.ToAbbreviatedString(Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.IntExtensions","remarks":null,"summary":"\nConverts the number to an abbreviated string, e.g. &quot;1k&quot; for 1000.\n","syntax":{"content":"public static string ToAbbreviatedString(this int n)","parameters":[{"description":"The number to abbreviate.","id":"n","type":"System.Int32"}],"return":{"description":"The number abbreviated as a string, or the number as a string if no abbreviations apply.","type":"System.String"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.IntExtensions.ToAbbreviatedString(System.Int32)"},{"children":null,"id":"ToAbbreviatedString(System.Int32,Zigurous.Math.NumberAbbreviation[])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ToAbbreviatedString(Int32, NumberAbbreviation[])","nameWithType":"IntExtensions.ToAbbreviatedString(Int32, NumberAbbreviation[])","namespace":"Zigurous.Math","parent":"Zigurous.Math.IntExtensions","remarks":null,"summary":"\nConverts the number to an abbreviated string with a given set of\npossible abbreviations.\n","syntax":{"content":"public static string ToAbbreviatedString(this int n, NumberAbbreviation[] abbreviations)","parameters":[{"description":"The number to abbreviate.","id":"n","type":"System.Int32"},{"description":"The abbreviations to use.","id":"abbreviations","type":"Zigurous.Math.NumberAbbreviation[]"}],"return":{"description":"The number abbreviated as a string, or the number as a string if no abbreviations apply.","type":"System.String"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.IntExtensions.ToAbbreviatedString(System.Int32,Zigurous.Math.NumberAbbreviation[])"},{"children":null,"id":"ToBinaryString(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ToBinaryString(Int32)","nameWithType":"IntExtensions.ToBinaryString(Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.IntExtensions","remarks":null,"summary":"\nConverts the number to a string of binary digits.\n","syntax":{"content":"public static string ToBinaryString(this int n)","parameters":[{"description":"The number to convert.","id":"n","type":"System.Int32"}],"return":{"description":"The binary representation of the number.","type":"System.String"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.IntExtensions.ToBinaryString(System.Int32)"}]},{"items":[{"children":["Zigurous.Math.ListExtensions.Shuffle``1(List{``0})","Zigurous.Math.ListExtensions.Shuffle``1(List{``0},Random)","Zigurous.Math.ListExtensions.Sum(List{System.Double})","Zigurous.Math.ListExtensions.Sum(List{System.Int32})","Zigurous.Math.ListExtensions.Sum(List{System.Single})"],"id":"ListExtensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"ListExtensions","nameWithType":"ListExtensions","namespace":"Zigurous.Math","parent":"Zigurous.Math","remarks":null,"summary":"\nExtension methods for lists.\n","syntax":{"content":"public static class ListExtensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Math.ListExtensions"},{"children":null,"id":"Shuffle``1(List{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Shuffle<T>(List<T>)","nameWithType":"ListExtensions.Shuffle<T>(List<T>)","namespace":"Zigurous.Math","parent":"Zigurous.Math.ListExtensions","remarks":"The shuffle is done using the Fisher-Yates algorithm.","summary":"\nShuffles the list in place.\n","syntax":{"content":"public static void Shuffle<T>(this List<T> list)","parameters":[{"description":"The list to shuffle.","id":"list","type":"Global.List{{T}}"}],"return":null,"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.Math.ListExtensions.Shuffle``1(List{``0})"},{"children":null,"id":"Shuffle``1(List{``0},Random)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Shuffle<T>(List<T>, Random)","nameWithType":"ListExtensions.Shuffle<T>(List<T>, Random)","namespace":"Zigurous.Math","parent":"Zigurous.Math.ListExtensions","remarks":"The shuffle is done using the Fisher-Yates algorithm.","summary":"\nShuffles the list in place using the given random number generator.\n","syntax":{"content":"public static void Shuffle<T>(this List<T> list, Random rng)","parameters":[{"description":"The list to shuffle.","id":"list","type":"Global.List{{T}}"},{"description":"The random number generator to use.","id":"rng","type":"Global.Random"}],"return":null,"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.Math.ListExtensions.Shuffle``1(List{``0},Random)"},{"children":null,"id":"Sum(List{System.Int32})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Sum(List<Int32>)","nameWithType":"ListExtensions.Sum(List<Int32>)","namespace":"Zigurous.Math","parent":"Zigurous.Math.ListExtensions","remarks":null,"summary":"\nCalculates the sum of all items in the list.\n","syntax":{"content":"public static int Sum(this List<int> list)","parameters":[{"description":"The list to sum.","id":"list","type":"Global.List{System.Int32}"}],"return":{"description":"The sum of all items in the list.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.ListExtensions.Sum(List{System.Int32})"},{"children":null,"id":"Sum(List{System.Single})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Sum(List<Single>)","nameWithType":"ListExtensions.Sum(List<Single>)","namespace":"Zigurous.Math","parent":"Zigurous.Math.ListExtensions","remarks":null,"summary":"\nCalculates the sum of all items in the list.\n","syntax":{"content":"public static float Sum(this List<float> list)","parameters":[{"description":"The list to sum.","id":"list","type":"Global.List{System.Single}"}],"return":{"description":"The sum of all items in the list.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.ListExtensions.Sum(List{System.Single})"},{"children":null,"id":"Sum(List{System.Double})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Sum(List<Double>)","nameWithType":"ListExtensions.Sum(List<Double>)","namespace":"Zigurous.Math","parent":"Zigurous.Math.ListExtensions","remarks":null,"summary":"\nCalculates the sum of all items in the list.\n","syntax":{"content":"public static double Sum(this List<double> list)","parameters":[{"description":"The list to sum.","id":"list","type":"Global.List{System.Double}"}],"return":{"description":"The sum of all items in the list.","type":"System.Double"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.ListExtensions.Sum(List{System.Double})"}]},{"items":[{"children":["Zigurous.Math.LongExtensions.GetBits(System.Int64,System.Int32,System.Int32)","Zigurous.Math.LongExtensions.HasAnyFlag(System.Int64,System.Int64)","Zigurous.Math.LongExtensions.HasFlag(System.Int64,System.Int64)","Zigurous.Math.LongExtensions.IsEven(System.Int64)","Zigurous.Math.LongExtensions.IsNegative(System.Int64)","Zigurous.Math.LongExtensions.IsOdd(System.Int64)","Zigurous.Math.LongExtensions.IsPositive(System.Int64)","Zigurous.Math.LongExtensions.IsZero(System.Int64)","Zigurous.Math.LongExtensions.ToBinaryString(System.Int64)"],"id":"LongExtensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"LongExtensions","nameWithType":"LongExtensions","namespace":"Zigurous.Math","parent":"Zigurous.Math","remarks":null,"summary":"\nExtension methods for longs.\n","syntax":{"content":"public static class LongExtensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Math.LongExtensions"},{"children":null,"id":"GetBits(System.Int64,System.Int32,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetBits(Int64, Int32, Int32)","nameWithType":"LongExtensions.GetBits(Int64, Int32, Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.LongExtensions","remarks":null,"summary":"\nReturns a subset of bits from the number.\n","syntax":{"content":"public static long GetBits(this long n, int amount, int offset)","parameters":[{"description":"The number to get bits from.","id":"n","type":"System.Int64"},{"description":"The amount of bits to return.","id":"amount","type":"System.Int32"},{"description":"The amount of bits to discard.","id":"offset","type":"System.Int32"}],"return":{"description":"The subset of bits.","type":"System.Int64"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.LongExtensions.GetBits(System.Int64,System.Int32,System.Int32)"},{"children":null,"id":"HasFlag(System.Int64,System.Int64)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"HasFlag(Int64, Int64)","nameWithType":"LongExtensions.HasFlag(Int64, Int64)","namespace":"Zigurous.Math","parent":"Zigurous.Math.LongExtensions","remarks":null,"summary":"\nChecks if a given flag is set in the bitmask.\n<code>(mask &amp; flag) == flag</code>\n","syntax":{"content":"public static bool HasFlag(this long mask, long flag)","parameters":[{"description":"The mask to check.","id":"mask","type":"System.Int64"},{"description":"The flag to check for.","id":"flag","type":"System.Int64"}],"return":{"description":"True if the flag is set in the mask.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.LongExtensions.HasFlag(System.Int64,System.Int64)"},{"children":null,"id":"HasAnyFlag(System.Int64,System.Int64)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"HasAnyFlag(Int64, Int64)","nameWithType":"LongExtensions.HasAnyFlag(Int64, Int64)","namespace":"Zigurous.Math","parent":"Zigurous.Math.LongExtensions","remarks":null,"summary":"\nChecks if any of the given flags are set in the bitmask.\n<code>(mask &amp; flags) != 0</code>\n","syntax":{"content":"public static bool HasAnyFlag(this long mask, long flags)","parameters":[{"description":"The mask to check.","id":"mask","type":"System.Int64"},{"description":"The flags to check for.","id":"flags","type":"System.Int64"}],"return":{"description":"True if any of the flags are set in the mask.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.LongExtensions.HasAnyFlag(System.Int64,System.Int64)"},{"children":null,"id":"IsEven(System.Int64)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsEven(Int64)","nameWithType":"LongExtensions.IsEven(Int64)","namespace":"Zigurous.Math","parent":"Zigurous.Math.LongExtensions","remarks":null,"summary":"\nChecks if the number is even.\n<code>n % 2 == 0</code>\n","syntax":{"content":"public static bool IsEven(this long n)","parameters":[{"description":"The number to check.","id":"n","type":"System.Int64"}],"return":{"description":"True if the number is even.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.LongExtensions.IsEven(System.Int64)"},{"children":null,"id":"IsOdd(System.Int64)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsOdd(Int64)","nameWithType":"LongExtensions.IsOdd(Int64)","namespace":"Zigurous.Math","parent":"Zigurous.Math.LongExtensions","remarks":null,"summary":"\nChecks if the number is odd.\n<code>n % 2 != 0</code>\n","syntax":{"content":"public static bool IsOdd(this long n)","parameters":[{"description":"The number to check.","id":"n","type":"System.Int64"}],"return":{"description":"True if the number is odd.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.LongExtensions.IsOdd(System.Int64)"},{"children":null,"id":"IsZero(System.Int64)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsZero(Int64)","nameWithType":"LongExtensions.IsZero(Int64)","namespace":"Zigurous.Math","parent":"Zigurous.Math.LongExtensions","remarks":null,"summary":"\nChecks if the number is zero.\n<code>n == 0</code>\n","syntax":{"content":"public static bool IsZero(this long n)","parameters":[{"description":"The number to check.","id":"n","type":"System.Int64"}],"return":{"description":"True if the number is zero.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.LongExtensions.IsZero(System.Int64)"},{"children":null,"id":"IsPositive(System.Int64)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsPositive(Int64)","nameWithType":"LongExtensions.IsPositive(Int64)","namespace":"Zigurous.Math","parent":"Zigurous.Math.LongExtensions","remarks":null,"summary":"\nChecks if the number is positive.\n<code>n > 0</code>\n","syntax":{"content":"public static bool IsPositive(this long n)","parameters":[{"description":"The number to check.","id":"n","type":"System.Int64"}],"return":{"description":"True if the number is positive.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.LongExtensions.IsPositive(System.Int64)"},{"children":null,"id":"IsNegative(System.Int64)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsNegative(Int64)","nameWithType":"LongExtensions.IsNegative(Int64)","namespace":"Zigurous.Math","parent":"Zigurous.Math.LongExtensions","remarks":null,"summary":"\nChecks if the number is negative.\n<code>n &lt; 0</code>\n","syntax":{"content":"public static bool IsNegative(this long n)","parameters":[{"description":"The number to check.","id":"n","type":"System.Int64"}],"return":{"description":"True if the number is negative.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.LongExtensions.IsNegative(System.Int64)"},{"children":null,"id":"ToBinaryString(System.Int64)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ToBinaryString(Int64)","nameWithType":"LongExtensions.ToBinaryString(Int64)","namespace":"Zigurous.Math","parent":"Zigurous.Math.LongExtensions","remarks":null,"summary":"\nConverts the number to a string of binary digits.\n","syntax":{"content":"public static string ToBinaryString(this long n)","parameters":[{"description":"The number to convert.","id":"n","type":"System.Int64"}],"return":{"description":"The binary representation of the number.","type":"System.String"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.LongExtensions.ToBinaryString(System.Int64)"}]},{"items":[{"children":["Zigurous.Math.NumberAbbreviation.#ctor(System.Double,System.String)","Zigurous.Math.NumberAbbreviation.billions","Zigurous.Math.NumberAbbreviation.common","Zigurous.Math.NumberAbbreviation.factor","Zigurous.Math.NumberAbbreviation.format","Zigurous.Math.NumberAbbreviation.Format(System.Double)","Zigurous.Math.NumberAbbreviation.Format(System.Int32)","Zigurous.Math.NumberAbbreviation.Format(System.Single)","Zigurous.Math.NumberAbbreviation.millions","Zigurous.Math.NumberAbbreviation.thousands","Zigurous.Math.NumberAbbreviation.trillions"],"id":"NumberAbbreviation","implements":null,"inheritance":null,"inheritedMembers":null,"name":"NumberAbbreviation","nameWithType":"NumberAbbreviation","namespace":"Zigurous.Math","parent":"Zigurous.Math","remarks":null,"summary":"\nRepresents how a number is abbreviated to a string.\n","syntax":{"content":"[Serializable]\npublic struct NumberAbbreviation","parameters":null,"return":null,"typeParameters":null},"type":"Struct","uid":"Zigurous.Math.NumberAbbreviation"},{"children":null,"id":"thousands","implements":null,"inheritance":null,"inheritedMembers":null,"name":"thousands","nameWithType":"NumberAbbreviation.thousands","namespace":"Zigurous.Math","parent":"Zigurous.Math.NumberAbbreviation","remarks":null,"summary":"\nAn abbreviation for numbers in the thousands (Read only).\n","syntax":{"content":"public static readonly NumberAbbreviation thousands { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Math.NumberAbbreviation"},"typeParameters":null},"type":"Property","uid":"Zigurous.Math.NumberAbbreviation.thousands"},{"children":null,"id":"millions","implements":null,"inheritance":null,"inheritedMembers":null,"name":"millions","nameWithType":"NumberAbbreviation.millions","namespace":"Zigurous.Math","parent":"Zigurous.Math.NumberAbbreviation","remarks":null,"summary":"\nAn abbreviation for numbers in the millions (Read only).\n","syntax":{"content":"public static readonly NumberAbbreviation millions { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Math.NumberAbbreviation"},"typeParameters":null},"type":"Property","uid":"Zigurous.Math.NumberAbbreviation.millions"},{"children":null,"id":"billions","implements":null,"inheritance":null,"inheritedMembers":null,"name":"billions","nameWithType":"NumberAbbreviation.billions","namespace":"Zigurous.Math","parent":"Zigurous.Math.NumberAbbreviation","remarks":null,"summary":"\nAn abbreviation for numbers in the billions (Read only).\n","syntax":{"content":"public static readonly NumberAbbreviation billions { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Math.NumberAbbreviation"},"typeParameters":null},"type":"Property","uid":"Zigurous.Math.NumberAbbreviation.billions"},{"children":null,"id":"trillions","implements":null,"inheritance":null,"inheritedMembers":null,"name":"trillions","nameWithType":"NumberAbbreviation.trillions","namespace":"Zigurous.Math","parent":"Zigurous.Math.NumberAbbreviation","remarks":null,"summary":"\nAn abbreviation for numbers in the trillions (Read only).\n","syntax":{"content":"public static readonly NumberAbbreviation trillions { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Math.NumberAbbreviation"},"typeParameters":null},"type":"Property","uid":"Zigurous.Math.NumberAbbreviation.trillions"},{"children":null,"id":"common","implements":null,"inheritance":null,"inheritedMembers":null,"name":"common","nameWithType":"NumberAbbreviation.common","namespace":"Zigurous.Math","parent":"Zigurous.Math.NumberAbbreviation","remarks":null,"summary":"\nA predefined set of common number abbreviations (Read only).\n","syntax":{"content":"public static readonly NumberAbbreviation[] common","parameters":null,"return":{"description":null,"type":"Zigurous.Math.NumberAbbreviation[]"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.NumberAbbreviation.common"},{"children":null,"id":"factor","implements":null,"inheritance":null,"inheritedMembers":null,"name":"factor","nameWithType":"NumberAbbreviation.factor","namespace":"Zigurous.Math","parent":"Zigurous.Math.NumberAbbreviation","remarks":null,"summary":"\nThe number factor after which the abbreviation is applied.\n","syntax":{"content":"public double factor","parameters":null,"return":{"description":null,"type":"System.Double"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.NumberAbbreviation.factor"},{"children":null,"id":"format","implements":null,"inheritance":null,"inheritedMembers":null,"name":"format","nameWithType":"NumberAbbreviation.format","namespace":"Zigurous.Math","parent":"Zigurous.Math.NumberAbbreviation","remarks":null,"summary":"\nThe string format of the abbreviated number.\n","syntax":{"content":"public string format","parameters":null,"return":{"description":null,"type":"System.String"},"typeParameters":null},"type":"Field","uid":"Zigurous.Math.NumberAbbreviation.format"},{"children":null,"id":"#ctor(System.Double,System.String)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"NumberAbbreviation(Double, String)","nameWithType":"NumberAbbreviation.NumberAbbreviation(Double, String)","namespace":"Zigurous.Math","parent":"Zigurous.Math.NumberAbbreviation","remarks":null,"summary":"\nCreates a new number abbreviation with a given factor and format.\n","syntax":{"content":"public NumberAbbreviation(double factor, string format)","parameters":[{"description":"The number factor after which the abbreviation is applied.","id":"factor","type":"System.Double"},{"description":"The string format of the abbreviated number.","id":"format","type":"System.String"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Math.NumberAbbreviation.#ctor(System.Double,System.String)"},{"children":null,"id":"Format(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Format(Int32)","nameWithType":"NumberAbbreviation.Format(Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.NumberAbbreviation","remarks":null,"summary":"\nAbbreviates a number to a string.\n","syntax":{"content":"public string Format(int number)","parameters":[{"description":"The number to abbreviate.","id":"number","type":"System.Int32"}],"return":{"description":"The number abbreviated as a string.","type":"System.String"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.NumberAbbreviation.Format(System.Int32)"},{"children":null,"id":"Format(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Format(Single)","nameWithType":"NumberAbbreviation.Format(Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.NumberAbbreviation","remarks":null,"summary":"\nAbbreviates a number to a string.\n","syntax":{"content":"public string Format(float number)","parameters":[{"description":"The number to abbreviate.","id":"number","type":"System.Single"}],"return":{"description":"The number abbreviated as a string.","type":"System.String"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.NumberAbbreviation.Format(System.Single)"},{"children":null,"id":"Format(System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Format(Double)","nameWithType":"NumberAbbreviation.Format(Double)","namespace":"Zigurous.Math","parent":"Zigurous.Math.NumberAbbreviation","remarks":null,"summary":"\nAbbreviates a number to a string.\n","syntax":{"content":"public string Format(double number)","parameters":[{"description":"The number to abbreviate.","id":"number","type":"System.Double"}],"return":{"description":"The number abbreviated as a string.","type":"System.String"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.NumberAbbreviation.Format(System.Double)"}]},{"items":[{"children":["Zigurous.Math.NumberAbbreviationExtensions.Format(Zigurous.Math.NumberAbbreviation[],System.Double)","Zigurous.Math.NumberAbbreviationExtensions.Format(Zigurous.Math.NumberAbbreviation[],System.Int32)","Zigurous.Math.NumberAbbreviationExtensions.Format(Zigurous.Math.NumberAbbreviation[],System.Single)"],"id":"NumberAbbreviationExtensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"NumberAbbreviationExtensions","nameWithType":"NumberAbbreviationExtensions","namespace":"Zigurous.Math","parent":"Zigurous.Math","remarks":null,"summary":"\nExtensions methods for <xref href=\"Zigurous.Math.NumberAbbreviation\" data-throw-if-not-resolved=\"false\"></xref>.\n","syntax":{"content":"public static class NumberAbbreviationExtensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Math.NumberAbbreviationExtensions"},{"children":null,"id":"Format(Zigurous.Math.NumberAbbreviation[],System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Format(NumberAbbreviation[], Int32)","nameWithType":"NumberAbbreviationExtensions.Format(NumberAbbreviation[], Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.NumberAbbreviationExtensions","remarks":null,"summary":"\nAbbreviates a number to a string with the given set of abbreviations.\n","syntax":{"content":"public static string Format(this NumberAbbreviation[] abbreviations, int number)","parameters":[{"description":"The possible abbreviations to apply.","id":"abbreviations","type":"Zigurous.Math.NumberAbbreviation[]"},{"description":"The number to abbreviate.","id":"number","type":"System.Int32"}],"return":{"description":"The number abbreviated as a string, or the number as a string if no abbreviations apply.","type":"System.String"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.NumberAbbreviationExtensions.Format(Zigurous.Math.NumberAbbreviation[],System.Int32)"},{"children":null,"id":"Format(Zigurous.Math.NumberAbbreviation[],System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Format(NumberAbbreviation[], Single)","nameWithType":"NumberAbbreviationExtensions.Format(NumberAbbreviation[], Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.NumberAbbreviationExtensions","remarks":null,"summary":"\nAbbreviates a number to a string with the given set of abbreviations.\n","syntax":{"content":"public static string Format(this NumberAbbreviation[] abbreviations, float number)","parameters":[{"description":"The possible abbreviations to apply.","id":"abbreviations","type":"Zigurous.Math.NumberAbbreviation[]"},{"description":"The number to abbreviate.","id":"number","type":"System.Single"}],"return":{"description":"The number abbreviated as a string, or the number as a string if no abbreviations apply.","type":"System.String"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.NumberAbbreviationExtensions.Format(Zigurous.Math.NumberAbbreviation[],System.Single)"},{"children":null,"id":"Format(Zigurous.Math.NumberAbbreviation[],System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Format(NumberAbbreviation[], Double)","nameWithType":"NumberAbbreviationExtensions.Format(NumberAbbreviation[], Double)","namespace":"Zigurous.Math","parent":"Zigurous.Math.NumberAbbreviationExtensions","remarks":null,"summary":"\nAbbreviates a number to a string with the given set of abbreviations.\n","syntax":{"content":"public static string Format(this NumberAbbreviation[] abbreviations, double number)","parameters":[{"description":"The possible abbreviations to apply.","id":"abbreviations","type":"Zigurous.Math.NumberAbbreviation[]"},{"description":"The number to abbreviate.","id":"number","type":"System.Double"}],"return":{"description":"The number abbreviated as a string, or the number as a string if no abbreviations apply.","type":"System.String"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.NumberAbbreviationExtensions.Format(Zigurous.Math.NumberAbbreviation[],System.Double)"}]},{"items":[{"children":["Zigurous.Math.QuaternionExtensions.SmoothDamp(Quaternion,Quaternion,Quaternion@,System.Single,System.Single)"],"id":"QuaternionExtensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"QuaternionExtensions","nameWithType":"QuaternionExtensions","namespace":"Zigurous.Math","parent":"Zigurous.Math","remarks":null,"summary":"\nExtension methods for quaternions.\n","syntax":{"content":"public static class QuaternionExtensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Math.QuaternionExtensions"},{"children":null,"id":"SmoothDamp(Quaternion,Quaternion,Quaternion@,System.Single,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SmoothDamp(Quaternion, Quaternion, ref Quaternion, Single, Single)","nameWithType":"QuaternionExtensions.SmoothDamp(Quaternion, Quaternion, ref Quaternion, Single, Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.QuaternionExtensions","remarks":null,"summary":"\nGradually changes a quaternion towards a desired goal over time.\nThe quaternion is smoothed by some spring-damper like function,\nwhich will never overshoot.\n","syntax":{"content":"public static Quaternion SmoothDamp(this Quaternion current, Quaternion target, ref Quaternion currentVelocity, float smoothTime, float maxSpeed = default(float))","parameters":[{"description":"The current position.","id":"current","type":"Global.Quaternion"},{"description":"The position we are trying to reach.","id":"target","type":"Global.Quaternion"},{"description":"The current velocity, this value is modified by the function every time you call it.","id":"currentVelocity","type":"Global.Quaternion"},{"description":"Approximately the time it will take to reach the target. A smaller value will reach the target faster.","id":"smoothTime","type":"System.Single"},{"description":"Optionally allows you to clamp the maximum speed.","id":"maxSpeed","type":"System.Single"}],"return":{"description":"The smoothed quaternion.","type":"Global.Quaternion"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.QuaternionExtensions.SmoothDamp(Quaternion,Quaternion,Quaternion@,System.Single,System.Single)"}]},{"items":[{"children":["Zigurous.Math.ShortExtensions.HasAnyFlag(System.Int16,System.Int16)","Zigurous.Math.ShortExtensions.HasFlag(System.Int16,System.Int16)","Zigurous.Math.ShortExtensions.IsEven(System.Int16)","Zigurous.Math.ShortExtensions.IsNegative(System.Int16)","Zigurous.Math.ShortExtensions.IsOdd(System.Int16)","Zigurous.Math.ShortExtensions.IsPositive(System.Int16)","Zigurous.Math.ShortExtensions.IsZero(System.Int16)","Zigurous.Math.ShortExtensions.ToBinaryString(System.Int16)"],"id":"ShortExtensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"ShortExtensions","nameWithType":"ShortExtensions","namespace":"Zigurous.Math","parent":"Zigurous.Math","remarks":null,"summary":"\nExtension methods for shorts.\n","syntax":{"content":"public static class ShortExtensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Math.ShortExtensions"},{"children":null,"id":"HasFlag(System.Int16,System.Int16)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"HasFlag(Int16, Int16)","nameWithType":"ShortExtensions.HasFlag(Int16, Int16)","namespace":"Zigurous.Math","parent":"Zigurous.Math.ShortExtensions","remarks":null,"summary":"\nChecks if a given flag is set in the bitmask.\n<code>(mask &amp; flag) == flag</code>\n","syntax":{"content":"public static bool HasFlag(this short mask, short flag)","parameters":[{"description":"The mask to check.","id":"mask","type":"System.Int16"},{"description":"The flag to check for.","id":"flag","type":"System.Int16"}],"return":{"description":"True if the flag is set in the mask.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.ShortExtensions.HasFlag(System.Int16,System.Int16)"},{"children":null,"id":"HasAnyFlag(System.Int16,System.Int16)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"HasAnyFlag(Int16, Int16)","nameWithType":"ShortExtensions.HasAnyFlag(Int16, Int16)","namespace":"Zigurous.Math","parent":"Zigurous.Math.ShortExtensions","remarks":null,"summary":"\nChecks if any of the given flags are set in the bitmask.\n<code>(mask &amp; flags) != 0</code>\n","syntax":{"content":"public static bool HasAnyFlag(this short mask, short flags)","parameters":[{"description":"The mask to check.","id":"mask","type":"System.Int16"},{"description":"The flags to check for.","id":"flags","type":"System.Int16"}],"return":{"description":"True if any of the flags are set in the mask.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.ShortExtensions.HasAnyFlag(System.Int16,System.Int16)"},{"children":null,"id":"IsEven(System.Int16)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsEven(Int16)","nameWithType":"ShortExtensions.IsEven(Int16)","namespace":"Zigurous.Math","parent":"Zigurous.Math.ShortExtensions","remarks":null,"summary":"\nChecks if the number is even.\n<code>n % 2 == 0</code>\n","syntax":{"content":"public static bool IsEven(this short n)","parameters":[{"description":"The number to check.","id":"n","type":"System.Int16"}],"return":{"description":"True if the number is even.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.ShortExtensions.IsEven(System.Int16)"},{"children":null,"id":"IsOdd(System.Int16)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsOdd(Int16)","nameWithType":"ShortExtensions.IsOdd(Int16)","namespace":"Zigurous.Math","parent":"Zigurous.Math.ShortExtensions","remarks":null,"summary":"\nChecks if the number is odd.\n<code>n % 2 != 0</code>\n","syntax":{"content":"public static bool IsOdd(this short n)","parameters":[{"description":"The number to check.","id":"n","type":"System.Int16"}],"return":{"description":"True if the number is odd.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.ShortExtensions.IsOdd(System.Int16)"},{"children":null,"id":"IsZero(System.Int16)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsZero(Int16)","nameWithType":"ShortExtensions.IsZero(Int16)","namespace":"Zigurous.Math","parent":"Zigurous.Math.ShortExtensions","remarks":null,"summary":"\nChecks if the number is zero.\n<code>n == 0</code>\n","syntax":{"content":"public static bool IsZero(this short n)","parameters":[{"description":"The number to check.","id":"n","type":"System.Int16"}],"return":{"description":"True if the number is zero.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.ShortExtensions.IsZero(System.Int16)"},{"children":null,"id":"IsPositive(System.Int16)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsPositive(Int16)","nameWithType":"ShortExtensions.IsPositive(Int16)","namespace":"Zigurous.Math","parent":"Zigurous.Math.ShortExtensions","remarks":null,"summary":"\nChecks if the number is positive.\n<code>n > 0</code>\n","syntax":{"content":"public static bool IsPositive(this short n)","parameters":[{"description":"The number to check.","id":"n","type":"System.Int16"}],"return":{"description":"True if the number is positive.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.ShortExtensions.IsPositive(System.Int16)"},{"children":null,"id":"IsNegative(System.Int16)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsNegative(Int16)","nameWithType":"ShortExtensions.IsNegative(Int16)","namespace":"Zigurous.Math","parent":"Zigurous.Math.ShortExtensions","remarks":null,"summary":"\nChecks if the number is negative.\n<code>n &lt; 0</code>\n","syntax":{"content":"public static bool IsNegative(this short n)","parameters":[{"description":"The number to check.","id":"n","type":"System.Int16"}],"return":{"description":"True if the number is negative.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.ShortExtensions.IsNegative(System.Int16)"},{"children":null,"id":"ToBinaryString(System.Int16)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ToBinaryString(Int16)","nameWithType":"ShortExtensions.ToBinaryString(Int16)","namespace":"Zigurous.Math","parent":"Zigurous.Math.ShortExtensions","remarks":null,"summary":"\nConverts the number to a string of binary digits.\n","syntax":{"content":"public static string ToBinaryString(this short n)","parameters":[{"description":"The number to convert.","id":"n","type":"System.Int16"}],"return":{"description":"The binary representation of the number.","type":"System.String"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.ShortExtensions.ToBinaryString(System.Int16)"}]},{"items":[{"children":["Zigurous.Math.UIntExtensions.Factors(System.UInt32)","Zigurous.Math.UIntExtensions.GetBits(System.UInt32,System.Int32,System.Int32)","Zigurous.Math.UIntExtensions.HasAnyFlag(System.UInt32,System.UInt32)","Zigurous.Math.UIntExtensions.HasFlag(System.UInt32,System.UInt32)","Zigurous.Math.UIntExtensions.IsEven(System.UInt32)","Zigurous.Math.UIntExtensions.IsOdd(System.UInt32)","Zigurous.Math.UIntExtensions.IsPositive(System.UInt32)","Zigurous.Math.UIntExtensions.IsZero(System.UInt32)","Zigurous.Math.UIntExtensions.ToBinaryString(System.UInt32)"],"id":"UIntExtensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"UIntExtensions","nameWithType":"UIntExtensions","namespace":"Zigurous.Math","parent":"Zigurous.Math","remarks":null,"summary":"\nExtension methods for uints.\n","syntax":{"content":"public static class UIntExtensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Math.UIntExtensions"},{"children":null,"id":"Factors(System.UInt32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Factors(UInt32)","nameWithType":"UIntExtensions.Factors(UInt32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.UIntExtensions","remarks":null,"summary":"\nReturns the factors of the given number.\n","syntax":{"content":"public static IEnumerable<uint> Factors(this uint n)","parameters":[{"description":"The number to factor.","id":"n","type":"System.UInt32"}],"return":{"description":"The factors of the given number.","type":"Global.IEnumerable{System.UInt32}"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.UIntExtensions.Factors(System.UInt32)"},{"children":null,"id":"GetBits(System.UInt32,System.Int32,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetBits(UInt32, Int32, Int32)","nameWithType":"UIntExtensions.GetBits(UInt32, Int32, Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.UIntExtensions","remarks":null,"summary":"\nReturns a subset of bits from the number.\n","syntax":{"content":"public static uint GetBits(this uint n, int amount, int offset)","parameters":[{"description":"The number to get bits from.","id":"n","type":"System.UInt32"},{"description":"The amount of bits to return.","id":"amount","type":"System.Int32"},{"description":"The amount of bits to discard.","id":"offset","type":"System.Int32"}],"return":{"description":"The subset of bits.","type":"System.UInt32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.UIntExtensions.GetBits(System.UInt32,System.Int32,System.Int32)"},{"children":null,"id":"HasFlag(System.UInt32,System.UInt32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"HasFlag(UInt32, UInt32)","nameWithType":"UIntExtensions.HasFlag(UInt32, UInt32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.UIntExtensions","remarks":null,"summary":"\nChecks if a given flag is set in the bitmask.\n<code>(mask &amp; flag) == flag</code>\n","syntax":{"content":"public static bool HasFlag(this uint mask, uint flag)","parameters":[{"description":"The mask to check.","id":"mask","type":"System.UInt32"},{"description":"The flag to check for.","id":"flag","type":"System.UInt32"}],"return":{"description":"True if the flag is set in the mask.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.UIntExtensions.HasFlag(System.UInt32,System.UInt32)"},{"children":null,"id":"HasAnyFlag(System.UInt32,System.UInt32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"HasAnyFlag(UInt32, UInt32)","nameWithType":"UIntExtensions.HasAnyFlag(UInt32, UInt32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.UIntExtensions","remarks":null,"summary":"\nChecks if any of the given flags are set in the bitmask.\n<code>(mask &amp; flags) != 0</code>\n","syntax":{"content":"public static bool HasAnyFlag(this uint mask, uint flags)","parameters":[{"description":"The mask to check.","id":"mask","type":"System.UInt32"},{"description":"The flags to check for.","id":"flags","type":"System.UInt32"}],"return":{"description":"True if any of the flags are set in the mask.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.UIntExtensions.HasAnyFlag(System.UInt32,System.UInt32)"},{"children":null,"id":"IsEven(System.UInt32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsEven(UInt32)","nameWithType":"UIntExtensions.IsEven(UInt32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.UIntExtensions","remarks":null,"summary":"\nChecks if the number is even.\n<code>n % 2 == 0</code>\n","syntax":{"content":"public static bool IsEven(this uint n)","parameters":[{"description":"The number to check.","id":"n","type":"System.UInt32"}],"return":{"description":"True if the number is even.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.UIntExtensions.IsEven(System.UInt32)"},{"children":null,"id":"IsOdd(System.UInt32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsOdd(UInt32)","nameWithType":"UIntExtensions.IsOdd(UInt32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.UIntExtensions","remarks":null,"summary":"\nChecks if the number is odd.\n<code>n % 2 != 0</code>\n","syntax":{"content":"public static bool IsOdd(this uint n)","parameters":[{"description":"The number to check.","id":"n","type":"System.UInt32"}],"return":{"description":"True if the number is odd.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.UIntExtensions.IsOdd(System.UInt32)"},{"children":null,"id":"IsZero(System.UInt32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsZero(UInt32)","nameWithType":"UIntExtensions.IsZero(UInt32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.UIntExtensions","remarks":null,"summary":"\nChecks if the number is zero.\n<code>n == 0</code>\n","syntax":{"content":"public static bool IsZero(this uint n)","parameters":[{"description":"The number to check.","id":"n","type":"System.UInt32"}],"return":{"description":"True if the number is zero.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.UIntExtensions.IsZero(System.UInt32)"},{"children":null,"id":"IsPositive(System.UInt32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsPositive(UInt32)","nameWithType":"UIntExtensions.IsPositive(UInt32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.UIntExtensions","remarks":null,"summary":"\nChecks if the number is positive.\n<code>n > 0</code>\n","syntax":{"content":"public static bool IsPositive(this uint n)","parameters":[{"description":"The number to check.","id":"n","type":"System.UInt32"}],"return":{"description":"True if the number is positive.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.UIntExtensions.IsPositive(System.UInt32)"},{"children":null,"id":"ToBinaryString(System.UInt32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ToBinaryString(UInt32)","nameWithType":"UIntExtensions.ToBinaryString(UInt32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.UIntExtensions","remarks":null,"summary":"\nConverts the number to a string of binary digits.\n","syntax":{"content":"public static string ToBinaryString(this uint n)","parameters":[{"description":"The number to convert.","id":"n","type":"System.UInt32"}],"return":{"description":"The binary representation of the number.","type":"System.String"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.UIntExtensions.ToBinaryString(System.UInt32)"}]},{"items":[{"children":["Zigurous.Math.Vector2Extensions.Abs(Vector2)","Zigurous.Math.Vector2Extensions.Average(Vector2[])","Zigurous.Math.Vector2Extensions.Ceil(Vector2@)","Zigurous.Math.Vector2Extensions.Ceiled(Vector2)","Zigurous.Math.Vector2Extensions.Clamp(Vector2@,Vector2,Vector2)","Zigurous.Math.Vector2Extensions.Clamped(Vector2,Vector2,Vector2)","Zigurous.Math.Vector2Extensions.Floor(Vector2@)","Zigurous.Math.Vector2Extensions.Floored(Vector2)","Zigurous.Math.Vector2Extensions.IsEqualTo(Vector2,Vector2,System.Single)","Zigurous.Math.Vector2Extensions.IsZero(Vector2,System.Single)","Zigurous.Math.Vector2Extensions.Round(Vector2@)","Zigurous.Math.Vector2Extensions.Rounded(Vector2)","Zigurous.Math.Vector2Extensions.SetUniform(Vector2@,System.Single)","Zigurous.Math.Vector2Extensions.SetUniformly(Vector2,System.Single)","Zigurous.Math.Vector2Extensions.Wrap(Vector2@,Vector2,Vector2)","Zigurous.Math.Vector2Extensions.Wrapped(Vector2,Vector2,Vector2)"],"id":"Vector2Extensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"Vector2Extensions","nameWithType":"Vector2Extensions","namespace":"Zigurous.Math","parent":"Zigurous.Math","remarks":null,"summary":"\nExtension methods for Vector2.\n","syntax":{"content":"public static class Vector2Extensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Math.Vector2Extensions"},{"children":null,"id":"Abs(Vector2)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Abs(Vector2)","nameWithType":"Vector2Extensions.Abs(Vector2)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector2Extensions","remarks":null,"summary":"\nReturns the absolute value of the vector.\n","syntax":{"content":"public static Vector2 Abs(this Vector2 vector)","parameters":[{"description":"The vector to return the absolute of.","id":"vector","type":"Global.Vector2"}],"return":{"description":"A new vector of the absolute value.","type":"Global.Vector2"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector2Extensions.Abs(Vector2)"},{"children":null,"id":"Average(Vector2[])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Average(Vector2[])","nameWithType":"Vector2Extensions.Average(Vector2[])","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector2Extensions","remarks":null,"summary":"\nCalculates the average of the vectors.\n","syntax":{"content":"public static Vector2 Average(this Vector2[] vectors)","parameters":[{"description":"The vectors to return the average of.","id":"vectors","type":"Global.Vector2[]"}],"return":{"description":"A new vector of the average.","type":"Global.Vector2"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector2Extensions.Average(Vector2[])"},{"children":null,"id":"Ceil(Vector2@)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Ceil(ref Vector2)","nameWithType":"Vector2Extensions.Ceil(ref Vector2)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector2Extensions","remarks":null,"summary":"\nRounds the vector up to the nearest whole number.\n","syntax":{"content":"public static void Ceil(this ref Vector2 vector)","parameters":[{"description":"The vector to round.","id":"vector","type":"Global.Vector2"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector2Extensions.Ceil(Vector2@)"},{"children":null,"id":"Ceiled(Vector2)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Ceiled(Vector2)","nameWithType":"Vector2Extensions.Ceiled(Vector2)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector2Extensions","remarks":null,"summary":"\nRounds the vector up to the nearest whole number.\n","syntax":{"content":"public static Vector2 Ceiled(this Vector2 vector)","parameters":[{"description":"The vector to round.","id":"vector","type":"Global.Vector2"}],"return":{"description":"A new rounded vector.","type":"Global.Vector2"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector2Extensions.Ceiled(Vector2)"},{"children":null,"id":"Clamp(Vector2@,Vector2,Vector2)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clamp(ref Vector2, Vector2, Vector2)","nameWithType":"Vector2Extensions.Clamp(ref Vector2, Vector2, Vector2)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector2Extensions","remarks":null,"summary":"\nClamps the vector to the range [min..max].\n","syntax":{"content":"public static void Clamp(this ref Vector2 vector, Vector2 min, Vector2 max)","parameters":[{"description":"The vector to clamp.","id":"vector","type":"Global.Vector2"},{"description":"The minimum value.","id":"min","type":"Global.Vector2"},{"description":"The maximum value.","id":"max","type":"Global.Vector2"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector2Extensions.Clamp(Vector2@,Vector2,Vector2)"},{"children":null,"id":"Clamped(Vector2,Vector2,Vector2)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clamped(Vector2, Vector2, Vector2)","nameWithType":"Vector2Extensions.Clamped(Vector2, Vector2, Vector2)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector2Extensions","remarks":null,"summary":"\nClamps the vector to the range [min..max].\n","syntax":{"content":"public static Vector2 Clamped(this Vector2 vector, Vector2 min, Vector2 max)","parameters":[{"description":"The vector to clamp.","id":"vector","type":"Global.Vector2"},{"description":"The minimum value.","id":"min","type":"Global.Vector2"},{"description":"The maximum value.","id":"max","type":"Global.Vector2"}],"return":{"description":"A new clamped vector.","type":"Global.Vector2"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector2Extensions.Clamped(Vector2,Vector2,Vector2)"},{"children":null,"id":"Floor(Vector2@)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Floor(ref Vector2)","nameWithType":"Vector2Extensions.Floor(ref Vector2)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector2Extensions","remarks":null,"summary":"\nRounds the vector down to the nearest whole number.\n","syntax":{"content":"public static void Floor(this ref Vector2 vector)","parameters":[{"description":"The vector to round.","id":"vector","type":"Global.Vector2"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector2Extensions.Floor(Vector2@)"},{"children":null,"id":"Floored(Vector2)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Floored(Vector2)","nameWithType":"Vector2Extensions.Floored(Vector2)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector2Extensions","remarks":null,"summary":"\nRounds the vector down to the nearest whole number.\n","syntax":{"content":"public static Vector2 Floored(this Vector2 vector)","parameters":[{"description":"The vector to round.","id":"vector","type":"Global.Vector2"}],"return":{"description":"A new rounded vector.","type":"Global.Vector2"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector2Extensions.Floored(Vector2)"},{"children":null,"id":"IsEqualTo(Vector2,Vector2,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsEqualTo(Vector2, Vector2, Single)","nameWithType":"Vector2Extensions.IsEqualTo(Vector2, Vector2, Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector2Extensions","remarks":null,"summary":"\nChecks for equality with another vector given a margin of error\nspecified by an epsilon.\n","syntax":{"content":"public static bool IsEqualTo(this Vector2 lhs, Vector2 rhs, float epsilon = 1.401298E-45F)","parameters":[{"description":"The left-hand side of the equality check.","id":"lhs","type":"Global.Vector2"},{"description":"The right-hand side of the equality check.","id":"rhs","type":"Global.Vector2"},{"description":null,"id":"epsilon","type":"System.Single"}],"return":{"description":"True if the values are equal.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector2Extensions.IsEqualTo(Vector2,Vector2,System.Single)"},{"children":null,"id":"IsZero(Vector2,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsZero(Vector2, Single)","nameWithType":"Vector2Extensions.IsZero(Vector2, Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector2Extensions","remarks":null,"summary":"\nChecks if the vector is zero given a margin of error specified by\nan epsilon.\n","syntax":{"content":"public static bool IsZero(this Vector2 vector, float epsilon = 1.401298E-45F)","parameters":[{"description":"The vector to check.","id":"vector","type":"Global.Vector2"},{"description":"The margin of error.","id":"epsilon","type":"System.Single"}],"return":{"description":"True if the vector is considered zero.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector2Extensions.IsZero(Vector2,System.Single)"},{"children":null,"id":"Round(Vector2@)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Round(ref Vector2)","nameWithType":"Vector2Extensions.Round(ref Vector2)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector2Extensions","remarks":null,"summary":"\nRounds the vector to the nearest whole number.\n","syntax":{"content":"public static void Round(this ref Vector2 vector)","parameters":[{"description":"The vector to round.","id":"vector","type":"Global.Vector2"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector2Extensions.Round(Vector2@)"},{"children":null,"id":"Rounded(Vector2)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Rounded(Vector2)","nameWithType":"Vector2Extensions.Rounded(Vector2)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector2Extensions","remarks":null,"summary":"\nRounds the vector to the nearest whole number.\n","syntax":{"content":"public static Vector2 Rounded(this Vector2 vector)","parameters":[{"description":"The vector to round.","id":"vector","type":"Global.Vector2"}],"return":{"description":"A new rounded vector.","type":"Global.Vector2"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector2Extensions.Rounded(Vector2)"},{"children":null,"id":"SetUniform(Vector2@,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SetUniform(ref Vector2, Single)","nameWithType":"Vector2Extensions.SetUniform(ref Vector2, Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector2Extensions","remarks":null,"summary":"\nSets all components of the vector to the given value.\n","syntax":{"content":"public static void SetUniform(this ref Vector2 vector, float value)","parameters":[{"description":"The vector to set.","id":"vector","type":"Global.Vector2"},{"description":"The uniform component value.","id":"value","type":"System.Single"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector2Extensions.SetUniform(Vector2@,System.Single)"},{"children":null,"id":"SetUniformly(Vector2,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SetUniformly(Vector2, Single)","nameWithType":"Vector2Extensions.SetUniformly(Vector2, Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector2Extensions","remarks":null,"summary":"\nSets all components of the vector to the given value.\n","syntax":{"content":"public static Vector2 SetUniformly(this Vector2 vector, float value)","parameters":[{"description":"The vector to set.","id":"vector","type":"Global.Vector2"},{"description":"The uniform component value.","id":"value","type":"System.Single"}],"return":{"description":"A new vector with the uniform component value.","type":"Global.Vector2"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector2Extensions.SetUniformly(Vector2,System.Single)"},{"children":null,"id":"Wrap(Vector2@,Vector2,Vector2)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Wrap(ref Vector2, Vector2, Vector2)","nameWithType":"Vector2Extensions.Wrap(ref Vector2, Vector2, Vector2)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector2Extensions","remarks":null,"summary":"\nWraps the vector to the range [min..max].\n","syntax":{"content":"public static void Wrap(this ref Vector2 vector, Vector2 min, Vector2 max)","parameters":[{"description":"The vector to wrap.","id":"vector","type":"Global.Vector2"},{"description":"The minimum value.","id":"min","type":"Global.Vector2"},{"description":"The maximum value.","id":"max","type":"Global.Vector2"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector2Extensions.Wrap(Vector2@,Vector2,Vector2)"},{"children":null,"id":"Wrapped(Vector2,Vector2,Vector2)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Wrapped(Vector2, Vector2, Vector2)","nameWithType":"Vector2Extensions.Wrapped(Vector2, Vector2, Vector2)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector2Extensions","remarks":null,"summary":"\nWraps the vector to the range [min..max].\n","syntax":{"content":"public static Vector2 Wrapped(this Vector2 vector, Vector2 min, Vector2 max)","parameters":[{"description":"The vector to wrap.","id":"vector","type":"Global.Vector2"},{"description":"The minimum value.","id":"min","type":"Global.Vector2"},{"description":"The maximum value.","id":"max","type":"Global.Vector2"}],"return":{"description":"A new wrapped vector.","type":"Global.Vector2"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector2Extensions.Wrapped(Vector2,Vector2,Vector2)"}]},{"items":[{"children":["Zigurous.Math.Vector2IntExtensions.Abs(Vector2Int)","Zigurous.Math.Vector2IntExtensions.Average(Vector2Int[])","Zigurous.Math.Vector2IntExtensions.Clamp(Vector2Int@,Vector2Int,Vector2Int)","Zigurous.Math.Vector2IntExtensions.Clamped(Vector2Int,Vector2Int,Vector2Int)","Zigurous.Math.Vector2IntExtensions.SetUniform(Vector2Int@,System.Int32)","Zigurous.Math.Vector2IntExtensions.SetUniformly(Vector2Int,System.Int32)","Zigurous.Math.Vector2IntExtensions.Wrap(Vector2Int@,Vector2Int,Vector2Int)","Zigurous.Math.Vector2IntExtensions.Wrapped(Vector2Int,Vector2Int,Vector2Int)"],"id":"Vector2IntExtensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"Vector2IntExtensions","nameWithType":"Vector2IntExtensions","namespace":"Zigurous.Math","parent":"Zigurous.Math","remarks":null,"summary":"\nExtension methods for Vector2Int.\n","syntax":{"content":"public static class Vector2IntExtensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Math.Vector2IntExtensions"},{"children":null,"id":"Abs(Vector2Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Abs(Vector2Int)","nameWithType":"Vector2IntExtensions.Abs(Vector2Int)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector2IntExtensions","remarks":null,"summary":"\nReturns the absolute value of the vector.\n","syntax":{"content":"public static Vector2Int Abs(this Vector2Int vector)","parameters":[{"description":"The vector to return the absolute of.","id":"vector","type":"Global.Vector2Int"}],"return":{"description":"A new vector of the absolute value.","type":"Global.Vector2Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector2IntExtensions.Abs(Vector2Int)"},{"children":null,"id":"Average(Vector2Int[])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Average(Vector2Int[])","nameWithType":"Vector2IntExtensions.Average(Vector2Int[])","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector2IntExtensions","remarks":null,"summary":"\nCalculates the average of the vectors.\n","syntax":{"content":"public static Vector2Int Average(this Vector2Int[] vectors)","parameters":[{"description":"The vectors to return the average of.","id":"vectors","type":"Global.Vector2Int[]"}],"return":{"description":"A new vector of the average.","type":"Global.Vector2Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector2IntExtensions.Average(Vector2Int[])"},{"children":null,"id":"Clamp(Vector2Int@,Vector2Int,Vector2Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clamp(ref Vector2Int, Vector2Int, Vector2Int)","nameWithType":"Vector2IntExtensions.Clamp(ref Vector2Int, Vector2Int, Vector2Int)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector2IntExtensions","remarks":null,"summary":"\nClamps the vector to the range [min..max].\n","syntax":{"content":"public static void Clamp(this ref Vector2Int vector, Vector2Int min, Vector2Int max)","parameters":[{"description":"The vector to clamp.","id":"vector","type":"Global.Vector2Int"},{"description":"The minimum value.","id":"min","type":"Global.Vector2Int"},{"description":"The maximum value.","id":"max","type":"Global.Vector2Int"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector2IntExtensions.Clamp(Vector2Int@,Vector2Int,Vector2Int)"},{"children":null,"id":"Clamped(Vector2Int,Vector2Int,Vector2Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clamped(Vector2Int, Vector2Int, Vector2Int)","nameWithType":"Vector2IntExtensions.Clamped(Vector2Int, Vector2Int, Vector2Int)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector2IntExtensions","remarks":null,"summary":"\nClamps the vector to the range [min..max].\n","syntax":{"content":"public static Vector2Int Clamped(this Vector2Int vector, Vector2Int min, Vector2Int max)","parameters":[{"description":"The vector to clamp.","id":"vector","type":"Global.Vector2Int"},{"description":"The minimum value.","id":"min","type":"Global.Vector2Int"},{"description":"The maximum value.","id":"max","type":"Global.Vector2Int"}],"return":{"description":"A new clamped vector.","type":"Global.Vector2Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector2IntExtensions.Clamped(Vector2Int,Vector2Int,Vector2Int)"},{"children":null,"id":"SetUniform(Vector2Int@,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SetUniform(ref Vector2Int, Int32)","nameWithType":"Vector2IntExtensions.SetUniform(ref Vector2Int, Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector2IntExtensions","remarks":null,"summary":"\nSets all components of the vector to the given value.\n","syntax":{"content":"public static void SetUniform(this ref Vector2Int vector, int value)","parameters":[{"description":"The vector to set.","id":"vector","type":"Global.Vector2Int"},{"description":"The uniform component value.","id":"value","type":"System.Int32"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector2IntExtensions.SetUniform(Vector2Int@,System.Int32)"},{"children":null,"id":"SetUniformly(Vector2Int,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SetUniformly(Vector2Int, Int32)","nameWithType":"Vector2IntExtensions.SetUniformly(Vector2Int, Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector2IntExtensions","remarks":null,"summary":"\nSets all components of the vector to the given value.\n","syntax":{"content":"public static Vector2Int SetUniformly(this Vector2Int vector, int value)","parameters":[{"description":"The vector to set.","id":"vector","type":"Global.Vector2Int"},{"description":"The uniform component value.","id":"value","type":"System.Int32"}],"return":{"description":"A new vector with the uniform component value.","type":"Global.Vector2Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector2IntExtensions.SetUniformly(Vector2Int,System.Int32)"},{"children":null,"id":"Wrap(Vector2Int@,Vector2Int,Vector2Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Wrap(ref Vector2Int, Vector2Int, Vector2Int)","nameWithType":"Vector2IntExtensions.Wrap(ref Vector2Int, Vector2Int, Vector2Int)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector2IntExtensions","remarks":null,"summary":"\nWraps the vector to the range [min..max].\n","syntax":{"content":"public static void Wrap(this ref Vector2Int vector, Vector2Int min, Vector2Int max)","parameters":[{"description":"The vector to wrap.","id":"vector","type":"Global.Vector2Int"},{"description":"The minimum value.","id":"min","type":"Global.Vector2Int"},{"description":"The maximum value.","id":"max","type":"Global.Vector2Int"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector2IntExtensions.Wrap(Vector2Int@,Vector2Int,Vector2Int)"},{"children":null,"id":"Wrapped(Vector2Int,Vector2Int,Vector2Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Wrapped(Vector2Int, Vector2Int, Vector2Int)","nameWithType":"Vector2IntExtensions.Wrapped(Vector2Int, Vector2Int, Vector2Int)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector2IntExtensions","remarks":null,"summary":"\nWraps the vector to the range [min..max].\n","syntax":{"content":"public static Vector2Int Wrapped(this Vector2Int vector, Vector2Int min, Vector2Int max)","parameters":[{"description":"The vector to wrap.","id":"vector","type":"Global.Vector2Int"},{"description":"The minimum value.","id":"min","type":"Global.Vector2Int"},{"description":"The maximum value.","id":"max","type":"Global.Vector2Int"}],"return":{"description":"A new wrapped vector.","type":"Global.Vector2Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector2IntExtensions.Wrapped(Vector2Int,Vector2Int,Vector2Int)"}]},{"items":[{"children":["Zigurous.Math.Vector3Extensions.Abs(Vector3)","Zigurous.Math.Vector3Extensions.Average(Vector3[])","Zigurous.Math.Vector3Extensions.Ceil(Vector3@)","Zigurous.Math.Vector3Extensions.Ceiled(Vector3)","Zigurous.Math.Vector3Extensions.Clamp(Vector3@,Vector3,Vector3)","Zigurous.Math.Vector3Extensions.Clamped(Vector3,Vector3,Vector3)","Zigurous.Math.Vector3Extensions.Floor(Vector3@)","Zigurous.Math.Vector3Extensions.Floored(Vector3)","Zigurous.Math.Vector3Extensions.IsEqualTo(Vector3,Vector3,System.Single)","Zigurous.Math.Vector3Extensions.IsZero(Vector3,System.Single)","Zigurous.Math.Vector3Extensions.Round(Vector3@)","Zigurous.Math.Vector3Extensions.Rounded(Vector3)","Zigurous.Math.Vector3Extensions.SetUniform(Vector3@,System.Single)","Zigurous.Math.Vector3Extensions.SetUniformly(Vector3,System.Single)","Zigurous.Math.Vector3Extensions.Wrap(Vector3@,Vector3,Vector3)","Zigurous.Math.Vector3Extensions.Wrapped(Vector3,Vector3,Vector3)"],"id":"Vector3Extensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"Vector3Extensions","nameWithType":"Vector3Extensions","namespace":"Zigurous.Math","parent":"Zigurous.Math","remarks":null,"summary":"\nExtension methods for Vector3.\n","syntax":{"content":"public static class Vector3Extensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Math.Vector3Extensions"},{"children":null,"id":"Abs(Vector3)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Abs(Vector3)","nameWithType":"Vector3Extensions.Abs(Vector3)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector3Extensions","remarks":null,"summary":"\nReturns the absolute value of the vector.\n","syntax":{"content":"public static Vector3 Abs(this Vector3 vector)","parameters":[{"description":"The vector to return the absolute of.","id":"vector","type":"Global.Vector3"}],"return":{"description":"A new vector of the absolute value.","type":"Global.Vector3"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector3Extensions.Abs(Vector3)"},{"children":null,"id":"Average(Vector3[])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Average(Vector3[])","nameWithType":"Vector3Extensions.Average(Vector3[])","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector3Extensions","remarks":null,"summary":"\nCalculates the average of the vectors.\n","syntax":{"content":"public static Vector3 Average(this Vector3[] vectors)","parameters":[{"description":"The vectors to return the average of.","id":"vectors","type":"Global.Vector3[]"}],"return":{"description":"A new vector of the average.","type":"Global.Vector3"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector3Extensions.Average(Vector3[])"},{"children":null,"id":"Ceil(Vector3@)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Ceil(ref Vector3)","nameWithType":"Vector3Extensions.Ceil(ref Vector3)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector3Extensions","remarks":null,"summary":"\nRounds the vector up to the nearest whole number.\n","syntax":{"content":"public static void Ceil(this ref Vector3 vector)","parameters":[{"description":"The vector to round.","id":"vector","type":"Global.Vector3"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector3Extensions.Ceil(Vector3@)"},{"children":null,"id":"Ceiled(Vector3)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Ceiled(Vector3)","nameWithType":"Vector3Extensions.Ceiled(Vector3)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector3Extensions","remarks":null,"summary":"\nRounds the vector up to the nearest whole number.\n","syntax":{"content":"public static Vector3 Ceiled(this Vector3 vector)","parameters":[{"description":"The vector to round.","id":"vector","type":"Global.Vector3"}],"return":{"description":"A new rounded vector.","type":"Global.Vector3"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector3Extensions.Ceiled(Vector3)"},{"children":null,"id":"Clamp(Vector3@,Vector3,Vector3)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clamp(ref Vector3, Vector3, Vector3)","nameWithType":"Vector3Extensions.Clamp(ref Vector3, Vector3, Vector3)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector3Extensions","remarks":null,"summary":"\nClamps the vector to the range [min..max].\n","syntax":{"content":"public static void Clamp(this ref Vector3 vector, Vector3 min, Vector3 max)","parameters":[{"description":"The vector to clamp.","id":"vector","type":"Global.Vector3"},{"description":"The minimum value.","id":"min","type":"Global.Vector3"},{"description":"The maximum value.","id":"max","type":"Global.Vector3"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector3Extensions.Clamp(Vector3@,Vector3,Vector3)"},{"children":null,"id":"Clamped(Vector3,Vector3,Vector3)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clamped(Vector3, Vector3, Vector3)","nameWithType":"Vector3Extensions.Clamped(Vector3, Vector3, Vector3)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector3Extensions","remarks":null,"summary":"\nClamps the vector to the range [min..max].\n","syntax":{"content":"public static Vector3 Clamped(this Vector3 vector, Vector3 min, Vector3 max)","parameters":[{"description":"The vector to clamp.","id":"vector","type":"Global.Vector3"},{"description":"The minimum value.","id":"min","type":"Global.Vector3"},{"description":"The maximum value.","id":"max","type":"Global.Vector3"}],"return":{"description":"A new clamped vector.","type":"Global.Vector3"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector3Extensions.Clamped(Vector3,Vector3,Vector3)"},{"children":null,"id":"Floor(Vector3@)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Floor(ref Vector3)","nameWithType":"Vector3Extensions.Floor(ref Vector3)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector3Extensions","remarks":null,"summary":"\nRounds the vector down to the nearest whole number.\n","syntax":{"content":"public static void Floor(this ref Vector3 vector)","parameters":[{"description":"The vector to round.","id":"vector","type":"Global.Vector3"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector3Extensions.Floor(Vector3@)"},{"children":null,"id":"Floored(Vector3)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Floored(Vector3)","nameWithType":"Vector3Extensions.Floored(Vector3)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector3Extensions","remarks":null,"summary":"\nRounds the vector down to the nearest whole number.\n","syntax":{"content":"public static Vector3 Floored(this Vector3 vector)","parameters":[{"description":"The vector to round.","id":"vector","type":"Global.Vector3"}],"return":{"description":"A new rounded vector.","type":"Global.Vector3"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector3Extensions.Floored(Vector3)"},{"children":null,"id":"IsEqualTo(Vector3,Vector3,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsEqualTo(Vector3, Vector3, Single)","nameWithType":"Vector3Extensions.IsEqualTo(Vector3, Vector3, Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector3Extensions","remarks":null,"summary":"\nChecks for equality with another vector given a margin of error\nspecified by an epsilon.\n","syntax":{"content":"public static bool IsEqualTo(this Vector3 lhs, Vector3 rhs, float epsilon = 1.401298E-45F)","parameters":[{"description":"The left-hand side of the equality check.","id":"lhs","type":"Global.Vector3"},{"description":"The right-hand side of the equality check.","id":"rhs","type":"Global.Vector3"},{"description":null,"id":"epsilon","type":"System.Single"}],"return":{"description":"True if the values are equal.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector3Extensions.IsEqualTo(Vector3,Vector3,System.Single)"},{"children":null,"id":"IsZero(Vector3,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsZero(Vector3, Single)","nameWithType":"Vector3Extensions.IsZero(Vector3, Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector3Extensions","remarks":null,"summary":"\nChecks if the vector is zero given a margin of error specified by\nan epsilon.\n","syntax":{"content":"public static bool IsZero(this Vector3 vector, float epsilon = 1.401298E-45F)","parameters":[{"description":"The vector to check.","id":"vector","type":"Global.Vector3"},{"description":"The margin of error.","id":"epsilon","type":"System.Single"}],"return":{"description":"True if the vector is considered zero.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector3Extensions.IsZero(Vector3,System.Single)"},{"children":null,"id":"Round(Vector3@)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Round(ref Vector3)","nameWithType":"Vector3Extensions.Round(ref Vector3)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector3Extensions","remarks":null,"summary":"\nRounds the vector to the nearest whole number.\n","syntax":{"content":"public static void Round(this ref Vector3 vector)","parameters":[{"description":"The vector to round.","id":"vector","type":"Global.Vector3"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector3Extensions.Round(Vector3@)"},{"children":null,"id":"Rounded(Vector3)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Rounded(Vector3)","nameWithType":"Vector3Extensions.Rounded(Vector3)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector3Extensions","remarks":null,"summary":"\nRounds the vector to the nearest whole number.\n","syntax":{"content":"public static Vector3 Rounded(this Vector3 vector)","parameters":[{"description":"The vector to round.","id":"vector","type":"Global.Vector3"}],"return":{"description":"A new rounded vector.","type":"Global.Vector3"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector3Extensions.Rounded(Vector3)"},{"children":null,"id":"SetUniform(Vector3@,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SetUniform(ref Vector3, Single)","nameWithType":"Vector3Extensions.SetUniform(ref Vector3, Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector3Extensions","remarks":null,"summary":"\nSets all components of the vector to the given value.\n","syntax":{"content":"public static void SetUniform(this ref Vector3 vector, float value)","parameters":[{"description":"The vector to set.","id":"vector","type":"Global.Vector3"},{"description":"The uniform component value.","id":"value","type":"System.Single"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector3Extensions.SetUniform(Vector3@,System.Single)"},{"children":null,"id":"SetUniformly(Vector3,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SetUniformly(Vector3, Single)","nameWithType":"Vector3Extensions.SetUniformly(Vector3, Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector3Extensions","remarks":null,"summary":"\nSets all components of the vector to the given value.\n","syntax":{"content":"public static Vector3 SetUniformly(this Vector3 vector, float value)","parameters":[{"description":"The vector to set.","id":"vector","type":"Global.Vector3"},{"description":"The uniform component value.","id":"value","type":"System.Single"}],"return":{"description":"A new vector with the uniform component value.","type":"Global.Vector3"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector3Extensions.SetUniformly(Vector3,System.Single)"},{"children":null,"id":"Wrap(Vector3@,Vector3,Vector3)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Wrap(ref Vector3, Vector3, Vector3)","nameWithType":"Vector3Extensions.Wrap(ref Vector3, Vector3, Vector3)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector3Extensions","remarks":null,"summary":"\nWraps the vector to the range [min..max].\n","syntax":{"content":"public static void Wrap(this ref Vector3 vector, Vector3 min, Vector3 max)","parameters":[{"description":"The vector to wrap.","id":"vector","type":"Global.Vector3"},{"description":"The minimum value.","id":"min","type":"Global.Vector3"},{"description":"The maximum value.","id":"max","type":"Global.Vector3"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector3Extensions.Wrap(Vector3@,Vector3,Vector3)"},{"children":null,"id":"Wrapped(Vector3,Vector3,Vector3)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Wrapped(Vector3, Vector3, Vector3)","nameWithType":"Vector3Extensions.Wrapped(Vector3, Vector3, Vector3)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector3Extensions","remarks":null,"summary":"\nWraps the vector to the range [min..max].\n","syntax":{"content":"public static Vector3 Wrapped(this Vector3 vector, Vector3 min, Vector3 max)","parameters":[{"description":"The vector to wrap.","id":"vector","type":"Global.Vector3"},{"description":"The minimum value.","id":"min","type":"Global.Vector3"},{"description":"The maximum value.","id":"max","type":"Global.Vector3"}],"return":{"description":"A new wrapped vector.","type":"Global.Vector3"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector3Extensions.Wrapped(Vector3,Vector3,Vector3)"}]},{"items":[{"children":["Zigurous.Math.Vector3IntExtensions.Abs(Vector3Int)","Zigurous.Math.Vector3IntExtensions.Average(Vector3Int[])","Zigurous.Math.Vector3IntExtensions.Clamp(Vector3Int@,Vector3Int,Vector3Int)","Zigurous.Math.Vector3IntExtensions.Clamped(Vector3Int,Vector3Int,Vector3Int)","Zigurous.Math.Vector3IntExtensions.SetUniform(Vector3Int@,System.Int32)","Zigurous.Math.Vector3IntExtensions.SetUniformly(Vector3Int,System.Int32)","Zigurous.Math.Vector3IntExtensions.Wrap(Vector3Int@,Vector3Int,Vector3Int)","Zigurous.Math.Vector3IntExtensions.Wrapped(Vector3Int,Vector3Int,Vector3Int)"],"id":"Vector3IntExtensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"Vector3IntExtensions","nameWithType":"Vector3IntExtensions","namespace":"Zigurous.Math","parent":"Zigurous.Math","remarks":null,"summary":"\nExtension methods for Vector3Int.\n","syntax":{"content":"public static class Vector3IntExtensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Math.Vector3IntExtensions"},{"children":null,"id":"Abs(Vector3Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Abs(Vector3Int)","nameWithType":"Vector3IntExtensions.Abs(Vector3Int)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector3IntExtensions","remarks":null,"summary":"\nReturns the absolute value of the vector.\n","syntax":{"content":"public static Vector3Int Abs(this Vector3Int vector)","parameters":[{"description":"The vector to return the absolute of.","id":"vector","type":"Global.Vector3Int"}],"return":{"description":"A new vector of the absolute value.","type":"Global.Vector3Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector3IntExtensions.Abs(Vector3Int)"},{"children":null,"id":"Average(Vector3Int[])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Average(Vector3Int[])","nameWithType":"Vector3IntExtensions.Average(Vector3Int[])","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector3IntExtensions","remarks":null,"summary":"\nCalculates the average of the vectors.\n","syntax":{"content":"public static Vector3Int Average(this Vector3Int[] vectors)","parameters":[{"description":"The vectors to return the average of.","id":"vectors","type":"Global.Vector3Int[]"}],"return":{"description":"A new vector of the average.","type":"Global.Vector3Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector3IntExtensions.Average(Vector3Int[])"},{"children":null,"id":"Clamp(Vector3Int@,Vector3Int,Vector3Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clamp(ref Vector3Int, Vector3Int, Vector3Int)","nameWithType":"Vector3IntExtensions.Clamp(ref Vector3Int, Vector3Int, Vector3Int)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector3IntExtensions","remarks":null,"summary":"\nClamps the vector to the range [min..max].\n","syntax":{"content":"public static void Clamp(this ref Vector3Int vector, Vector3Int min, Vector3Int max)","parameters":[{"description":"The vector to clamp.","id":"vector","type":"Global.Vector3Int"},{"description":"The minimum value.","id":"min","type":"Global.Vector3Int"},{"description":"The maximum value.","id":"max","type":"Global.Vector3Int"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector3IntExtensions.Clamp(Vector3Int@,Vector3Int,Vector3Int)"},{"children":null,"id":"Clamped(Vector3Int,Vector3Int,Vector3Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clamped(Vector3Int, Vector3Int, Vector3Int)","nameWithType":"Vector3IntExtensions.Clamped(Vector3Int, Vector3Int, Vector3Int)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector3IntExtensions","remarks":null,"summary":"\nClamps the vector to the range [min..max].\n","syntax":{"content":"public static Vector3Int Clamped(this Vector3Int vector, Vector3Int min, Vector3Int max)","parameters":[{"description":"The vector to clamp.","id":"vector","type":"Global.Vector3Int"},{"description":"The minimum value.","id":"min","type":"Global.Vector3Int"},{"description":"The maximum value.","id":"max","type":"Global.Vector3Int"}],"return":{"description":"A new clamped vector.","type":"Global.Vector3Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector3IntExtensions.Clamped(Vector3Int,Vector3Int,Vector3Int)"},{"children":null,"id":"SetUniform(Vector3Int@,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SetUniform(ref Vector3Int, Int32)","nameWithType":"Vector3IntExtensions.SetUniform(ref Vector3Int, Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector3IntExtensions","remarks":null,"summary":"\nSets all components of the vector to the given value.\n","syntax":{"content":"public static void SetUniform(this ref Vector3Int vector, int value)","parameters":[{"description":"The vector to set.","id":"vector","type":"Global.Vector3Int"},{"description":"The uniform component value.","id":"value","type":"System.Int32"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector3IntExtensions.SetUniform(Vector3Int@,System.Int32)"},{"children":null,"id":"SetUniformly(Vector3Int,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SetUniformly(Vector3Int, Int32)","nameWithType":"Vector3IntExtensions.SetUniformly(Vector3Int, Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector3IntExtensions","remarks":null,"summary":"\nSets all components of the vector to the given value.\n","syntax":{"content":"public static Vector3Int SetUniformly(this Vector3Int vector, int value)","parameters":[{"description":"The vector to set.","id":"vector","type":"Global.Vector3Int"},{"description":"The uniform component value.","id":"value","type":"System.Int32"}],"return":{"description":"A new vector with the uniform component value.","type":"Global.Vector3Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector3IntExtensions.SetUniformly(Vector3Int,System.Int32)"},{"children":null,"id":"Wrap(Vector3Int@,Vector3Int,Vector3Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Wrap(ref Vector3Int, Vector3Int, Vector3Int)","nameWithType":"Vector3IntExtensions.Wrap(ref Vector3Int, Vector3Int, Vector3Int)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector3IntExtensions","remarks":null,"summary":"\nWraps the vector to the range [min..max].\n","syntax":{"content":"public static void Wrap(this ref Vector3Int vector, Vector3Int min, Vector3Int max)","parameters":[{"description":"The vector to wrap.","id":"vector","type":"Global.Vector3Int"},{"description":"The minimum value.","id":"min","type":"Global.Vector3Int"},{"description":"The maximum value.","id":"max","type":"Global.Vector3Int"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector3IntExtensions.Wrap(Vector3Int@,Vector3Int,Vector3Int)"},{"children":null,"id":"Wrapped(Vector3Int,Vector3Int,Vector3Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Wrapped(Vector3Int, Vector3Int, Vector3Int)","nameWithType":"Vector3IntExtensions.Wrapped(Vector3Int, Vector3Int, Vector3Int)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector3IntExtensions","remarks":null,"summary":"\nWraps the vector to the range [min..max].\n","syntax":{"content":"public static Vector3Int Wrapped(this Vector3Int vector, Vector3Int min, Vector3Int max)","parameters":[{"description":"The vector to wrap.","id":"vector","type":"Global.Vector3Int"},{"description":"The minimum value.","id":"min","type":"Global.Vector3Int"},{"description":"The maximum value.","id":"max","type":"Global.Vector3Int"}],"return":{"description":"A new wrapped vector.","type":"Global.Vector3Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector3IntExtensions.Wrapped(Vector3Int,Vector3Int,Vector3Int)"}]},{"items":[{"children":["Zigurous.Math.Vector4Extensions.Abs(Vector4)","Zigurous.Math.Vector4Extensions.Average(Vector4[])","Zigurous.Math.Vector4Extensions.Ceil(Vector4@)","Zigurous.Math.Vector4Extensions.Ceiled(Vector4)","Zigurous.Math.Vector4Extensions.Clamp(Vector4@,Vector4,Vector4)","Zigurous.Math.Vector4Extensions.Clamped(Vector4,Vector4,Vector4)","Zigurous.Math.Vector4Extensions.Floor(Vector4@)","Zigurous.Math.Vector4Extensions.Floored(Vector4)","Zigurous.Math.Vector4Extensions.IsEqualTo(Vector4,Vector4,System.Single)","Zigurous.Math.Vector4Extensions.IsZero(Vector4,System.Single)","Zigurous.Math.Vector4Extensions.Round(Vector4@)","Zigurous.Math.Vector4Extensions.Rounded(Vector4)","Zigurous.Math.Vector4Extensions.SetUniform(Vector4@,System.Single)","Zigurous.Math.Vector4Extensions.SetUniformly(Vector4,System.Single)","Zigurous.Math.Vector4Extensions.Wrap(Vector4@,Vector4,Vector4)","Zigurous.Math.Vector4Extensions.Wrapped(Vector4,Vector4,Vector4)"],"id":"Vector4Extensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"Vector4Extensions","nameWithType":"Vector4Extensions","namespace":"Zigurous.Math","parent":"Zigurous.Math","remarks":null,"summary":"\nExtension methods for Vector4.\n","syntax":{"content":"public static class Vector4Extensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Math.Vector4Extensions"},{"children":null,"id":"Abs(Vector4)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Abs(Vector4)","nameWithType":"Vector4Extensions.Abs(Vector4)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector4Extensions","remarks":null,"summary":"\nReturns the absolute value of the vector.\n","syntax":{"content":"public static Vector4 Abs(this Vector4 vector)","parameters":[{"description":"The vector to return the absolute of.","id":"vector","type":"Global.Vector4"}],"return":{"description":"A new vector of the absolute value.","type":"Global.Vector4"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector4Extensions.Abs(Vector4)"},{"children":null,"id":"Average(Vector4[])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Average(Vector4[])","nameWithType":"Vector4Extensions.Average(Vector4[])","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector4Extensions","remarks":null,"summary":"\nCalculates the average of the vectors.\n","syntax":{"content":"public static Vector4 Average(this Vector4[] vectors)","parameters":[{"description":"The vectors to return the average of.","id":"vectors","type":"Global.Vector4[]"}],"return":{"description":"A new vector of the average.","type":"Global.Vector4"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector4Extensions.Average(Vector4[])"},{"children":null,"id":"Ceil(Vector4@)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Ceil(ref Vector4)","nameWithType":"Vector4Extensions.Ceil(ref Vector4)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector4Extensions","remarks":null,"summary":"\nRounds the vector up to the nearest whole number.\n","syntax":{"content":"public static void Ceil(this ref Vector4 vector)","parameters":[{"description":"The vector to round.","id":"vector","type":"Global.Vector4"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector4Extensions.Ceil(Vector4@)"},{"children":null,"id":"Ceiled(Vector4)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Ceiled(Vector4)","nameWithType":"Vector4Extensions.Ceiled(Vector4)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector4Extensions","remarks":null,"summary":"\nRounds the vector up to the nearest whole number.\n","syntax":{"content":"public static Vector4 Ceiled(this Vector4 vector)","parameters":[{"description":"The vector to round.","id":"vector","type":"Global.Vector4"}],"return":{"description":"A new rounded vector.","type":"Global.Vector4"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector4Extensions.Ceiled(Vector4)"},{"children":null,"id":"Clamp(Vector4@,Vector4,Vector4)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clamp(ref Vector4, Vector4, Vector4)","nameWithType":"Vector4Extensions.Clamp(ref Vector4, Vector4, Vector4)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector4Extensions","remarks":null,"summary":"\nClamps the vector to the range [min..max].\n","syntax":{"content":"public static void Clamp(this ref Vector4 vector, Vector4 min, Vector4 max)","parameters":[{"description":"The vector to clamp.","id":"vector","type":"Global.Vector4"},{"description":"The minimum value.","id":"min","type":"Global.Vector4"},{"description":"The maximum value.","id":"max","type":"Global.Vector4"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector4Extensions.Clamp(Vector4@,Vector4,Vector4)"},{"children":null,"id":"Clamped(Vector4,Vector4,Vector4)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clamped(Vector4, Vector4, Vector4)","nameWithType":"Vector4Extensions.Clamped(Vector4, Vector4, Vector4)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector4Extensions","remarks":null,"summary":"\nClamps the vector to the range [min..max].\n","syntax":{"content":"public static Vector4 Clamped(this Vector4 vector, Vector4 min, Vector4 max)","parameters":[{"description":"The vector to clamp.","id":"vector","type":"Global.Vector4"},{"description":"The minimum value.","id":"min","type":"Global.Vector4"},{"description":"The maximum value.","id":"max","type":"Global.Vector4"}],"return":{"description":"A new clamped vector.","type":"Global.Vector4"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector4Extensions.Clamped(Vector4,Vector4,Vector4)"},{"children":null,"id":"Floor(Vector4@)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Floor(ref Vector4)","nameWithType":"Vector4Extensions.Floor(ref Vector4)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector4Extensions","remarks":null,"summary":"\nRounds the vector down to the nearest whole number.\n","syntax":{"content":"public static void Floor(this ref Vector4 vector)","parameters":[{"description":"The vector to round.","id":"vector","type":"Global.Vector4"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector4Extensions.Floor(Vector4@)"},{"children":null,"id":"Floored(Vector4)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Floored(Vector4)","nameWithType":"Vector4Extensions.Floored(Vector4)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector4Extensions","remarks":null,"summary":"\nRounds the vector down to the nearest whole number.\n","syntax":{"content":"public static Vector4 Floored(this Vector4 vector)","parameters":[{"description":"The vector to round.","id":"vector","type":"Global.Vector4"}],"return":{"description":"A new rounded vector.","type":"Global.Vector4"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector4Extensions.Floored(Vector4)"},{"children":null,"id":"IsEqualTo(Vector4,Vector4,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsEqualTo(Vector4, Vector4, Single)","nameWithType":"Vector4Extensions.IsEqualTo(Vector4, Vector4, Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector4Extensions","remarks":null,"summary":"\nChecks for equality with another vector given a margin of error\nspecified by an epsilon.\n","syntax":{"content":"public static bool IsEqualTo(this Vector4 lhs, Vector4 rhs, float epsilon = 1.401298E-45F)","parameters":[{"description":"The left-hand side of the equality check.","id":"lhs","type":"Global.Vector4"},{"description":"The right-hand side of the equality check.","id":"rhs","type":"Global.Vector4"},{"description":null,"id":"epsilon","type":"System.Single"}],"return":{"description":"True if the values are equal.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector4Extensions.IsEqualTo(Vector4,Vector4,System.Single)"},{"children":null,"id":"IsZero(Vector4,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsZero(Vector4, Single)","nameWithType":"Vector4Extensions.IsZero(Vector4, Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector4Extensions","remarks":null,"summary":"\nChecks if the vector is zero given a margin of error specified by\nan epsilon.\n","syntax":{"content":"public static bool IsZero(this Vector4 vector, float epsilon = 1.401298E-45F)","parameters":[{"description":"The vector to check.","id":"vector","type":"Global.Vector4"},{"description":"The margin of error.","id":"epsilon","type":"System.Single"}],"return":{"description":"True if the vector is considered zero.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector4Extensions.IsZero(Vector4,System.Single)"},{"children":null,"id":"Round(Vector4@)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Round(ref Vector4)","nameWithType":"Vector4Extensions.Round(ref Vector4)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector4Extensions","remarks":null,"summary":"\nRounds the vector to the nearest whole number.\n","syntax":{"content":"public static void Round(this ref Vector4 vector)","parameters":[{"description":"The vector to round.","id":"vector","type":"Global.Vector4"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector4Extensions.Round(Vector4@)"},{"children":null,"id":"Rounded(Vector4)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Rounded(Vector4)","nameWithType":"Vector4Extensions.Rounded(Vector4)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector4Extensions","remarks":null,"summary":"\nRounds the vector to the nearest whole number.\n","syntax":{"content":"public static Vector4 Rounded(this Vector4 vector)","parameters":[{"description":"The vector to round.","id":"vector","type":"Global.Vector4"}],"return":{"description":"A new rounded vector.","type":"Global.Vector4"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector4Extensions.Rounded(Vector4)"},{"children":null,"id":"SetUniform(Vector4@,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SetUniform(ref Vector4, Single)","nameWithType":"Vector4Extensions.SetUniform(ref Vector4, Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector4Extensions","remarks":null,"summary":"\nSets all components of the vector to the given value.\n","syntax":{"content":"public static void SetUniform(this ref Vector4 vector, float value)","parameters":[{"description":"The vector to set.","id":"vector","type":"Global.Vector4"},{"description":"The uniform component value.","id":"value","type":"System.Single"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector4Extensions.SetUniform(Vector4@,System.Single)"},{"children":null,"id":"SetUniformly(Vector4,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SetUniformly(Vector4, Single)","nameWithType":"Vector4Extensions.SetUniformly(Vector4, Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector4Extensions","remarks":null,"summary":"\nSets all components of the vector to the given value.\n","syntax":{"content":"public static Vector4 SetUniformly(this Vector4 vector, float value)","parameters":[{"description":"The vector to set.","id":"vector","type":"Global.Vector4"},{"description":"The uniform component value.","id":"value","type":"System.Single"}],"return":{"description":"A new vector with the uniform component value.","type":"Global.Vector4"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector4Extensions.SetUniformly(Vector4,System.Single)"},{"children":null,"id":"Wrap(Vector4@,Vector4,Vector4)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Wrap(ref Vector4, Vector4, Vector4)","nameWithType":"Vector4Extensions.Wrap(ref Vector4, Vector4, Vector4)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector4Extensions","remarks":null,"summary":"\nWraps the vector to the range [min..max].\n","syntax":{"content":"public static void Wrap(this ref Vector4 vector, Vector4 min, Vector4 max)","parameters":[{"description":"The vector to wrap.","id":"vector","type":"Global.Vector4"},{"description":"The minimum value.","id":"min","type":"Global.Vector4"},{"description":"The maximum value.","id":"max","type":"Global.Vector4"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector4Extensions.Wrap(Vector4@,Vector4,Vector4)"},{"children":null,"id":"Wrapped(Vector4,Vector4,Vector4)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Wrapped(Vector4, Vector4, Vector4)","nameWithType":"Vector4Extensions.Wrapped(Vector4, Vector4, Vector4)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Vector4Extensions","remarks":null,"summary":"\nWraps the vector to the range [min..max].\n","syntax":{"content":"public static Vector4 Wrapped(this Vector4 vector, Vector4 min, Vector4 max)","parameters":[{"description":"The vector to wrap.","id":"vector","type":"Global.Vector4"},{"description":"The minimum value.","id":"min","type":"Global.Vector4"},{"description":"The maximum value.","id":"max","type":"Global.Vector4"}],"return":{"description":"A new wrapped vector.","type":"Global.Vector4"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Vector4Extensions.Wrapped(Vector4,Vector4,Vector4)"}]},{"items":[{"children":["Zigurous.Math.ArrayExtensions","Zigurous.Math.BoundsExtensions","Zigurous.Math.Chance","Zigurous.Math.Chance.Card","Zigurous.Math.Chance.Coin","Zigurous.Math.Chance.Suit","Zigurous.Math.ColliderExtensions","Zigurous.Math.ComparableExtensions","Zigurous.Math.Dice","Zigurous.Math.DoubleEqualityComparer","Zigurous.Math.DoubleExtensions","Zigurous.Math.FloatEqualityComparer","Zigurous.Math.FloatExtensions","Zigurous.Math.IntExtensions","Zigurous.Math.ListExtensions","Zigurous.Math.LongExtensions","Zigurous.Math.NumberAbbreviation","Zigurous.Math.NumberAbbreviationExtensions","Zigurous.Math.Processors","Zigurous.Math.QuaternionExtensions","Zigurous.Math.ShortExtensions","Zigurous.Math.UIntExtensions","Zigurous.Math.Vector2Extensions","Zigurous.Math.Vector2IntExtensions","Zigurous.Math.Vector3Extensions","Zigurous.Math.Vector3IntExtensions","Zigurous.Math.Vector4Extensions"],"id":"Zigurous.Math","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Zigurous.Math","nameWithType":"Zigurous.Math","namespace":null,"parent":null,"remarks":null,"summary":null,"syntax":null,"type":"Namespace","uid":"Zigurous.Math"}]},{"items":[{"children":["Zigurous.Math.Processors.Abs(System.Double)","Zigurous.Math.Processors.Abs(System.Int32)","Zigurous.Math.Processors.Abs(System.Single)","Zigurous.Math.Processors.Abs(Vector2)","Zigurous.Math.Processors.Abs(Vector2Int)","Zigurous.Math.Processors.Abs(Vector3)","Zigurous.Math.Processors.Abs(Vector3Int)","Zigurous.Math.Processors.Abs(Vector4)","Zigurous.Math.Processors.AxisDeadzone(System.Double,System.Double,System.Double)","Zigurous.Math.Processors.AxisDeadzone(System.Single,System.Single,System.Single)","Zigurous.Math.Processors.Ceil(System.Double)","Zigurous.Math.Processors.Ceil(System.Int32)","Zigurous.Math.Processors.Ceil(System.Single)","Zigurous.Math.Processors.Ceil(Vector2)","Zigurous.Math.Processors.Ceil(Vector2Int)","Zigurous.Math.Processors.Ceil(Vector3)","Zigurous.Math.Processors.Ceil(Vector3Int)","Zigurous.Math.Processors.Ceil(Vector4)","Zigurous.Math.Processors.Clamp(System.Double,System.Double,System.Double)","Zigurous.Math.Processors.Clamp(System.Int32,System.Int32,System.Int32)","Zigurous.Math.Processors.Clamp(System.Single,System.Single,System.Single)","Zigurous.Math.Processors.Clamp(Vector2,Vector2,Vector2)","Zigurous.Math.Processors.Clamp(Vector2Int,Vector2Int,Vector2Int)","Zigurous.Math.Processors.Clamp(Vector3,Vector3,Vector3)","Zigurous.Math.Processors.Clamp(Vector3Int,Vector3Int,Vector3Int)","Zigurous.Math.Processors.Clamp(Vector4,Vector4,Vector4)","Zigurous.Math.Processors.Clamp01(System.Double)","Zigurous.Math.Processors.Clamp01(System.Int32)","Zigurous.Math.Processors.Clamp01(System.Single)","Zigurous.Math.Processors.Clamp01(Vector2)","Zigurous.Math.Processors.Clamp01(Vector2Int)","Zigurous.Math.Processors.Clamp01(Vector3)","Zigurous.Math.Processors.Clamp01(Vector3Int)","Zigurous.Math.Processors.Clamp01(Vector4)","Zigurous.Math.Processors.Decay(System.Double,System.Double,System.Double)","Zigurous.Math.Processors.Decay(System.Single,System.Single,System.Single)","Zigurous.Math.Processors.Floor(System.Double)","Zigurous.Math.Processors.Floor(System.Int32)","Zigurous.Math.Processors.Floor(System.Single)","Zigurous.Math.Processors.Floor(Vector2)","Zigurous.Math.Processors.Floor(Vector2Int)","Zigurous.Math.Processors.Floor(Vector3)","Zigurous.Math.Processors.Floor(Vector3Int)","Zigurous.Math.Processors.Floor(Vector4)","Zigurous.Math.Processors.Invert(System.Double)","Zigurous.Math.Processors.Invert(System.Int32)","Zigurous.Math.Processors.Invert(System.Single)","Zigurous.Math.Processors.Invert(Vector2)","Zigurous.Math.Processors.Invert(Vector2,System.Boolean,System.Boolean)","Zigurous.Math.Processors.Invert(Vector2Int)","Zigurous.Math.Processors.Invert(Vector2Int,System.Boolean,System.Boolean)","Zigurous.Math.Processors.Invert(Vector3)","Zigurous.Math.Processors.Invert(Vector3,System.Boolean,System.Boolean,System.Boolean)","Zigurous.Math.Processors.Invert(Vector3Int)","Zigurous.Math.Processors.Invert(Vector3Int,System.Boolean,System.Boolean,System.Boolean)","Zigurous.Math.Processors.Invert(Vector4)","Zigurous.Math.Processors.Invert(Vector4,System.Boolean,System.Boolean,System.Boolean,System.Boolean)","Zigurous.Math.Processors.Normalize(System.Double,System.Double,System.Double,System.Double)","Zigurous.Math.Processors.Normalize(System.Single,System.Single,System.Single,System.Single)","Zigurous.Math.Processors.Normalize(Vector2)","Zigurous.Math.Processors.Normalize(Vector3)","Zigurous.Math.Processors.Normalize(Vector4)","Zigurous.Math.Processors.Round(System.Double)","Zigurous.Math.Processors.Round(System.Int32)","Zigurous.Math.Processors.Round(System.Single)","Zigurous.Math.Processors.Round(Vector2)","Zigurous.Math.Processors.Round(Vector2Int)","Zigurous.Math.Processors.Round(Vector3)","Zigurous.Math.Processors.Round(Vector3Int)","Zigurous.Math.Processors.Round(Vector4)","Zigurous.Math.Processors.Scale(System.Double,System.Double)","Zigurous.Math.Processors.Scale(System.Int32,System.Int32)","Zigurous.Math.Processors.Scale(System.Single,System.Single)","Zigurous.Math.Processors.Scale(Vector2,System.Single)","Zigurous.Math.Processors.Scale(Vector2,System.Single,System.Single)","Zigurous.Math.Processors.Scale(Vector2Int,System.Int32)","Zigurous.Math.Processors.Scale(Vector2Int,System.Int32,System.Int32)","Zigurous.Math.Processors.Scale(Vector3,System.Single)","Zigurous.Math.Processors.Scale(Vector3,System.Single,System.Single,System.Single)","Zigurous.Math.Processors.Scale(Vector3Int,System.Int32)","Zigurous.Math.Processors.Scale(Vector3Int,System.Int32,System.Int32,System.Int32)","Zigurous.Math.Processors.Scale(Vector4,System.Single)","Zigurous.Math.Processors.Scale(Vector4,System.Single,System.Single,System.Single,System.Single)","Zigurous.Math.Processors.StickDeadzone(Vector2,System.Single,System.Single)","Zigurous.Math.Processors.StickDeadzone(Vector3,System.Single,System.Single)","Zigurous.Math.Processors.StickDeadzone(Vector4,System.Single,System.Single)","Zigurous.Math.Processors.Wrap(System.Double,System.Double,System.Double)","Zigurous.Math.Processors.Wrap(System.Int32,System.Int32,System.Int32)","Zigurous.Math.Processors.Wrap(System.Single,System.Single,System.Single)","Zigurous.Math.Processors.Wrap(Vector2,Vector2,Vector2)","Zigurous.Math.Processors.Wrap(Vector2Int,Vector2Int,Vector2Int)","Zigurous.Math.Processors.Wrap(Vector3,Vector3,Vector3)","Zigurous.Math.Processors.Wrap(Vector3Int,Vector3Int,Vector3Int)","Zigurous.Math.Processors.Wrap(Vector4,Vector4,Vector4)","Zigurous.Math.Processors.Wrap01(System.Double)","Zigurous.Math.Processors.Wrap01(System.Int32)","Zigurous.Math.Processors.Wrap01(System.Single)","Zigurous.Math.Processors.Wrap01(Vector2)","Zigurous.Math.Processors.Wrap01(Vector2Int)","Zigurous.Math.Processors.Wrap01(Vector3)","Zigurous.Math.Processors.Wrap01(Vector3Int)","Zigurous.Math.Processors.Wrap01(Vector4)"],"id":"Processors","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"Processors","nameWithType":"Processors","namespace":"Zigurous.Math","parent":"Zigurous.Math","remarks":null,"summary":"\nFunctions for processing input values.\n","syntax":{"content":"public static class Processors","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Math.Processors"},{"children":null,"id":"Abs(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Abs(Single)","nameWithType":"Processors.Abs(Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nReturns the absolute value of the input.\n","syntax":{"content":"public static float Abs(float input)","parameters":[{"description":"The input value to absolute.","id":"input","type":"System.Single"}],"return":{"description":"The absolute value of the input.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Abs(System.Single)"},{"children":null,"id":"Abs(System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Abs(Double)","nameWithType":"Processors.Abs(Double)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nReturns the absolute value of the input.\n","syntax":{"content":"public static double Abs(double input)","parameters":[{"description":"The input value to absolute.","id":"input","type":"System.Double"}],"return":{"description":"The absolute value of the input.","type":"System.Double"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Abs(System.Double)"},{"children":null,"id":"Abs(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Abs(Int32)","nameWithType":"Processors.Abs(Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nReturns the absolute value of the input.\n","syntax":{"content":"public static int Abs(int input)","parameters":[{"description":"The input value to absolute.","id":"input","type":"System.Int32"}],"return":{"description":"The absolute value of the input.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Abs(System.Int32)"},{"children":null,"id":"Abs(Vector2)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Abs(Vector2)","nameWithType":"Processors.Abs(Vector2)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nReturns the absolute value of the input.\n","syntax":{"content":"public static Vector2 Abs(Vector2 input)","parameters":[{"description":"The input value to absolute.","id":"input","type":"Global.Vector2"}],"return":{"description":"The absolute value of the input.","type":"Global.Vector2"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Abs(Vector2)"},{"children":null,"id":"Abs(Vector2Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Abs(Vector2Int)","nameWithType":"Processors.Abs(Vector2Int)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nReturns the absolute value of the input.\n","syntax":{"content":"public static Vector2Int Abs(Vector2Int input)","parameters":[{"description":"The input value to absolute.","id":"input","type":"Global.Vector2Int"}],"return":{"description":"The absolute value of the input.","type":"Global.Vector2Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Abs(Vector2Int)"},{"children":null,"id":"Abs(Vector3)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Abs(Vector3)","nameWithType":"Processors.Abs(Vector3)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nReturns the absolute value of the input.\n","syntax":{"content":"public static Vector3 Abs(Vector3 input)","parameters":[{"description":"The input value to absolute.","id":"input","type":"Global.Vector3"}],"return":{"description":"The absolute value of the input.","type":"Global.Vector3"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Abs(Vector3)"},{"children":null,"id":"Abs(Vector3Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Abs(Vector3Int)","nameWithType":"Processors.Abs(Vector3Int)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nReturns the absolute value of the input.\n","syntax":{"content":"public static Vector3Int Abs(Vector3Int input)","parameters":[{"description":"The input value to absolute.","id":"input","type":"Global.Vector3Int"}],"return":{"description":"The absolute value of the input.","type":"Global.Vector3Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Abs(Vector3Int)"},{"children":null,"id":"Abs(Vector4)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Abs(Vector4)","nameWithType":"Processors.Abs(Vector4)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nReturns the absolute value of the input.\n","syntax":{"content":"public static Vector4 Abs(Vector4 input)","parameters":[{"description":"The input value to absolute.","id":"input","type":"Global.Vector4"}],"return":{"description":"The absolute value of the input.","type":"Global.Vector4"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Abs(Vector4)"},{"children":null,"id":"AxisDeadzone(System.Single,System.Single,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"AxisDeadzone(Single, Single, Single)","nameWithType":"Processors.AxisDeadzone(Single, Single, Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nAn axis deadzone scales the input such that any value with an\nabsolute value smaller than the min is 0, and any value with an\nabsolute value larger than the max is 1 or -1.\n","syntax":{"content":"public static float AxisDeadzone(float input, float min = 0.125F, float max = 0.925F)","parameters":[{"description":"The input value to scale.","id":"input","type":"System.Single"},{"description":"The lower deadzone threshold.","id":"min","type":"System.Single"},{"description":"The upper deadzone threshold.","id":"max","type":"System.Single"}],"return":{"description":"The scaled input value.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.AxisDeadzone(System.Single,System.Single,System.Single)"},{"children":null,"id":"AxisDeadzone(System.Double,System.Double,System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"AxisDeadzone(Double, Double, Double)","nameWithType":"Processors.AxisDeadzone(Double, Double, Double)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nAn axis deadzone scales the input such that any value with an\nabsolute value smaller than the min is 0, and any value with an\nabsolute value larger than the max is 1 or -1.\n","syntax":{"content":"public static double AxisDeadzone(double input, double min = 0.125, double max = 0.925)","parameters":[{"description":"The input value to scale.","id":"input","type":"System.Double"},{"description":"The lower deadzone threshold.","id":"min","type":"System.Double"},{"description":"The upper deadzone threshold.","id":"max","type":"System.Double"}],"return":{"description":"The scaled input value.","type":"System.Double"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.AxisDeadzone(System.Double,System.Double,System.Double)"},{"children":null,"id":"Ceil(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Ceil(Single)","nameWithType":"Processors.Ceil(Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nRounds the input up to the nearest whole number.\n","syntax":{"content":"public static float Ceil(float input)","parameters":[{"description":"The input value to round.","id":"input","type":"System.Single"}],"return":{"description":"The rounded input value.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Ceil(System.Single)"},{"children":null,"id":"Ceil(System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Ceil(Double)","nameWithType":"Processors.Ceil(Double)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nRounds the input up to the nearest whole number.\n","syntax":{"content":"public static double Ceil(double input)","parameters":[{"description":"The input value to round.","id":"input","type":"System.Double"}],"return":{"description":"The rounded input value.","type":"System.Double"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Ceil(System.Double)"},{"children":null,"id":"Ceil(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Ceil(Int32)","nameWithType":"Processors.Ceil(Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nRounds the input up to the nearest whole number.\n","syntax":{"content":"public static int Ceil(int input)","parameters":[{"description":"The input value to round.","id":"input","type":"System.Int32"}],"return":{"description":"The rounded input value.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Ceil(System.Int32)"},{"children":null,"id":"Ceil(Vector2)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Ceil(Vector2)","nameWithType":"Processors.Ceil(Vector2)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nRounds the input up to the nearest whole number.\n","syntax":{"content":"public static Vector2 Ceil(Vector2 input)","parameters":[{"description":"The input value to round.","id":"input","type":"Global.Vector2"}],"return":{"description":"The rounded input value.","type":"Global.Vector2"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Ceil(Vector2)"},{"children":null,"id":"Ceil(Vector2Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Ceil(Vector2Int)","nameWithType":"Processors.Ceil(Vector2Int)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nRounds the input up to the nearest whole number.\n","syntax":{"content":"public static Vector2Int Ceil(Vector2Int input)","parameters":[{"description":"The input value to round.","id":"input","type":"Global.Vector2Int"}],"return":{"description":"The rounded input value.","type":"Global.Vector2Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Ceil(Vector2Int)"},{"children":null,"id":"Ceil(Vector3)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Ceil(Vector3)","nameWithType":"Processors.Ceil(Vector3)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nRounds the input up to the nearest whole number.\n","syntax":{"content":"public static Vector3 Ceil(Vector3 input)","parameters":[{"description":"The input value to round.","id":"input","type":"Global.Vector3"}],"return":{"description":"The rounded input value.","type":"Global.Vector3"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Ceil(Vector3)"},{"children":null,"id":"Ceil(Vector3Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Ceil(Vector3Int)","nameWithType":"Processors.Ceil(Vector3Int)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nRounds the input up to the nearest whole number.\n","syntax":{"content":"public static Vector3Int Ceil(Vector3Int input)","parameters":[{"description":"The input value to round.","id":"input","type":"Global.Vector3Int"}],"return":{"description":"The rounded input value.","type":"Global.Vector3Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Ceil(Vector3Int)"},{"children":null,"id":"Ceil(Vector4)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Ceil(Vector4)","nameWithType":"Processors.Ceil(Vector4)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nRounds the input up to the nearest whole number.\n","syntax":{"content":"public static Vector4 Ceil(Vector4 input)","parameters":[{"description":"The input value to round.","id":"input","type":"Global.Vector4"}],"return":{"description":"The rounded input value.","type":"Global.Vector4"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Ceil(Vector4)"},{"children":null,"id":"Clamp(System.Single,System.Single,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clamp(Single, Single, Single)","nameWithType":"Processors.Clamp(Single, Single, Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nClamps the input to the range [min..max].\n","syntax":{"content":"public static float Clamp(float input, float min, float max)","parameters":[{"description":"The input value to clamp.","id":"input","type":"System.Single"},{"description":"The minimum value.","id":"min","type":"System.Single"},{"description":"The maximum value.","id":"max","type":"System.Single"}],"return":{"description":"The clamped input value.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Clamp(System.Single,System.Single,System.Single)"},{"children":null,"id":"Clamp(System.Double,System.Double,System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clamp(Double, Double, Double)","nameWithType":"Processors.Clamp(Double, Double, Double)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nClamps the input to the range [min..max].\n","syntax":{"content":"public static double Clamp(double input, double min, double max)","parameters":[{"description":"The input value to clamp.","id":"input","type":"System.Double"},{"description":"The minimum value.","id":"min","type":"System.Double"},{"description":"The maximum value.","id":"max","type":"System.Double"}],"return":{"description":"The clamped input value.","type":"System.Double"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Clamp(System.Double,System.Double,System.Double)"},{"children":null,"id":"Clamp(System.Int32,System.Int32,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clamp(Int32, Int32, Int32)","nameWithType":"Processors.Clamp(Int32, Int32, Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nClamps the input to the range [min..max].\n","syntax":{"content":"public static int Clamp(int input, int min, int max)","parameters":[{"description":"The input value to clamp.","id":"input","type":"System.Int32"},{"description":"The minimum value.","id":"min","type":"System.Int32"},{"description":"The maximum value.","id":"max","type":"System.Int32"}],"return":{"description":"The clamped input value.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Clamp(System.Int32,System.Int32,System.Int32)"},{"children":null,"id":"Clamp(Vector2,Vector2,Vector2)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clamp(Vector2, Vector2, Vector2)","nameWithType":"Processors.Clamp(Vector2, Vector2, Vector2)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nClamps the input to the range [min..max].\n","syntax":{"content":"public static Vector2 Clamp(Vector2 input, Vector2 min, Vector2 max)","parameters":[{"description":"The input value to clamp.","id":"input","type":"Global.Vector2"},{"description":"The minimum value.","id":"min","type":"Global.Vector2"},{"description":"The maximum value.","id":"max","type":"Global.Vector2"}],"return":{"description":"The clamped input value.","type":"Global.Vector2"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Clamp(Vector2,Vector2,Vector2)"},{"children":null,"id":"Clamp(Vector2Int,Vector2Int,Vector2Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clamp(Vector2Int, Vector2Int, Vector2Int)","nameWithType":"Processors.Clamp(Vector2Int, Vector2Int, Vector2Int)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nClamps the input to the range [min..max].\n","syntax":{"content":"public static Vector2Int Clamp(Vector2Int input, Vector2Int min, Vector2Int max)","parameters":[{"description":"The input value to clamp.","id":"input","type":"Global.Vector2Int"},{"description":"The minimum value.","id":"min","type":"Global.Vector2Int"},{"description":"The maximum value.","id":"max","type":"Global.Vector2Int"}],"return":{"description":"The clamped input value.","type":"Global.Vector2Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Clamp(Vector2Int,Vector2Int,Vector2Int)"},{"children":null,"id":"Clamp(Vector3,Vector3,Vector3)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clamp(Vector3, Vector3, Vector3)","nameWithType":"Processors.Clamp(Vector3, Vector3, Vector3)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nClamps the input to the range [min..max].\n","syntax":{"content":"public static Vector3 Clamp(Vector3 input, Vector3 min, Vector3 max)","parameters":[{"description":"The input value to clamp.","id":"input","type":"Global.Vector3"},{"description":"The minimum value.","id":"min","type":"Global.Vector3"},{"description":"The maximum value.","id":"max","type":"Global.Vector3"}],"return":{"description":"The clamped input value.","type":"Global.Vector3"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Clamp(Vector3,Vector3,Vector3)"},{"children":null,"id":"Clamp(Vector3Int,Vector3Int,Vector3Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clamp(Vector3Int, Vector3Int, Vector3Int)","nameWithType":"Processors.Clamp(Vector3Int, Vector3Int, Vector3Int)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nClamps the input to the range [min..max].\n","syntax":{"content":"public static Vector3Int Clamp(Vector3Int input, Vector3Int min, Vector3Int max)","parameters":[{"description":"The input value to clamp.","id":"input","type":"Global.Vector3Int"},{"description":"The minimum value.","id":"min","type":"Global.Vector3Int"},{"description":"The maximum value.","id":"max","type":"Global.Vector3Int"}],"return":{"description":"The clamped input value.","type":"Global.Vector3Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Clamp(Vector3Int,Vector3Int,Vector3Int)"},{"children":null,"id":"Clamp(Vector4,Vector4,Vector4)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clamp(Vector4, Vector4, Vector4)","nameWithType":"Processors.Clamp(Vector4, Vector4, Vector4)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nClamps the input to the range [min..max].\n","syntax":{"content":"public static Vector4 Clamp(Vector4 input, Vector4 min, Vector4 max)","parameters":[{"description":"The input value to clamp.","id":"input","type":"Global.Vector4"},{"description":"The minimum value.","id":"min","type":"Global.Vector4"},{"description":"The maximum value.","id":"max","type":"Global.Vector4"}],"return":{"description":"The clamped input value.","type":"Global.Vector4"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Clamp(Vector4,Vector4,Vector4)"},{"children":null,"id":"Clamp01(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clamp01(Single)","nameWithType":"Processors.Clamp01(Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nClamps the input to the range [0..1].\n","syntax":{"content":"public static float Clamp01(float input)","parameters":[{"description":"The input value to clamp.","id":"input","type":"System.Single"}],"return":{"description":"The clamped input value.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Clamp01(System.Single)"},{"children":null,"id":"Clamp01(System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clamp01(Double)","nameWithType":"Processors.Clamp01(Double)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nClamps the input to the range [0..1].\n","syntax":{"content":"public static double Clamp01(double input)","parameters":[{"description":"The input value to clamp.","id":"input","type":"System.Double"}],"return":{"description":"The clamped input value.","type":"System.Double"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Clamp01(System.Double)"},{"children":null,"id":"Clamp01(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clamp01(Int32)","nameWithType":"Processors.Clamp01(Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nClamps the input to the range [0..1].\n","syntax":{"content":"public static int Clamp01(int input)","parameters":[{"description":"The input value to clamp.","id":"input","type":"System.Int32"}],"return":{"description":"The clamped input value.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Clamp01(System.Int32)"},{"children":null,"id":"Clamp01(Vector2)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clamp01(Vector2)","nameWithType":"Processors.Clamp01(Vector2)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nClamps the input to the range [0..1].\n","syntax":{"content":"public static Vector2 Clamp01(Vector2 input)","parameters":[{"description":"The input value to clamp.","id":"input","type":"Global.Vector2"}],"return":{"description":"The clamped input value.","type":"Global.Vector2"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Clamp01(Vector2)"},{"children":null,"id":"Clamp01(Vector2Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clamp01(Vector2Int)","nameWithType":"Processors.Clamp01(Vector2Int)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nClamps the input to the range [0..1].\n","syntax":{"content":"public static Vector2Int Clamp01(Vector2Int input)","parameters":[{"description":"The input value to clamp.","id":"input","type":"Global.Vector2Int"}],"return":{"description":"The clamped input value.","type":"Global.Vector2Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Clamp01(Vector2Int)"},{"children":null,"id":"Clamp01(Vector3)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clamp01(Vector3)","nameWithType":"Processors.Clamp01(Vector3)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nClamps the input to the range [0..1].\n","syntax":{"content":"public static Vector3 Clamp01(Vector3 input)","parameters":[{"description":"The input value to clamp.","id":"input","type":"Global.Vector3"}],"return":{"description":"The clamped input value.","type":"Global.Vector3"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Clamp01(Vector3)"},{"children":null,"id":"Clamp01(Vector3Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clamp01(Vector3Int)","nameWithType":"Processors.Clamp01(Vector3Int)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nClamps the input to the range [0..1].\n","syntax":{"content":"public static Vector3Int Clamp01(Vector3Int input)","parameters":[{"description":"The input value to clamp.","id":"input","type":"Global.Vector3Int"}],"return":{"description":"The clamped input value.","type":"Global.Vector3Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Clamp01(Vector3Int)"},{"children":null,"id":"Clamp01(Vector4)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clamp01(Vector4)","nameWithType":"Processors.Clamp01(Vector4)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nClamps the input to the range [0..1].\n","syntax":{"content":"public static Vector4 Clamp01(Vector4 input)","parameters":[{"description":"The input value to clamp.","id":"input","type":"Global.Vector4"}],"return":{"description":"The clamped input value.","type":"Global.Vector4"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Clamp01(Vector4)"},{"children":null,"id":"Decay(System.Single,System.Single,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Decay(Single, Single, Single)","nameWithType":"Processors.Decay(Single, Single, Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nDecays the input back to zero over time at a given rate. The rate is\nmultiplied by <code>Time.deltaTime</code>.\n","syntax":{"content":"public static float Decay(float input, float rate, float target = 0F)","parameters":[{"description":"The input value to decay.","id":"input","type":"System.Single"},{"description":"How quickly the input decays.","id":"rate","type":"System.Single"},{"description":"The optional value to decay to, otherwise zero.","id":"target","type":"System.Single"}],"return":{"description":"The decayed input value.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Decay(System.Single,System.Single,System.Single)"},{"children":null,"id":"Decay(System.Double,System.Double,System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Decay(Double, Double, Double)","nameWithType":"Processors.Decay(Double, Double, Double)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nDecays the input back to zero over time at a given rate. The rate is\nmultiplied by <code>Time.deltaTime</code>.\n","syntax":{"content":"public static double Decay(double input, double rate, double target = 0)","parameters":[{"description":"The input value to decay.","id":"input","type":"System.Double"},{"description":"How quickly the input decays.","id":"rate","type":"System.Double"},{"description":"The optional value to decay to, otherwise zero.","id":"target","type":"System.Double"}],"return":{"description":"The decayed input value.","type":"System.Double"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Decay(System.Double,System.Double,System.Double)"},{"children":null,"id":"Floor(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Floor(Single)","nameWithType":"Processors.Floor(Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nRounds the input down to the nearest whole number.\n","syntax":{"content":"public static float Floor(float input)","parameters":[{"description":"The input value to round.","id":"input","type":"System.Single"}],"return":{"description":"The rounded input value.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Floor(System.Single)"},{"children":null,"id":"Floor(System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Floor(Double)","nameWithType":"Processors.Floor(Double)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nRounds the input down to the nearest whole number.\n","syntax":{"content":"public static double Floor(double input)","parameters":[{"description":"The input value to round.","id":"input","type":"System.Double"}],"return":{"description":"The rounded input value.","type":"System.Double"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Floor(System.Double)"},{"children":null,"id":"Floor(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Floor(Int32)","nameWithType":"Processors.Floor(Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nRounds the input down to the nearest whole number.\n","syntax":{"content":"public static int Floor(int input)","parameters":[{"description":"The input value to round.","id":"input","type":"System.Int32"}],"return":{"description":"The rounded input value.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Floor(System.Int32)"},{"children":null,"id":"Floor(Vector2)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Floor(Vector2)","nameWithType":"Processors.Floor(Vector2)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nRounds the input down to the nearest whole number.\n","syntax":{"content":"public static Vector2 Floor(Vector2 input)","parameters":[{"description":"The input value to round.","id":"input","type":"Global.Vector2"}],"return":{"description":"The rounded input value.","type":"Global.Vector2"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Floor(Vector2)"},{"children":null,"id":"Floor(Vector2Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Floor(Vector2Int)","nameWithType":"Processors.Floor(Vector2Int)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nRounds the input down to the nearest whole number.\n","syntax":{"content":"public static Vector2Int Floor(Vector2Int input)","parameters":[{"description":"The input value to round.","id":"input","type":"Global.Vector2Int"}],"return":{"description":"The rounded input value.","type":"Global.Vector2Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Floor(Vector2Int)"},{"children":null,"id":"Floor(Vector3)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Floor(Vector3)","nameWithType":"Processors.Floor(Vector3)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nRounds the input down to the nearest whole number.\n","syntax":{"content":"public static Vector3 Floor(Vector3 input)","parameters":[{"description":"The input value to round.","id":"input","type":"Global.Vector3"}],"return":{"description":"The rounded input value.","type":"Global.Vector3"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Floor(Vector3)"},{"children":null,"id":"Floor(Vector3Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Floor(Vector3Int)","nameWithType":"Processors.Floor(Vector3Int)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nRounds the input down to the nearest whole number.\n","syntax":{"content":"public static Vector3Int Floor(Vector3Int input)","parameters":[{"description":"The input value to round.","id":"input","type":"Global.Vector3Int"}],"return":{"description":"The rounded input value.","type":"Global.Vector3Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Floor(Vector3Int)"},{"children":null,"id":"Floor(Vector4)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Floor(Vector4)","nameWithType":"Processors.Floor(Vector4)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nRounds the input down to the nearest whole number.\n","syntax":{"content":"public static Vector4 Floor(Vector4 input)","parameters":[{"description":"The input value to round.","id":"input","type":"Global.Vector4"}],"return":{"description":"The rounded input value.","type":"Global.Vector4"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Floor(Vector4)"},{"children":null,"id":"Invert(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Invert(Single)","nameWithType":"Processors.Invert(Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nInverts the input by multiplying by -1.\n","syntax":{"content":"public static float Invert(float input)","parameters":[{"description":"The input value to invert.","id":"input","type":"System.Single"}],"return":{"description":"The inverted input value.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Invert(System.Single)"},{"children":null,"id":"Invert(System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Invert(Double)","nameWithType":"Processors.Invert(Double)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nInverts the input by multiplying by -1.\n","syntax":{"content":"public static double Invert(double input)","parameters":[{"description":"The input value to invert.","id":"input","type":"System.Double"}],"return":{"description":"The inverted input value.","type":"System.Double"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Invert(System.Double)"},{"children":null,"id":"Invert(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Invert(Int32)","nameWithType":"Processors.Invert(Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nInverts the input by multiplying by -1.\n","syntax":{"content":"public static int Invert(int input)","parameters":[{"description":"The input value to invert.","id":"input","type":"System.Int32"}],"return":{"description":"The inverted input value.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Invert(System.Int32)"},{"children":null,"id":"Invert(Vector2)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Invert(Vector2)","nameWithType":"Processors.Invert(Vector2)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nInverts the input by multiplying by -1.\n","syntax":{"content":"public static Vector2 Invert(Vector2 input)","parameters":[{"description":"The input value to invert.","id":"input","type":"Global.Vector2"}],"return":{"description":"The inverted input value.","type":"Global.Vector2"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Invert(Vector2)"},{"children":null,"id":"Invert(Vector2,System.Boolean,System.Boolean)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Invert(Vector2, Boolean, Boolean)","nameWithType":"Processors.Invert(Vector2, Boolean, Boolean)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nInverts the input by multiplying by -1.\n","syntax":{"content":"public static Vector2 Invert(Vector2 input, bool invertX, bool invertY)","parameters":[{"description":"The input value to invert.","id":"input","type":"Global.Vector2"},{"description":"Inverts the x-axis.","id":"invertX","type":"System.Boolean"},{"description":"Inverts the y-axis.","id":"invertY","type":"System.Boolean"}],"return":{"description":"The inverted input value.","type":"Global.Vector2"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Invert(Vector2,System.Boolean,System.Boolean)"},{"children":null,"id":"Invert(Vector2Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Invert(Vector2Int)","nameWithType":"Processors.Invert(Vector2Int)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nInverts the input by multiplying by -1.\n","syntax":{"content":"public static Vector2Int Invert(Vector2Int input)","parameters":[{"description":"The input value to invert.","id":"input","type":"Global.Vector2Int"}],"return":{"description":"The inverted input value.","type":"Global.Vector2Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Invert(Vector2Int)"},{"children":null,"id":"Invert(Vector2Int,System.Boolean,System.Boolean)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Invert(Vector2Int, Boolean, Boolean)","nameWithType":"Processors.Invert(Vector2Int, Boolean, Boolean)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nInverts the input by multiplying by -1.\n","syntax":{"content":"public static Vector2Int Invert(Vector2Int input, bool invertX, bool invertY)","parameters":[{"description":"The input value to invert.","id":"input","type":"Global.Vector2Int"},{"description":"Inverts the x-axis.","id":"invertX","type":"System.Boolean"},{"description":"Inverts the y-axis.","id":"invertY","type":"System.Boolean"}],"return":{"description":"The inverted input value.","type":"Global.Vector2Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Invert(Vector2Int,System.Boolean,System.Boolean)"},{"children":null,"id":"Invert(Vector3)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Invert(Vector3)","nameWithType":"Processors.Invert(Vector3)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nInverts the input by multiplying by -1.\n","syntax":{"content":"public static Vector3 Invert(Vector3 input)","parameters":[{"description":"The input value to invert.","id":"input","type":"Global.Vector3"}],"return":{"description":"The inverted input value.","type":"Global.Vector3"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Invert(Vector3)"},{"children":null,"id":"Invert(Vector3,System.Boolean,System.Boolean,System.Boolean)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Invert(Vector3, Boolean, Boolean, Boolean)","nameWithType":"Processors.Invert(Vector3, Boolean, Boolean, Boolean)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nInverts the input by multiplying by -1.\n","syntax":{"content":"public static Vector3 Invert(Vector3 input, bool invertX, bool invertY, bool invertZ)","parameters":[{"description":"The input value to invert.","id":"input","type":"Global.Vector3"},{"description":"Inverts the x-axis.","id":"invertX","type":"System.Boolean"},{"description":"Inverts the y-axis.","id":"invertY","type":"System.Boolean"},{"description":"Inverts the z-axis.","id":"invertZ","type":"System.Boolean"}],"return":{"description":"The inverted input value.","type":"Global.Vector3"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Invert(Vector3,System.Boolean,System.Boolean,System.Boolean)"},{"children":null,"id":"Invert(Vector3Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Invert(Vector3Int)","nameWithType":"Processors.Invert(Vector3Int)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nInverts the input by multiplying by -1.\n","syntax":{"content":"public static Vector3Int Invert(Vector3Int input)","parameters":[{"description":"The input value to invert.","id":"input","type":"Global.Vector3Int"}],"return":{"description":"The inverted input value.","type":"Global.Vector3Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Invert(Vector3Int)"},{"children":null,"id":"Invert(Vector3Int,System.Boolean,System.Boolean,System.Boolean)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Invert(Vector3Int, Boolean, Boolean, Boolean)","nameWithType":"Processors.Invert(Vector3Int, Boolean, Boolean, Boolean)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nInverts the input by multiplying by -1.\n","syntax":{"content":"public static Vector3Int Invert(Vector3Int input, bool invertX, bool invertY, bool invertZ)","parameters":[{"description":"The input value to invert.","id":"input","type":"Global.Vector3Int"},{"description":"Inverts the x-axis.","id":"invertX","type":"System.Boolean"},{"description":"Inverts the y-axis.","id":"invertY","type":"System.Boolean"},{"description":"Inverts the z-axis.","id":"invertZ","type":"System.Boolean"}],"return":{"description":"The inverted input value.","type":"Global.Vector3Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Invert(Vector3Int,System.Boolean,System.Boolean,System.Boolean)"},{"children":null,"id":"Invert(Vector4)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Invert(Vector4)","nameWithType":"Processors.Invert(Vector4)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nInverts the input by multiplying by -1.\n","syntax":{"content":"public static Vector4 Invert(Vector4 input)","parameters":[{"description":"The input value to invert.","id":"input","type":"Global.Vector4"}],"return":{"description":"The inverted input value.","type":"Global.Vector4"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Invert(Vector4)"},{"children":null,"id":"Invert(Vector4,System.Boolean,System.Boolean,System.Boolean,System.Boolean)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Invert(Vector4, Boolean, Boolean, Boolean, Boolean)","nameWithType":"Processors.Invert(Vector4, Boolean, Boolean, Boolean, Boolean)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nInverts the input by multiplying by -1.\n","syntax":{"content":"public static Vector4 Invert(Vector4 input, bool invertX, bool invertY, bool invertZ, bool invertW)","parameters":[{"description":"The input value to invert.","id":"input","type":"Global.Vector4"},{"description":"Inverts the x-axis.","id":"invertX","type":"System.Boolean"},{"description":"Inverts the y-axis.","id":"invertY","type":"System.Boolean"},{"description":"Inverts the z-axis.","id":"invertZ","type":"System.Boolean"},{"description":"Inverts the w-axis.","id":"invertW","type":"System.Boolean"}],"return":{"description":"The inverted input value.","type":"Global.Vector4"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Invert(Vector4,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"},{"children":null,"id":"Normalize(System.Single,System.Single,System.Single,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Normalize(Single, Single, Single, Single)","nameWithType":"Processors.Normalize(Single, Single, Single, Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nNormalizes the input value in the range [min..max] to unsigned\nnormalized form [0..1] if the min is >= zero, and to signed\nnormalized form [-1..1] if the min is &lt; zero.\n","syntax":{"content":"public static float Normalize(float input, float min, float max, float zero = 0F)","parameters":[{"description":"The input value to normalize.","id":"input","type":"System.Single"},{"description":"The minimum value of the range.","id":"min","type":"System.Single"},{"description":"The maximum value of the range.","id":"max","type":"System.Single"},{"description":null,"id":"zero","type":"System.Single"}],"return":{"description":"The normalized input value.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Normalize(System.Single,System.Single,System.Single,System.Single)"},{"children":null,"id":"Normalize(System.Double,System.Double,System.Double,System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Normalize(Double, Double, Double, Double)","nameWithType":"Processors.Normalize(Double, Double, Double, Double)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nNormalizes the input value in the range [min..max] to unsigned\nnormalized form [0..1] if the min is >= zero, and to signed\nnormalized form [-1..1] if the min is &lt; zero.\n","syntax":{"content":"public static double Normalize(double input, double min, double max, double zero = 0)","parameters":[{"description":"The input value to normalize.","id":"input","type":"System.Double"},{"description":"The minimum value of the range.","id":"min","type":"System.Double"},{"description":"The maximum value of the range.","id":"max","type":"System.Double"},{"description":null,"id":"zero","type":"System.Double"}],"return":{"description":"The normalized input value.","type":"System.Double"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Normalize(System.Double,System.Double,System.Double,System.Double)"},{"children":null,"id":"Normalize(Vector2)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Normalize(Vector2)","nameWithType":"Processors.Normalize(Vector2)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nNormalizes the input vector to be of unit length (1). This is the\nsame as calling <code>Vector2.normalized</code>.\n","syntax":{"content":"public static Vector2 Normalize(Vector2 input)","parameters":[{"description":"The input value to normalize.","id":"input","type":"Global.Vector2"}],"return":{"description":"The normalized input value.","type":"Global.Vector2"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Normalize(Vector2)"},{"children":null,"id":"Normalize(Vector3)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Normalize(Vector3)","nameWithType":"Processors.Normalize(Vector3)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nNormalizes the input vector to be of unit length (1). This is the\nsame as calling <code>Vector3.normalized</code>.\n","syntax":{"content":"public static Vector3 Normalize(Vector3 input)","parameters":[{"description":"The input value to normalize.","id":"input","type":"Global.Vector3"}],"return":{"description":"The normalized input value.","type":"Global.Vector3"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Normalize(Vector3)"},{"children":null,"id":"Normalize(Vector4)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Normalize(Vector4)","nameWithType":"Processors.Normalize(Vector4)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nNormalizes the input vector to be of unit length (1). This is the\nsame as calling <code>Vector4.normalized</code>.\n","syntax":{"content":"public static Vector4 Normalize(Vector4 input)","parameters":[{"description":"The input value to normalize.","id":"input","type":"Global.Vector4"}],"return":{"description":"The normalized input value.","type":"Global.Vector4"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Normalize(Vector4)"},{"children":null,"id":"Round(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Round(Single)","nameWithType":"Processors.Round(Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nRounds the input to the nearest whole number.\n","syntax":{"content":"public static float Round(float input)","parameters":[{"description":"The input value to round.","id":"input","type":"System.Single"}],"return":{"description":"The rounded input value.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Round(System.Single)"},{"children":null,"id":"Round(System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Round(Double)","nameWithType":"Processors.Round(Double)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nRounds the input to the nearest whole number.\n","syntax":{"content":"public static double Round(double input)","parameters":[{"description":"The input value to round.","id":"input","type":"System.Double"}],"return":{"description":"The rounded input value.","type":"System.Double"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Round(System.Double)"},{"children":null,"id":"Round(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Round(Int32)","nameWithType":"Processors.Round(Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nRounds the input to the nearest whole number.\n","syntax":{"content":"public static int Round(int input)","parameters":[{"description":"The input value to round.","id":"input","type":"System.Int32"}],"return":{"description":"The rounded input value.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Round(System.Int32)"},{"children":null,"id":"Round(Vector2)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Round(Vector2)","nameWithType":"Processors.Round(Vector2)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nRounds the input to the nearest whole number.\n","syntax":{"content":"public static Vector2 Round(Vector2 input)","parameters":[{"description":"The input value to round.","id":"input","type":"Global.Vector2"}],"return":{"description":"The rounded input value.","type":"Global.Vector2"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Round(Vector2)"},{"children":null,"id":"Round(Vector2Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Round(Vector2Int)","nameWithType":"Processors.Round(Vector2Int)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nRounds the input to the nearest whole number.\n","syntax":{"content":"public static Vector2Int Round(Vector2Int input)","parameters":[{"description":"The input value to round.","id":"input","type":"Global.Vector2Int"}],"return":{"description":"The rounded input value.","type":"Global.Vector2Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Round(Vector2Int)"},{"children":null,"id":"Round(Vector3)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Round(Vector3)","nameWithType":"Processors.Round(Vector3)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nRounds the input to the nearest whole number.\n","syntax":{"content":"public static Vector3 Round(Vector3 input)","parameters":[{"description":"The input value to round.","id":"input","type":"Global.Vector3"}],"return":{"description":"The rounded input value.","type":"Global.Vector3"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Round(Vector3)"},{"children":null,"id":"Round(Vector3Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Round(Vector3Int)","nameWithType":"Processors.Round(Vector3Int)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nRounds the input to the nearest whole number.\n","syntax":{"content":"public static Vector3Int Round(Vector3Int input)","parameters":[{"description":"The input value to round.","id":"input","type":"Global.Vector3Int"}],"return":{"description":"The rounded input value.","type":"Global.Vector3Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Round(Vector3Int)"},{"children":null,"id":"Round(Vector4)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Round(Vector4)","nameWithType":"Processors.Round(Vector4)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nRounds the input to the nearest whole number.\n","syntax":{"content":"public static Vector4 Round(Vector4 input)","parameters":[{"description":"The input value to round.","id":"input","type":"Global.Vector4"}],"return":{"description":"The rounded input value.","type":"Global.Vector4"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Round(Vector4)"},{"children":null,"id":"Scale(System.Single,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Scale(Single, Single)","nameWithType":"Processors.Scale(Single, Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nMultiplies the input by a factor.\n","syntax":{"content":"public static float Scale(float input, float factor)","parameters":[{"description":"The input value to scale.","id":"input","type":"System.Single"},{"description":"The scale factor.","id":"factor","type":"System.Single"}],"return":{"description":"The scaled input value.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Scale(System.Single,System.Single)"},{"children":null,"id":"Scale(System.Double,System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Scale(Double, Double)","nameWithType":"Processors.Scale(Double, Double)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nMultiplies the input by a factor.\n","syntax":{"content":"public static double Scale(double input, double factor)","parameters":[{"description":"The input value to scale.","id":"input","type":"System.Double"},{"description":"The scale factor.","id":"factor","type":"System.Double"}],"return":{"description":"The scaled input value.","type":"System.Double"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Scale(System.Double,System.Double)"},{"children":null,"id":"Scale(System.Int32,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Scale(Int32, Int32)","nameWithType":"Processors.Scale(Int32, Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nMultiplies the input by a factor.\n","syntax":{"content":"public static int Scale(int input, int factor)","parameters":[{"description":"The input value to scale.","id":"input","type":"System.Int32"},{"description":"The scale factor.","id":"factor","type":"System.Int32"}],"return":{"description":"The scaled input value.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Scale(System.Int32,System.Int32)"},{"children":null,"id":"Scale(Vector2,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Scale(Vector2, Single)","nameWithType":"Processors.Scale(Vector2, Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nMultiplies the input by a factor.\n","syntax":{"content":"public static Vector2 Scale(Vector2 input, float factor)","parameters":[{"description":"The input value to scale.","id":"input","type":"Global.Vector2"},{"description":"The scale factor.","id":"factor","type":"System.Single"}],"return":{"description":"The scaled input value.","type":"Global.Vector2"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Scale(Vector2,System.Single)"},{"children":null,"id":"Scale(Vector2,System.Single,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Scale(Vector2, Single, Single)","nameWithType":"Processors.Scale(Vector2, Single, Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nMultiplies the input by a factor in each axis.\n","syntax":{"content":"public static Vector2 Scale(Vector2 input, float x, float y)","parameters":[{"description":"The input value to scale.","id":"input","type":"Global.Vector2"},{"description":"The scale factor along the x-axis.","id":"x","type":"System.Single"},{"description":"The scale factor along the y-axis.","id":"y","type":"System.Single"}],"return":{"description":"The scaled input value.","type":"Global.Vector2"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Scale(Vector2,System.Single,System.Single)"},{"children":null,"id":"Scale(Vector2Int,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Scale(Vector2Int, Int32)","nameWithType":"Processors.Scale(Vector2Int, Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nMultiplies the input by a factor.\n","syntax":{"content":"public static Vector2Int Scale(Vector2Int input, int factor)","parameters":[{"description":"The input value to scale.","id":"input","type":"Global.Vector2Int"},{"description":"The scale factor.","id":"factor","type":"System.Int32"}],"return":{"description":"The scaled input value.","type":"Global.Vector2Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Scale(Vector2Int,System.Int32)"},{"children":null,"id":"Scale(Vector2Int,System.Int32,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Scale(Vector2Int, Int32, Int32)","nameWithType":"Processors.Scale(Vector2Int, Int32, Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nMultiplies the input by a factor in each axis.\n","syntax":{"content":"public static Vector2Int Scale(Vector2Int input, int x, int y)","parameters":[{"description":"The input value to scale.","id":"input","type":"Global.Vector2Int"},{"description":"The scale factor along the x-axis.","id":"x","type":"System.Int32"},{"description":"The scale factor along the y-axis.","id":"y","type":"System.Int32"}],"return":{"description":"The scaled input value.","type":"Global.Vector2Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Scale(Vector2Int,System.Int32,System.Int32)"},{"children":null,"id":"Scale(Vector3,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Scale(Vector3, Single)","nameWithType":"Processors.Scale(Vector3, Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nMultiplies the input by a factor.\n","syntax":{"content":"public static Vector3 Scale(Vector3 input, float factor)","parameters":[{"description":"The input value to scale.","id":"input","type":"Global.Vector3"},{"description":"The scale factor.","id":"factor","type":"System.Single"}],"return":{"description":"The scaled input value.","type":"Global.Vector3"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Scale(Vector3,System.Single)"},{"children":null,"id":"Scale(Vector3,System.Single,System.Single,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Scale(Vector3, Single, Single, Single)","nameWithType":"Processors.Scale(Vector3, Single, Single, Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nMultiplies the input by a factor in each axis.\n","syntax":{"content":"public static Vector3 Scale(Vector3 input, float x, float y, float z)","parameters":[{"description":"The input value to scale.","id":"input","type":"Global.Vector3"},{"description":"The scale factor along the x-axis.","id":"x","type":"System.Single"},{"description":"The scale factor along the y-axis.","id":"y","type":"System.Single"},{"description":"The scale factor along the z-axis.","id":"z","type":"System.Single"}],"return":{"description":"The scaled input value.","type":"Global.Vector3"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Scale(Vector3,System.Single,System.Single,System.Single)"},{"children":null,"id":"Scale(Vector3Int,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Scale(Vector3Int, Int32)","nameWithType":"Processors.Scale(Vector3Int, Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nMultiplies the input by a factor.\n","syntax":{"content":"public static Vector3Int Scale(Vector3Int input, int factor)","parameters":[{"description":"The input value to scale.","id":"input","type":"Global.Vector3Int"},{"description":"The scale factor.","id":"factor","type":"System.Int32"}],"return":{"description":"The scaled input value.","type":"Global.Vector3Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Scale(Vector3Int,System.Int32)"},{"children":null,"id":"Scale(Vector3Int,System.Int32,System.Int32,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Scale(Vector3Int, Int32, Int32, Int32)","nameWithType":"Processors.Scale(Vector3Int, Int32, Int32, Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nMultiplies the input by a factor in each axis.\n","syntax":{"content":"public static Vector3Int Scale(Vector3Int input, int x, int y, int z)","parameters":[{"description":"The input value to scale.","id":"input","type":"Global.Vector3Int"},{"description":"The scale factor along the x-axis.","id":"x","type":"System.Int32"},{"description":"The scale factor along the y-axis.","id":"y","type":"System.Int32"},{"description":"The scale factor along the z-axis.","id":"z","type":"System.Int32"}],"return":{"description":"The scaled input value.","type":"Global.Vector3Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Scale(Vector3Int,System.Int32,System.Int32,System.Int32)"},{"children":null,"id":"Scale(Vector4,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Scale(Vector4, Single)","nameWithType":"Processors.Scale(Vector4, Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nMultiplies the input by a factor.\n","syntax":{"content":"public static Vector4 Scale(Vector4 input, float factor)","parameters":[{"description":"The input value to scale.","id":"input","type":"Global.Vector4"},{"description":"The scale factor.","id":"factor","type":"System.Single"}],"return":{"description":"The scaled input value.","type":"Global.Vector4"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Scale(Vector4,System.Single)"},{"children":null,"id":"Scale(Vector4,System.Single,System.Single,System.Single,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Scale(Vector4, Single, Single, Single, Single)","nameWithType":"Processors.Scale(Vector4, Single, Single, Single, Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nMultiplies the input by a factor in each axis.\n","syntax":{"content":"public static Vector4 Scale(Vector4 input, float x, float y, float z, float w)","parameters":[{"description":"The input value to scale.","id":"input","type":"Global.Vector4"},{"description":"The scale factor along the x-axis.","id":"x","type":"System.Single"},{"description":"The scale factor along the y-axis.","id":"y","type":"System.Single"},{"description":"The scale factor along the z-axis.","id":"z","type":"System.Single"},{"description":"The scale factor along the w-axis.","id":"w","type":"System.Single"}],"return":{"description":"The scaled input value.","type":"Global.Vector4"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Scale(Vector4,System.Single,System.Single,System.Single,System.Single)"},{"children":null,"id":"StickDeadzone(Vector2,System.Single,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"StickDeadzone(Vector2, Single, Single)","nameWithType":"Processors.StickDeadzone(Vector2, Single, Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nA stick deadzone scales the input such that any value with a\nmagnitude smaller than the min results in (0,0), and any value with\na magnitude greater than the max is normalized to unit length (1).\n","syntax":{"content":"public static Vector2 StickDeadzone(Vector2 input, float min = 0.125F, float max = 0.925F)","parameters":[{"description":"The input value to scale.","id":"input","type":"Global.Vector2"},{"description":"The lower deadzone threshold.","id":"min","type":"System.Single"},{"description":"The upper deadzone threshold.","id":"max","type":"System.Single"}],"return":{"description":"The scaled input value.","type":"Global.Vector2"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.StickDeadzone(Vector2,System.Single,System.Single)"},{"children":null,"id":"StickDeadzone(Vector3,System.Single,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"StickDeadzone(Vector3, Single, Single)","nameWithType":"Processors.StickDeadzone(Vector3, Single, Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nA stick deadzone scales the input such that any value with a\nmagnitude smaller than the min results in (0,0), and any value with\na magnitude greater than the max is normalized to unit length (1).\n","syntax":{"content":"public static Vector3 StickDeadzone(Vector3 input, float min = 0.125F, float max = 0.925F)","parameters":[{"description":"The input value to scale.","id":"input","type":"Global.Vector3"},{"description":"The lower deadzone threshold.","id":"min","type":"System.Single"},{"description":"The upper deadzone threshold.","id":"max","type":"System.Single"}],"return":{"description":"The scaled input value.","type":"Global.Vector3"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.StickDeadzone(Vector3,System.Single,System.Single)"},{"children":null,"id":"StickDeadzone(Vector4,System.Single,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"StickDeadzone(Vector4, Single, Single)","nameWithType":"Processors.StickDeadzone(Vector4, Single, Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nA stick deadzone scales the input such that any value with a\nmagnitude smaller than the min results in (0,0), and any value with\na magnitude greater than the max is normalized to unit length (1).\n","syntax":{"content":"public static Vector4 StickDeadzone(Vector4 input, float min = 0.125F, float max = 0.925F)","parameters":[{"description":"The input value to scale.","id":"input","type":"Global.Vector4"},{"description":"The lower deadzone threshold.","id":"min","type":"System.Single"},{"description":"The upper deadzone threshold.","id":"max","type":"System.Single"}],"return":{"description":"The scaled input value.","type":"Global.Vector4"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.StickDeadzone(Vector4,System.Single,System.Single)"},{"children":null,"id":"Wrap(System.Single,System.Single,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Wrap(Single, Single, Single)","nameWithType":"Processors.Wrap(Single, Single, Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nWraps the input to the range [min..max]. If the value exceeds the\nmax it wraps around to the min, and if the value is less than the\nmin it wraps back to max.\n","syntax":{"content":"public static float Wrap(float input, float min, float max)","parameters":[{"description":"The input value to wrap.","id":"input","type":"System.Single"},{"description":"The minimum value of the range.","id":"min","type":"System.Single"},{"description":"The maximum value of the range.","id":"max","type":"System.Single"}],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Wrap(System.Single,System.Single,System.Single)"},{"children":null,"id":"Wrap(System.Double,System.Double,System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Wrap(Double, Double, Double)","nameWithType":"Processors.Wrap(Double, Double, Double)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nWraps the input to the range [min..max]. If the value exceeds the\nmax it wraps around to the min, and if the value is less than the\nmin it wraps back to max.\n","syntax":{"content":"public static double Wrap(double input, double min, double max)","parameters":[{"description":"The input value to wrap.","id":"input","type":"System.Double"},{"description":"The minimum value of the range.","id":"min","type":"System.Double"},{"description":"The maximum value of the range.","id":"max","type":"System.Double"}],"return":{"description":null,"type":"System.Double"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Wrap(System.Double,System.Double,System.Double)"},{"children":null,"id":"Wrap(System.Int32,System.Int32,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Wrap(Int32, Int32, Int32)","nameWithType":"Processors.Wrap(Int32, Int32, Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nWraps the input to the range [min..max]. If the value exceeds the\nmax it wraps around to the min, and if the value is less than the\nmin it wraps back to max.\n","syntax":{"content":"public static int Wrap(int input, int min, int max)","parameters":[{"description":"The input value to wrap.","id":"input","type":"System.Int32"},{"description":"The minimum value of the range.","id":"min","type":"System.Int32"},{"description":"The maximum value of the range.","id":"max","type":"System.Int32"}],"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Wrap(System.Int32,System.Int32,System.Int32)"},{"children":null,"id":"Wrap(Vector2,Vector2,Vector2)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Wrap(Vector2, Vector2, Vector2)","nameWithType":"Processors.Wrap(Vector2, Vector2, Vector2)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nWraps the input to the range [min..max]. If the value exceeds the\nmax it wraps around to the min, and if the value is less than the\nmin it wraps back to max.\n","syntax":{"content":"public static Vector2 Wrap(Vector2 input, Vector2 min, Vector2 max)","parameters":[{"description":"The input value to wrap.","id":"input","type":"Global.Vector2"},{"description":"The minimum value of the range.","id":"min","type":"Global.Vector2"},{"description":"The maximum value of the range.","id":"max","type":"Global.Vector2"}],"return":{"description":null,"type":"Global.Vector2"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Wrap(Vector2,Vector2,Vector2)"},{"children":null,"id":"Wrap(Vector2Int,Vector2Int,Vector2Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Wrap(Vector2Int, Vector2Int, Vector2Int)","nameWithType":"Processors.Wrap(Vector2Int, Vector2Int, Vector2Int)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nWraps the input to the range [min..max]. If the value exceeds the\nmax it wraps around to the min, and if the value is less than the\nmin it wraps back to max.\n","syntax":{"content":"public static Vector2Int Wrap(Vector2Int input, Vector2Int min, Vector2Int max)","parameters":[{"description":"The input value to wrap.","id":"input","type":"Global.Vector2Int"},{"description":"The minimum value of the range.","id":"min","type":"Global.Vector2Int"},{"description":"The maximum value of the range.","id":"max","type":"Global.Vector2Int"}],"return":{"description":null,"type":"Global.Vector2Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Wrap(Vector2Int,Vector2Int,Vector2Int)"},{"children":null,"id":"Wrap(Vector3,Vector3,Vector3)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Wrap(Vector3, Vector3, Vector3)","nameWithType":"Processors.Wrap(Vector3, Vector3, Vector3)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nWraps the input to the range [min..max]. If the value exceeds the\nmax it wraps around to the min, and if the value is less than the\nmin it wraps back to max.\n","syntax":{"content":"public static Vector3 Wrap(Vector3 input, Vector3 min, Vector3 max)","parameters":[{"description":"The input value to wrap.","id":"input","type":"Global.Vector3"},{"description":"The minimum value of the range.","id":"min","type":"Global.Vector3"},{"description":"The maximum value of the range.","id":"max","type":"Global.Vector3"}],"return":{"description":null,"type":"Global.Vector3"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Wrap(Vector3,Vector3,Vector3)"},{"children":null,"id":"Wrap(Vector3Int,Vector3Int,Vector3Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Wrap(Vector3Int, Vector3Int, Vector3Int)","nameWithType":"Processors.Wrap(Vector3Int, Vector3Int, Vector3Int)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nWraps the input to the range [min..max]. If the value exceeds the\nmax it wraps around to the min, and if the value is less than the\nmin it wraps back to max.\n","syntax":{"content":"public static Vector3Int Wrap(Vector3Int input, Vector3Int min, Vector3Int max)","parameters":[{"description":"The input value to wrap.","id":"input","type":"Global.Vector3Int"},{"description":"The minimum value of the range.","id":"min","type":"Global.Vector3Int"},{"description":"The maximum value of the range.","id":"max","type":"Global.Vector3Int"}],"return":{"description":null,"type":"Global.Vector3Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Wrap(Vector3Int,Vector3Int,Vector3Int)"},{"children":null,"id":"Wrap(Vector4,Vector4,Vector4)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Wrap(Vector4, Vector4, Vector4)","nameWithType":"Processors.Wrap(Vector4, Vector4, Vector4)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nWraps the input to the range [min..max]. If the value exceeds the\nmax it wraps around to the min, and if the value is less than the\nmin it wraps back to max.\n","syntax":{"content":"public static Vector4 Wrap(Vector4 input, Vector4 min, Vector4 max)","parameters":[{"description":"The input value to wrap.","id":"input","type":"Global.Vector4"},{"description":"The minimum value of the range.","id":"min","type":"Global.Vector4"},{"description":"The maximum value of the range.","id":"max","type":"Global.Vector4"}],"return":{"description":null,"type":"Global.Vector4"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Wrap(Vector4,Vector4,Vector4)"},{"children":null,"id":"Wrap01(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Wrap01(Single)","nameWithType":"Processors.Wrap01(Single)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nWraps the input to the range [0..1]. If the value exceeds 1 it wraps\naround to 0, and if the value is less than 0 it wraps back to 1.\n","syntax":{"content":"public static float Wrap01(float input)","parameters":[{"description":"The input value to wrap.","id":"input","type":"System.Single"}],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Wrap01(System.Single)"},{"children":null,"id":"Wrap01(System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Wrap01(Double)","nameWithType":"Processors.Wrap01(Double)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nWraps the input to the range [0..1]. If the value exceeds 1 it wraps\naround to 0, and if the value is less than 0 it wraps back to 1.\n","syntax":{"content":"public static double Wrap01(double input)","parameters":[{"description":"The input value to wrap.","id":"input","type":"System.Double"}],"return":{"description":null,"type":"System.Double"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Wrap01(System.Double)"},{"children":null,"id":"Wrap01(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Wrap01(Int32)","nameWithType":"Processors.Wrap01(Int32)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nWraps the input to the range [0..1]. If the value exceeds 1 it wraps\naround to 0, and if the value is less than 0 it wraps back to 1.\n","syntax":{"content":"public static int Wrap01(int input)","parameters":[{"description":"The input value to wrap.","id":"input","type":"System.Int32"}],"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Wrap01(System.Int32)"},{"children":null,"id":"Wrap01(Vector2)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Wrap01(Vector2)","nameWithType":"Processors.Wrap01(Vector2)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nWraps the input values to the range [0..1]. If a value exceeds 1 it\nwraps around to 0, and if a value is less than 0 it wraps back to 1.\n","syntax":{"content":"public static Vector2 Wrap01(Vector2 input)","parameters":[{"description":"The input value to wrap.","id":"input","type":"Global.Vector2"}],"return":{"description":null,"type":"Global.Vector2"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Wrap01(Vector2)"},{"children":null,"id":"Wrap01(Vector2Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Wrap01(Vector2Int)","nameWithType":"Processors.Wrap01(Vector2Int)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nWraps the input values to the range [0..1]. If a value exceeds 1 it\nwraps around to 0, and if a value is less than 0 it wraps back to 1.\n","syntax":{"content":"public static Vector2Int Wrap01(Vector2Int input)","parameters":[{"description":"The input value to wrap.","id":"input","type":"Global.Vector2Int"}],"return":{"description":null,"type":"Global.Vector2Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Wrap01(Vector2Int)"},{"children":null,"id":"Wrap01(Vector3)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Wrap01(Vector3)","nameWithType":"Processors.Wrap01(Vector3)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nWraps the input values to the range [0..1]. If a value exceeds 1 it\nwraps around to 0, and if a value is less than 0 it wraps back to 1.\n","syntax":{"content":"public static Vector3 Wrap01(Vector3 input)","parameters":[{"description":"The input value to wrap.","id":"input","type":"Global.Vector3"}],"return":{"description":null,"type":"Global.Vector3"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Wrap01(Vector3)"},{"children":null,"id":"Wrap01(Vector3Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Wrap01(Vector3Int)","nameWithType":"Processors.Wrap01(Vector3Int)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nWraps the input values to the range [0..1]. If a value exceeds 1 it\nwraps around to 0, and if a value is less than 0 it wraps back to 1.\n","syntax":{"content":"public static Vector3Int Wrap01(Vector3Int input)","parameters":[{"description":"The input value to wrap.","id":"input","type":"Global.Vector3Int"}],"return":{"description":null,"type":"Global.Vector3Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Wrap01(Vector3Int)"},{"children":null,"id":"Wrap01(Vector4)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Wrap01(Vector4)","nameWithType":"Processors.Wrap01(Vector4)","namespace":"Zigurous.Math","parent":"Zigurous.Math.Processors","remarks":null,"summary":"\nWraps the input values to the range [0..1]. If a value exceeds 1 it\nwraps around to 0, and if a value is less than 0 it wraps back to 1.\n","syntax":{"content":"public static Vector4 Wrap01(Vector4 input)","parameters":[{"description":"The input value to wrap.","id":"input","type":"Global.Vector4"}],"return":{"description":null,"type":"Global.Vector4"},"typeParameters":null},"type":"Method","uid":"Zigurous.Math.Processors.Wrap01(Vector4)"}]}]}}}