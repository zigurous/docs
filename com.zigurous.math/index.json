{
  "api/Zigurous.Math.ArrayExtensions.html": {
    "href": "api/Zigurous.Math.ArrayExtensions.html",
    "title": "Class ArrayExtensions | Math Utils",
    "keywords": "Class ArrayExtensions Extension methods for arrays. Inheritance System.Object ArrayExtensions Namespace : Zigurous.Math public static class ArrayExtensions Methods Shuffle<T>(T[]) Shuffles the array in place. Remarks The shuffle is done using the Fisher-Yates algorithm. public static void Shuffle<T>(this T[] array) Parameter Description array The array to shuffle. Type Parameter Description T The type of the array. Shuffle<T>(T[], Random) Shuffles the array in place using the given random number generator. Remarks The shuffle is done using the Fisher-Yates algorithm. public static void Shuffle<T>(this T[] array, Random rng) Parameter Description array The array to shuffle. rng The random number generator to use. Type Parameter Description T The type of the array. Sum(Double[]) Returns the sum of all elements in the array. public static double Sum(this double[] array) Parameter Description array The array to sum. Sum(Int32[]) Returns the sum of all elements in the array. public static int Sum(this int[] array) Parameter Description array The array to sum. Sum(Single[]) Returns the sum of all elements in the array. public static float Sum(this float[] array) Parameter Description array The array to sum."
  },
  "api/Zigurous.Math.BoundsExtensions.html": {
    "href": "api/Zigurous.Math.BoundsExtensions.html",
    "title": "Class BoundsExtensions | Math Utils",
    "keywords": "Class BoundsExtensions Extension methods for bounds. Inheritance System.Object BoundsExtensions Namespace : Zigurous.Math public static class BoundsExtensions Methods RandomPointInside(Bounds) Returns a random point inside the bounds. public static Vector3 RandomPointInside(this Bounds bounds) Parameter Description bounds The bounds to get a random point from. RandomPointInside(BoundsInt) Returns a random point inside the bounds. public static Vector3Int RandomPointInside(this BoundsInt bounds) Parameter Description bounds The bounds to get a random point from."
  },
  "api/Zigurous.Math.Chance.Card.html": {
    "href": "api/Zigurous.Math.Chance.Card.html",
    "title": "Enum Chance.Card | Math Utils",
    "keywords": "Enum Chance.Card The playing cards in a standard 52-card deck. Namespace : Zigurous.Math public enum Card Fields Name Description Clubs10 Clubs2 Clubs3 Clubs4 Clubs5 Clubs6 Clubs7 Clubs8 Clubs9 ClubsA ClubsJ ClubsK ClubsQ Diamonds10 Diamonds2 Diamonds3 Diamonds4 Diamonds5 Diamonds6 Diamonds7 Diamonds8 Diamonds9 DiamondsA DiamondsJ DiamondsK DiamondsQ Hearts10 Hearts2 Hearts3 Hearts4 Hearts5 Hearts6 Hearts7 Hearts8 Hearts9 HeartsA HeartsJ HeartsK HeartsQ Joker None Spades10 Spades2 Spades3 Spades4 Spades5 Spades6 Spades7 Spades8 Spades9 SpadesA SpadesJ SpadesK SpadesQ"
  },
  "api/Zigurous.Math.Chance.Coin.html": {
    "href": "api/Zigurous.Math.Chance.Coin.html",
    "title": "Enum Chance.Coin | Math Utils",
    "keywords": "Enum Chance.Coin The sides of a coin. Namespace : Zigurous.Math public enum Coin Fields Name Description Heads Tails"
  },
  "api/Zigurous.Math.Chance.html": {
    "href": "api/Zigurous.Math.Chance.html",
    "title": "Class Chance | Math Utils",
    "keywords": "Class Chance Functions for generating random chance values. Inheritance System.Object Chance Namespace : Zigurous.Math public static class Chance Methods CoinFlip() Returns Heads or Tails , with 50-50 odds. public static Chance.Coin CoinFlip() PositiveOrNegative() Returns 1.0f or -1.0f , with 50-50 odds. public static float PositiveOrNegative() PositiveOrNegative(Single) Returns -value or +value , with 50-50 odds. public static float PositiveOrNegative(float value) Parameter Description value The value to be returned. RandomBool() Returns true or false , with 50-50 odds. public static bool RandomBool() RandomCard() Returns a random card from a standard 52-card deck. public static Chance.Card RandomCard() RandomSuit() Returns a random playing card suit. public static Chance.Suit RandomSuit()"
  },
  "api/Zigurous.Math.Chance.Suit.html": {
    "href": "api/Zigurous.Math.Chance.Suit.html",
    "title": "Enum Chance.Suit | Math Utils",
    "keywords": "Enum Chance.Suit The suits of a standard 52-card deck. Namespace : Zigurous.Math public enum Suit Fields Name Description Clubs Diamonds Hearts Spades"
  },
  "api/Zigurous.Math.ColliderExtensions.html": {
    "href": "api/Zigurous.Math.ColliderExtensions.html",
    "title": "Class ColliderExtensions | Math Utils",
    "keywords": "Class ColliderExtensions Extension methods for colliders. Inheritance System.Object ColliderExtensions Namespace : Zigurous.Math public static class ColliderExtensions Methods RandomPointInside(Collider) Returns a random point inside the collider's bounds. public static Vector3 RandomPointInside(this Collider collider) Parameter Description collider The collider to get a random point from. RandomPointInside(Collider2D) Returns a random point inside the collider's bounds. public static Vector2 RandomPointInside(this Collider2D collider) Parameter Description collider The collider to get a random point from."
  },
  "api/Zigurous.Math.ComparableExtensions.html": {
    "href": "api/Zigurous.Math.ComparableExtensions.html",
    "title": "Class ComparableExtensions | Math Utils",
    "keywords": "Class ComparableExtensions Extension methods for IComparable. Inheritance System.Object ComparableExtensions Namespace : Zigurous.Math public static class ComparableExtensions Methods IsBetween<T>(T, T, T, Boolean, Boolean) Checks if the value is between min and max . public static bool IsBetween<T>(this T value, T min, T max, bool includeMin = true, bool includeMax = true) where T : IComparable<T> Parameter Description value The value to check. min The minimum value. max The maximum value. includeMin The minimum value is inclusive if true, exclusive if false. includeMax The maximum value is inclusive if true, exclusive if false. Type Parameter Description T The type of value to check. IsBetweenExclusive<T>(T, T, T) Checks if the value is in the range ( min .. max ). public static bool IsBetweenExclusive<T>(this T value, T min, T max) where T : IComparable<T> Parameter Description value The value to check. min The minimum value. max The maximum value. Type Parameter Description T The type of value to check. IsBetweenExclusiveInclusive<T>(T, T, T) Checks if the value is in the range ( min .. max ]. public static bool IsBetweenExclusiveInclusive<T>(this T value, T min, T max) where T : IComparable<T> Parameter Description value The value to check. min The minimum value. max The maximum value. Type Parameter Description T The type of value to check. IsBetweenInclusive<T>(T, T, T) Checks if the value is in the range [ min .. max ]. public static bool IsBetweenInclusive<T>(this T value, T min, T max) where T : IComparable<T> Parameter Description value The value to check. min The minimum value. max The maximum value. Type Parameter Description T The type of value to check. IsBetweenInclusiveExclusive<T>(T, T, T) Checks if the value is in the range [ min .. max ). public static bool IsBetweenInclusiveExclusive<T>(this T value, T min, T max) where T : IComparable<T> Parameter Description value The value to check. min The minimum value. max The maximum value. Type Parameter Description T The type of value to check. Max<T>(T[]) Returns the maximum value in the array. public static T Max<T>(this T[] values) where T : IComparable<T> Parameter Description values The values to check. Type Parameter Description T The type of value to check. Max<T>(List<T>) Returns the maximum value in the list. public static T Max<T>(this List<T> values) where T : IComparable<T> Parameter Description values The values to check. Type Parameter Description T The type of value to check. Min<T>(T[]) Returns the minimum value in the array. public static T Min<T>(this T[] values) where T : IComparable<T> Parameter Description values The values to check. Type Parameter Description T The type of value to check. Min<T>(List<T>) Returns the minimum value in the list. public static T Min<T>(this List<T> values) where T : IComparable<T> Parameter Description values The values to check. Type Parameter Description T The type of value to check."
  },
  "api/Zigurous.Math.Dice.html": {
    "href": "api/Zigurous.Math.Dice.html",
    "title": "Class Dice | Math Utils",
    "keywords": "Class Dice Functions for rolling dice. Inheritance System.Object Dice Namespace : Zigurous.Math public static class Dice Methods D10() Returns a random number on a 10-sided dice [1..10]. public static int D10() D10(Int32) Returns the sum of rolling a 10-sided dice [1..10] n times. public static int D10(int n) Parameter Description n The number of times to roll the dice. D100() Returns a random number on a 100-sided dice [1..100]. public static int D100() D100(Int32) Returns the sum of rolling a 100-sided dice [1..100] n times. public static int D100(int n) Parameter Description n The number of times to roll the dice. D12() Returns a random number on a 12-sided dice [1..12]. public static int D12() D12(Int32) Returns the sum of rolling a 12-sided dice [1..12] n times. public static int D12(int n) Parameter Description n The number of times to roll the dice. D20() Returns a random number on a 20-sided dice [1..20]. public static int D20() D20(Int32) Returns the sum of rolling a 20-sided dice [1..20] n times. public static int D20(int n) Parameter Description n The number of times to roll the dice. D4() Returns a random number on a 4-sided dice [1..4]. public static int D4() D4(Int32) Returns the sum of rolling a 4-sided dice [1..4] n times. public static int D4(int n) Parameter Description n The number of times to roll the dice. D48() Returns a random number on a 48-sided dice [1..48]. public static int D48() D48(Int32) Returns the sum of rolling a 48-sided dice [1..48] n times. public static int D48(int n) Parameter Description n The number of times to roll the dice. D6() Returns a random number on a 6-sided dice [1..6]. public static int D6() D6(Int32) Returns the sum of rolling a 6-sided dice [1..6] n times. public static int D6(int n) Parameter Description n The number of times to roll the dice. D8() Returns a random number on an 8-sided dice [1..8]. public static int D8() D8(Int32) Returns the sum of rolling an 8-sided dice [1..8] n times. public static int D8(int n) Parameter Description n The number of times to roll the dice. NSided(Int32) Returns a random number on an n-sided dice [1.. n ]. public static int NSided(int n) Parameter Description n The number of sides on the dice. NSided(Int32, Int32) Returns the sum of rolling an n-sided dice [1.. n ] x amount of times. public static int NSided(int n, int x) Parameter Description n The number of sides on the dice. x The number of times to roll the dice. Roll(Int32[]) Returns a random value on a dice with custom values. public static int Roll(int[] values) Parameter Description values The values of the dice. Roll(Int32[], Int32) Returns the sum of rolling a dice with custom values n amount of times. public static int Roll(int[] values, int n) Parameter Description values The values of the dice. n The number of times to roll the dice. Roll<T>(T[]) Returns a random value on a dice with custom values. public static T Roll<T>(T[] values) Parameter Description values The values of the dice. Type Parameter Description T The type of value to choose. Roll<T>(T[], Int32[]) Returns a random value from an array of values with probability proportional to the given set of probabilities . public static T Roll<T>(T[] values, int[] probabilities) Parameter Description values The values to choose from. probabilities The probabilities of each value. Type Parameter Description T The type of value to choose."
  },
  "api/Zigurous.Math.DoubleEqualityComparer.html": {
    "href": "api/Zigurous.Math.DoubleEqualityComparer.html",
    "title": "Class DoubleEqualityComparer | Math Utils",
    "keywords": "Class DoubleEqualityComparer Compares the equality of double values using a specified amount of decimal digits to compare. Inheritance System.Object DoubleEqualityComparer Namespace : Zigurous.Math public sealed class DoubleEqualityComparer : IEqualityComparer<double> Fields digits The number of decimal digits to compare when determining equality. public int digits Methods Equals(Double, Double) Checks the equality of two double values. public bool Equals(double x, double y) Parameter Description x The first value to compare. y The second value to compare. Returns Description System.Boolean True if the values are equal, false otherwise. GetHashCode(Double) Returns a hash code for the double value. public int GetHashCode(double value) Parameter Description value The value to get the hash code for."
  },
  "api/Zigurous.Math.DoubleExtensions.html": {
    "href": "api/Zigurous.Math.DoubleExtensions.html",
    "title": "Class DoubleExtensions | Math Utils",
    "keywords": "Class DoubleExtensions Extension methods for doubles. Inheritance System.Object DoubleExtensions Namespace : Zigurous.Math public static class DoubleExtensions Methods IsDividable(Double) Checks if the value can be divided (not zero, not infinite, and not NaN ). public static bool IsDividable(this double value) Parameter Description value The value to check. IsEqualTo(Double, Double, Double) Checks for equality with another value given a margin of error specified by the epsilon public static bool IsEqualTo(this double lhs, double rhs, double epsilon = 4.94065645841247E-324) Parameter Description lhs The left-hand side of the equality check. rhs The right-hand side of the equality check. epsilon The margin of error. Returns Description System.Boolean True if lhs is considered equal to rhs . IsImaginaryNumber(Double) Checks if the value is an imaginary number (infinite or NaN ). public static bool IsImaginaryNumber(this double value) Parameter Description value The value to check. IsInfinite(Double) Checks if the value is infinite. public static bool IsInfinite(this double value) Parameter Description value The value to check. IsNaN(Double) Checks if the value is NaN . public static bool IsNaN(this double value) Parameter Description value The value to check. IsNegative(Double) Checks if the value is negative. public static bool IsNegative(this double value) Parameter Description value The value to check. IsNegativeInfinity(Double) Checks if the value is equal to negative infinity. public static bool IsNegativeInfinity(this double value) Parameter Description value The value to check. IsPositive(Double) Checks if the value is positive. public static bool IsPositive(this double value) Parameter Description value The value to check. IsPositiveInfinity(Double) Checks if the value is equal to positive infinity. public static bool IsPositiveInfinity(this double value) Parameter Description value The value to check. IsRealNumber(Double) Checks if the value is a real number (not infinite and not NaN ). public static bool IsRealNumber(this double value) Parameter Description value The value to check. IsZero(Double, Double) Checks if the value is zero given a margin of error specified by the epsilon . public static bool IsZero(this double value, double epsilon = 4.94065645841247E-324) Parameter Description value The value to check. epsilon The margin of error. ToAbbreviatedString(Double) Converts the number to an abbreviated string, e.g. \"1k\" for 1000. public static string ToAbbreviatedString(this double value) Parameter Description value The number to abbreviate. Returns Description System.String A new string of the abbreviated number, or the number as a string if it cannot be abbreviated. ToAbbreviatedString(Double, NumberAbbreviation[]) Converts the number to an abbreviated string using the possible provided abbreviations . public static string ToAbbreviatedString(this double value, NumberAbbreviation[] abbreviations) Parameter Description value The number to abbreviate. abbreviations The possible abbreviations. Returns Description System.String A new string of the abbreviated number, or the number as a string if it cannot be abbreviated. UnsetImaginary(ref Double, Double) Sets the value to newValue if the value is an imaginary number (infinite or NaN ). public static void UnsetImaginary(this ref double value, double newValue = 0) Parameter Description value The value to check. newValue The value to return if the original value is an imaginary number. UnsetInfinite(ref Double, Double) Sets the value to newValue if the value is an infinite number. public static void UnsetInfinite(this ref double value, double newValue = 0) Parameter Description value The value to check. newValue The value to return if the original value is infinite. UnsetNaN(ref Double, Double) Sets the value to newValue if the value is NaN . public static void UnsetNaN(this ref double value, double newValue = 0) Parameter Description value The value to check. newValue The value to return if the original value is NaN . UnsetZero(ref Double, Double, Double) Sets the value to newValue if the value is zero given a margin of error specified by the epsilon . public static void UnsetZero(this ref double value, double newValue = 4.94065645841247E-324, double epsilon = 4.94065645841247E-324) Parameter Description value The value to check. newValue The value to return if the original value is zero. epsilon The margin of error."
  },
  "api/Zigurous.Math.FloatEqualityComparer.html": {
    "href": "api/Zigurous.Math.FloatEqualityComparer.html",
    "title": "Class FloatEqualityComparer | Math Utils",
    "keywords": "Class FloatEqualityComparer Compares the equality of float values using a specified amount of decimal digits to compare. Inheritance System.Object FloatEqualityComparer Namespace : Zigurous.Math public sealed class FloatEqualityComparer : IEqualityComparer<float> Fields digits The number of decimal digits to compare when determining equality. public int digits Methods Equals(Single, Single) Checks the equality of two float values. public bool Equals(float x, float y) Parameter Description x The first value to compare. y The second value to compare. Returns Description System.Boolean True if the values are equal, false otherwise. GetHashCode(Single) Returns a hash code for the float value. public int GetHashCode(float value) Parameter Description value The value to get the hash code for."
  },
  "api/Zigurous.Math.FloatExtensions.html": {
    "href": "api/Zigurous.Math.FloatExtensions.html",
    "title": "Class FloatExtensions | Math Utils",
    "keywords": "Class FloatExtensions Extension methods for floats. Inheritance System.Object FloatExtensions Namespace : Zigurous.Math public static class FloatExtensions Fields SAFE_FLOAT Sometimes Unity throws precision errors for really small numbers such as when setting transform values. Using float.Epsilon can still cause issues so this value is intended to be a safer alternative. public const float SAFE_FLOAT = 1.4E-32F Methods IsDividable(Single) Checks if the value can be divided (not zero, not infinite, and not NaN ). public static bool IsDividable(this float value) Parameter Description value The value to check. IsEqualTo(Single, Single, Single) Checks for equality with another value given a margin of error specified by the epsilon public static bool IsEqualTo(this float lhs, float rhs, float epsilon = 1.401298E-45F) Parameter Description lhs The left-hand side of the equality check. rhs The right-hand side of the equality check. epsilon The margin of error. Returns Description System.Boolean True if lhs is considered equal to rhs . IsImaginaryNumber(Single) Checks if the value is an imaginary number (infinite or NaN ). public static bool IsImaginaryNumber(this float value) Parameter Description value The value to check. IsInfinite(Single) Checks if the value is infinite. public static bool IsInfinite(this float value) Parameter Description value The value to check. IsNaN(Single) Checks if the value is NaN . public static bool IsNaN(this float value) Parameter Description value The value to check. IsNegative(Single) Checks if the value is negative. public static bool IsNegative(this float value) Parameter Description value The value to check. IsNegativeInfinity(Single) Checks if the value is equal to negative infinity. public static bool IsNegativeInfinity(this float value) Parameter Description value The value to check. IsPositive(Single) Checks if the value is positive. public static bool IsPositive(this float value) Parameter Description value The value to check. IsPositiveInfinity(Single) Checks if the value is equal to positive infinity. public static bool IsPositiveInfinity(this float value) Parameter Description value The value to check. IsRealNumber(Single) Checks if the value is a real number (not infinite and not NaN ). public static bool IsRealNumber(this float value) Parameter Description value The value to check. IsZero(Single, Single) Checks if the value is zero given a margin of error specified by the epsilon . public static bool IsZero(this float value, float epsilon = 1.401298E-45F) Parameter Description value The value to check. epsilon The margin of error. ToAbbreviatedString(Single) Converts the number to an abbreviated string, e.g. \"1k\" for 1000. public static string ToAbbreviatedString(this float number) Parameter Description number The number to abbreviate. Returns Description System.String A new string of the abbreviated number, or the number as a string if it cannot be abbreviated. ToAbbreviatedString(Single, NumberAbbreviation[]) Converts the number to an abbreviated string using the possible provided abbreviations . public static string ToAbbreviatedString(this float number, NumberAbbreviation[] abbreviations) Parameter Description number The number to abbreviate. abbreviations The abbreviations to use. Returns Description System.String A new string of the abbreviated number, or the number as a string if it cannot be abbreviated. UnsetImaginary(ref Single, Single) Sets the value to newValue if the value is an imaginary number (infinite or NaN ). public static void UnsetImaginary(this ref float value, float newValue = 0F) Parameter Description value The value to check. newValue The value to return if the original value is an imaginary number. UnsetInfinite(ref Single, Single) Sets the value to newValue if the value is an infinite number. public static void UnsetInfinite(this ref float value, float newValue = 0F) Parameter Description value The value to check. newValue The value to return if the original value is infinite. UnsetNaN(ref Single, Single) Sets the value to newValue if the value is NaN . public static void UnsetNaN(this ref float value, float newValue = 0F) Parameter Description value The value to check. newValue The value to return if the original value is NaN . UnsetZero(ref Single, Single, Single) Sets the value to newValue if the value is zero given a margin of error specified by the epsilon . public static void UnsetZero(this ref float value, float newValue = 1.4E-32F, float epsilon = 1.401298E-45F) Parameter Description value The value to check. newValue The value to return if the original value is zero. epsilon The margin of error."
  },
  "api/Zigurous.Math.html": {
    "href": "api/Zigurous.Math.html",
    "title": "Namespace Zigurous.Math | Math Utils",
    "keywords": "Namespace Zigurous.Math Classes ArrayExtensions Extension methods for arrays. BoundsExtensions Extension methods for bounds. Chance Functions for generating random chance values. ColliderExtensions Extension methods for colliders. ComparableExtensions Extension methods for IComparable. Dice Functions for rolling dice. DoubleEqualityComparer Compares the equality of double values using a specified amount of decimal digits to compare. DoubleExtensions Extension methods for doubles. FloatEqualityComparer Compares the equality of float values using a specified amount of decimal digits to compare. FloatExtensions Extension methods for floats. IntExtensions Extension methods for ints. ListExtensions Extension methods for lists. LongExtensions Extension methods for longs. NumberAbbreviationExtensions Extensions methods for NumberAbbreviation . Processors Functions for processing input values. QuaternionExtensions Extension methods for quaternions. ShortExtensions Extension methods for shorts. UIntExtensions Extension methods for uints. Vector2Extensions Extension methods for Vector2. Vector2IntExtensions Extension methods for Vector2Int. Vector3Extensions Extension methods for Vector3. Vector3IntExtensions Extension methods for Vector3Int. Vector4Extensions Extension methods for Vector4. Structs NumberAbbreviation Represents how a number is abbreviated to a string. Enums Chance.Card The playing cards in a standard 52-card deck. Chance.Coin The sides of a coin. Chance.Suit The suits of a standard 52-card deck."
  },
  "api/Zigurous.Math.IntExtensions.html": {
    "href": "api/Zigurous.Math.IntExtensions.html",
    "title": "Class IntExtensions | Math Utils",
    "keywords": "Class IntExtensions Extension methods for ints. Inheritance System.Object IntExtensions Namespace : Zigurous.Math public static class IntExtensions Methods GetBits(Int32, Int32, Int32) Returns a subset of bits from the number. public static int GetBits(this int n, int amount, int offset) Parameter Description n The number to get bits from. amount The amount of bits to return. offset The amount of bits to discard. HasAnyFlag(Int32, Int32) Checks if any of the flags are set in the bitmask. (mask & flags) != 0 public static bool HasAnyFlag(this int mask, int flags) Parameter Description mask The mask to check. flags The flags to check for. HasFlag(Int32, Int32) Checks if the flag is set in the bitmask. (mask & flag) == flag public static bool HasFlag(this int mask, int flag) Parameter Description mask The mask to check. flag The flag to check for. IsEven(Int32) Checks if the number is even. n % 2 == 0 public static bool IsEven(this int n) Parameter Description n The number to check. IsNegative(Int32) Checks if the number is negative. n < 0 public static bool IsNegative(this int n) Parameter Description n The number to check. IsOdd(Int32) Checks if the number is odd. n % 2 != 0 public static bool IsOdd(this int n) Parameter Description n The number to check. IsPositive(Int32) Checks if the number is positive. n > 0 public static bool IsPositive(this int n) Parameter Description n The number to check. IsZero(Int32) Checks if the number is zero. n == 0 public static bool IsZero(this int n) Parameter Description n The number to check. NumDigits(Int32) Returns the number of digits in the number. public static int NumDigits(this int n) Parameter Description n The number to check. ToAbbreviatedString(Int32) Converts the number to an abbreviated string, e.g. \"1k\" for 1000. public static string ToAbbreviatedString(this int n) Parameter Description n The number to abbreviate. Returns Description System.String A new string of the abbreviated number, or the number as a string if it cannot be abbreviated. ToAbbreviatedString(Int32, NumberAbbreviation[]) Converts the number to an abbreviated string using the possible provided abbreviations . public static string ToAbbreviatedString(this int n, NumberAbbreviation[] abbreviations) Parameter Description n The number to abbreviate. abbreviations The abbreviations to use. Returns Description System.String A new string of the abbreviated number, or the number as a string if it cannot be abbreviated. ToBinaryString(Int32) Converts the number to a string of binary digits. public static string ToBinaryString(this int n) Parameter Description n The number to convert. Returns Description System.String The binary representation of the number."
  },
  "api/Zigurous.Math.ListExtensions.html": {
    "href": "api/Zigurous.Math.ListExtensions.html",
    "title": "Class ListExtensions | Math Utils",
    "keywords": "Class ListExtensions Extension methods for lists. Inheritance System.Object ListExtensions Namespace : Zigurous.Math public static class ListExtensions Methods Shuffle<T>(List<T>) Shuffles the list in place. Remarks The shuffle is done using the Fisher-Yates algorithm. public static void Shuffle<T>(this List<T> list) Parameter Description list The list to shuffle. Type Parameter Description T The type of the list. Shuffle<T>(List<T>, Random) Shuffles the list in place using the given random number generator. Remarks The shuffle is done using the Fisher-Yates algorithm. public static void Shuffle<T>(this List<T> list, Random rng) Parameter Description list The list to shuffle. rng The random number generator to use. Type Parameter Description T The type of the list. Sum(List<Double>) Returns the sum of all items in the list. public static double Sum(this List<double> list) Parameter Description list The list to sum. Sum(List<Int32>) Returns the sum of all items in the list. public static int Sum(this List<int> list) Parameter Description list The list to sum. Sum(List<Single>) Returns the sum of all items in the list. public static float Sum(this List<float> list) Parameter Description list The list to sum."
  },
  "api/Zigurous.Math.LongExtensions.html": {
    "href": "api/Zigurous.Math.LongExtensions.html",
    "title": "Class LongExtensions | Math Utils",
    "keywords": "Class LongExtensions Extension methods for longs. Inheritance System.Object LongExtensions Namespace : Zigurous.Math public static class LongExtensions Methods GetBits(Int64, Int32, Int32) Returns a subset of bits from the number. public static long GetBits(this long n, int amount, int offset) Parameter Description n The number to get bits from. amount The amount of bits to return. offset The amount of bits to discard. HasAnyFlag(Int64, Int64) Checks if any of the flags are set in the bitmask. (mask & flags) != 0 public static bool HasAnyFlag(this long mask, long flags) Parameter Description mask The mask to check. flags The flags to check for. HasFlag(Int64, Int64) Checks if the flag is set in the bitmask. (mask & flag) == flag public static bool HasFlag(this long mask, long flag) Parameter Description mask The mask to check. flag The flag to check for. IsEven(Int64) Checks if the number is even. n % 2 == 0 public static bool IsEven(this long n) Parameter Description n The number to check. IsNegative(Int64) Checks if the number is negative. n < 0 public static bool IsNegative(this long n) Parameter Description n The number to check. IsOdd(Int64) Checks if the number is odd. n % 2 != 0 public static bool IsOdd(this long n) Parameter Description n The number to check. IsPositive(Int64) Checks if the number is positive. n > 0 public static bool IsPositive(this long n) Parameter Description n The number to check. IsZero(Int64) Checks if the number is zero. n == 0 public static bool IsZero(this long n) Parameter Description n The number to check. ToBinaryString(Int64) Converts the number to a string of binary digits. public static string ToBinaryString(this long n) Parameter Description n The number to convert. Returns Description System.String The binary representation of the number."
  },
  "api/Zigurous.Math.NumberAbbreviation.html": {
    "href": "api/Zigurous.Math.NumberAbbreviation.html",
    "title": "Struct NumberAbbreviation | Math Utils",
    "keywords": "Struct NumberAbbreviation Represents how a number is abbreviated to a string. Namespace : Zigurous.Math [Serializable] public struct NumberAbbreviation Constructors NumberAbbreviation(Double, String) Creates a new number abbreviation with the given factor and format . public NumberAbbreviation(double factor, string format) Parameter Description factor The number factor after which the abbreviation is applied. format The string format of the abbreviated number. Fields Common A predefined set of common number abbreviations. public static readonly NumberAbbreviation[] Common factor The number factor after which the abbreviation is applied. public double factor format The string format of the abbreviated number. public string format Properties Billions An abbreviation for numbers in the billions. public static readonly NumberAbbreviation Billions { get; } Millions An abbreviation for numbers in the millions. public static readonly NumberAbbreviation Millions { get; } Thousands An abbreviation for numbers in the thousands. public static readonly NumberAbbreviation Thousands { get; } Trillions An abbreviation for numbers in the trillions. public static readonly NumberAbbreviation Trillions { get; } Methods Format(Double) Abbreviates the given number to a string. public string Format(double number) Parameter Description number The number to abbreviate. Returns Description System.String A new string of the abbreviated number. Format(Int32) Abbreviates the given number to a string. public string Format(int number) Parameter Description number The number to abbreviate. Returns Description System.String A new string of the abbreviated number. Format(Single) Abbreviates the given number to a string. public string Format(float number) Parameter Description number The number to abbreviate. Returns Description System.String A new string of the abbreviated number."
  },
  "api/Zigurous.Math.NumberAbbreviationExtensions.html": {
    "href": "api/Zigurous.Math.NumberAbbreviationExtensions.html",
    "title": "Class NumberAbbreviationExtensions | Math Utils",
    "keywords": "Class NumberAbbreviationExtensions Extensions methods for NumberAbbreviation . Inheritance System.Object NumberAbbreviationExtensions Namespace : Zigurous.Math public static class NumberAbbreviationExtensions Methods Format(NumberAbbreviation[], Double) Abbreviates the given number to a string. public static string Format(this NumberAbbreviation[] abbreviations, double number) Parameter Description abbreviations The possible abbreviations to apply. number The number to abbreviate. Returns Description System.String A new string of the abbreviated number, or the number as a string if it cannot be abbreviated. Format(NumberAbbreviation[], Int32) Abbreviates the given number to a string. public static string Format(this NumberAbbreviation[] abbreviations, int number) Parameter Description abbreviations The possible abbreviations to apply. number The number to abbreviate. Returns Description System.String A new string of the abbreviated number, or the number as a string if it cannot be abbreviated. Format(NumberAbbreviation[], Single) Abbreviates the given number to a string. public static string Format(this NumberAbbreviation[] abbreviations, float number) Parameter Description abbreviations The possible abbreviations to apply. number The number to abbreviate. Returns Description System.String A new string of the abbreviated number, or the number as a string if it cannot be abbreviated."
  },
  "api/Zigurous.Math.Processors.html": {
    "href": "api/Zigurous.Math.Processors.html",
    "title": "Class Processors | Math Utils",
    "keywords": "Class Processors Functions for processing input values. Inheritance System.Object Processors Namespace : Zigurous.Math public static class Processors Methods Abs(Double) Returns the absolute value of the input. public static double Abs(double input) Parameter Description input The input value to absolute. Abs(Int32) Returns the absolute value of the input. public static int Abs(int input) Parameter Description input The input value to absolute. Abs(Single) Returns the absolute value of the input. public static float Abs(float input) Parameter Description input The input value to absolute. Abs(Vector2) Returns the absolute value of the input. public static Vector2 Abs(Vector2 input) Parameter Description input The input value to absolute. Abs(Vector2Int) Returns the absolute value of the input. public static Vector2Int Abs(Vector2Int input) Parameter Description input The input value to absolute. Abs(Vector3) Returns the absolute value of the input. public static Vector3 Abs(Vector3 input) Parameter Description input The input value to absolute. Abs(Vector3Int) Returns the absolute value of the input. public static Vector3Int Abs(Vector3Int input) Parameter Description input The input value to absolute. Abs(Vector4) Returns the absolute value of the input. public static Vector4 Abs(Vector4 input) Parameter Description input The input value to absolute. AxisDeadzone(Double, Double, Double) An axis deadzone scales the input such that any value with an absolute value smaller than min is 0, and any value with an absolute value larger than max is 1 or -1. public static double AxisDeadzone(double input, double min = 0.125, double max = 0.925) Parameter Description input The input value to scale. min The lower deadzone threshold. max The upper deadzone threshold. AxisDeadzone(Single, Single, Single) An axis deadzone scales the input such that any value with an absolute value smaller than min is 0, and any value with an absolute value larger than max is 1 or -1. public static float AxisDeadzone(float input, float min = 0.125F, float max = 0.925F) Parameter Description input The input value to scale. min The lower deadzone threshold. max The upper deadzone threshold. Ceil(Double) Rounds the input up to the nearest whole number. public static double Ceil(double input) Parameter Description input The input value to round. Ceil(Int32) Rounds the input up to the nearest whole number. public static int Ceil(int input) Parameter Description input The input value to round. Ceil(Single) Rounds the input up to the nearest whole number. public static float Ceil(float input) Parameter Description input The input value to round. Ceil(Vector2) Rounds the input up to the nearest whole number. public static Vector2 Ceil(Vector2 input) Parameter Description input The input value to round. Ceil(Vector2Int) Rounds the input up to the nearest whole number. public static Vector2Int Ceil(Vector2Int input) Parameter Description input The input value to round. Ceil(Vector3) Rounds the input up to the nearest whole number. public static Vector3 Ceil(Vector3 input) Parameter Description input The input value to round. Ceil(Vector3Int) Rounds the input up to the nearest whole number. public static Vector3Int Ceil(Vector3Int input) Parameter Description input The input value to round. Ceil(Vector4) Rounds the input up to the nearest whole number. public static Vector4 Ceil(Vector4 input) Parameter Description input The input value to round. Clamp(Double, Double, Double) Clamps the input to the range [ min .. max ]. public static double Clamp(double input, double min, double max) Parameter Description input The input value to clamp. min The minimum value. max The maximum value. Clamp(Int32, Int32, Int32) Clamps the input to the range [ min .. max ]. public static int Clamp(int input, int min, int max) Parameter Description input The input value to clamp. min The minimum value. max The maximum value. Clamp(Single, Single, Single) Clamps the input to the range [ min .. max ]. public static float Clamp(float input, float min, float max) Parameter Description input The input value to clamp. min The minimum value. max The maximum value. Clamp(Vector2, Vector2, Vector2) Clamps the input to the range [ min .. max ]. public static Vector2 Clamp(Vector2 input, Vector2 min, Vector2 max) Parameter Description input The input value to clamp. min The minimum value. max The maximum value. Clamp(Vector2Int, Vector2Int, Vector2Int) Clamps the input to the range [ min .. max ]. public static Vector2Int Clamp(Vector2Int input, Vector2Int min, Vector2Int max) Parameter Description input The input value to clamp. min The minimum value. max The maximum value. Clamp(Vector3, Vector3, Vector3) Clamps the input to the range [ min .. max ]. public static Vector3 Clamp(Vector3 input, Vector3 min, Vector3 max) Parameter Description input The input value to clamp. min The minimum value. max The maximum value. Clamp(Vector3Int, Vector3Int, Vector3Int) Clamps the input to the range [ min .. max ]. public static Vector3Int Clamp(Vector3Int input, Vector3Int min, Vector3Int max) Parameter Description input The input value to clamp. min The minimum value. max The maximum value. Clamp(Vector4, Vector4, Vector4) Clamps the input to the range [ min .. max ]. public static Vector4 Clamp(Vector4 input, Vector4 min, Vector4 max) Parameter Description input The input value to clamp. min The minimum value. max The maximum value. Clamp01(Double) Clamps the input to the range [0..1]. public static double Clamp01(double input) Parameter Description input The input value to clamp. Clamp01(Int32) Clamps the input to the range [0..1]. public static int Clamp01(int input) Parameter Description input The input value to clamp. Clamp01(Single) Clamps the input to the range [0..1]. public static float Clamp01(float input) Parameter Description input The input value to clamp. Clamp01(Vector2) Clamps the input to the range [0..1]. public static Vector2 Clamp01(Vector2 input) Parameter Description input The input value to clamp. Clamp01(Vector2Int) Clamps the input to the range [0..1]. public static Vector2Int Clamp01(Vector2Int input) Parameter Description input The input value to clamp. Clamp01(Vector3) Clamps the input to the range [0..1]. public static Vector3 Clamp01(Vector3 input) Parameter Description input The input value to clamp. Clamp01(Vector3Int) Clamps the input to the range [0..1]. public static Vector3Int Clamp01(Vector3Int input) Parameter Description input The input value to clamp. Clamp01(Vector4) Clamps the input to the range [0..1]. public static Vector4 Clamp01(Vector4 input) Parameter Description input The input value to clamp. Decay(Double, Double, Double) Decays the input back to zero over time at a given rate . The rate is multiplied by Time.deltaTime . public static double Decay(double input, double rate, double target = 0) Parameter Description input The input value to decay. rate How quickly the input decays. target The optional value to decay to, otherwise zero. Decay(Single, Single, Single) Decays the input back to zero over time at a given rate . The rate is multiplied by Time.deltaTime . public static float Decay(float input, float rate, float target = 0F) Parameter Description input The input value to decay. rate How quickly the input decays. target The optional value to decay to, otherwise zero. Floor(Double) Rounds the input down to the nearest whole number. public static double Floor(double input) Parameter Description input The input value to round. Floor(Int32) Rounds the input down to the nearest whole number. public static int Floor(int input) Parameter Description input The input value to round. Floor(Single) Rounds the input down to the nearest whole number. public static float Floor(float input) Parameter Description input The input value to round. Floor(Vector2) Rounds the input down to the nearest whole number. public static Vector2 Floor(Vector2 input) Parameter Description input The input value to round. Floor(Vector2Int) Rounds the input down to the nearest whole number. public static Vector2Int Floor(Vector2Int input) Parameter Description input The input value to round. Floor(Vector3) Rounds the input down to the nearest whole number. public static Vector3 Floor(Vector3 input) Parameter Description input The input value to round. Floor(Vector3Int) Rounds the input down to the nearest whole number. public static Vector3Int Floor(Vector3Int input) Parameter Description input The input value to round. Floor(Vector4) Rounds the input down to the nearest whole number. public static Vector4 Floor(Vector4 input) Parameter Description input The input value to round. Invert(Double) Inverts the input by multiplying by -1. public static double Invert(double input) Parameter Description input The input value to invert. Invert(Int32) Inverts the input by multiplying by -1. public static int Invert(int input) Parameter Description input The input value to invert. Invert(Single) Inverts the input by multiplying by -1. public static float Invert(float input) Parameter Description input The input value to invert. Invert(Vector2) Inverts the input by multiplying by -1. public static Vector2 Invert(Vector2 input) Parameter Description input The input value to invert. Invert(Vector2, Boolean, Boolean) Inverts the input by multiplying by -1. public static Vector2 Invert(Vector2 input, bool invertX, bool invertY) Parameter Description input The input value to invert. invertX Inverts the x-axis. invertY Inverts the y-axis. Invert(Vector2Int) Inverts the input by multiplying by -1. public static Vector2Int Invert(Vector2Int input) Parameter Description input The input value to invert. Invert(Vector2Int, Boolean, Boolean) Inverts the input by multiplying by -1. public static Vector2Int Invert(Vector2Int input, bool invertX, bool invertY) Parameter Description input The input value to invert. invertX Inverts the x-axis. invertY Inverts the y-axis. Invert(Vector3) Inverts the input by multiplying by -1. public static Vector3 Invert(Vector3 input) Parameter Description input The input value to invert. Invert(Vector3, Boolean, Boolean, Boolean) Inverts the input by multiplying by -1. public static Vector3 Invert(Vector3 input, bool invertX, bool invertY, bool invertZ) Parameter Description input The input value to invert. invertX Inverts the x-axis. invertY Inverts the y-axis. invertZ Inverts the z-axis. Invert(Vector3Int) Inverts the input by multiplying by -1. public static Vector3Int Invert(Vector3Int input) Parameter Description input The input value to invert. Invert(Vector3Int, Boolean, Boolean, Boolean) Inverts the input by multiplying by -1. public static Vector3Int Invert(Vector3Int input, bool invertX, bool invertY, bool invertZ) Parameter Description input The input value to invert. invertX Inverts the x-axis. invertY Inverts the y-axis. invertZ Inverts the z-axis. Invert(Vector4) Inverts the input by multiplying by -1. public static Vector4 Invert(Vector4 input) Parameter Description input The input value to invert. Invert(Vector4, Boolean, Boolean, Boolean, Boolean) Inverts the input by multiplying by -1. public static Vector4 Invert(Vector4 input, bool invertX, bool invertY, bool invertZ, bool invertW) Parameter Description input The input value to invert. invertX Inverts the x-axis. invertY Inverts the y-axis. invertZ Inverts the z-axis. invertW Inverts the w-axis. Normalize(Double, Double, Double, Double) Normalizes the input value in the range [ min .. max ] to unsigned normalized form [0..1] if min is >= zero , and to signed normalized form [-1..1] if min < zero . public static double Normalize(double input, double min, double max, double zero = 0) Parameter Description input The input value to normalize. min The minimum value of the range. max The maximum value of the range. zero Normalize(Single, Single, Single, Single) Normalizes the input value in the range [ min .. max ] to unsigned normalized form [0..1] if min is >= zero , and to signed normalized form [-1..1] if min < zero . public static float Normalize(float input, float min, float max, float zero = 0F) Parameter Description input The input value to normalize. min The minimum value of the range. max The maximum value of the range. zero Normalize(Vector2) Normalizes the input vector to be of unit length (1). This is the same as calling Vector2.normalized . public static Vector2 Normalize(Vector2 input) Parameter Description input The input value to normalize. Normalize(Vector3) Normalizes the input vector to be of unit length (1). This is the same as calling Vector3.normalized . public static Vector3 Normalize(Vector3 input) Parameter Description input The input value to normalize. Normalize(Vector4) Normalizes the input vector to be of unit length (1). This is the same as calling Vector4.normalized . public static Vector4 Normalize(Vector4 input) Parameter Description input The input value to normalize. Round(Double) Rounds the input to the nearest whole number. public static double Round(double input) Parameter Description input The input value to round. Round(Int32) Rounds the input to the nearest whole number. public static int Round(int input) Parameter Description input The input value to round. Round(Single) Rounds the input to the nearest whole number. public static float Round(float input) Parameter Description input The input value to round. Round(Vector2) Rounds the input to the nearest whole number. public static Vector2 Round(Vector2 input) Parameter Description input The input value to round. Round(Vector2Int) Rounds the input to the nearest whole number. public static Vector2Int Round(Vector2Int input) Parameter Description input The input value to round. Round(Vector3) Rounds the input to the nearest whole number. public static Vector3 Round(Vector3 input) Parameter Description input The input value to round. Round(Vector3Int) Rounds the input to the nearest whole number. public static Vector3Int Round(Vector3Int input) Parameter Description input The input value to round. Round(Vector4) Rounds the input to the nearest whole number. public static Vector4 Round(Vector4 input) Parameter Description input The input value to round. Scale(Double, Double) Multiplies the input by factor . public static double Scale(double input, double factor) Parameter Description input The input value to scale. factor The scale factor. Scale(Int32, Int32) Multiplies the input by factor . public static int Scale(int input, int factor) Parameter Description input The input value to scale. factor The scale factor. Scale(Single, Single) Multiplies the input by factor . public static float Scale(float input, float factor) Parameter Description input The input value to scale. factor The scale factor. Scale(Vector2, Single) Multiplies the input by factor . public static Vector2 Scale(Vector2 input, float factor) Parameter Description input The input value to scale. factor The scale factor. Scale(Vector2, Single, Single) Multiplies the input by x along the x-axis and y along the y-axis. public static Vector2 Scale(Vector2 input, float x, float y) Parameter Description input The input value to scale. x The scale factor along the x-axis. y The scale factor along the y-axis. Scale(Vector2Int, Int32) Multiplies the input by factor . public static Vector2Int Scale(Vector2Int input, int factor) Parameter Description input The input value to scale. factor The scale factor. Scale(Vector2Int, Int32, Int32) Multiplies the input by x along the x-axis and y along the y-axis. public static Vector2Int Scale(Vector2Int input, int x, int y) Parameter Description input The input value to scale. x The scale factor along the x-axis. y The scale factor along the y-axis. Scale(Vector3, Single) Multiplies the input by factor . public static Vector3 Scale(Vector3 input, float factor) Parameter Description input The input value to scale. factor The scale factor. Scale(Vector3, Single, Single, Single) Multiplies the input by x along the x-axis, y along the y-axis, and z along the z-axis. public static Vector3 Scale(Vector3 input, float x, float y, float z) Parameter Description input The input value to scale. x The scale factor along the x-axis. y The scale factor along the y-axis. z The scale factor along the z-axis. Scale(Vector3Int, Int32) Multiplies the input by factor . public static Vector3Int Scale(Vector3Int input, int factor) Parameter Description input The input value to scale. factor The scale factor. Scale(Vector3Int, Int32, Int32, Int32) Multiplies the input by x along the x-axis, y along the y-axis, and z along the z-axis. public static Vector3Int Scale(Vector3Int input, int x, int y, int z) Parameter Description input The input value to scale. x The scale factor along the x-axis. y The scale factor along the y-axis. z The scale factor along the z-axis. Scale(Vector4, Single) Multiplies the input by factor . public static Vector4 Scale(Vector4 input, float factor) Parameter Description input The input value to scale. factor The scale factor. Scale(Vector4, Single, Single, Single, Single) Multiplies the input by x along the x-axis, y along the y-axis, z along the z-axis, and w along the w-axis. public static Vector4 Scale(Vector4 input, float x, float y, float z, float w) Parameter Description input The input value to scale. x The scale factor along the x-axis. y The scale factor along the y-axis. z The scale factor along the z-axis. w The scale factor along the w-axis. StickDeadzone(Vector2, Single, Single) A stick deadzone scales the input such that any value with a magnitude smaller than min results in (0,0), and any value with a magnitude greater than max is normalized to unit length (1). public static Vector2 StickDeadzone(Vector2 input, float min = 0.125F, float max = 0.925F) Parameter Description input The input value to scale. min The lower deadzone threshold. max The upper deadzone threshold. Wrap(Double, Double, Double) Wraps the input to the range [ min .. max ]. If the value exceeds max it wraps around to min , and if the value is less than min it wraps back to max . public static double Wrap(double input, double min, double max) Parameter Description input The input value to wrap. min The minimum value of the range. max The maximum value of the range. Wrap(Int32, Int32, Int32) Wraps the input to the range [ min .. max ). If the value exceeds max it wraps around to min , and if the value is less than min it wraps back to max . public static int Wrap(int input, int min, int max) Parameter Description input The input value to wrap. min The minimum value of the range. max The maximum value of the range. Wrap(Single, Single, Single) Wraps the input to the range [ min .. max ]. If the value exceeds max it wraps around to min , and if the value is less than min it wraps back to max . public static float Wrap(float input, float min, float max) Parameter Description input The input value to wrap. min The minimum value of the range. max The maximum value of the range. Wrap(Vector2, Vector2, Vector2) Wraps the input to the range [ min .. max ]. If the value exceeds max it wraps around to min , and if the value is less than min it wraps back to max . public static Vector2 Wrap(Vector2 input, Vector2 min, Vector2 max) Parameter Description input The input value to wrap. min The minimum value of the range. max The maximum value of the range. Wrap(Vector2Int, Vector2Int, Vector2Int) Wraps the input to the range [ min .. max ]. If the value exceeds max it wraps around to min , and if the value is less than min it wraps back to max . public static Vector2Int Wrap(Vector2Int input, Vector2Int min, Vector2Int max) Parameter Description input The input value to wrap. min The minimum value of the range. max The maximum value of the range. Wrap(Vector3, Vector3, Vector3) Wraps the input to the range [ min .. max ]. If the value exceeds max it wraps around to min , and if the value is less than min it wraps back to max . public static Vector3 Wrap(Vector3 input, Vector3 min, Vector3 max) Parameter Description input The input value to wrap. min The minimum value of the range. max The maximum value of the range. Wrap(Vector3Int, Vector3Int, Vector3Int) Wraps the input to the range [ min .. max ]. If the value exceeds max it wraps around to min , and if the value is less than min it wraps back to max . public static Vector3Int Wrap(Vector3Int input, Vector3Int min, Vector3Int max) Parameter Description input The input value to wrap. min The minimum value of the range. max The maximum value of the range. Wrap(Vector4, Vector4, Vector4) Wraps the input to the range [ min .. max ]. If the value exceeds max it wraps around to min , and if the value is less than min it wraps back to max . public static Vector4 Wrap(Vector4 input, Vector4 min, Vector4 max) Parameter Description input The input value to wrap. min The minimum value of the range. max The maximum value of the range. Wrap01(Double) Wraps the input to the range [0..1]. If the value exceeds 1 it wraps around to 0, and if the value is less than 0 it wraps back to 1. public static double Wrap01(double input) Parameter Description input The input value to wrap. Wrap01(Int32) Wraps the input to the range [0..1]. If the value exceeds 1 it wraps around to 0, and if the value is less than 0 it wraps back to 1. public static int Wrap01(int input) Parameter Description input The input value to wrap. Wrap01(Single) Wraps the input to the range [0..1]. If the value exceeds 1 it wraps around to 0, and if the value is less than 0 it wraps back to 1. public static float Wrap01(float input) Parameter Description input The input value to wrap. Wrap01(Vector2) Wraps the input values to the range [0..1]. If a value exceeds 1 it wraps around to 0, and if a value is less than 0 it wraps back to 1. public static Vector2 Wrap01(Vector2 input) Parameter Description input The input value to wrap. Wrap01(Vector2Int) Wraps the input values to the range [0..1]. If a value exceeds 1 it wraps around to 0, and if a value is less than 0 it wraps back to 1. public static Vector2Int Wrap01(Vector2Int input) Parameter Description input The input value to wrap. Wrap01(Vector3) Wraps the input values to the range [0..1]. If a value exceeds 1 it wraps around to 0, and if a value is less than 0 it wraps back to 1. public static Vector3 Wrap01(Vector3 input) Parameter Description input The input value to wrap. Wrap01(Vector3Int) Wraps the input values to the range [0..1]. If a value exceeds 1 it wraps around to 0, and if a value is less than 0 it wraps back to 1. public static Vector3Int Wrap01(Vector3Int input) Parameter Description input The input value to wrap. Wrap01(Vector4) Wraps the input values to the range [0..1]. If a value exceeds 1 it wraps around to 0, and if a value is less than 0 it wraps back to 1. public static Vector4 Wrap01(Vector4 input) Parameter Description input The input value to wrap."
  },
  "api/Zigurous.Math.QuaternionExtensions.html": {
    "href": "api/Zigurous.Math.QuaternionExtensions.html",
    "title": "Class QuaternionExtensions | Math Utils",
    "keywords": "Class QuaternionExtensions Extension methods for quaternions. Inheritance System.Object QuaternionExtensions Namespace : Zigurous.Math public static class QuaternionExtensions Methods SmoothDamp(Quaternion, Quaternion, ref Quaternion, Single, Single) Gradually changes a quaternion towards a desired goal over time. The quaternion is smoothed by some spring-damper like function, which will never overshoot. public static Quaternion SmoothDamp(this Quaternion current, Quaternion target, ref Quaternion currentVelocity, float smoothTime, float maxSpeed = default(float)) Parameter Description current The current position. target The position we are trying to reach. currentVelocity The current velocity, this value is modified by the function every time you call it. smoothTime Approximately the time it will take to reach the target. A smaller value will reach the target faster. maxSpeed Optionally allows you to clamp the maximum speed. Returns Description Quaternion The smoothed quaternion."
  },
  "api/Zigurous.Math.ShortExtensions.html": {
    "href": "api/Zigurous.Math.ShortExtensions.html",
    "title": "Class ShortExtensions | Math Utils",
    "keywords": "Class ShortExtensions Extension methods for shorts. Inheritance System.Object ShortExtensions Namespace : Zigurous.Math public static class ShortExtensions Methods HasAnyFlag(Int16, Int16) Checks if any of the flags are set in the bitmask. (mask & flags) != 0 public static bool HasAnyFlag(this short mask, short flags) Parameter Description mask The mask to check. flags The flags to check for. HasFlag(Int16, Int16) Checks if the flag is set in the bitmask. (mask & flag) == flag public static bool HasFlag(this short mask, short flag) Parameter Description mask The mask to check. flag The flag to check for. IsEven(Int16) Checks if the number is even. n % 2 == 0 public static bool IsEven(this short n) Parameter Description n The number to check. IsNegative(Int16) Checks if the number is negative. n < 0 public static bool IsNegative(this short n) Parameter Description n The number to check. IsOdd(Int16) Checks if the number is odd. n % 2 != 0 public static bool IsOdd(this short n) Parameter Description n The number to check. IsPositive(Int16) Checks if the number is positive. n > 0 public static bool IsPositive(this short n) Parameter Description n The number to check. IsZero(Int16) Checks if the number is zero. n == 0 public static bool IsZero(this short n) Parameter Description n The number to check. ToBinaryString(Int16) Converts the number to a string of binary digits. public static string ToBinaryString(this short n) Parameter Description n The number to convert. Returns Description System.String The binary representation of the number."
  },
  "api/Zigurous.Math.UIntExtensions.html": {
    "href": "api/Zigurous.Math.UIntExtensions.html",
    "title": "Class UIntExtensions | Math Utils",
    "keywords": "Class UIntExtensions Extension methods for uints. Inheritance System.Object UIntExtensions Namespace : Zigurous.Math public static class UIntExtensions Methods Factors(UInt32) Returns the factors of the given number. public static IEnumerable<uint> Factors(this uint n) Parameter Description n The number to factor. GetBits(UInt32, Int32, Int32) Returns a subset of bits from the number. public static uint GetBits(this uint n, int amount, int offset) Parameter Description n The number to get bits from. amount The amount of bits to return. offset The amount of bits to discard. HasAnyFlag(UInt32, UInt32) Checks if any of the flags are set in the bitmask. (mask & flags) != 0 public static bool HasAnyFlag(this uint mask, uint flags) Parameter Description mask The mask to check. flags The flags to check for. HasFlag(UInt32, UInt32) Checks if the flag is set in the bitmask. (mask & flag) == flag public static bool HasFlag(this uint mask, uint flag) Parameter Description mask The mask to check. flag The flag to check for. IsEven(UInt32) Checks if the number is even. n % 2 == 0 public static bool IsEven(this uint n) Parameter Description n The number to check. IsOdd(UInt32) Checks if the number is odd. n % 2 != 0 public static bool IsOdd(this uint n) Parameter Description n The number to check. IsPositive(UInt32) Checks if the number is positive. n > 0 public static bool IsPositive(this uint n) Parameter Description n The number to check. IsZero(UInt32) Checks if the number is zero. n == 0 public static bool IsZero(this uint n) Parameter Description n The number to check. ToBinaryString(UInt32) Converts the number to a string of binary digits. public static string ToBinaryString(this uint n) Parameter Description n The number to convert. Returns Description System.String The binary representation of the number."
  },
  "api/Zigurous.Math.Vector2Extensions.html": {
    "href": "api/Zigurous.Math.Vector2Extensions.html",
    "title": "Class Vector2Extensions | Math Utils",
    "keywords": "Class Vector2Extensions Extension methods for Vector2. Inheritance System.Object Vector2Extensions Namespace : Zigurous.Math public static class Vector2Extensions Methods Abs(Vector2) Returns the absolute value of the vector. public static Vector2 Abs(this Vector2 vector) Parameter Description vector The vector to return the absolute of. Average(Vector2[]) Calculates the average of the vectors. public static Vector2 Average(this Vector2[] vectors) Parameter Description vectors The vectors to return the average of. Returns Description Vector2 A new vector of the average. Ceil(ref Vector2) Rounds the vector up to the nearest whole number. public static void Ceil(this ref Vector2 vector) Parameter Description vector The vector to round. Ceiled(Vector2) Rounds the vector up to the nearest whole number. public static Vector2 Ceiled(this Vector2 vector) Parameter Description vector The vector to round. Returns Description Vector2 A new rounded vector. Clamp(ref Vector2, Vector2, Vector2) Clamps the vector to the range [ min .. max ]. public static void Clamp(this ref Vector2 vector, Vector2 min, Vector2 max) Parameter Description vector The vector to clamp. min The minimum value. max The maximum value. Clamped(Vector2, Vector2, Vector2) Clamps the vector to the range [ min .. max ]. public static Vector2 Clamped(this Vector2 vector, Vector2 min, Vector2 max) Parameter Description vector The vector to clamp. min The minimum value. max The maximum value. Returns Description Vector2 A new clamped vector. Floor(ref Vector2) Rounds the vector down to the nearest whole number. public static void Floor(this ref Vector2 vector) Parameter Description vector The vector to round. Floored(Vector2) Rounds the vector down to the nearest whole number. public static Vector2 Floored(this Vector2 vector) Parameter Description vector The vector to round. Returns Description Vector2 A new rounded vector. IsEqualTo(Vector2, Vector2, Single) Checks for equality with another vector given a margin of error specified by the epsilon . public static bool IsEqualTo(this Vector2 lhs, Vector2 rhs, float epsilon = 1.401298E-45F) Parameter Description lhs The left-hand side of the equality check. rhs The right-hand side of the equality check. epsilon Returns Description System.Boolean True if lhs is considered equal to rhs . IsZero(Vector2, Single) Checks if the vector is zero given a margin of error specified by the epsilon . public static bool IsZero(this Vector2 vector, float epsilon = 1.401298E-45F) Parameter Description vector The vector to check. epsilon The margin of error. Returns Description System.Boolean True if the vector is considered zero. Round(ref Vector2) Rounds the vector to the nearest whole number. public static void Round(this ref Vector2 vector) Parameter Description vector The vector to round. Rounded(Vector2) Rounds the vector to the nearest whole number. public static Vector2 Rounded(this Vector2 vector) Parameter Description vector The vector to round. Returns Description Vector2 A new rounded vector. SetUniform(ref Vector2, Single) Sets all components of the vector to the given value . public static void SetUniform(this ref Vector2 vector, float value) Parameter Description vector The vector to set. value The uniform component value. SetUniformly(Vector2, Single) Sets all components of the vector to the given value . public static Vector2 SetUniformly(this Vector2 vector, float value) Parameter Description vector The vector to set. value The uniform component value. Returns Description Vector2 A new vector with the uniform component value. Wrap(ref Vector2, Vector2, Vector2) Wraps the vector to the min and max values. public static void Wrap(this ref Vector2 vector, Vector2 min, Vector2 max) Parameter Description vector The vector to wrap. min The minimum value. max The maximum value. Wrapped(Vector2, Vector2, Vector2) Wraps the vector to the min and max values. public static Vector2 Wrapped(this Vector2 vector, Vector2 min, Vector2 max) Parameter Description vector The vector to wrap. min The minimum value. max The maximum value. Returns Description Vector2 A new wrapped vector."
  },
  "api/Zigurous.Math.Vector2IntExtensions.html": {
    "href": "api/Zigurous.Math.Vector2IntExtensions.html",
    "title": "Class Vector2IntExtensions | Math Utils",
    "keywords": "Class Vector2IntExtensions Extension methods for Vector2Int. Inheritance System.Object Vector2IntExtensions Namespace : Zigurous.Math public static class Vector2IntExtensions Methods Abs(Vector2Int) Returns the absolute value of the vector. public static Vector2Int Abs(this Vector2Int vector) Parameter Description vector The vector to return the absolute of. Average(Vector2Int[]) Calculates the average of the vectors. public static Vector2Int Average(this Vector2Int[] vectors) Parameter Description vectors The vectors to return the average of. Returns Description Vector2Int A new vector of the average. Clamp(ref Vector2Int, Vector2Int, Vector2Int) Clamps the vector to the range [ min .. max ]. public static void Clamp(this ref Vector2Int vector, Vector2Int min, Vector2Int max) Parameter Description vector The vector to clamp. min The minimum value. max The maximum value. Clamped(Vector2Int, Vector2Int, Vector2Int) Clamps the vector to the range [ min .. max ]. public static Vector2Int Clamped(this Vector2Int vector, Vector2Int min, Vector2Int max) Parameter Description vector The vector to clamp. min The minimum value. max The maximum value. Returns Description Vector2Int A new clamped vector. SetUniform(ref Vector2Int, Int32) Sets all components of the vector to the given value . public static void SetUniform(this ref Vector2Int vector, int value) Parameter Description vector The vector to set. value The uniform component value. SetUniformly(Vector2Int, Int32) Sets all components of the vector to the given value . public static Vector2Int SetUniformly(this Vector2Int vector, int value) Parameter Description vector The vector to set. value The uniform component value. Returns Description Vector2Int A new vector with the uniform component value. Wrap(ref Vector2Int, Vector2Int, Vector2Int) Wraps the vector to the min and max values. public static void Wrap(this ref Vector2Int vector, Vector2Int min, Vector2Int max) Parameter Description vector The vector to wrap. min The minimum value. max The maximum value. Wrapped(Vector2Int, Vector2Int, Vector2Int) Wraps the vector to the min and max values. public static Vector2Int Wrapped(this Vector2Int vector, Vector2Int min, Vector2Int max) Parameter Description vector The vector to wrap. min The minimum value. max The maximum value. Returns Description Vector2Int A new wrapped vector."
  },
  "api/Zigurous.Math.Vector3Extensions.html": {
    "href": "api/Zigurous.Math.Vector3Extensions.html",
    "title": "Class Vector3Extensions | Math Utils",
    "keywords": "Class Vector3Extensions Extension methods for Vector3. Inheritance System.Object Vector3Extensions Namespace : Zigurous.Math public static class Vector3Extensions Methods Abs(Vector3) Returns the absolute value of the vector. public static Vector3 Abs(this Vector3 vector) Parameter Description vector The vector to return the absolute of. Average(Vector3[]) Calculates the average of the vectors. public static Vector3 Average(this Vector3[] vectors) Parameter Description vectors The vectors to return the average of. Returns Description Vector3 A new vector of the average. Ceil(ref Vector3) Rounds the vector up to the nearest whole number. public static void Ceil(this ref Vector3 vector) Parameter Description vector The vector to round. Ceiled(Vector3) Rounds the vector up to the nearest whole number. public static Vector3 Ceiled(this Vector3 vector) Parameter Description vector The vector to round. Returns Description Vector3 A new rounded vector. Clamp(ref Vector3, Vector3, Vector3) Clamps the vector to the range [ min .. max ]. public static void Clamp(this ref Vector3 vector, Vector3 min, Vector3 max) Parameter Description vector The vector to clamp. min The minimum value. max The maximum value. Clamped(Vector3, Vector3, Vector3) Clamps the vector to the range [ min .. max ]. public static Vector3 Clamped(this Vector3 vector, Vector3 min, Vector3 max) Parameter Description vector The vector to clamp. min The minimum value. max The maximum value. Returns Description Vector3 A new clamped vector. Floor(ref Vector3) Rounds the vector down to the nearest whole number. public static void Floor(this ref Vector3 vector) Parameter Description vector The vector to round. Floored(Vector3) Rounds the vector down to the nearest whole number. public static Vector3 Floored(this Vector3 vector) Parameter Description vector The vector to round. Returns Description Vector3 A new rounded vector. IsEqualTo(Vector3, Vector3, Single) Checks for equality with another vector given a margin of error specified by the epsilon . public static bool IsEqualTo(this Vector3 lhs, Vector3 rhs, float epsilon = 1.401298E-45F) Parameter Description lhs The left-hand side of the equality check. rhs The right-hand side of the equality check. epsilon Returns Description System.Boolean True if lhs is considered equal to rhs . IsZero(Vector3, Single) Checks if the vector is zero given a margin of error specified by the epsilon . public static bool IsZero(this Vector3 vector, float epsilon = 1.401298E-45F) Parameter Description vector The vector to check. epsilon The margin of error. Returns Description System.Boolean True if the vector is considered zero. Round(ref Vector3) Rounds the vector to the nearest whole number. public static void Round(this ref Vector3 vector) Parameter Description vector The vector to round. Rounded(Vector3) Rounds the vector to the nearest whole number. public static Vector3 Rounded(this Vector3 vector) Parameter Description vector The vector to round. Returns Description Vector3 A new rounded vector. SetUniform(ref Vector3, Single) Sets all components of the vector to the given value . public static void SetUniform(this ref Vector3 vector, float value) Parameter Description vector The vector to set. value The uniform component value. SetUniformly(Vector3, Single) Sets all components of the vector to the given value . public static Vector3 SetUniformly(this Vector3 vector, float value) Parameter Description vector The vector to set. value The uniform component value. Returns Description Vector3 A new vector with the uniform component value. Wrap(ref Vector3, Vector3, Vector3) Wraps the vector to the min and max values. public static void Wrap(this ref Vector3 vector, Vector3 min, Vector3 max) Parameter Description vector The vector to wrap. min The minimum value. max The maximum value. Wrapped(Vector3, Vector3, Vector3) Wraps the vector to the min and max values. public static Vector3 Wrapped(this Vector3 vector, Vector3 min, Vector3 max) Parameter Description vector The vector to wrap. min The minimum value. max The maximum value. Returns Description Vector3 A new wrapped vector."
  },
  "api/Zigurous.Math.Vector3IntExtensions.html": {
    "href": "api/Zigurous.Math.Vector3IntExtensions.html",
    "title": "Class Vector3IntExtensions | Math Utils",
    "keywords": "Class Vector3IntExtensions Extension methods for Vector3Int. Inheritance System.Object Vector3IntExtensions Namespace : Zigurous.Math public static class Vector3IntExtensions Methods Abs(Vector3Int) Returns the absolute value of the vector. public static Vector3Int Abs(this Vector3Int vector) Parameter Description vector The vector to return the absolute of. Average(Vector3Int[]) Calculates the average of the vectors. public static Vector3Int Average(this Vector3Int[] vectors) Parameter Description vectors The vectors to return the average of. Returns Description Vector3Int A new vector of the average. Clamp(ref Vector3Int, Vector3Int, Vector3Int) Clamps the vector to the range [ min .. max ]. public static void Clamp(this ref Vector3Int vector, Vector3Int min, Vector3Int max) Parameter Description vector The vector to clamp. min The minimum value. max The maximum value. Clamped(Vector3Int, Vector3Int, Vector3Int) Clamps the vector to the range [ min .. max ]. public static Vector3Int Clamped(this Vector3Int vector, Vector3Int min, Vector3Int max) Parameter Description vector The vector to clamp. min The minimum value. max The maximum value. Returns Description Vector3Int A new clamped vector. SetUniform(ref Vector3Int, Int32) Sets all components of the vector to the given value . public static void SetUniform(this ref Vector3Int vector, int value) Parameter Description vector The vector to set. value The uniform component value. SetUniformly(Vector3Int, Int32) Sets all components of the vector to the given value . public static Vector3Int SetUniformly(this Vector3Int vector, int value) Parameter Description vector The vector to set. value The uniform component value. Returns Description Vector3Int A new vector with the uniform component value. Wrap(ref Vector3Int, Vector3Int, Vector3Int) Wraps the vector to the min and max values. public static void Wrap(this ref Vector3Int vector, Vector3Int min, Vector3Int max) Parameter Description vector The vector to wrap. min The minimum value. max The maximum value. Wrapped(Vector3Int, Vector3Int, Vector3Int) Wraps the vector to the min and max values. public static Vector3Int Wrapped(this Vector3Int vector, Vector3Int min, Vector3Int max) Parameter Description vector The vector to wrap. min The minimum value. max The maximum value. Returns Description Vector3Int A new wrapped vector."
  },
  "api/Zigurous.Math.Vector4Extensions.html": {
    "href": "api/Zigurous.Math.Vector4Extensions.html",
    "title": "Class Vector4Extensions | Math Utils",
    "keywords": "Class Vector4Extensions Extension methods for Vector4. Inheritance System.Object Vector4Extensions Namespace : Zigurous.Math public static class Vector4Extensions Methods Abs(Vector4) Returns the absolute value of the vector. public static Vector4 Abs(this Vector4 vector) Parameter Description vector The vector to return the absolute of. Average(Vector4[]) Calculates the average of the vectors. public static Vector4 Average(this Vector4[] vectors) Parameter Description vectors The vectors to return the average of. Returns Description Vector4 A new vector of the average. Ceil(ref Vector4) Rounds the vector up to the nearest whole number. public static void Ceil(this ref Vector4 vector) Parameter Description vector The vector to round. Ceiled(Vector4) Rounds the vector up to the nearest whole number. public static Vector4 Ceiled(this Vector4 vector) Parameter Description vector The vector to round. Returns Description Vector4 A new rounded vector. Clamp(ref Vector4, Vector4, Vector4) Clamps the vector to the range [ min .. max ]. public static void Clamp(this ref Vector4 vector, Vector4 min, Vector4 max) Parameter Description vector The vector to clamp. min The minimum value. max The maximum value. Clamped(Vector4, Vector4, Vector4) Clamps the vector to the range [ min .. max ]. public static Vector4 Clamped(this Vector4 vector, Vector4 min, Vector4 max) Parameter Description vector The vector to clamp. min The minimum value. max The maximum value. Returns Description Vector4 A new clamped vector. Floor(ref Vector4) Rounds the vector down to the nearest whole number. public static void Floor(this ref Vector4 vector) Parameter Description vector The vector to round. Floored(Vector4) Rounds the vector down to the nearest whole number. public static Vector4 Floored(this Vector4 vector) Parameter Description vector The vector to round. Returns Description Vector4 A new rounded vector. IsEqualTo(Vector4, Vector4, Single) Checks for equality with another vector given a margin of error specified by the epsilon . public static bool IsEqualTo(this Vector4 lhs, Vector4 rhs, float epsilon = 1.401298E-45F) Parameter Description lhs The left-hand side of the equality check. rhs The right-hand side of the equality check. epsilon Returns Description System.Boolean True if lhs is considered equal to rhs . IsZero(Vector4, Single) Checks if the vector is zero given a margin of error specified by the epsilon . public static bool IsZero(this Vector4 vector, float epsilon = 1.401298E-45F) Parameter Description vector The vector to check. epsilon The margin of error. Returns Description System.Boolean True if the vector is considered zero. Round(ref Vector4) Rounds the vector to the nearest whole number. public static void Round(this ref Vector4 vector) Parameter Description vector The vector to round. Rounded(Vector4) Rounds the vector to the nearest whole number. public static Vector4 Rounded(this Vector4 vector) Parameter Description vector The vector to round. Returns Description Vector4 A new rounded vector. SetUniform(ref Vector4, Single) Sets all components of the vector to the given value . public static void SetUniform(this ref Vector4 vector, float value) Parameter Description vector The vector to set. value The uniform component value. SetUniformly(Vector4, Single) Sets all components of the vector to the given value . public static Vector4 SetUniformly(this Vector4 vector, float value) Parameter Description vector The vector to set. value The uniform component value. Returns Description Vector4 A new vector with the uniform component value. Wrap(ref Vector4, Vector4, Vector4) Wraps the vector to the min and max values. public static void Wrap(this ref Vector4 vector, Vector4 min, Vector4 max) Parameter Description vector The vector to wrap. min The minimum value. max The maximum value. Wrapped(Vector4, Vector4, Vector4) Wraps the vector to the min and max values. public static Vector4 Wrapped(this Vector4 vector, Vector4 min, Vector4 max) Parameter Description vector The vector to wrap. min The minimum value. max The maximum value. Returns Description Vector4 A new wrapped vector."
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "Changelog | Math Utils",
    "keywords": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [1.1.0] - 2021/07/12 Added New Dice static class for rolling dice + additional dice roll functions New NumberAbbreviation data structure + extensions ToAbbreviatedString New DoubleEqualityComparer to compare doubles based on # of decimals New Vector2Int extensions class New Vector3Int extensions class New List extensions class Extension methods for shuffling arrays and lists Shuffle() Extension method RandomPointInside for BoundsInt Additional IsBetween variants for inclusive/exclusive number ranges Dozens of new input processors and support for more types Changed Dice roll functions moved from Chance class to new Dice class Overhauled documentation comments Updated package description and README [1.0.4] - 2021/06/30 Changed Renamed package to Math Utils [1.0.3] - 2021/04/13 Added Wrap01 processors Changed Decay function now does nothing if the input is zero [1.0.2] - 2021/03/21 Changed Updated package metadata [1.0.1] - 2021/03/07 Changed Updated package metadata [1.0.0] - 2021/02/27 Added Processor Functions Chance Functions Float Equality Comparer Number Extensions Comparable Extensions Bounds/Collider Extensions"
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "License | Math Utils",
    "keywords": "License MIT License Copyright (c) 2021 Zigurous Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "manual/abbreviations.html": {
    "href": "manual/abbreviations.html",
    "title": "Number Abbreviations | Math Utils",
    "keywords": "Number Abbreviations The Math Utils package comes with methods to convert numbers to abbreviated strings. This is very useful in games that display floating combat text, for example. By default, numbers are abbreviated to the thousands (\"K\"), millions (\"M\"), billions (\"B\"), and trillions (\"T\"). 1_000.ToAbbreviatedString(); // \"1K\" 1_000_000.ToAbbreviatedString(); // \"1M\" 1_000_000_000.ToAbbreviatedString(); // \"1B\" 1_000_000_000_000.ToAbbreviatedString(); // \"1T\" Custom Abbreviations You can also provide your own custom abbreviations by creating a new NumberAbbreviation . NumberAbbreviation abbreviation = new NumberAbbreviation(factor, format); string display = abbreviation.Format(number); You can provide an array of number abbreviations to the ToAbbreviatedString function and it will select the first abbreviation possible. With this in mind, you usually want to order the abbreviations from largest to smallest. NumberAbbreviation[] abbreviations; number.ToAbbreviatedString(abbreviations);"
  },
  "manual/chance.html": {
    "href": "manual/chance.html",
    "title": "Random Chance | Math Utils",
    "keywords": "Random Chance The Math Utils package contains several functions for generating random chance values, including rolling dice, picking random playing cards, and other utility functions. Chance The Chance class comes with several predefined static functions for generating random chance numbers: Coin face = Chance.CoinFlip(); // heads, tails Suit suit = Chance.RandomSuit(); // hearts, diamonds, clubs, spades Card card = Chance.RandomCard(); // standard 52-card deck bool value = Chance.RandomBool(); // true, false float value = Chance.PositiveOrNegative(); // +1.0f, -1.0f float value = Chance.PositiveOrNegative(value); // +value, -value Dice Rolls The Dice class comes with several predefined static functions for common dice rolls, such as: int d4 = Dice.D4(); int d6 = Dice.D6(); int d8 = Dice.D8(); int d10 = Dice.D10(); int d12 = Dice.D12(); int d20 = Dice.D20(); ... For any of these functions you can also pass in a value for parameter n to indicate how many times you want to roll that dice. The function will return the sum of all rolls. For example, this would roll a 6-sided dice 3 times. int sum = Dice.D6(3); The class also has functions for rolling custom dice, either n-sided dice or dice with specific values. int d7 = Dice.NSided(7); // 7-sided dice int d7x3 = Dice.NSided(7, 3); // 7-sided dice 3 times int[] customValues = new int[] { 1, 3, 5, 7, 9 }; int[] probabilities = new int[] { 30, 25, 20, 15, 10 }; int roll = Dice.Roll(customValues); // equal probability int roll = Dice.Roll(customValues, probabilities);"
  },
  "manual/extensions.html": {
    "href": "manual/extensions.html",
    "title": "Extension Methods | Math Utils",
    "keywords": "Extension Methods A large majority of the functionality provided by the Math Utils package comes from extension methods. All of the extension methods found throughout the project are focused around numbers, whether it be arithmetic operations, bitwise operations, math algorithms, and other utilities of varying complexity. Extensions are available for the following data structures and classes: Array Bounds Collider Double Float IComparable Int List Long Quaternion Short UInt Vector2 Vector2Int Vector3 Vector3Int Vector4"
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "Math Utils | Math Utils",
    "keywords": "Math Utils The Math Utils package provides extensions and utilities for working with numbers in Unity projects including processing inputs, generating random numbers, and much more. Reference Input Processors Random Chance Number Abbreviations Extension Methods"
  },
  "manual/installation.html": {
    "href": "manual/installation.html",
    "title": "Installation | Math Utils",
    "keywords": "Installation Use the Unity Package Manager to install the Math Utils package. Open the Package Manager in Window > Package Manager Click the add ( + ) button in the status bar Select Add package from git URL from the add menu Enter the following Git URL in the text box and click Add: https://github.com/zigurous/unity-math-utils.git For more information on the Package Manager and installing packages, see the following pages: Unity's Package Manager Installing from a Git URL Importing Import the package namespace in each script or file you want to use it. Note : You may need to regenerate project files/assemblies first. using Zigurous.Math; Source Code The source code for the Math Utils package is in the following repository: https://github.com/zigurous/unity-math-utils"
  },
  "manual/processors.html": {
    "href": "manual/processors.html",
    "title": "Input Processors | Math Utils",
    "keywords": "Input Processors The Math Utils package contains various functions for processing input values. An input processor takes a value and returns a processed result for it of the same type. See the Processors class for all available functions, or the reference below: Abs Returns the absolute value of the input. Axis Deadzone An axis deadzone scales the input such that any value with an absolute value smaller than min is 0, and any value with an absolute value larger than max is 1 or -1. Ceil Rounds the input up to the nearest whole number. Clamp Clamps the input to the range [ min .. max ]. Clamp01 Clamps the input to the range [0..1]. Decay Decays the input back to zero over time at a given rate . The rate is multiplied by Time.deltaTime . Floor Rounds the input down to the nearest whole number. Invert Inverts the input by multiplying by -1. Note : Vectors can be inverted on a per-component basis. Normalize Normalizes the input in the range [ min .. max ] to unsigned normalized form [0..1] if min is >= zero , and to signed normalized form [-1..1] if min < zero . Note : Vectors are normalized by setting the unit length to 1 (the same as vector.normalized ). Round Rounds the input to the nearest whole number. Scale Multiplies the input by factor . Note : Vectors can be scaled on a per-component basis. Stick Deadzone A stick deadzone scales the input such that any value with a magnitude smaller than min results in (0,0), and any value with a magnitude greater than max is normalized to unit length (1). Wrap Wraps the input to the range [ min .. max ]. If the value exceeds max it wraps around to min , and if the value is less than min is wraps back to max . Note : Integers are wrapped [inclusive..exclusive) to make it easier for arrays. Wrap01 Wraps the input to the range [0..1]. If the value exceeds 1 it wraps around to 0, and if the value is less than 0 it wraps back to 1."
  }
}