{
  "api/Zigurous.Math.ArrayExtensions.html": {
    "href": "api/Zigurous.Math.ArrayExtensions.html",
    "title": "Class ArrayExtensions | Math Utils",
    "keywords": "Class ArrayExtensions Inheritance System.Object ArrayExtensions Namespace : Zigurous.Math Syntax public static class ArrayExtensions Methods Sum(Double[]) Declaration public static double Sum(this double[] array) Parameters Type Name Description System.Double [] array Returns Type Description System.Double Sum(Int32[]) Declaration public static int Sum(this int[] array) Parameters Type Name Description System.Int32 [] array Returns Type Description System.Int32 Sum(Single[]) Declaration public static float Sum(this float[] array) Parameters Type Name Description System.Single [] array Returns Type Description System.Single"
  },
  "api/Zigurous.Math.BoundsExtensions.html": {
    "href": "api/Zigurous.Math.BoundsExtensions.html",
    "title": "Class BoundsExtensions | Math Utils",
    "keywords": "Class BoundsExtensions Inheritance System.Object BoundsExtensions Namespace : Zigurous.Math Syntax public static class BoundsExtensions Methods RandomPointInside(Bounds) Declaration public static Vector3 RandomPointInside(this Bounds bounds) Parameters Type Name Description Bounds bounds Returns Type Description Vector3"
  },
  "api/Zigurous.Math.Chance.Coin.html": {
    "href": "api/Zigurous.Math.Chance.Coin.html",
    "title": "Enum Chance.Coin | Math Utils",
    "keywords": "Enum Chance.Coin Namespace : Zigurous.Math Syntax public enum Coin Fields Name Description Heads Tails"
  },
  "api/Zigurous.Math.Chance.GamblingColor.html": {
    "href": "api/Zigurous.Math.Chance.GamblingColor.html",
    "title": "Enum Chance.GamblingColor | Math Utils",
    "keywords": "Enum Chance.GamblingColor Namespace : Zigurous.Math Syntax public enum GamblingColor Fields Name Description Black Green Red White"
  },
  "api/Zigurous.Math.Chance.html": {
    "href": "api/Zigurous.Math.Chance.html",
    "title": "Class Chance | Math Utils",
    "keywords": "Class Chance Provides functions for generating random chance values. Inheritance System.Object Chance Namespace : Zigurous.Math Syntax public static class Chance Fields PLAYING_CARD_SUITES Declaration public static readonly Chance.PlayingCardSuit[] PLAYING_CARD_SUITES PLAYING_CARDS Declaration public static readonly Chance.PlayingCard[] PLAYING_CARDS Methods CoinFlip() Returns \"heads\" or \"tails\", with 50-50 odds. Declaration public static Chance.Coin CoinFlip() Returns Type Description Chance.Coin CustomDiceRoll(Int32[]) Returns a random number on a dice with custom values. Declaration public static int CustomDiceRoll(int[] values) Parameters Type Name Description System.Int32 [] values Returns Type Description System.Int32 CustomDiceRoll(Int32[], Int32) Returns the sum of rolling a dice with custom values, x amount of times. Declaration public static int CustomDiceRoll(int[] values, int x) Parameters Type Name Description System.Int32 [] values System.Int32 x Returns Type Description System.Int32 D10() Returns a random number on a 10-sided dice (1-10). Declaration public static int D10() Returns Type Description System.Int32 D10(Int32) Returns the sum of rolling a 10-sided dice (1-10), x amount of times. Declaration public static int D10(int x) Parameters Type Name Description System.Int32 x Returns Type Description System.Int32 D12() Returns a random number on a 12-sided dice (1-12). Declaration public static int D12() Returns Type Description System.Int32 D12(Int32) Returns the sum of rolling a 12-sided dice (1-12), x amount of times. Declaration public static int D12(int x) Parameters Type Name Description System.Int32 x Returns Type Description System.Int32 D20() Returns a random number on a 20-sided dice (1-20). Declaration public static int D20() Returns Type Description System.Int32 D20(Int32) Returns the sum of rolling a 20-sided dice (1-20), x amount of times. Declaration public static int D20(int x) Parameters Type Name Description System.Int32 x Returns Type Description System.Int32 D4() Returns a random number on a 4-sided dice (1-4). Declaration public static int D4() Returns Type Description System.Int32 D4(Int32) Returns the sum of rolling a 4-sided dice (1-4), x amount of times. Declaration public static int D4(int x) Parameters Type Name Description System.Int32 x Returns Type Description System.Int32 D6() Returns a random number on a 6-sided dice (1-6). Declaration public static int D6() Returns Type Description System.Int32 D6(Int32) Returns the sum of rolling a 6-sided dice (1-6), x amount of times. Declaration public static int D6(int x) Parameters Type Name Description System.Int32 x Returns Type Description System.Int32 D8() Returns a random number on an 8-sided dice (1-8). Declaration public static int D8() Returns Type Description System.Int32 D8(Int32) Returns the sum of rolling an 8-sided dice (1-8), x amount of times. Declaration public static int D8(int x) Parameters Type Name Description System.Int32 x Returns Type Description System.Int32 NSidedDiceRoll(Int32) Returns a random number on a n-sided dice (1-n). Declaration public static int NSidedDiceRoll(int n) Parameters Type Name Description System.Int32 n Returns Type Description System.Int32 NSidedDiceRoll(Int32, Int32) Returns the sum of rolling a n-sided dice (1-n), x amount of times. Declaration public static int NSidedDiceRoll(int n, int x) Parameters Type Name Description System.Int32 n System.Int32 x Returns Type Description System.Int32 PositiveOrNegative() Returns 1.0f or -1.0f, with 50-50 odds. Declaration public static float PositiveOrNegative() Returns Type Description System.Single PositiveOrNegative(Single) Returns -value or +value, with 50-50 odds. Declaration public static float PositiveOrNegative(float value) Parameters Type Name Description System.Single value Returns Type Description System.Single RandomBool() Returns true or false, with 50-50 odds. Declaration public static bool RandomBool() Returns Type Description System.Boolean RandomPlayingCard() Returns a random playing card from a standard deck of 52 cards. Declaration public static Chance.PlayingCard RandomPlayingCard() Returns Type Description Chance.PlayingCard RandomPlayingCardSuite() Returns \"hearts\", \"diamonds\", \"spades\", or \"clubs\", with equal odds. Declaration public static Chance.PlayingCardSuit RandomPlayingCardSuite() Returns Type Description Chance.PlayingCardSuit RedBlack() Returns \"red\" or \"black\", with 50-50 odds. Declaration public static Chance.GamblingColor RedBlack() Returns Type Description Chance.GamblingColor Roll<T>(T[], Int32[]) Returns a random value from an array with probability proportional to a given set of frequencies. Declaration public static T Roll<T>(T[] values, int[] frequencies) Parameters Type Name Description T[] values System.Int32 [] frequencies Returns Type Description T Type Parameters Name Description T"
  },
  "api/Zigurous.Math.Chance.PlayingCard.html": {
    "href": "api/Zigurous.Math.Chance.PlayingCard.html",
    "title": "Enum Chance.PlayingCard | Math Utils",
    "keywords": "Enum Chance.PlayingCard Namespace : Zigurous.Math Syntax public enum PlayingCard Fields Name Description Clubs10 Clubs2 Clubs3 Clubs4 Clubs5 Clubs6 Clubs7 Clubs8 Clubs9 ClubsA ClubsJ ClubsK ClubsQ Diamonds10 Diamonds2 Diamonds3 Diamonds4 Diamonds5 Diamonds6 Diamonds7 Diamonds8 Diamonds9 DiamondsA DiamondsJ DiamondsK DiamondsQ Hearts10 Hearts2 Hearts3 Hearts4 Hearts5 Hearts6 Hearts7 Hearts8 Hearts9 HeartsA HeartsJ HeartsK HeartsQ Spades10 Spades2 Spades3 Spades4 Spades5 Spades6 Spades7 Spades8 Spades9 SpadesA SpadesJ SpadesK SpadesQ"
  },
  "api/Zigurous.Math.Chance.PlayingCardSuit.html": {
    "href": "api/Zigurous.Math.Chance.PlayingCardSuit.html",
    "title": "Enum Chance.PlayingCardSuit | Math Utils",
    "keywords": "Enum Chance.PlayingCardSuit Namespace : Zigurous.Math Syntax public enum PlayingCardSuit Fields Name Description Clubs Diamonds Hearts Spades"
  },
  "api/Zigurous.Math.ColliderExtensions.html": {
    "href": "api/Zigurous.Math.ColliderExtensions.html",
    "title": "Class ColliderExtensions | Math Utils",
    "keywords": "Class ColliderExtensions Inheritance System.Object ColliderExtensions Namespace : Zigurous.Math Syntax public static class ColliderExtensions Methods RandomPointInside(Collider) Declaration public static Vector3 RandomPointInside(this Collider collider) Parameters Type Name Description Collider collider Returns Type Description Vector3 RandomPointInside(Collider2D) Declaration public static Vector3 RandomPointInside(this Collider2D collider) Parameters Type Name Description Collider2D collider Returns Type Description Vector3"
  },
  "api/Zigurous.Math.ComparableExtensions.html": {
    "href": "api/Zigurous.Math.ComparableExtensions.html",
    "title": "Class ComparableExtensions | Math Utils",
    "keywords": "Class ComparableExtensions Inheritance System.Object ComparableExtensions Namespace : Zigurous.Math Syntax public static class ComparableExtensions Methods IsBetween<T>(T, T, T, Boolean, Boolean) Declaration public static bool IsBetween<T>(this T value, T min, T max, bool includeMin, bool includeMax) where T : IComparable<T> Parameters Type Name Description T value T min T max System.Boolean includeMin System.Boolean includeMax Returns Type Description System.Boolean Type Parameters Name Description T Max<T>(T[]) Declaration public static T Max<T>(this T[] array) where T : IComparable<T> Parameters Type Name Description T[] array Returns Type Description T Type Parameters Name Description T Max<T>(List<T>) Declaration public static T Max<T>(this List<T> list) where T : IComparable<T> Parameters Type Name Description List <T> list Returns Type Description T Type Parameters Name Description T Min<T>(T[]) Declaration public static T Min<T>(this T[] array) where T : IComparable<T> Parameters Type Name Description T[] array Returns Type Description T Type Parameters Name Description T Min<T>(List<T>) Declaration public static T Min<T>(this List<T> list) where T : IComparable<T> Parameters Type Name Description List <T> list Returns Type Description T Type Parameters Name Description T"
  },
  "api/Zigurous.Math.DoubleExtensions.html": {
    "href": "api/Zigurous.Math.DoubleExtensions.html",
    "title": "Class DoubleExtensions | Math Utils",
    "keywords": "Class DoubleExtensions Inheritance System.Object DoubleExtensions Namespace : Zigurous.Math Syntax public static class DoubleExtensions Methods IsDividable(Double) Declaration public static bool IsDividable(this double value) Parameters Type Name Description System.Double value Returns Type Description System.Boolean IsEqualTo(Double, Double) Declaration public static bool IsEqualTo(this double lhs, double rhs) Parameters Type Name Description System.Double lhs System.Double rhs Returns Type Description System.Boolean IsEqualTo(Double, Double, Double) Declaration public static bool IsEqualTo(this double lhs, double rhs, double epsilon) Parameters Type Name Description System.Double lhs System.Double rhs System.Double epsilon Returns Type Description System.Boolean IsImaginaryNumber(Double) Declaration public static bool IsImaginaryNumber(this double value) Parameters Type Name Description System.Double value Returns Type Description System.Boolean IsInfinity(Double) Declaration public static bool IsInfinity(this double value) Parameters Type Name Description System.Double value Returns Type Description System.Boolean IsInRange(Double, Double, Double) Declaration public static bool IsInRange(this double value, double min, double max) Parameters Type Name Description System.Double value System.Double min System.Double max Returns Type Description System.Boolean IsNaN(Double) Declaration public static bool IsNaN(this double value) Parameters Type Name Description System.Double value Returns Type Description System.Boolean IsNegative(Double) Declaration public static bool IsNegative(this double value) Parameters Type Name Description System.Double value Returns Type Description System.Boolean IsNegativeInfinity(Double) Declaration public static bool IsNegativeInfinity(this double value) Parameters Type Name Description System.Double value Returns Type Description System.Boolean IsNotEqualTo(Double, Double) Declaration public static bool IsNotEqualTo(this double lhs, double rhs) Parameters Type Name Description System.Double lhs System.Double rhs Returns Type Description System.Boolean IsNotEqualTo(Double, Double, Double) Declaration public static bool IsNotEqualTo(this double lhs, double rhs, double epsilon) Parameters Type Name Description System.Double lhs System.Double rhs System.Double epsilon Returns Type Description System.Boolean IsNotInfinity(Double) Declaration public static bool IsNotInfinity(this double value) Parameters Type Name Description System.Double value Returns Type Description System.Boolean IsNotNaN(Double) Declaration public static bool IsNotNaN(this double value) Parameters Type Name Description System.Double value Returns Type Description System.Boolean IsNotZero(Double) Declaration public static bool IsNotZero(this double value) Parameters Type Name Description System.Double value Returns Type Description System.Boolean IsNotZero(Double, Double) Declaration public static bool IsNotZero(this double value, double epsilon) Parameters Type Name Description System.Double value System.Double epsilon Returns Type Description System.Boolean IsPositive(Double) Declaration public static bool IsPositive(this double value) Parameters Type Name Description System.Double value Returns Type Description System.Boolean IsPositiveInfinity(Double) Declaration public static bool IsPositiveInfinity(this double value) Parameters Type Name Description System.Double value Returns Type Description System.Boolean IsRealNumber(Double) Declaration public static bool IsRealNumber(this double value) Parameters Type Name Description System.Double value Returns Type Description System.Boolean IsZero(Double) Declaration public static bool IsZero(this double value) Parameters Type Name Description System.Double value Returns Type Description System.Boolean IsZero(Double, Double) Declaration public static bool IsZero(this double value, double epsilon) Parameters Type Name Description System.Double value System.Double epsilon Returns Type Description System.Boolean NotImaginary(Double, Double) Declaration public static double NotImaginary(this double value, double newValue = 0) Parameters Type Name Description System.Double value System.Double newValue Returns Type Description System.Double NotInfinity(Double, Double) Declaration public static double NotInfinity(this double value, double newValue = 0) Parameters Type Name Description System.Double value System.Double newValue Returns Type Description System.Double NotNaN(Double, Double) Declaration public static double NotNaN(this double value, double newValue = 0) Parameters Type Name Description System.Double value System.Double newValue Returns Type Description System.Double NotZero(Double, Double) Declaration public static double NotZero(this double value, double newValue = 4.94065645841247E-324) Parameters Type Name Description System.Double value System.Double newValue Returns Type Description System.Double NotZero(Double, Double, Double) Declaration public static double NotZero(this double value, double newValue = 4.94065645841247E-324, double epsilon = 4.94065645841247E-324) Parameters Type Name Description System.Double value System.Double newValue System.Double epsilon Returns Type Description System.Double"
  },
  "api/Zigurous.Math.FloatEqualityComparer.html": {
    "href": "api/Zigurous.Math.FloatEqualityComparer.html",
    "title": "Class FloatEqualityComparer | Math Utils",
    "keywords": "Class FloatEqualityComparer Determines equality between float values given an amount of decimal digits to compare. Inheritance System.Object FloatEqualityComparer Namespace : Zigurous.Math Syntax public sealed class FloatEqualityComparer : IEqualityComparer<float> Fields digits The number of decimal digits to compare when determining equality. Declaration public int digits Methods Equals(Single, Single) Determines whether the specified floats are equal. Declaration public bool Equals(float x, float y) Parameters Type Name Description System.Single x System.Single y Returns Type Description System.Boolean GetHashCode(Single) Returns a hash code for the specified float value. Declaration public int GetHashCode(float f) Parameters Type Name Description System.Single f Returns Type Description System.Int32"
  },
  "api/Zigurous.Math.FloatExtensions.html": {
    "href": "api/Zigurous.Math.FloatExtensions.html",
    "title": "Class FloatExtensions | Math Utils",
    "keywords": "Class FloatExtensions Inheritance System.Object FloatExtensions Namespace : Zigurous.Math Syntax public static class FloatExtensions Fields SAFE_FLOAT Sometimes Unity throws precision errors for really small numbers such as when setting transform values. Using float.Epsilon can still cause issues so this value is intended to be a safer alternative. Declaration public const float SAFE_FLOAT = 1.4E-32F Methods IsDividable(Single) Declaration public static bool IsDividable(this float value) Parameters Type Name Description System.Single value Returns Type Description System.Boolean IsEqualTo(Single, Single) Declaration public static bool IsEqualTo(this float lhs, float rhs) Parameters Type Name Description System.Single lhs System.Single rhs Returns Type Description System.Boolean IsEqualTo(Single, Single, Single) Declaration public static bool IsEqualTo(this float lhs, float rhs, float epsilon) Parameters Type Name Description System.Single lhs System.Single rhs System.Single epsilon Returns Type Description System.Boolean IsImaginaryNumber(Single) Declaration public static bool IsImaginaryNumber(this float value) Parameters Type Name Description System.Single value Returns Type Description System.Boolean IsInfinity(Single) Declaration public static bool IsInfinity(this float value) Parameters Type Name Description System.Single value Returns Type Description System.Boolean IsInRange(Single, Single, Single) Declaration public static bool IsInRange(this float value, float min, float max) Parameters Type Name Description System.Single value System.Single min System.Single max Returns Type Description System.Boolean IsNaN(Single) Declaration public static bool IsNaN(this float value) Parameters Type Name Description System.Single value Returns Type Description System.Boolean IsNegative(Single) Declaration public static bool IsNegative(this float value) Parameters Type Name Description System.Single value Returns Type Description System.Boolean IsNegativeInfinity(Single) Declaration public static bool IsNegativeInfinity(this float value) Parameters Type Name Description System.Single value Returns Type Description System.Boolean IsNotEqualTo(Single, Single) Declaration public static bool IsNotEqualTo(this float lhs, float rhs) Parameters Type Name Description System.Single lhs System.Single rhs Returns Type Description System.Boolean IsNotEqualTo(Single, Single, Single) Declaration public static bool IsNotEqualTo(this float lhs, float rhs, float epsilon) Parameters Type Name Description System.Single lhs System.Single rhs System.Single epsilon Returns Type Description System.Boolean IsNotInfinity(Single) Declaration public static bool IsNotInfinity(this float value) Parameters Type Name Description System.Single value Returns Type Description System.Boolean IsNotNaN(Single) Declaration public static bool IsNotNaN(this float value) Parameters Type Name Description System.Single value Returns Type Description System.Boolean IsNotZero(Single) Declaration public static bool IsNotZero(this float value) Parameters Type Name Description System.Single value Returns Type Description System.Boolean IsNotZero(Single, Single) Declaration public static bool IsNotZero(this float value, float epsilon) Parameters Type Name Description System.Single value System.Single epsilon Returns Type Description System.Boolean IsPositive(Single) Declaration public static bool IsPositive(this float value) Parameters Type Name Description System.Single value Returns Type Description System.Boolean IsPositiveInfinity(Single) Declaration public static bool IsPositiveInfinity(this float value) Parameters Type Name Description System.Single value Returns Type Description System.Boolean IsRealNumber(Single) Declaration public static bool IsRealNumber(this float value) Parameters Type Name Description System.Single value Returns Type Description System.Boolean IsZero(Single) Declaration public static bool IsZero(this float value) Parameters Type Name Description System.Single value Returns Type Description System.Boolean IsZero(Single, Single) Declaration public static bool IsZero(this float value, float epsilon) Parameters Type Name Description System.Single value System.Single epsilon Returns Type Description System.Boolean NotImaginary(Single, Single) Declaration public static float NotImaginary(this float value, float newValue = 0F) Parameters Type Name Description System.Single value System.Single newValue Returns Type Description System.Single NotInfinity(Single, Single) Declaration public static float NotInfinity(this float value, float newValue = 0F) Parameters Type Name Description System.Single value System.Single newValue Returns Type Description System.Single NotNaN(Single, Single) Declaration public static float NotNaN(this float value, float newValue = 0F) Parameters Type Name Description System.Single value System.Single newValue Returns Type Description System.Single NotZero(Single, Single) Declaration public static float NotZero(this float value, float newValue = 1.4E-32F) Parameters Type Name Description System.Single value System.Single newValue Returns Type Description System.Single NotZero(Single, Single, Single) Declaration public static float NotZero(this float value, float newValue = 1.4E-32F, float epsilon = 1.401298E-45F) Parameters Type Name Description System.Single value System.Single newValue System.Single epsilon Returns Type Description System.Single"
  },
  "api/Zigurous.Math.html": {
    "href": "api/Zigurous.Math.html",
    "title": "Namespace Zigurous.Math | Math Utils",
    "keywords": "Namespace Zigurous.Math Classes ArrayExtensions BoundsExtensions Chance Provides functions for generating random chance values. ColliderExtensions ComparableExtensions DoubleExtensions FloatEqualityComparer Determines equality between float values given an amount of decimal digits to compare. FloatExtensions IntExtensions LongExtensions Processors Provides functions for processing input values. QuaternionExtensions ShortExtensions UIntExtensions Vector2Extensions Vector3Extensions Vector4Extensions Enums Chance.Coin Chance.GamblingColor Chance.PlayingCard Chance.PlayingCardSuit"
  },
  "api/Zigurous.Math.IntExtensions.html": {
    "href": "api/Zigurous.Math.IntExtensions.html",
    "title": "Class IntExtensions | Math Utils",
    "keywords": "Class IntExtensions Inheritance System.Object IntExtensions Namespace : Zigurous.Math Syntax public static class IntExtensions Methods GetBits(Int32, Int32, Int32) Declaration public static int GetBits(this int value, int offset, int n) Parameters Type Name Description System.Int32 value System.Int32 offset System.Int32 n Returns Type Description System.Int32 HasAnyFlag(Int32, Int32) (mask & flags) != 0 Declaration public static bool HasAnyFlag(this int mask, int flags) Parameters Type Name Description System.Int32 mask System.Int32 flags Returns Type Description System.Boolean HasFlag(Int32, Int32) (mask & flag) == flag Declaration public static bool HasFlag(this int mask, int flag) Parameters Type Name Description System.Int32 mask System.Int32 flag Returns Type Description System.Boolean IsEven(Int32) n % 2 == 0 Declaration public static bool IsEven(this int n) Parameters Type Name Description System.Int32 n Returns Type Description System.Boolean IsNegative(Int32) Declaration public static bool IsNegative(this int n) Parameters Type Name Description System.Int32 n Returns Type Description System.Boolean IsOdd(Int32) n % 2 != 0 Declaration public static bool IsOdd(this int n) Parameters Type Name Description System.Int32 n Returns Type Description System.Boolean IsPositive(Int32) n > 0 Declaration public static bool IsPositive(this int n) Parameters Type Name Description System.Int32 n Returns Type Description System.Boolean IsZero(Int32) n == 0 Declaration public static bool IsZero(this int n) Parameters Type Name Description System.Int32 n Returns Type Description System.Boolean NumDigits(Int32) Declaration public static int NumDigits(this int n) Parameters Type Name Description System.Int32 n Returns Type Description System.Int32 ToBinary(Int32) Declaration public static string ToBinary(this int n) Parameters Type Name Description System.Int32 n Returns Type Description System.String"
  },
  "api/Zigurous.Math.LongExtensions.html": {
    "href": "api/Zigurous.Math.LongExtensions.html",
    "title": "Class LongExtensions | Math Utils",
    "keywords": "Class LongExtensions Inheritance System.Object LongExtensions Namespace : Zigurous.Math Syntax public static class LongExtensions Methods GetBits(Int64, Int32, Int32) Declaration public static long GetBits(this long value, int offset, int n) Parameters Type Name Description System.Int64 value System.Int32 offset System.Int32 n Returns Type Description System.Int64 HasAnyFlag(Int64, Int64) (mask & flags) != 0 Declaration public static bool HasAnyFlag(this long mask, long flags) Parameters Type Name Description System.Int64 mask System.Int64 flags Returns Type Description System.Boolean HasFlag(Int64, Int64) (mask & flag) == flag Declaration public static bool HasFlag(this long mask, long flag) Parameters Type Name Description System.Int64 mask System.Int64 flag Returns Type Description System.Boolean IsEven(Int64) n % 2 == 0 Declaration public static bool IsEven(this long n) Parameters Type Name Description System.Int64 n Returns Type Description System.Boolean IsNegative(Int64) Declaration public static bool IsNegative(this long n) Parameters Type Name Description System.Int64 n Returns Type Description System.Boolean IsOdd(Int64) n % 2 != 0 Declaration public static bool IsOdd(this long n) Parameters Type Name Description System.Int64 n Returns Type Description System.Boolean IsPositive(Int64) n > 0 Declaration public static bool IsPositive(this long n) Parameters Type Name Description System.Int64 n Returns Type Description System.Boolean IsZero(Int64) n == 0 Declaration public static bool IsZero(this long n) Parameters Type Name Description System.Int64 n Returns Type Description System.Boolean ToBinary(Int64) Declaration public static string ToBinary(this long n) Parameters Type Name Description System.Int64 n Returns Type Description System.String"
  },
  "api/Zigurous.Math.Processors.html": {
    "href": "api/Zigurous.Math.Processors.html",
    "title": "Class Processors | Math Utils",
    "keywords": "Class Processors Provides functions for processing input values. Inheritance System.Object Processors Namespace : Zigurous.Math Syntax public static class Processors Methods AxisDeadzone(Single, Single, Single) An axis deadzone scales the input such that any value with an absolute value smaller than min is 0, and any value with an absolute value larger than max is 1 or -1. Declaration public static float AxisDeadzone(float input, float min = 0.125F, float max = 0.925F) Parameters Type Name Description System.Single input System.Single min System.Single max Returns Type Description System.Single Clamp(Double, Double, Double) Clamps the input to the [min..max] range. Declaration public static double Clamp(double input, double min, double max) Parameters Type Name Description System.Double input System.Double min System.Double max Returns Type Description System.Double Clamp(Int32, Int32, Int32) Clamps the input to the [min..max] range. Declaration public static int Clamp(int input, int min, int max) Parameters Type Name Description System.Int32 input System.Int32 min System.Int32 max Returns Type Description System.Int32 Clamp(Single, Single, Single) Clamps the input to the [min..max] range. Declaration public static float Clamp(float input, float min, float max) Parameters Type Name Description System.Single input System.Single min System.Single max Returns Type Description System.Single Clamp(UInt32, UInt32, UInt32) Clamps the input to the [min..max] range. Declaration public static uint Clamp(uint input, uint min, uint max) Parameters Type Name Description System.UInt32 input System.UInt32 min System.UInt32 max Returns Type Description System.UInt32 Clamp(Vector2, Vector2, Vector2) Clamps the input to the [min..max] range. Declaration public static Vector3 Clamp(Vector2 input, Vector2 min, Vector2 max) Parameters Type Name Description Vector2 input Vector2 min Vector2 max Returns Type Description Vector3 Clamp(Vector3, Vector3, Vector3) Clamps the input to the [min..max] range. Declaration public static Vector3 Clamp(Vector3 input, Vector3 min, Vector3 max) Parameters Type Name Description Vector3 input Vector3 min Vector3 max Returns Type Description Vector3 Clamp(Vector4, Vector4, Vector4) Clamps the input to the [min..max] range. Declaration public static Vector4 Clamp(Vector4 input, Vector4 min, Vector4 max) Parameters Type Name Description Vector4 input Vector4 min Vector4 max Returns Type Description Vector4 Clamp01(Double) Clamps the input to the range [0..1]. Declaration public static double Clamp01(double input) Parameters Type Name Description System.Double input Returns Type Description System.Double Clamp01(Int32) Clamps the input to the range [0..1]. Declaration public static int Clamp01(int input) Parameters Type Name Description System.Int32 input Returns Type Description System.Int32 Clamp01(Single) Clamps the input to the range [0..1]. Declaration public static float Clamp01(float input) Parameters Type Name Description System.Single input Returns Type Description System.Single Clamp01(UInt32) Clamps the input to the range [0..1]. Declaration public static uint Clamp01(uint input) Parameters Type Name Description System.UInt32 input Returns Type Description System.UInt32 Clamp01(Vector2) Clamps the input to the range [0..1]. Declaration public static Vector2 Clamp01(Vector2 input) Parameters Type Name Description Vector2 input Returns Type Description Vector2 Clamp01(Vector3) Clamps the input to the range [0..1]. Declaration public static Vector3 Clamp01(Vector3 input) Parameters Type Name Description Vector3 input Returns Type Description Vector3 Clamp01(Vector4) Clamps the input to the range [0..1]. Declaration public static Vector4 Clamp01(Vector4 input) Parameters Type Name Description Vector4 input Returns Type Description Vector4 Decay(Single, Single, Single) Decays the input back to zero over time by the decayRate * Time.deltaTime. Declaration public static float Decay(float input, float decayRate, float zero = 0F) Parameters Type Name Description System.Single input System.Single decayRate System.Single zero Returns Type Description System.Single Invert(Single) Inverts the input by multiplying by -1. Declaration public static float Invert(float input) Parameters Type Name Description System.Single input Returns Type Description System.Single Invert(Vector2) Inverts the input values by multiplying by -1. Declaration public static Vector2 Invert(Vector2 input) Parameters Type Name Description Vector2 input Returns Type Description Vector2 Invert(Vector2, Boolean, Boolean) Inverts the input values by multiplying by -1. Inverts the x axis of the vector if invertX is true, and the y axis if invertY is true. Declaration public static Vector2 Invert(Vector2 input, bool invertX, bool invertY) Parameters Type Name Description Vector2 input System.Boolean invertX System.Boolean invertY Returns Type Description Vector2 Invert(Vector3) Inverts the input values by multiplying by -1. Declaration public static Vector3 Invert(Vector3 input) Parameters Type Name Description Vector3 input Returns Type Description Vector3 Invert(Vector3, Boolean, Boolean, Boolean) Inverts the input values by multiplying by -1. Inverts the x axis of the vector if invertX is true, the y axis if invertY is true, and the z axis if invertZ is true. Declaration public static Vector3 Invert(Vector3 input, bool invertX, bool invertY, bool invertZ) Parameters Type Name Description Vector3 input System.Boolean invertX System.Boolean invertY System.Boolean invertZ Returns Type Description Vector3 Invert(Vector4) Inverts the input values by multiplying by -1. Declaration public static Vector4 Invert(Vector4 input) Parameters Type Name Description Vector4 input Returns Type Description Vector4 Invert(Vector4, Boolean, Boolean, Boolean, Boolean) Inverts the input values by multiplying by -1. Inverts the x axis of the vector if invertX is true, the y axis if invertY is true, the z axis if invertZ is true, and the w axis if invertW is true. Declaration public static Vector4 Invert(Vector4 input, bool invertX, bool invertY, bool invertZ, bool invertW) Parameters Type Name Description Vector4 input System.Boolean invertX System.Boolean invertY System.Boolean invertZ System.Boolean invertW Returns Type Description Vector4 Normalize(Single, Single, Single, Single) Normalizes the input in the range [min..max] to unsigned normalized form [0..1] if min is >= zero, and to signed normalized form [-1..1] if min is less than zero. Declaration public static float Normalize(float input, float min, float max, float zero = 0F) Parameters Type Name Description System.Single input System.Single min System.Single max System.Single zero Returns Type Description System.Single Normalize(Vector2) Normalizes the input vector to be of unit length (1). This is the same as calling Vector2.normalized. Declaration public static Vector2 Normalize(Vector2 input) Parameters Type Name Description Vector2 input Returns Type Description Vector2 Normalize(Vector3) Normalizes the input vector to be of unit length (1). This is the same as calling Vector3.normalized. Declaration public static Vector3 Normalize(Vector3 input) Parameters Type Name Description Vector3 input Returns Type Description Vector3 Normalize(Vector4) Normalizes the input vector to be of unit length (1). This is the same as calling Vector4.normalized. Declaration public static Vector4 Normalize(Vector4 input) Parameters Type Name Description Vector4 input Returns Type Description Vector4 Scale(Single, Single) Multiplies the input by factor. Declaration public static float Scale(float input, float factor) Parameters Type Name Description System.Single input System.Single factor Returns Type Description System.Single Scale(Vector2, Single) Multiplies the input vector by factor. Declaration public static Vector2 Scale(Vector2 input, float factor) Parameters Type Name Description Vector2 input System.Single factor Returns Type Description Vector2 Scale(Vector2, Single, Single) Multiplies all input values by x along the X axis and by y along the Y axis. Declaration public static Vector2 Scale(Vector2 input, float x, float y) Parameters Type Name Description Vector2 input System.Single x System.Single y Returns Type Description Vector2 Scale(Vector3, Single) Multiplies the input vector by factor. Declaration public static Vector3 Scale(Vector3 input, float factor) Parameters Type Name Description Vector3 input System.Single factor Returns Type Description Vector3 Scale(Vector3, Single, Single, Single) Multiplies all input values by x along the X axis, by y along the Y axis, and by z along the Z axis. Declaration public static Vector3 Scale(Vector3 input, float x, float y, float z) Parameters Type Name Description Vector3 input System.Single x System.Single y System.Single z Returns Type Description Vector3 Scale(Vector4, Single) Multiplies the input vector by factor. Declaration public static Vector4 Scale(Vector4 input, float factor) Parameters Type Name Description Vector4 input System.Single factor Returns Type Description Vector4 Scale(Vector4, Single, Single, Single, Single) Multiplies all input values by x along the X axis, by y along the Y axis, by z along the Z axis, and w along the W axis. Declaration public static Vector4 Scale(Vector4 input, float x, float y, float z, float w) Parameters Type Name Description Vector4 input System.Single x System.Single y System.Single z System.Single w Returns Type Description Vector4 Wrap(Double, Double, Double) Wraps the input to the [min..max] range. If the value exceeds max it wraps around to min, and if the value is less than min it wraps back to max. Declaration public static double Wrap(double input, double min, double max) Parameters Type Name Description System.Double input System.Double min System.Double max Returns Type Description System.Double Wrap(Int32, Int32, Int32) Wraps the input to the [min..max) range. If the value exceeds max it wraps around to min, and if the value is less than min it wraps back to max. Declaration public static int Wrap(int input, int min, int max) Parameters Type Name Description System.Int32 input System.Int32 min System.Int32 max Returns Type Description System.Int32 Wrap(Single, Single, Single) Wraps the input to the [min..max] range. If the value exceeds max it wraps around to min, and if the value is less than min it wraps back to max. Declaration public static float Wrap(float input, float min, float max) Parameters Type Name Description System.Single input System.Single min System.Single max Returns Type Description System.Single Wrap(UInt32, UInt32, UInt32) Wraps the input to the [min..max) range. If the value exceeds max it wraps around to min, and if the value is less than min it wraps back to max. Declaration public static uint Wrap(uint input, uint min, uint max) Parameters Type Name Description System.UInt32 input System.UInt32 min System.UInt32 max Returns Type Description System.UInt32 Wrap01(Double) Wraps the input to the range [0..1]. If the value exceeds 1 it wraps around to 0, and if the value is less than 0 it wraps back to 1. Declaration public static double Wrap01(double input) Parameters Type Name Description System.Double input Returns Type Description System.Double Wrap01(Single) Wraps the input to the range [0..1]. If the value exceeds 1 it wraps around to 0, and if the value is less than 0 it wraps back to 1. Declaration public static float Wrap01(float input) Parameters Type Name Description System.Single input Returns Type Description System.Single"
  },
  "api/Zigurous.Math.QuaternionExtensions.html": {
    "href": "api/Zigurous.Math.QuaternionExtensions.html",
    "title": "Class QuaternionExtensions | Math Utils",
    "keywords": "Class QuaternionExtensions Inheritance System.Object QuaternionExtensions Namespace : Zigurous.Math Syntax public static class QuaternionExtensions Methods SmoothDamp(Quaternion, Quaternion, ref Quaternion, Single, Single) Declaration public static Quaternion SmoothDamp(this Quaternion current, Quaternion target, ref Quaternion currentVelocity, float smoothTime, float maxSpeed = default(float)) Parameters Type Name Description Quaternion current Quaternion target Quaternion currentVelocity System.Single smoothTime System.Single maxSpeed Returns Type Description Quaternion"
  },
  "api/Zigurous.Math.ShortExtensions.html": {
    "href": "api/Zigurous.Math.ShortExtensions.html",
    "title": "Class ShortExtensions | Math Utils",
    "keywords": "Class ShortExtensions Inheritance System.Object ShortExtensions Namespace : Zigurous.Math Syntax public static class ShortExtensions Methods HasAnyFlag(Int16, Int16) (mask & flags) != 0 Declaration public static bool HasAnyFlag(this short mask, short flags) Parameters Type Name Description System.Int16 mask System.Int16 flags Returns Type Description System.Boolean HasFlag(Int16, Int16) (mask & flag) == flag Declaration public static bool HasFlag(this short mask, short flag) Parameters Type Name Description System.Int16 mask System.Int16 flag Returns Type Description System.Boolean IsEven(Int16) n % 2 == 0 Declaration public static bool IsEven(this short n) Parameters Type Name Description System.Int16 n Returns Type Description System.Boolean IsNegative(Int16) Declaration public static bool IsNegative(this short n) Parameters Type Name Description System.Int16 n Returns Type Description System.Boolean IsOdd(Int16) n % 2 != 0 Declaration public static bool IsOdd(this short n) Parameters Type Name Description System.Int16 n Returns Type Description System.Boolean IsPositive(Int16) n > 0 Declaration public static bool IsPositive(this short n) Parameters Type Name Description System.Int16 n Returns Type Description System.Boolean IsZero(Int16) n == 0 Declaration public static bool IsZero(this short n) Parameters Type Name Description System.Int16 n Returns Type Description System.Boolean ToBinary(Int16) Declaration public static string ToBinary(this short n) Parameters Type Name Description System.Int16 n Returns Type Description System.String"
  },
  "api/Zigurous.Math.UIntExtensions.html": {
    "href": "api/Zigurous.Math.UIntExtensions.html",
    "title": "Class UIntExtensions | Math Utils",
    "keywords": "Class UIntExtensions Inheritance System.Object UIntExtensions Namespace : Zigurous.Math Syntax public static class UIntExtensions Methods Factors(UInt32) Declaration public static IEnumerable<uint> Factors(this uint n) Parameters Type Name Description System.UInt32 n Returns Type Description IEnumerable < System.UInt32 > GetBits(UInt32, Int32, Int32) Declaration public static uint GetBits(this uint value, int offset, int n) Parameters Type Name Description System.UInt32 value System.Int32 offset System.Int32 n Returns Type Description System.UInt32 HasAnyFlag(UInt32, UInt32) (mask & flags) != 0 Declaration public static bool HasAnyFlag(this uint mask, uint flags) Parameters Type Name Description System.UInt32 mask System.UInt32 flags Returns Type Description System.Boolean HasFlag(UInt32, UInt32) (mask & flag) == flag Declaration public static bool HasFlag(this uint mask, uint flag) Parameters Type Name Description System.UInt32 mask System.UInt32 flag Returns Type Description System.Boolean IsEven(UInt32) n % 2 == 0 Declaration public static bool IsEven(this uint n) Parameters Type Name Description System.UInt32 n Returns Type Description System.Boolean IsOdd(UInt32) n % 2 != 0 Declaration public static bool IsOdd(this uint n) Parameters Type Name Description System.UInt32 n Returns Type Description System.Boolean IsZero(UInt32) n == 0 Declaration public static bool IsZero(this uint n) Parameters Type Name Description System.UInt32 n Returns Type Description System.Boolean ToBinary(UInt32) Declaration public static string ToBinary(this uint n) Parameters Type Name Description System.UInt32 n Returns Type Description System.String"
  },
  "api/Zigurous.Math.Vector2Extensions.html": {
    "href": "api/Zigurous.Math.Vector2Extensions.html",
    "title": "Class Vector2Extensions | Math Utils",
    "keywords": "Class Vector2Extensions Inheritance System.Object Vector2Extensions Namespace : Zigurous.Math Syntax public static class Vector2Extensions Methods Abs(Vector2) Declaration public static Vector2 Abs(this Vector2 vector) Parameters Type Name Description Vector2 vector Returns Type Description Vector2 Average(Vector2[]) Declaration public static Vector2 Average(this Vector2[] vectors) Parameters Type Name Description Vector2 [] vectors Returns Type Description Vector2 Ceil(ref Vector2) Declaration public static void Ceil(this ref Vector2 vector) Parameters Type Name Description Vector2 vector Ceiled(Vector2) Declaration public static Vector2 Ceiled(this Vector2 vector) Parameters Type Name Description Vector2 vector Returns Type Description Vector2 Clamp(ref Vector2, Vector2, Vector2) Declaration public static void Clamp(this ref Vector2 vector, Vector2 min, Vector2 max) Parameters Type Name Description Vector2 vector Vector2 min Vector2 max Clamped(Vector2, Vector2, Vector2) Declaration public static Vector2 Clamped(this Vector2 vector, Vector2 min, Vector2 max) Parameters Type Name Description Vector2 vector Vector2 min Vector2 max Returns Type Description Vector2 Floor(ref Vector2) Declaration public static void Floor(this ref Vector2 vector) Parameters Type Name Description Vector2 vector Floored(Vector2) Declaration public static Vector2 Floored(this Vector2 vector) Parameters Type Name Description Vector2 vector Returns Type Description Vector2 IsEqualTo(Vector2, Vector2) Declaration public static bool IsEqualTo(this Vector2 lhs, Vector2 rhs) Parameters Type Name Description Vector2 lhs Vector2 rhs Returns Type Description System.Boolean IsEqualTo(Vector2, Vector2, Single) Declaration public static bool IsEqualTo(this Vector2 lhs, Vector2 rhs, float epsilon) Parameters Type Name Description Vector2 lhs Vector2 rhs System.Single epsilon Returns Type Description System.Boolean IsNotEqualTo(Vector2, Vector2) Declaration public static bool IsNotEqualTo(this Vector2 lhs, Vector2 rhs) Parameters Type Name Description Vector2 lhs Vector2 rhs Returns Type Description System.Boolean IsNotEqualTo(Vector2, Vector2, Single) Declaration public static bool IsNotEqualTo(this Vector2 lhs, Vector2 rhs, float epsilon) Parameters Type Name Description Vector2 lhs Vector2 rhs System.Single epsilon Returns Type Description System.Boolean IsNotZero(Vector2) Declaration public static bool IsNotZero(this Vector2 vector) Parameters Type Name Description Vector2 vector Returns Type Description System.Boolean IsNotZero(Vector2, Single) Declaration public static bool IsNotZero(this Vector2 vector, float epsilon) Parameters Type Name Description Vector2 vector System.Single epsilon Returns Type Description System.Boolean IsZero(Vector2) Declaration public static bool IsZero(this Vector2 vector) Parameters Type Name Description Vector2 vector Returns Type Description System.Boolean IsZero(Vector2, Single) Declaration public static bool IsZero(this Vector2 vector, float epsilon) Parameters Type Name Description Vector2 vector System.Single epsilon Returns Type Description System.Boolean Round(ref Vector2) Declaration public static void Round(this ref Vector2 vector) Parameters Type Name Description Vector2 vector Rounded(Vector2) Declaration public static Vector2 Rounded(this Vector2 vector) Parameters Type Name Description Vector2 vector Returns Type Description Vector2 ScaleBy(ref Vector2, Vector2) Declaration public static void ScaleBy(this ref Vector2 vector, Vector2 scalar) Parameters Type Name Description Vector2 vector Vector2 scalar ScaledBy(Vector2, Vector2) Declaration public static Vector2 ScaledBy(this Vector2 vector, Vector2 scalar) Parameters Type Name Description Vector2 vector Vector2 scalar Returns Type Description Vector2 SetUniform(ref Vector2, Single) Declaration public static void SetUniform(this ref Vector2 vector, float value) Parameters Type Name Description Vector2 vector System.Single value SetUniformly(Vector2, Single) Declaration public static Vector2 SetUniformly(this Vector2 vector, float value) Parameters Type Name Description Vector2 vector System.Single value Returns Type Description Vector2 Wrap(ref Vector2, Vector2, Vector2) Declaration public static void Wrap(this ref Vector2 vector, Vector2 min, Vector2 max) Parameters Type Name Description Vector2 vector Vector2 min Vector2 max Wrapped(Vector2, Vector2, Vector2) Declaration public static Vector2 Wrapped(this Vector2 vector, Vector2 min, Vector2 max) Parameters Type Name Description Vector2 vector Vector2 min Vector2 max Returns Type Description Vector2"
  },
  "api/Zigurous.Math.Vector3Extensions.html": {
    "href": "api/Zigurous.Math.Vector3Extensions.html",
    "title": "Class Vector3Extensions | Math Utils",
    "keywords": "Class Vector3Extensions Inheritance System.Object Vector3Extensions Namespace : Zigurous.Math Syntax public static class Vector3Extensions Methods Abs(Vector3) Declaration public static Vector3 Abs(this Vector3 vector) Parameters Type Name Description Vector3 vector Returns Type Description Vector3 Average(Vector3[]) Declaration public static Vector3 Average(this Vector3[] vectors) Parameters Type Name Description Vector3 [] vectors Returns Type Description Vector3 Ceil(ref Vector3) Declaration public static void Ceil(this ref Vector3 vector) Parameters Type Name Description Vector3 vector Ceiled(Vector3) Declaration public static Vector3 Ceiled(this Vector3 vector) Parameters Type Name Description Vector3 vector Returns Type Description Vector3 Clamp(ref Vector3, Vector3, Vector3) Declaration public static void Clamp(this ref Vector3 vector, Vector3 min, Vector3 max) Parameters Type Name Description Vector3 vector Vector3 min Vector3 max Clamped(Vector3, Vector3, Vector3) Declaration public static Vector3 Clamped(this Vector3 vector, Vector3 min, Vector3 max) Parameters Type Name Description Vector3 vector Vector3 min Vector3 max Returns Type Description Vector3 Floor(ref Vector3) Declaration public static void Floor(this ref Vector3 vector) Parameters Type Name Description Vector3 vector Floored(Vector3) Declaration public static Vector3 Floored(this Vector3 vector) Parameters Type Name Description Vector3 vector Returns Type Description Vector3 IsEqualTo(Vector3, Vector3) Declaration public static bool IsEqualTo(this Vector3 lhs, Vector3 rhs) Parameters Type Name Description Vector3 lhs Vector3 rhs Returns Type Description System.Boolean IsEqualTo(Vector3, Vector3, Single) Declaration public static bool IsEqualTo(this Vector3 lhs, Vector3 rhs, float epsilon) Parameters Type Name Description Vector3 lhs Vector3 rhs System.Single epsilon Returns Type Description System.Boolean IsNotEqualTo(Vector3, Vector3) Declaration public static bool IsNotEqualTo(this Vector3 lhs, Vector3 rhs) Parameters Type Name Description Vector3 lhs Vector3 rhs Returns Type Description System.Boolean IsNotEqualTo(Vector3, Vector3, Single) Declaration public static bool IsNotEqualTo(this Vector3 lhs, Vector3 rhs, float epsilon) Parameters Type Name Description Vector3 lhs Vector3 rhs System.Single epsilon Returns Type Description System.Boolean IsNotZero(Vector3) Declaration public static bool IsNotZero(this Vector3 vector) Parameters Type Name Description Vector3 vector Returns Type Description System.Boolean IsNotZero(Vector3, Single) Declaration public static bool IsNotZero(this Vector3 vector, float epsilon) Parameters Type Name Description Vector3 vector System.Single epsilon Returns Type Description System.Boolean IsZero(Vector3) Declaration public static bool IsZero(this Vector3 vector) Parameters Type Name Description Vector3 vector Returns Type Description System.Boolean IsZero(Vector3, Single) Declaration public static bool IsZero(this Vector3 vector, float epsilon) Parameters Type Name Description Vector3 vector System.Single epsilon Returns Type Description System.Boolean Round(ref Vector3) Declaration public static void Round(this ref Vector3 vector) Parameters Type Name Description Vector3 vector Rounded(Vector3) Declaration public static Vector3 Rounded(this Vector3 vector) Parameters Type Name Description Vector3 vector Returns Type Description Vector3 ScaleBy(ref Vector3, Vector3) Declaration public static void ScaleBy(this ref Vector3 vector, Vector3 scalar) Parameters Type Name Description Vector3 vector Vector3 scalar ScaledBy(Vector3, Vector3) Declaration public static Vector3 ScaledBy(this Vector3 vector, Vector3 scalar) Parameters Type Name Description Vector3 vector Vector3 scalar Returns Type Description Vector3 SetUniform(ref Vector3, Single) Declaration public static void SetUniform(this ref Vector3 vector, float value) Parameters Type Name Description Vector3 vector System.Single value SetUniformly(Vector3, Single) Declaration public static Vector3 SetUniformly(this Vector3 vector, float value) Parameters Type Name Description Vector3 vector System.Single value Returns Type Description Vector3 Wrap(ref Vector3, Vector3, Vector3) Declaration public static void Wrap(this ref Vector3 vector, Vector3 min, Vector3 max) Parameters Type Name Description Vector3 vector Vector3 min Vector3 max Wrapped(Vector3, Vector3, Vector3) Declaration public static Vector3 Wrapped(this Vector3 vector, Vector3 min, Vector3 max) Parameters Type Name Description Vector3 vector Vector3 min Vector3 max Returns Type Description Vector3"
  },
  "api/Zigurous.Math.Vector4Extensions.html": {
    "href": "api/Zigurous.Math.Vector4Extensions.html",
    "title": "Class Vector4Extensions | Math Utils",
    "keywords": "Class Vector4Extensions Inheritance System.Object Vector4Extensions Namespace : Zigurous.Math Syntax public static class Vector4Extensions Methods Abs(Vector4) Declaration public static Vector4 Abs(this Vector4 vector) Parameters Type Name Description Vector4 vector Returns Type Description Vector4 Average(Vector4[]) Declaration public static Vector4 Average(this Vector4[] vectors) Parameters Type Name Description Vector4 [] vectors Returns Type Description Vector4 Ceil(ref Vector4) Declaration public static void Ceil(this ref Vector4 vector) Parameters Type Name Description Vector4 vector Ceiled(Vector4) Declaration public static Vector4 Ceiled(this Vector4 vector) Parameters Type Name Description Vector4 vector Returns Type Description Vector4 Clamp(ref Vector4, Vector4, Vector4) Declaration public static void Clamp(this ref Vector4 vector, Vector4 min, Vector4 max) Parameters Type Name Description Vector4 vector Vector4 min Vector4 max Clamped(Vector4, Vector4, Vector4) Declaration public static Vector4 Clamped(this Vector4 vector, Vector4 min, Vector4 max) Parameters Type Name Description Vector4 vector Vector4 min Vector4 max Returns Type Description Vector4 Floor(ref Vector4) Declaration public static void Floor(this ref Vector4 vector) Parameters Type Name Description Vector4 vector Floored(Vector4) Declaration public static Vector4 Floored(this Vector4 vector) Parameters Type Name Description Vector4 vector Returns Type Description Vector4 IsEqualTo(Vector4, Vector4) Declaration public static bool IsEqualTo(this Vector4 lhs, Vector4 rhs) Parameters Type Name Description Vector4 lhs Vector4 rhs Returns Type Description System.Boolean IsEqualTo(Vector4, Vector4, Single) Declaration public static bool IsEqualTo(this Vector4 lhs, Vector4 rhs, float epsilon) Parameters Type Name Description Vector4 lhs Vector4 rhs System.Single epsilon Returns Type Description System.Boolean IsNotEqualTo(Vector4, Vector4) Declaration public static bool IsNotEqualTo(this Vector4 lhs, Vector4 rhs) Parameters Type Name Description Vector4 lhs Vector4 rhs Returns Type Description System.Boolean IsNotEqualTo(Vector4, Vector4, Single) Declaration public static bool IsNotEqualTo(this Vector4 lhs, Vector4 rhs, float epsilon) Parameters Type Name Description Vector4 lhs Vector4 rhs System.Single epsilon Returns Type Description System.Boolean IsNotZero(Vector4) Declaration public static bool IsNotZero(this Vector4 vector) Parameters Type Name Description Vector4 vector Returns Type Description System.Boolean IsNotZero(Vector4, Single) Declaration public static bool IsNotZero(this Vector4 vector, float epsilon) Parameters Type Name Description Vector4 vector System.Single epsilon Returns Type Description System.Boolean IsZero(Vector4) Declaration public static bool IsZero(this Vector4 vector) Parameters Type Name Description Vector4 vector Returns Type Description System.Boolean IsZero(Vector4, Single) Declaration public static bool IsZero(this Vector4 vector, float epsilon) Parameters Type Name Description Vector4 vector System.Single epsilon Returns Type Description System.Boolean Round(ref Vector4) Declaration public static void Round(this ref Vector4 vector) Parameters Type Name Description Vector4 vector Rounded(Vector4) Declaration public static Vector4 Rounded(this Vector4 vector) Parameters Type Name Description Vector4 vector Returns Type Description Vector4 ScaleBy(ref Vector4, Vector4) Declaration public static void ScaleBy(this ref Vector4 vector, Vector4 scalar) Parameters Type Name Description Vector4 vector Vector4 scalar ScaledBy(Vector4, Vector4) Declaration public static Vector4 ScaledBy(this Vector4 vector, Vector4 scalar) Parameters Type Name Description Vector4 vector Vector4 scalar Returns Type Description Vector4 SetUniform(ref Vector4, Single) Declaration public static void SetUniform(this ref Vector4 vector, float value) Parameters Type Name Description Vector4 vector System.Single value SetUniformly(Vector4, Single) Declaration public static Vector4 SetUniformly(this Vector4 vector, float value) Parameters Type Name Description Vector4 vector System.Single value Returns Type Description Vector4 Wrap(ref Vector4, Vector4, Vector4) Declaration public static void Wrap(this ref Vector4 vector, Vector4 min, Vector4 max) Parameters Type Name Description Vector4 vector Vector4 min Vector4 max Wrapped(Vector4, Vector4, Vector4) Declaration public static Vector4 Wrapped(this Vector4 vector, Vector4 min, Vector4 max) Parameters Type Name Description Vector4 vector Vector4 min Vector4 max Returns Type Description Vector4"
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "Changelog | Math Utils",
    "keywords": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [1.0.4] - 2021/06/30 Changed Renamed package to Math Utils [1.0.3] - 2021/04/13 Added Wrap01 processors Changed Decay function now does nothing if the input is zero [1.0.2] - 2021/03/21 Changed Updated package metadata [1.0.1] - 2021/03/07 Changed Updated package metadata [1.0.0] - 2021/02/27 Added Processor Functions Chance Functions Float Equality Comparer Number Extensions Comparable Extensions Bounds/Collider Extensions"
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "License | Math Utils",
    "keywords": "License MIT License Copyright (c) 2021 Zigurous Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "Math Utils | Math Utils",
    "keywords": "Math Utils The Math Utils package provides extensions and utilities for working with numbers in Unity projects including generating random chance values, processing inputs, and more."
  },
  "manual/installation.html": {
    "href": "manual/installation.html",
    "title": "Installation | Math Utils",
    "keywords": "Installation Use the Unity Package Manager to install the Math Utils package. Open the Package Manager in Window > Package Manager Click the add ( + ) button in the status bar Select Add package from git URL from the add menu Enter the following Git URL in the text box and click Add: https://github.com/zigurous/unity-math-utils.git For more information on the Package Manager and installing packages, see the following pages: Unity's Package Manager Installing from a Git URL Importing Import the package namespace in each script or file you want to use it. Note : You may need to regenerate project files/assemblies first. using Zigurous.Math; Source Code The source code for the Math Utils package is in the following repository: https://github.com/zigurous/unity-math-utils"
  }
}