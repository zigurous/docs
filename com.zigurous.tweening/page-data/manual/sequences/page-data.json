{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-js","path":"/manual/sequences","result":{"data":{"markdownRemark":{"html":"<h1>Sequences</h1>\n<p>A <a href=\"/com.zigurous.tweening/api/Zigurous.Tweening/Sequence\">Sequence</a> play a list of tweens in order. The sequence itself maintains its own state and can be controlled the same as any other tween (although not every property has an effect).</p>\n<hr/>\n<h2>ðŸ§¬ Creating a sequence</h2>\n<p>Sequences can be created in one of two ways. You can simply instantiate one like any other class. However, it is recommended to create one using the static class <a href=\"/com.zigurous.tweening/api/Zigurous.Tweening/Tweening\">Tweening</a> so it can reuse recycled sequences.</p>\n<pre><code class=\"language-csharp\">Sequence sequence = Tweening.Sequence(); // Recommended\r\nSequence sequence = new Sequence(); // Not recommended\n</code></pre>\n<hr/>\n<h2>âž• Adding tweens</h2>\n<p>Tweens can either be added to the end or beginning of the sequence using <code>Append</code> or <code>Prepend</code>, respectively. Tweens will automatically start and stop as needed based on the state of the sequence. You should not manually transition a tween to playing or stopping (or any other state), instead change the state of the sequence. You can still customize individual tween properties, like duration, ease, callbacks, etc.</p>\n<pre><code class=\"language-csharp\">Sequence sequence = Tweening.Sequence();\r\n\r\n// Adds a tween to the end of the sequence\r\nsequence.Append(transform.TweenPosition(Vector3.zero, 1f));\r\nsequence.Append(transform.TweenRotation(Quaternion.identity, 1f));\r\n\r\n// Adds a tween to the beginning of the sequence\r\nsequence.Prepend(transform.TweenScale(Vector3.one, 1f));\n</code></pre>\n<hr/>\n<h2>ðŸ”† State control</h2>\n<p>Sequences can be controlled the same way as any other tween, meaning you can play, stop, restart, loop, kill etc.</p>\n<pre><code class=\"language-csharp\">Sequence sequence = Tweening.Sequence();\r\nsequence.SetLoops(-1, LoopType.PingPong);\r\nsequence.OnComplete(() => Debug.Log(\"sucess!\"));\r\nsequence.Play();\n</code></pre>","frontmatter":{"slug":"/manual/sequences","class":null,"title":""}}},"pageContext":{"id":"9eef40a3-976a-5b20-adfc-7a14d2cb4305","frontmatter__slug":"/manual/sequences","__params":{"frontmatter__slug":"manual"}}},"staticQueryHashes":["1654257956","2011016986","3218290725"]}