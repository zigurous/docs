{
  "api/Zigurous.Tweening.Ease.html": {
    "href": "api/Zigurous.Tweening.Ease.html",
    "title": "Enum Ease | Tweening",
    "keywords": "Enum Ease An easing function type. Easing functions specify the rate of change of a parameter over time. Namespace : Zigurous.Tweening public enum Ease Fields Name Description BackIn BackInOut BackOut BounceIn BounceInOut BounceOut CircIn CircInOut CircOut CubicIn CubicInOut CubicOut ElasticIn ElasticInOut ElasticOut ExpoIn ExpoInOut ExpoOut Linear QuadIn QuadInOut QuadOut QuartIn QuartInOut QuartOut QuintIn QuintInOut QuintOut SineIn SineInOut SineOut"
  },
  "api/Zigurous.Tweening.EaseEqualityComparer.html": {
    "href": "api/Zigurous.Tweening.EaseEqualityComparer.html",
    "title": "Class EaseEqualityComparer | Tweening",
    "keywords": "Class EaseEqualityComparer Compares the equality of two Ease types. Inheritance System.Object EaseEqualityComparer Namespace : Zigurous.Tweening public sealed class EaseEqualityComparer : IEqualityComparer<Ease> Methods Equals(Ease, Ease) Returns true if the two Ease types are equal. public bool Equals(Ease x, Ease y) Parameter Description x The first ease to compare. y The second ease to compare. GetHashCode(Ease) Returns the hash code for the Ease type. public int GetHashCode(Ease ease) Parameter Description ease The ease to get the hash code for."
  },
  "api/Zigurous.Tweening.EaseExtensions.html": {
    "href": "api/Zigurous.Tweening.EaseExtensions.html",
    "title": "Class EaseExtensions | Tweening",
    "keywords": "Class EaseExtensions Extension methods for Ease . Inheritance System.Object EaseExtensions Namespace : Zigurous.Tweening public static class EaseExtensions Methods ValueAt(Ease, Single) Returns the f(x) value using the ease function. public static float ValueAt(this Ease ease, float x) Parameter Description ease The ease function type. x The x-axis value to evaluate. Returns Description System.Single The interpolated value at x ."
  },
  "api/Zigurous.Tweening.EaseFunction.html": {
    "href": "api/Zigurous.Tweening.EaseFunction.html",
    "title": "Class EaseFunction | Tweening",
    "keywords": "Class EaseFunction Timing functions for every ease type. Easing functions specify the rate of change of a parameter over time. Inheritance System.Object EaseFunction Namespace : Zigurous.Tweening public static class EaseFunction Methods BackIn(Single) Evaulates f(x) using a BackIn ease. public static float BackIn(float x) Parameter Description x The x-axis number to evaluate. BackInOut(Single) Evaulates f(x) using a BackInOut ease. public static float BackInOut(float x) Parameter Description x The x-axis number to evaluate. BackOut(Single) Evaulates f(x) using a BackOut ease. public static float BackOut(float x) Parameter Description x The x-axis number to evaluate. BounceIn(Single) Evaulates f(x) using a BounceIn ease. public static float BounceIn(float x) Parameter Description x The x-axis number to evaluate. BounceInOut(Single) Evaulates f(x) using a BounceInOut ease. public static float BounceInOut(float x) Parameter Description x The x-axis number to evaluate. BounceOut(Single) Evaulates f(x) using a BounceOut ease. public static float BounceOut(float x) Parameter Description x The x-axis number to evaluate. CircIn(Single) Evaulates f(x) using a CircIn ease. public static float CircIn(float x) Parameter Description x The x-axis number to evaluate. CircInOut(Single) Evaulates f(x) using a CircInOut ease. public static float CircInOut(float x) Parameter Description x The x-axis number to evaluate. CircOut(Single) Evaulates f(x) using a CircOut ease. public static float CircOut(float x) Parameter Description x The x-axis number to evaluate. CubicIn(Single) Evaulates f(x) using a CubicIn ease. public static float CubicIn(float x) Parameter Description x The x-axis number to evaluate. CubicInOut(Single) Evaulates f(x) using a CubicInOut ease. public static float CubicInOut(float x) Parameter Description x The x-axis number to evaluate. CubicOut(Single) Evaulates f(x) using a CubicOut ease. public static float CubicOut(float x) Parameter Description x The x-axis number to evaluate. ElasticIn(Single) Evaulates f(x) using an ElasticIn ease. public static float ElasticIn(float x) Parameter Description x The x-axis number to evaluate. ElasticInOut(Single) Evaulates f(x) using an ElasticInOut ease. public static float ElasticInOut(float x) Parameter Description x The x-axis number to evaluate. ElasticOut(Single) Evaulates f(x) using an ElasticOut ease. public static float ElasticOut(float x) Parameter Description x The x-axis number to evaluate. ExpoIn(Single) Evaulates f(x) using an ExpoIn ease. public static float ExpoIn(float x) Parameter Description x The x-axis number to evaluate. ExpoInOut(Single) Evaulates f(x) using an ExpoInOut ease. public static float ExpoInOut(float x) Parameter Description x The x-axis number to evaluate. ExpoOut(Single) Evaulates f(x) using an ExpoOut ease. public static float ExpoOut(float x) Parameter Description x The x-axis number to evaluate. Linear(Single) Evaulates f(x) using a Linear ease. public static float Linear(float x) Parameter Description x The x-axis number to evaluate. QuadIn(Single) Evaulates f(x) using a QuadIn ease. public static float QuadIn(float x) Parameter Description x The x-axis number to evaluate. QuadInOut(Single) Evaulates f(x) using a QuadInOut ease. public static float QuadInOut(float x) Parameter Description x The x-axis number to evaluate. QuadOut(Single) Evaulates f(x) using a QuadOut ease. public static float QuadOut(float x) Parameter Description x The x-axis number to evaluate. QuartIn(Single) Evaulates f(x) using a QuartIn ease. public static float QuartIn(float x) Parameter Description x The x-axis number to evaluate. QuartInOut(Single) Evaulates f(x) using a QuartInOut ease. public static float QuartInOut(float x) Parameter Description x The x-axis number to evaluate. QuartOut(Single) Evaulates f(x) using a QuartOut ease. public static float QuartOut(float x) Parameter Description x The x-axis number to evaluate. QuintIn(Single) Evaulates f(x) using a QuintIn ease. public static float QuintIn(float x) Parameter Description x The x-axis number to evaluate. QuintInOut(Single) Evaulates f(x) using a QuintInOut ease. public static float QuintInOut(float x) Parameter Description x The x-axis number to evaluate. QuintOut(Single) Evaulates f(x) using a QuintOut ease. public static float QuintOut(float x) Parameter Description x The x-axis number to evaluate. SineIn(Single) Evaulates f(x) using a SineIn ease. public static float SineIn(float x) Parameter Description x The x-axis number to evaluate. SineInOut(Single) Evaulates f(x) using a SineInOut ease. public static float SineInOut(float x) Parameter Description x The x-axis number to evaluate. SineOut(Single) Evaulates f(x) using a SineOut ease. public static float SineOut(float x) Parameter Description x The x-axis number to evaluate."
  },
  "api/Zigurous.Tweening.EaseFunction.TimingCurve.html": {
    "href": "api/Zigurous.Tweening.EaseFunction.TimingCurve.html",
    "title": "Delegate EaseFunction.TimingCurve | Tweening",
    "keywords": "Delegate EaseFunction.TimingCurve A function delegate that returns the value along a timing curve given the x-axis value, i.e., f(x). Namespace : Zigurous.Tweening public delegate float TimingCurve(float x); Parameter Description x The x-axis number to evaluate."
  },
  "api/Zigurous.Tweening.html": {
    "href": "api/Zigurous.Tweening.html",
    "title": "Namespace Zigurous.Tweening | Tweening",
    "keywords": "Namespace Zigurous.Tweening Classes EaseEqualityComparer Compares the equality of two Ease types. EaseExtensions Extension methods for Ease . EaseFunction Timing functions for every ease type. Easing functions specify the rate of change of a parameter over time. Interpolation Functions for interpolating values. PropertyChaining Provides method chaining for tweens. This allows multiple properties to be assigned in a single statement without requiring a variable to store the intermediate results. Sequence Plays a sequence of tweens in order. The sequence itself maintains its own state and can be controlled the same as any other tween. Tween The base class of every tween. Tweener<T> A tween that animates a parameter over time from a start value to an end value. Tweening The primary interface to create, control, and manage tweens. TweeningSettings A behavior that allows tweening settings to be changed in the editor or at runtime. Enums Ease An easing function type. Easing functions specify the rate of change of a parameter over time. LoopType A type of loop style. TweenState A type of animation state that a tween can be in. Delegates EaseFunction.TimingCurve A function delegate that returns the value along a timing curve given the x-axis value, i.e., f(x). Interpolater<T> A function delegate that interpolates the value between a and b by t . TweenCallback A function delegate that can be invoked during various tween events and/or state changes. TweenGetter<T> A function delegate that gets the current value of a parameter. TweenSetter<T> A function delegate that sets a new value of a parameter."
  },
  "api/Zigurous.Tweening.Interpolater-1.html": {
    "href": "api/Zigurous.Tweening.Interpolater-1.html",
    "title": "Delegate Interpolater<T> | Tweening",
    "keywords": "Delegate Interpolater<T> A function delegate that interpolates the value between a and b by t . Namespace : Zigurous.Tweening public delegate T Interpolater<T>(T a, T b, float t, bool snapping); Parameter Description a The start value. b The end value. t The interpolation value between the start and end value. snapping Snaps the interpolated value to the nearest whole number. Returns Description T The interpolated value between the start and end value. Type Parameter Description T The type of the parameter."
  },
  "api/Zigurous.Tweening.Interpolation.html": {
    "href": "api/Zigurous.Tweening.Interpolation.html",
    "title": "Class Interpolation | Tweening",
    "keywords": "Class Interpolation Functions for interpolating values. Inheritance System.Object Interpolation Namespace : Zigurous.Tweening public static class Interpolation Methods Lerp(Color, Color, Single, Boolean) Linearly interpolates between a and b by t . public static Color Lerp(Color a, Color b, float t, bool snapping = false) Parameter Description a The start value. b The end value. t The interpolation value between the start and end value. snapping Snaps the interpolated value to the nearest whole number. Returns Description Color The interpolated value between the start and end value. Lerp(Quaternion, Quaternion, Single, Boolean) Linearly interpolates between a and b by t . public static Quaternion Lerp(Quaternion a, Quaternion b, float t, bool snapping = false) Parameter Description a The start value. b The end value. t The interpolation value between the start and end value. snapping Snaps the interpolated value to the nearest whole number. Returns Description Quaternion The interpolated value between the start and end value. Lerp(Rect, Rect, Single, Boolean) Linearly interpolates between a and b by t . public static Rect Lerp(Rect a, Rect b, float t, bool snapping = false) Parameter Description a The start value. b The end value. t The interpolation value between the start and end value. snapping Snaps the interpolated value to the nearest whole number. Returns Description Rect The interpolated value between the start and end value. Lerp(Double, Double, Single, Boolean) Linearly interpolates between a and b by t . public static double Lerp(double a, double b, float t, bool snapping = false) Parameter Description a The start value. b The end value. t The interpolation value between the start and end value. snapping Snaps the interpolated value to the nearest whole number. Returns Description System.Double The interpolated value between the start and end value. Lerp(Int32, Int32, Single, Boolean) Linearly interpolates between a and b by t . public static int Lerp(int a, int b, float t, bool snapping = false) Parameter Description a The start value. b The end value. t The interpolation value between the start and end value. snapping Snaps the interpolated value to the nearest whole number. Returns Description System.Int32 The interpolated value between the start and end value. Lerp(Int64, Int64, Single, Boolean) Linearly interpolates between a and b by t . public static long Lerp(long a, long b, float t, bool snapping = false) Parameter Description a The start value. b The end value. t The interpolation value between the start and end value. snapping Snaps the interpolated value to the nearest whole number. Returns Description System.Int64 The interpolated value between the start and end value. Lerp(Single, Single, Single, Boolean) Linearly interpolates between a and b by t . public static float Lerp(float a, float b, float t, bool snapping = false) Parameter Description a The start value. b The end value. t The interpolation value between the start and end value. snapping Snaps the interpolated value to the nearest whole number. Returns Description System.Single The interpolated value between the start and end value. Lerp(Vector2, Vector2, Single, Boolean) Linearly interpolates between a and b by t . public static Vector2 Lerp(Vector2 a, Vector2 b, float t, bool snapping = false) Parameter Description a The start value. b The end value. t The interpolation value between the start and end value. snapping Snaps the interpolated value to the nearest whole number. Returns Description Vector2 The interpolated value between the start and end value. Lerp(Vector2Int, Vector2Int, Single, Boolean) Linearly interpolates between a and b by t . public static Vector2Int Lerp(Vector2Int a, Vector2Int b, float t, bool snapping = false) Parameter Description a The start value. b The end value. t The interpolation value between the start and end value. snapping Snaps the interpolated value to the nearest whole number. Returns Description Vector2Int The interpolated value between the start and end value. Lerp(Vector3, Vector3, Single, Boolean) Linearly interpolates between a and b by t . public static Vector3 Lerp(Vector3 a, Vector3 b, float t, bool snapping = false) Parameter Description a The start value. b The end value. t The interpolation value between the start and end value. snapping Snaps the interpolated value to the nearest whole number. Returns Description Vector3 The interpolated value between the start and end value. Lerp(Vector3Int, Vector3Int, Single, Boolean) Linearly interpolates between a and b by t . public static Vector3Int Lerp(Vector3Int a, Vector3Int b, float t, bool snapping = false) Parameter Description a The start value. b The end value. t The interpolation value between the start and end value. snapping Snaps the interpolated value to the nearest whole number. Returns Description Vector3Int The interpolated value between the start and end value. Lerp(Vector4, Vector4, Single, Boolean) Linearly interpolates between a and b by t . public static Vector4 Lerp(Vector4 a, Vector4 b, float t, bool snapping = false) Parameter Description a The start value. b The end value. t The interpolation value between the start and end value. snapping Snaps the interpolated value to the nearest whole number. Returns Description Vector4 The interpolated value between the start and end value."
  },
  "api/Zigurous.Tweening.LoopType.html": {
    "href": "api/Zigurous.Tweening.LoopType.html",
    "title": "Enum LoopType | Tweening",
    "keywords": "Enum LoopType A type of loop style. Namespace : Zigurous.Tweening public enum LoopType Fields Name Description PingPong Plays the tween forwards then backwards then forwards then backwards, etc. PingPongWithDelay Plays the tween forwards then backwards then forwards then backwards, etc. If the tween has a delay it will be delayed again each loop. Restart Restarts the tween from the beginning after it ends. RestartWithDelay Restarts the tween from the beginning after it ends. If the tween has a delay it will be delayed again each loop."
  },
  "api/Zigurous.Tweening.PropertyChaining.html": {
    "href": "api/Zigurous.Tweening.PropertyChaining.html",
    "title": "Class PropertyChaining | Tweening",
    "keywords": "Class PropertyChaining Provides method chaining for tweens. This allows multiple properties to be assigned in a single statement without requiring a variable to store the intermediate results. Inheritance System.Object PropertyChaining Namespace : Zigurous.Tweening public static class PropertyChaining Methods OnComplete<T>(T, TweenCallback) Sets the callback to invoke when the tween is completed. public static T OnComplete<T>(this T tween, TweenCallback callback) where T : Tween Parameter Description tween The tween to assign the value to. callback The callback to invoke. Returns Description T The tween itself to allow for chaining. Type Parameter Description T The type of the tween. OnKill<T>(T, TweenCallback) Sets the callback to invoke when the tween is killed. public static T OnKill<T>(this T tween, TweenCallback callback) where T : Tween Parameter Description tween The tween to assign the value to. callback The callback to invoke. Returns Description T The tween itself to allow for chaining. Type Parameter Description T The type of the tween. OnLoop<T>(T, TweenCallback) Sets the callback to invoke when the tween is looped. public static T OnLoop<T>(this T tween, TweenCallback callback) where T : Tween Parameter Description tween The tween to assign the value to. callback The callback to invoke. Returns Description T The tween itself to allow for chaining. Type Parameter Description T The type of the tween. OnStart<T>(T, TweenCallback) Sets the callback to invoke when the tween is started. public static T OnStart<T>(this T tween, TweenCallback callback) where T : Tween Parameter Description tween The tween to assign the value to. callback The callback to invoke. Returns Description T The tween itself to allow for chaining. Type Parameter Description T The type of the tween. OnStop<T>(T, TweenCallback) Sets the callback to invoke when the tween is stopped. public static T OnStop<T>(this T tween, TweenCallback callback) where T : Tween Parameter Description tween The tween to assign the value to. callback The callback to invoke. Returns Description T The tween itself to allow for chaining. Type Parameter Description T The type of the tween. OnUpdate<T>(T, TweenCallback) Sets the callback to invoke when the tween is updated. public static T OnUpdate<T>(this T tween, TweenCallback callback) where T : Tween Parameter Description tween The tween to assign the value to. callback The callback to invoke. Returns Description T The tween itself to allow for chaining. Type Parameter Description T The type of the tween. SetAutoKill<T>(T, Boolean) Sets the tween to auto kill after being completed. public static T SetAutoKill<T>(this T tween, bool autoKill) where T : Tween Parameter Description tween The tween to assign the value to. autoKill True if the tween is to be killed automatically. Returns Description T The tween itself to allow for chaining. Type Parameter Description T The type of the tween. SetAutoStart<T>(T, Boolean) Sets the tween to auto start after being initialized. public static T SetAutoStart<T>(this T tween, bool autoStart) where T : Tween Parameter Description tween The tween to assign the value to. autoStart True if the tween is to be started automatically. Returns Description T The tween itself to allow for chaining. Type Parameter Description T The type of the tween. SetDelay<T>(T, Single) Sets the delay of the tween to the given value. public static T SetDelay<T>(this T tween, float delay) where T : Tween Parameter Description tween The tween to assign the value to. delay The delay to set. Returns Description T The tween itself to allow for chaining. Type Parameter Description T The type of the tween. SetDuration<T>(T, Single) Sets the duration of the tween to the given value. public static T SetDuration<T>(this T tween, float duration) where T : Tween Parameter Description tween The tween to assign the value to. duration The duration to set. Returns Description T The tween itself to allow for chaining. Type Parameter Description T The type of the tween. SetEase<T>(T, Ease) Sets the ease of the tween to the given value. public static T SetEase<T>(this T tween, Ease ease) where T : Tween Parameter Description tween The tween to assign the value to. ease The ease to set. Returns Description T The tween itself to allow for chaining. Type Parameter Description T The type of the tween. SetId<T>(T, Int32) Sets the id of the tween to the given value. public static T SetId<T>(this T tween, int id) where T : Tween Parameter Description tween The tween to assign the value to. id The id to set. Returns Description T The tween itself to allow for chaining. Type Parameter Description T The type of the tween. SetLoops<T>(T, Int32, LoopType) Sets the number of loops of the tween to the given value. public static T SetLoops<T>(this T tween, int loops, LoopType loopType = LoopType.Restart) where T : Tween Parameter Description tween The tween to assign the value to. loops The number of loops to set. loopType The type of loop style to set. Returns Description T The tween itself to allow for chaining. Type Parameter Description T The type of the tween. SetRecyclable<T>(T, Boolean) Sets the tween to be recycled after being completed. public static T SetRecyclable<T>(this T tween, bool recyclable) where T : Tween Parameter Description tween The tween to assign the value to. recyclable True if the tween is to be recycled. Returns Description T The tween itself to allow for chaining. Type Parameter Description T The type of the tween. SetReversed<T>(T, Boolean) Sets the tween to play in reverse. public static T SetReversed<T>(this T tween, bool reversed = true) where T : Tween Parameter Description tween The tween to assign the value to. reversed True if the tween is to be played in reverse. Returns Description T The tween itself to allow for chaining. Type Parameter Description T The type of the tween. SetSnapping<T>(T, Boolean) Sets the tween to snap interpolated values to whole numbers. public static T SetSnapping<T>(this T tween, bool snapping = true) where T : Tween Parameter Description tween The tween to assign the value to. snapping True if interpolated values should be snapped to whole numbers. Returns Description T The tween itself to allow for chaining. Type Parameter Description T The type of the tween. SetTarget<T>(T, Component) Sets the id of the tween to the target component so the tween can be retrieved and destroyed based on that target. public static T SetTarget<T>(this T tween, Component target) where T : Tween Parameter Description tween The tween to assign the value to. target The target component. Returns Description T The tween itself to allow for chaining. Type Parameter Description T The type of the tween. SetTarget<T>(T, GameObject) Sets the id of the tween to the target game object so the tween can be retrieved and destroyed based on that game object. public static T SetTarget<T>(this T tween, GameObject target) where T : Tween Parameter Description tween The tween to assign the value to. target The target component. Returns Description T The tween itself to allow for chaining. Type Parameter Description T The type of the tween."
  },
  "api/Zigurous.Tweening.Sequence.html": {
    "href": "api/Zigurous.Tweening.Sequence.html",
    "title": "Class Sequence | Tweening",
    "keywords": "Class Sequence Plays a sequence of tweens in order. The sequence itself maintains its own state and can be controlled the same as any other tween. Inheritance System.Object Tween Sequence Inherited Members Tween.id Tween.state Tween.IsPlaying Tween.IsStopped Tween.IsComplete Tween.IsKilled Tween.ease Tween.duration Tween.elapsed Tween.PercentComplete Tween.delay Tween.delayElapsed Tween.IsDelayed Tween.loops Tween.loopType Tween.iterations Tween.reversed Tween.snapping Tween.recyclable Tween.autoStart Tween.autoKill Tween.onUpdate Tween.onStart Tween.onStop Tween.onLoop Tween.onComplete Tween.onKill Tween.Animate() Tween.Stop() Tween.Complete() Tween.Kill() Tween.Restart() Tween.IsFinished() Tween.OnUpdate() Tween.OnStart() Tween.OnStop() Tween.OnResume() Tween.OnLoop() Tween.OnComplete() Tween.OnKill() Tween.OnReset() Namespace : Zigurous.Tweening public sealed class Sequence : Tween Constructors Sequence() Creates a new tween sequence. public Sequence() Properties activeTween The tween in the sequence currently being played. public Tween activeTween { get; } currentIndex The index of the current tween in the sequence being played. public int currentIndex { get; } tweens The tweens contained in the sequence. public List<Tween> tweens { get; } Methods Append(Tween) Adds a new tween to the end of the sequence. public Sequence Append(Tween tween) Parameter Description tween The tween to add. Returns Description Sequence The sequence itself to allow for chaining. Play() Plays the tween sequence, whether starting for the first time or resuming from a stopped state. public Sequence Play() Returns Description Sequence The sequence itself to allow for chaining. Prepend(Tween) Adds a new tween to the beginning of the sequence. public Sequence Prepend(Tween tween) Parameter Description tween The tween to add. Returns Description Sequence The sequence itself to allow for chaining."
  },
  "api/Zigurous.Tweening.Tween.html": {
    "href": "api/Zigurous.Tweening.Tween.html",
    "title": "Class Tween | Tweening",
    "keywords": "Class Tween The base class of every tween. Inheritance System.Object Tween Sequence Tweener<T> Namespace : Zigurous.Tweening public abstract class Tween Constructors Tween() Creates a new tween object. public Tween() Fields delay The amount of seconds the tween waits before playing after being started. public float delay duration The amount of seconds the tween takes to complete. public float duration ease The easing function type used by the tween to animate values. public Ease ease id An identifier that can be used to distinguish the tween from others. This is not explicitly required nor is it necessarily unique. The id is often used to identify which object the parameter being animated belongs to, and often that object is animating multiple parameters. public int id loops The number of times the tween loops. A value of -1 will loop the tween infinitely. public int loops loopType The style in which the tween loops. public LoopType loopType onComplete The callback invoked when the tween is completed. public TweenCallback onComplete onKill The callback invoked when the tween is killed. public TweenCallback onKill onLoop The callback invoked when the tween is looped. public TweenCallback onLoop onStart The callback invoked when the tween is started. public TweenCallback onStart onStop The callback invoked when the tween is stopped. public TweenCallback onStop onUpdate The callback invoked every time the tween is updated, i.e., any time the parameter being animated is changed. public TweenCallback onUpdate Properties autoKill Automatically kills the tween after being completed. public bool autoKill { get; set; } autoStart Automatically starts the tween after being created. public bool autoStart { get; set; } delayElapsed The amount of seconds that have elapsed during the tween's delayed state, when applicable. public float delayElapsed { get; } elapsed The amount of seconds that have elapsed since the tween started. public float elapsed { get; } IsComplete Whether the tween is complete. public bool IsComplete { get; } IsDelayed Whether the tween is currently in a delayed state, i.e., the tween has been started but the elapsed time has not exceeded the delay duration. public bool IsDelayed { get; } IsKilled Whether the tween is killed. public bool IsKilled { get; } IsPlaying Whether the tween is playing. public bool IsPlaying { get; } IsStopped Whether the tween is stopped. public bool IsStopped { get; } iterations The number of times the tween has completed. public int iterations { get; } PercentComplete The tween's percentage of completion. public float PercentComplete { get; } recyclable Keeps the tween in memory to be re-used after being killed. public bool recyclable { get; set; } reversed Animates from the end value to the start value as opposed to animating from the start value to the end value like normal. public bool reversed { get; set; } snapping Smoothly snaps all interpolated values to whole numbers. public bool snapping { get; set; } state The animation state of the tween. public TweenState state { get; } Methods Animate() Animates the parameter being tweened to the current state. public abstract void Animate() Complete() Completes the tween, jumping to the end value. public void Complete() IsFinished() Determines if the tween has finished playing. protected virtual bool IsFinished() Kill() Kills the tween in its place, preventing any further state changes or changes to the parameter being animated. public void Kill() OnComplete() Override to handle custom logic when the tween is completed. protected virtual void OnComplete() OnKill() Override to handle custom logic when the tween is killed. protected virtual void OnKill() OnLoop() Override to handle custom logic when the tween is looped. protected virtual void OnLoop() OnReset() Override to handle custom logic when the tween is reset. protected virtual void OnReset() OnResume() Override to handle custom logic when the tween is resumed. protected virtual void OnResume() OnStart() Override to handle custom logic when the tween is started. protected virtual void OnStart() OnStop() Override to handle custom logic when the tween is stopped. protected virtual void OnStop() OnUpdate() Override to handle custom logic when the tween is updated. protected virtual void OnUpdate() Play() Plays the tween, whether starting for the first time or resuming from a stopped state. public void Play() Restart() Restarts the tween as along as it has not been killed. public void Restart() Stop() Stops the tween if currently being played. public void Stop()"
  },
  "api/Zigurous.Tweening.TweenCallback.html": {
    "href": "api/Zigurous.Tweening.TweenCallback.html",
    "title": "Delegate TweenCallback | Tweening",
    "keywords": "Delegate TweenCallback A function delegate that can be invoked during various tween events and/or state changes. Namespace : Zigurous.Tweening public delegate void TweenCallback();"
  },
  "api/Zigurous.Tweening.Tweener-1.html": {
    "href": "api/Zigurous.Tweening.Tweener-1.html",
    "title": "Class Tweener<T> | Tweening",
    "keywords": "Class Tweener<T> A tween that animates a parameter over time from a start value to an end value. Inheritance System.Object Tween Tweener<T> Inherited Members Tween.id Tween.state Tween.IsPlaying Tween.IsStopped Tween.IsComplete Tween.IsKilled Tween.ease Tween.duration Tween.elapsed Tween.PercentComplete Tween.delay Tween.delayElapsed Tween.IsDelayed Tween.loops Tween.loopType Tween.iterations Tween.reversed Tween.snapping Tween.recyclable Tween.autoStart Tween.autoKill Tween.onUpdate Tween.onStart Tween.onStop Tween.onLoop Tween.onComplete Tween.onKill Tween.Animate() Tween.Play() Tween.Stop() Tween.Complete() Tween.Kill() Tween.Restart() Tween.IsFinished() Tween.OnUpdate() Tween.OnStart() Tween.OnStop() Tween.OnResume() Tween.OnLoop() Tween.OnComplete() Tween.OnKill() Tween.OnReset() Namespace : Zigurous.Tweening public class Tweener<T> : Tween Type Parameter Description T The type of the parameter to tween. Constructors Tweener() Creates a new tweener. public Tweener() Fields endValue The desired value of the parameter at the end of the tween. public T endValue getter The function that gets the current value of the parameter being tweened. public TweenGetter<T> getter interpolater The function that interpolates values between the tween's start and end value. public Interpolater<T> interpolater setter The function that sets a new value of the parameter being tweened. public TweenSetter<T> setter startValue The initial value of the parameter at the start of the tween. public T startValue"
  },
  "api/Zigurous.Tweening.TweenGetter-1.html": {
    "href": "api/Zigurous.Tweening.TweenGetter-1.html",
    "title": "Delegate TweenGetter<T> | Tweening",
    "keywords": "Delegate TweenGetter<T> A function delegate that gets the current value of a parameter. Namespace : Zigurous.Tweening public delegate T TweenGetter<T>(); Returns Description T The current value of the parameter. Type Parameter Description T The type of the parameter."
  },
  "api/Zigurous.Tweening.Tweening.html": {
    "href": "api/Zigurous.Tweening.Tweening.html",
    "title": "Class Tweening | Tweening",
    "keywords": "Class Tweening The primary interface to create, control, and manage tweens. Inheritance System.Object Tweening Namespace : Zigurous.Tweening public static class Tweening Fields autoKill Automatically kills tweens after being completed, by default. public static bool autoKill autoStart Automatically starts tweens after being created, by default. public static bool autoStart defaultDelay The default amount of seconds before every tween starts. public static float defaultDelay defaultDuration The default amount of seconds a tween takes to complete. public static float defaultDuration defaultEase The default Ease assigned to every tween. public static Ease defaultEase initialCapacity The initial amount of tweens that memory is allocated for when the system starts. Additional memory will be allocated as needed. public static int initialCapacity overshoot The default overshoot value used in easing functions. public static float overshoot recyclable Keeps tweens in memory to be re-used after being killed, by default. public static bool recyclable Properties ActiveCount The number of tweens that are currently alive and active. public static int ActiveCount { get; } Count The number of tweens currently alive (not necessarily active). public static int Count { get; } Methods Complete(Int32) Completes any alive tween that matches the given id. public static void Complete(int id) Parameter Description id The id of the tween(s) to complete. Complete<T>(T) Completes any alive tween that is animating the given target object. public static void Complete<T>(T target) where T : class Parameter Description target The target object to complete the tweens of. Type Parameter Description T The type of the target object. CompleteAll() Completes all active tweens. public static void CompleteAll() From(TweenGetter<Color>, TweenSetter<Color>, Color, Single) Creates a tween that animates a parameter from a given end value to the current value over a set duration. public static Tween From(TweenGetter<Color> getter, TweenSetter<Color> setter, Color endValue, float duration) Parameter Description getter The function that gets the current value of the parameter. setter The function that sets a new value of the parameter. endValue The end value of the parameter. duration The duration of the tween. Returns Description Tween A new tween that animates the parameter. From(TweenGetter<Quaternion>, TweenSetter<Quaternion>, Quaternion, Single) Creates a tween that animates a parameter from a given end value to the current value over a set duration. public static Tween From(TweenGetter<Quaternion> getter, TweenSetter<Quaternion> setter, Quaternion endValue, float duration) Parameter Description getter The function that gets the current value of the parameter. setter The function that sets a new value of the parameter. endValue The end value of the parameter. duration The duration of the tween. Returns Description Tween A new tween that animates the parameter. From(TweenGetter<Rect>, TweenSetter<Rect>, Rect, Single) Creates a tween that animates a parameter from a given end value to the current value over a set duration. public static Tween From(TweenGetter<Rect> getter, TweenSetter<Rect> setter, Rect endValue, float duration) Parameter Description getter The function that gets the current value of the parameter. setter The function that sets a new value of the parameter. endValue The end value of the parameter. duration The duration of the tween. Returns Description Tween A new tween that animates the parameter. From(TweenGetter<Double>, TweenSetter<Double>, Double, Single) Creates a tween that animates a parameter from a given end value to the current value over a set duration. public static Tween From(TweenGetter<double> getter, TweenSetter<double> setter, double endValue, float duration) Parameter Description getter The function that gets the current value of the parameter. setter The function that sets a new value of the parameter. endValue The end value of the parameter. duration The duration of the tween. Returns Description Tween A new tween that animates the parameter. From(TweenGetter<Int32>, TweenSetter<Int32>, Int32, Single) Creates a tween that animates a parameter from a given end value to the current value over a set duration. public static Tween From(TweenGetter<int> getter, TweenSetter<int> setter, int endValue, float duration) Parameter Description getter The function that gets the current value of the parameter. setter The function that sets a new value of the parameter. endValue The end value of the parameter. duration The duration of the tween. Returns Description Tween A new tween that animates the parameter. From(TweenGetter<Int64>, TweenSetter<Int64>, Int64, Single) Creates a tween that animates a parameter from a given end value to the current value over a set duration. public static Tween From(TweenGetter<long> getter, TweenSetter<long> setter, long endValue, float duration) Parameter Description getter The function that gets the current value of the parameter. setter The function that sets a new value of the parameter. endValue The end value of the parameter. duration The duration of the tween. Returns Description Tween A new tween that animates the parameter. From(TweenGetter<Single>, TweenSetter<Single>, Single, Single) Creates a tween that animates a parameter from a given end value to the current value over a set duration. public static Tween From(TweenGetter<float> getter, TweenSetter<float> setter, float endValue, float duration) Parameter Description getter The function that gets the current value of the parameter. setter The function that sets a new value of the parameter. endValue The end value of the parameter. duration The duration of the tween. Returns Description Tween A new tween that animates the parameter. From(TweenGetter<Vector2>, TweenSetter<Vector2>, Vector2, Single) Creates a tween that animates a parameter from a given end value to the current value over a set duration. public static Tween From(TweenGetter<Vector2> getter, TweenSetter<Vector2> setter, Vector2 endValue, float duration) Parameter Description getter The function that gets the current value of the parameter. setter The function that sets a new value of the parameter. endValue The end value of the parameter. duration The duration of the tween. Returns Description Tween A new tween that animates the parameter. From(TweenGetter<Vector2Int>, TweenSetter<Vector2Int>, Vector2Int, Single) Creates a tween that animates a parameter from a given end value to the current value over a set duration. public static Tween From(TweenGetter<Vector2Int> getter, TweenSetter<Vector2Int> setter, Vector2Int endValue, float duration) Parameter Description getter The function that gets the current value of the parameter. setter The function that sets a new value of the parameter. endValue The end value of the parameter. duration The duration of the tween. Returns Description Tween A new tween that animates the parameter. From(TweenGetter<Vector3>, TweenSetter<Vector3>, Vector3, Single) Creates a tween that animates a parameter from a given end value to the current value over a set duration. public static Tween From(TweenGetter<Vector3> getter, TweenSetter<Vector3> setter, Vector3 endValue, float duration) Parameter Description getter The function that gets the current value of the parameter. setter The function that sets a new value of the parameter. endValue The end value of the parameter. duration The duration of the tween. Returns Description Tween A new tween that animates the parameter. From(TweenGetter<Vector3Int>, TweenSetter<Vector3Int>, Vector3Int, Single) Creates a tween that animates a parameter from a given end value to the current value over a set duration. public static Tween From(TweenGetter<Vector3Int> getter, TweenSetter<Vector3Int> setter, Vector3Int endValue, float duration) Parameter Description getter The function that gets the current value of the parameter. setter The function that sets a new value of the parameter. endValue The end value of the parameter. duration The duration of the tween. Returns Description Tween A new tween that animates the parameter. From(TweenGetter<Vector4>, TweenSetter<Vector4>, Vector4, Single) Creates a tween that animates a parameter from a given end value to the current value over a set duration. public static Tween From(TweenGetter<Vector4> getter, TweenSetter<Vector4> setter, Vector4 endValue, float duration) Parameter Description getter The function that gets the current value of the parameter. setter The function that sets a new value of the parameter. endValue The end value of the parameter. duration The duration of the tween. Returns Description Tween A new tween that animates the parameter. From<T>(Interpolater<T>, TweenGetter<T>, TweenSetter<T>, T, Single) Creates a tween that animates a parameter from a given end value to the current value over a set duration. public static Tween From<T>(Interpolater<T> interpolater, TweenGetter<T> getter, TweenSetter<T> setter, T endValue, float duration) Parameter Description interpolater The function that interpolates values between the start and end value. getter The function that gets the current value of the parameter. setter The function that sets a new value of the parameter. endValue The end value of the parameter. duration The duration of the tween. Returns Description Tween A new tween that animates the parameter. Type Parameter Description T The type of the parameter. Kill(Int32, Boolean) Kills any alive tween that matches the given id. Optionally, the tweens can be completed before being killed. public static void Kill(int id, bool complete = false) Parameter Description id The id of the tween(s) to kill. complete Whether to complete the tweens before being killed. KillAll(Boolean) Kills all active tweens. Optionally, the tweens can be completed before being killed. public static void KillAll(bool complete = false) Parameter Description complete Whether to complete the tweens before being killed. Play(Int32) Plays any alive tween that matches the given id. public static void Play(int id) Parameter Description id The id of the tween(s) to play. Play<T>(T) Plays any alive tween that is animating the given target object. public static void Play<T>(T target) where T : class Parameter Description target The target object to play the tweens of. Type Parameter Description T The type of the target object. PlayAll() Plays all active tweens. public static void PlayAll() Restart(Int32) Restarts any alive tween that matches the given id. public static void Restart(int id) Parameter Description id The id of the tween(s) to restart. Restart<T>(T) Restarts any alive tween that is animating the given target object. public static void Restart<T>(T target) where T : class Parameter Description target The target object to restart the tweens of. Type Parameter Description T The type of the target object. RestartAll() Restarts all active tweens. public static void RestartAll() Sequence() Creates a new, empty tween sequence. public static Sequence Sequence() Returns Description Sequence The new tween sequence. Sequence(Tween[]) Creates a new tween sequence of the given tweens. public static Sequence Sequence(params Tween[] tweens) Parameter Description tweens The tweens to add to the sequence. Returns Description Sequence The new tween sequence. Stop(Int32) Stops any alive tween that matches the given id. public static void Stop(int id) Parameter Description id The id of the tween(s) to stop. Stop<T>(T) Stops any alive tween that is animating the given target object. public static void Stop<T>(T target) where T : class Parameter Description target The target object to stop the tweens of. Type Parameter Description T The type of the target object. StopAll() Stops all active tweens. public static void StopAll() To(TweenGetter<Color>, TweenSetter<Color>, Color, Single) Creates a tween that animates a parameter to a given end value over a set duration. public static Tween To(TweenGetter<Color> getter, TweenSetter<Color> setter, Color endValue, float duration) Parameter Description getter The function that gets the current value of the parameter. setter The function that sets a new value of the parameter. endValue The end value of the parameter. duration The duration of the tween. Returns Description Tween A new tween that animates the parameter. To(TweenGetter<Quaternion>, TweenSetter<Quaternion>, Quaternion, Single) Creates a tween that animates a parameter to a given end value over a set duration. public static Tween To(TweenGetter<Quaternion> getter, TweenSetter<Quaternion> setter, Quaternion endValue, float duration) Parameter Description getter The function that gets the current value of the parameter. setter The function that sets a new value of the parameter. endValue The end value of the parameter. duration The duration of the tween. Returns Description Tween A new tween that animates the parameter. To(TweenGetter<Rect>, TweenSetter<Rect>, Rect, Single) Creates a tween that animates a parameter to a given end value over a set duration. public static Tween To(TweenGetter<Rect> getter, TweenSetter<Rect> setter, Rect endValue, float duration) Parameter Description getter The function that gets the current value of the parameter. setter The function that sets a new value of the parameter. endValue The end value of the parameter. duration The duration of the tween. Returns Description Tween A new tween that animates the parameter. To(TweenGetter<Double>, TweenSetter<Double>, Double, Single) Creates a tween that animates a parameter to a given end value over a set duration. public static Tween To(TweenGetter<double> getter, TweenSetter<double> setter, double endValue, float duration) Parameter Description getter The function that gets the current value of the parameter. setter The function that sets a new value of the parameter. endValue The end value of the parameter. duration The duration of the tween. Returns Description Tween A new tween that animates the parameter. To(TweenGetter<Int32>, TweenSetter<Int32>, Int32, Single) Creates a tween that animates a parameter to a given end value over a set duration. public static Tween To(TweenGetter<int> getter, TweenSetter<int> setter, int endValue, float duration) Parameter Description getter The function that gets the current value of the parameter. setter The function that sets a new value of the parameter. endValue The end value of the parameter. duration The duration of the tween. Returns Description Tween A new tween that animates the parameter. To(TweenGetter<Int64>, TweenSetter<Int64>, Int64, Single) Creates a tween that animates a parameter to a given end value over a set duration. public static Tween To(TweenGetter<long> getter, TweenSetter<long> setter, long endValue, float duration) Parameter Description getter The function that gets the current value of the parameter. setter The function that sets a new value of the parameter. endValue The end value of the parameter. duration The duration of the tween. Returns Description Tween A new tween that animates the parameter. To(TweenGetter<Single>, TweenSetter<Single>, Single, Single) Creates a tween that animates a parameter to a given end value over a set duration. public static Tween To(TweenGetter<float> getter, TweenSetter<float> setter, float endValue, float duration) Parameter Description getter The function that gets the current value of the parameter. setter The function that sets a new value of the parameter. endValue The end value of the parameter. duration The duration of the tween. Returns Description Tween A new tween that animates the parameter. To(TweenGetter<Vector2>, TweenSetter<Vector2>, Vector2, Single) Creates a tween that animates a parameter to a given end value over a set duration. public static Tween To(TweenGetter<Vector2> getter, TweenSetter<Vector2> setter, Vector2 endValue, float duration) Parameter Description getter The function that gets the current value of the parameter. setter The function that sets a new value of the parameter. endValue The end value of the parameter. duration The duration of the tween. Returns Description Tween A new tween that animates the parameter. To(TweenGetter<Vector2Int>, TweenSetter<Vector2Int>, Vector2Int, Single) Creates a tween that animates a parameter to a given end value over a set duration. public static Tween To(TweenGetter<Vector2Int> getter, TweenSetter<Vector2Int> setter, Vector2Int endValue, float duration) Parameter Description getter The function that gets the current value of the parameter. setter The function that sets a new value of the parameter. endValue The end value of the parameter. duration The duration of the tween. Returns Description Tween A new tween that animates the parameter. To(TweenGetter<Vector3>, TweenSetter<Vector3>, Vector3, Single) Creates a tween that animates a parameter to a given end value over a set duration. public static Tween To(TweenGetter<Vector3> getter, TweenSetter<Vector3> setter, Vector3 endValue, float duration) Parameter Description getter The function that gets the current value of the parameter. setter The function that sets a new value of the parameter. endValue The end value of the parameter. duration The duration of the tween. Returns Description Tween A new tween that animates the parameter. To(TweenGetter<Vector3Int>, TweenSetter<Vector3Int>, Vector3Int, Single) Creates a tween that animates a parameter to a given end value over a set duration. public static Tween To(TweenGetter<Vector3Int> getter, TweenSetter<Vector3Int> setter, Vector3Int endValue, float duration) Parameter Description getter The function that gets the current value of the parameter. setter The function that sets a new value of the parameter. endValue The end value of the parameter. duration The duration of the tween. Returns Description Tween A new tween that animates the parameter. To(TweenGetter<Vector4>, TweenSetter<Vector4>, Vector4, Single) Creates a tween that animates a parameter to a given end value over a set duration. public static Tween To(TweenGetter<Vector4> getter, TweenSetter<Vector4> setter, Vector4 endValue, float duration) Parameter Description getter The function that gets the current value of the parameter. setter The function that sets a new value of the parameter. endValue The end value of the parameter. duration The duration of the tween. Returns Description Tween A new tween that animates the parameter. To<T>(Interpolater<T>, TweenGetter<T>, TweenSetter<T>, T, Single) Creates a tween that animates a parameter to a given end value over a set duration. public static Tween To<T>(Interpolater<T> interpolater, TweenGetter<T> getter, TweenSetter<T> setter, T endValue, float duration) Parameter Description interpolater The function that interpolates values between the start and end value. getter The function that gets the current value of the parameter. setter The function that sets a new value of the parameter. endValue The end value of the parameter. duration The duration of the tween. Returns Description Tween A new tween that animates the parameter. Type Parameter Description T The type of the parameter."
  },
  "api/Zigurous.Tweening.TweeningSettings.html": {
    "href": "api/Zigurous.Tweening.TweeningSettings.html",
    "title": "Class TweeningSettings | Tweening",
    "keywords": "Class TweeningSettings A behavior that allows tweening settings to be changed in the editor or at runtime. Inheritance System.Object TweeningSettings Namespace : Zigurous.Tweening public sealed class TweeningSettings : MonoBehaviour Properties autoKill Automatically kills tweens after being completed, by default. public bool autoKill { get; set; } autoStart Automatically starts tweens after being created, by default. public bool autoStart { get; set; } defaultDelay The default amount of seconds before every tween starts. public float defaultDelay { get; set; } defaultDuration The default amount of seconds a tween takes to complete. public float defaultDuration { get; set; } defaultEase The default Ease assigned to every tween. public Ease defaultEase { get; set; } initialCapacity The initial amount of tweens that memory is allocated for when the system starts. Additional memory will be allocated as needed. public int initialCapacity { get; set; } overshoot The overshoot value used in easing functions. public float overshoot { get; set; } recyclable Keeps tweens in memory to be re-used after being killed, by default. public bool recyclable { get; set; }"
  },
  "api/Zigurous.Tweening.TweenSetter-1.html": {
    "href": "api/Zigurous.Tweening.TweenSetter-1.html",
    "title": "Delegate TweenSetter<T> | Tweening",
    "keywords": "Delegate TweenSetter<T> A function delegate that sets a new value of a parameter. Namespace : Zigurous.Tweening public delegate void TweenSetter<T>(T value); Parameter Description value The new value of the parameter. Type Parameter Description T The type of the parameter."
  },
  "api/Zigurous.Tweening.TweenState.html": {
    "href": "api/Zigurous.Tweening.TweenState.html",
    "title": "Enum TweenState | Tweening",
    "keywords": "Enum TweenState A type of animation state that a tween can be in. Namespace : Zigurous.Tweening public enum TweenState Fields Name Description Complete The tween has completed but not yet killed. Killed The tween is killed, making it no longer usable. Playing The tween is currently playing and receiving updates. Ready The tween has been initialized and is ready to be played. Stopped The tween is currently stopped/paused."
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "Changelog | Tweening",
    "keywords": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [2.4.0] - 2021/06/28 Added New TweeningSettings component that can be used to change settings in the editor Changed Hide TweenManager in component menu Settings properties have been renamed [2.3.0] - 2021/06/27 Added Support for tweening Rect values New Material tween extensions New Camera tween extensions Changed Optimized memory consumption using enum flags Removed Removed Tweening.killTweensOnSceneUnload setting. Each tween now tracks the scene index and is automatically killed when that scene is unloaded. [2.2.1] - 2021/06/18 Fixed Removed editor only property tweens [2.2.0] - 2021/06/15 Added Setting to kill tweens when the scene is unloaded (default=true) [2.1.0] - 2021/06/09 Added Support for looping Support for snapping Support for reversing sequences [2.0.1] - 2021/06/07 Fixed Fix meta file reference error [2.0.0] - 2021/05/25 Changed Overhauled internal code to be more optimized and memory efficient Sequences can now be controlled and managed the same way as any other tween Added Hundreds of pre-defined extension methods for tweening properties on common Unity objects More generic types are now compatible with the tweening system [1.0.1] - 2021/04/13 Changed Package name and description [1.0.0] - 2021/03/24 Added Scripts Ease EaseFunction Sequence Settings Tween Tween+Chaining Tweener TweenState TweenUpdater Tweenable Objects Audio Camera CanvasGroup Graphic Light SpriteRenderer TextMesh Transform"
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "License | Tweening",
    "keywords": "License MIT License Copyright (c) 2021 Zigurous Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "Tweening | Tweening",
    "keywords": "Tweening The Tweening package provides a system for tweening object properties in Unity. A tween is an animation of a value from a start position to an end position using an easing function, providing a natural sense of motion. The system is lightweight, optimized, type-safe, and memory efficient. Hundreds of pre-defined tweening functions can be called on many common Unity objects, or you can animate anything using generic tweening functions. Tweens can be controlled with many different control methods and various callback functions."
  },
  "manual/installation.html": {
    "href": "manual/installation.html",
    "title": "Installation | Tweening",
    "keywords": "Installation Use the Unity Package Manager to install the Tweening package. Open the Package Manager in Window > Package Manager Click the add ( + ) button in the status bar Select Add package from git URL from the add menu Enter the following Git URL in the text box and click Add: https://github.com/zigurous/unity-tweening-system.git For more information on the Package Manager and installing packages, see the following pages: Unity's Package Manager Installing from a Git URL Importing Import the package namespace in each script or file you want to use it. Note : You may need to regenerate project files/assemblies first. using Zigurous.Tweening; Source Code The source code for the Tweening package is in the following repository: https://github.com/zigurous/unity-tweening-system"
  }
}