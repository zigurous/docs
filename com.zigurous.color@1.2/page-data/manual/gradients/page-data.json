{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-js","path":"/manual/gradients","result":{"data":{"markdownRemark":{"html":"<h1>Gradients</h1>\n<p>Creating gradients in Unity via code is often unintuitive and cumbersome. The <strong>Color Pro</strong> package includes a few helper methods in the static class <a href=\"/com.zigurous.color@1.2/api/Zigurous.ColorPro/Gradients\">Gradients</a> to simplify the process of creating and working with gradients.</p>\n<hr/>\n<h2>üç≠ Creating Gradients</h2>\n<p>Methods for easily creating gradients.</p>\n<pre><code class=\"language-csharp\">// Create a gradient between two colors\r\nGradient gradient = Color.red.ToGradient(Color.blue);\r\n\r\n// Interpolate a linear amount of stops\r\nGradient gradient = Color.red.ToGradient(Color.blue, 5);\r\n\r\n// Pass an array of custom stops\r\nfloat[] stops = new float[] { 0f, 0.1f, 0.3f, 0.6f, 1f };\r\nGradient gradient = Color.red.ToGradient(Color.blue, stops);\r\n\r\n// Create a gradient from an array of colors\r\nGradient gradient = colors.ToGradient();\r\n\r\n// Use params to create a gradient with multiple colors\r\nGradient gradient = Color.red.ToGradient(Color.blue, Color.green);\n</code></pre>\n<hr/>\n<h2>üåà Extracting Colors</h2>\n<p>Methods for extracting colors from a gradient.</p>\n<pre><code class=\"language-csharp\">// Get the colors of the gradient\r\nColor[] colors = gradient.ToColors();\r\n\r\n// Interpolate a linear amount of stops within the gradient\r\nColor[] colors = gradient.ToColors(5);\r\n\r\n// Interpolate a set of custom stops\r\nfloat[] stops = new float[] { 0f, 0.1f, 0.3f, 0.6f, 1f };\r\nColor[] colors = gradient.ToColors(stops);\n</code></pre>\n<hr/>\n<h2>üé® Color Palettes</h2>\n<p>Methods for creating gradient color palettes. This would be the same as extracting colors from a gradient but without needing to create a gradient first. Unity gradients are also limited to 8 colors whereas these methods can support any amount of colors.</p>\n<pre><code class=\"language-csharp\">// Interpolate 5 colors between red and blue\r\nColor[] palette = Color.red.ToGradientPalette(Color.blue, 5);\r\n\r\n// Interpolate a set of custom stops\r\nfloat[] stops = new float[] { 0f, 0.1f, 0.3f, 0.6f, 1f };\r\nColor[] palette = Color.red.ToGradientPalette(Color.blue, stops);\r\n\r\n// Prevent heap allocations\r\nColor.red.ToGradientPaletteNonAlloc(Color.blue, outputArray);\r\nColor.red.ToGradientPaletteNonAlloc(Color.blue, stops, outputArray);\n</code></pre>","frontmatter":{"slug":"/manual/gradients","class":null,"title":""}}},"pageContext":{"id":"0cb6cf82-3cc3-5aea-9cbf-8ffa509e96a3","frontmatter__slug":"/manual/gradients","__params":{"frontmatter__slug":"manual"}}},"staticQueryHashes":["1654257956","2011016986","3218290725"]}