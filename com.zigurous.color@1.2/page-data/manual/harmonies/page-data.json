{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-js","path":"/manual/harmonies","result":{"data":{"markdownRemark":{"html":"<h1>Harmonies</h1>\n<p>Color harmonies are combinations of colors that create aesthetically pleasing contrasts and consonances that are said to be harmonious. The <strong>Color Pro</strong> package includes several extension methods declared in the static class <a href=\"/com.zigurous.color@1.2/api/Zigurous.ColorPro/Harmonies\">Harmonies</a> for generating common color harmonies.</p>\n<hr/>\n<h2>Monochromatic</h2>\n<p><img src=\"https://www.color-meanings.com/wp-content/uploads/monochromatic-color-scheme.webp\" width=\"100\"> A set of tints and shades formed from a base color.</p>\n<pre><code class=\"language-csharp\">Color[] harmony = baseColor.Monochromatic(10, 0.5f); // 10 colors with a 50% spread\r\nbaseColor.MonochromaticNonAlloc(outputArray); // prevent heap allocations\n</code></pre>\n<hr/>\n<h2>Analogous</h2>\n<p><img src=\"https://www.color-meanings.com/wp-content/uploads/analogous-color-scheme.webp\" width=\"100\"> A set of colors located next to each other on the color wheel.</p>\n<pre><code class=\"language-csharp\">Color[] harmony = baseColor.Analogous(3, 30); // 3 colors with 30° hue shift each\r\nbaseColor.AnalogousNonAlloc(outputArray, 30); // prevent heap allocations\n</code></pre>\n<hr/>\n<h2>Complementary</h2>\n<p><img src=\"https://www.color-meanings.com/wp-content/uploads/complementary-color-scheme.webp\" width=\"100\"> Two colors located opposite to each other on the color wheel.</p>\n<pre><code class=\"language-csharp\">Color[] harmony = baseColor.Complementary();\r\nbaseColor.ComplementaryNonAlloc(outputArray); // prevent heap allocations\n</code></pre>\n<hr/>\n<h2>Split Complementary</h2>\n<p><img src=\"https://www.color-meanings.com/wp-content/uploads/split-complementary-color-scheme-1.webp\" width=\"100\"> A base color with two colors adjacent to the directly opposing color on the color wheel.</p>\n<pre><code class=\"language-csharp\">Color[] harmony = baseColor.SplitComplementary();\r\nbaseColor.SplitComplementaryNonAlloc(outputArray); // prevent heap allocations\n</code></pre>\n<hr/>\n<h2>Double Split Complementary</h2>\n<p><img src=\"https://www.color-meanings.com/wp-content/uploads/tetrad-color-scheme-1.webp\" width=\"100\"> Two pairs of complementary colors on either side of a base color.</p>\n<pre><code class=\"language-csharp\">Color[] harmony = baseColor.DoubleSplitComplementary();\r\nbaseColor.DoubleSplitComplementaryNonAlloc(outputArray); // prevent heap allocations\n</code></pre>\n<hr/>\n<h2>Triadic</h2>\n<p><img src=\"https://www.color-meanings.com/wp-content/uploads/triad-color-scheme.webp\" width=\"100\"> Three colors evenly spaced around the color wheel to form a triangle (120° shift).</p>\n<pre><code class=\"language-csharp\">Color[] harmony = baseColor.Triadic();\r\nbaseColor.TriadicNonAlloc(outputArray); // prevent heap allocations\n</code></pre>\n<hr/>\n<h2>Square</h2>\n<p><img src=\"https://www.color-meanings.com/wp-content/uploads/square-color-scheme-1.webp\" width=\"100\"> Four colors evenly spaced around the color wheel to form a square (90° shift).</p>\n<pre><code class=\"language-csharp\">Color[] harmony = baseColor.Square();\r\nbaseColor.SquareNonAlloc(outputArray); // prevent heap allocations\n</code></pre>","frontmatter":{"slug":"/manual/harmonies","class":null,"title":""}}},"pageContext":{"id":"b6f36ed5-40a5-52ae-a6cf-48e2534b58fa","frontmatter__slug":"/manual/harmonies","__params":{"frontmatter__slug":"manual"}}},"staticQueryHashes":["1654257956","2011016986","3218290725"]}