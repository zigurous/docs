{"data":{"api":{"nodes":[{"items":[{"children":[],"id":"ArrayExtensions.Reducer`2","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ArrayExtensions.Reducer<TSum, TElement>","nameWithType":"ArrayExtensions.Reducer<TSum, TElement>","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA function delegate that reduces an array into a single value.\n","syntax":{"content":"public delegate TSum Reducer<TSum, TElement>(TSum sum, TElement element);","parameters":[{"description":"The current sum.","id":"sum","type":"{TSum}"},{"description":"The current element being reduced.","id":"element","type":"{TElement}"}],"return":{"description":"The reduced value.","type":"{TSum}"},"typeParameters":[{"description":"The type of the reduced value.","id":"TSum"},{"description":"The type of elements in the array.","id":"TElement"}]},"type":"Delegate","uid":"Zigurous.Architecture.ArrayExtensions.Reducer`2"}]},{"items":[{"children":["Zigurous.Architecture.BehaviourExtensions.DisableAll(Behaviour[])","Zigurous.Architecture.BehaviourExtensions.EnableAll(Behaviour[])","Zigurous.Architecture.BehaviourExtensions.SetEnabled(Behaviour,System.Boolean)","Zigurous.Architecture.BehaviourExtensions.SetEnabled(Behaviour[],System.Boolean)"],"id":"BehaviourExtensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"BehaviourExtensions","nameWithType":"BehaviourExtensions","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nExtension methods for Unity Behaviors.\n","syntax":{"content":"public static class BehaviourExtensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.BehaviourExtensions"},{"children":null,"id":"SetEnabled(Behaviour,System.Boolean)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SetEnabled(Behaviour, Boolean)","nameWithType":"BehaviourExtensions.SetEnabled(Behaviour, Boolean)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.BehaviourExtensions","remarks":null,"summary":"\nSets the enabled state of a behavior.\n","syntax":{"content":"public static void SetEnabled(this Behaviour behavior, bool enabled)","parameters":[{"description":"The behavior to enable or disable.","id":"behavior","type":"Global.Behaviour"},{"description":"The enabled state to set.","id":"enabled","type":"System.Boolean"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.BehaviourExtensions.SetEnabled(Behaviour,System.Boolean)"},{"children":null,"id":"SetEnabled(Behaviour[],System.Boolean)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SetEnabled(Behaviour[], Boolean)","nameWithType":"BehaviourExtensions.SetEnabled(Behaviour[], Boolean)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.BehaviourExtensions","remarks":null,"summary":"\nSets the enabled state of an array of behaviors.\n","syntax":{"content":"public static void SetEnabled(this Behaviour[] behaviors, bool enabled)","parameters":[{"description":"The behaviors to enable or disable.","id":"behaviors","type":"Global.Behaviour[]"},{"description":"The enabled state to set.","id":"enabled","type":"System.Boolean"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.BehaviourExtensions.SetEnabled(Behaviour[],System.Boolean)"},{"children":null,"id":"EnableAll(Behaviour[])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"EnableAll(Behaviour[])","nameWithType":"BehaviourExtensions.EnableAll(Behaviour[])","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.BehaviourExtensions","remarks":null,"summary":"\nEnables an array of behaviors.\n","syntax":{"content":"public static void EnableAll(this Behaviour[] behaviors)","parameters":[{"description":"The behaviors to enable.","id":"behaviors","type":"Global.Behaviour[]"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.BehaviourExtensions.EnableAll(Behaviour[])"},{"children":null,"id":"DisableAll(Behaviour[])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"DisableAll(Behaviour[])","nameWithType":"BehaviourExtensions.DisableAll(Behaviour[])","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.BehaviourExtensions","remarks":null,"summary":"\nDisables an array of behaviors.\n","syntax":{"content":"public static void DisableAll(this Behaviour[] behaviors)","parameters":[{"description":"The behaviors to disable.","id":"behaviors","type":"Global.Behaviour[]"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.BehaviourExtensions.DisableAll(Behaviour[])"}]},{"items":[{"children":["Zigurous.Architecture.Bitmask.#ctor(System.Int32)","Zigurous.Architecture.Bitmask.Change(System.Int32,System.Int32)","Zigurous.Architecture.Bitmask.Clear(System.Int32)","Zigurous.Architecture.Bitmask.Equals(System.Int32)","Zigurous.Architecture.Bitmask.Equals(System.Object)","Zigurous.Architecture.Bitmask.Equals(Zigurous.Architecture.Bitmask)","Zigurous.Architecture.Bitmask.Get(System.Int32)","Zigurous.Architecture.Bitmask.GetHashCode","Zigurous.Architecture.Bitmask.Has(System.Int32)","Zigurous.Architecture.Bitmask.HasAnyFlag(System.Int32)","Zigurous.Architecture.Bitmask.HasFlag(System.Int32)","Zigurous.Architecture.Bitmask.HasOnlyFlags(System.Int32)","Zigurous.Architecture.Bitmask.op_BitwiseAnd(Zigurous.Architecture.Bitmask,Zigurous.Architecture.Bitmask)","Zigurous.Architecture.Bitmask.op_BitwiseOr(Zigurous.Architecture.Bitmask,Zigurous.Architecture.Bitmask)","Zigurous.Architecture.Bitmask.op_Equality(System.Int32,Zigurous.Architecture.Bitmask)","Zigurous.Architecture.Bitmask.op_Equality(Zigurous.Architecture.Bitmask,System.Int32)","Zigurous.Architecture.Bitmask.op_Equality(Zigurous.Architecture.Bitmask,Zigurous.Architecture.Bitmask)","Zigurous.Architecture.Bitmask.op_ExclusiveOr(Zigurous.Architecture.Bitmask,Zigurous.Architecture.Bitmask)","Zigurous.Architecture.Bitmask.op_Implicit(System.Int32)~Zigurous.Architecture.Bitmask","Zigurous.Architecture.Bitmask.op_Implicit(Zigurous.Architecture.Bitmask)~System.Int32","Zigurous.Architecture.Bitmask.op_Inequality(System.Int32,Zigurous.Architecture.Bitmask)","Zigurous.Architecture.Bitmask.op_Inequality(Zigurous.Architecture.Bitmask,System.Int32)","Zigurous.Architecture.Bitmask.op_Inequality(Zigurous.Architecture.Bitmask,Zigurous.Architecture.Bitmask)","Zigurous.Architecture.Bitmask.op_LeftShift(Zigurous.Architecture.Bitmask,System.Int32)","Zigurous.Architecture.Bitmask.op_OnesComplement(Zigurous.Architecture.Bitmask)","Zigurous.Architecture.Bitmask.op_RightShift(Zigurous.Architecture.Bitmask,System.Int32)","Zigurous.Architecture.Bitmask.Set(System.Int32)","Zigurous.Architecture.Bitmask.Toggle(System.Int32)","Zigurous.Architecture.Bitmask.ToString"],"id":"Bitmask","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Bitmask","nameWithType":"Bitmask","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA bitmask representation that can be used for bitwise operations.\nA bitmask is a set of bits that can be set or cleared.\n","syntax":{"content":"[Serializable]\npublic struct Bitmask : IEquatable<Bitmask>, IEquatable<int>","parameters":null,"return":null,"typeParameters":null},"type":"Struct","uid":"Zigurous.Architecture.Bitmask"},{"children":null,"id":"#ctor(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Bitmask(Int32)","nameWithType":"Bitmask.Bitmask(Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bitmask","remarks":null,"summary":"\nCreates a new Bitmask from the given 32-bit integer.\n","syntax":{"content":"public Bitmask(int mask)","parameters":[{"description":"The 32-bit integer to represent as a bitmask.","id":"mask","type":"System.Int32"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.Bitmask.#ctor(System.Int32)"},{"children":null,"id":"HasFlag(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"HasFlag(Int32)","nameWithType":"Bitmask.HasFlag(Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bitmask","remarks":null,"summary":"\nChecks if the bitmask contains the flag.\n<pre><code>(mask &amp; flag) == flag</code></pre>\n","syntax":{"content":"public bool HasFlag(int flag)","parameters":[{"description":"The flag to check for.","id":"flag","type":"System.Int32"}],"return":{"description":"True if the bitmask contains the flag, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Bitmask.HasFlag(System.Int32)"},{"children":null,"id":"HasAnyFlag(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"HasAnyFlag(Int32)","nameWithType":"Bitmask.HasAnyFlag(Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bitmask","remarks":null,"summary":"\nChecks if the bitmask contains any of the flags.\n<pre><code>(mask &amp; flags) != 0</code></pre>\n","syntax":{"content":"public bool HasAnyFlag(int flags)","parameters":[{"description":"The flags to check for.","id":"flags","type":"System.Int32"}],"return":{"description":"True if the bitmask contains any of the flags, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Bitmask.HasAnyFlag(System.Int32)"},{"children":null,"id":"HasOnlyFlags(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"HasOnlyFlags(Int32)","nameWithType":"Bitmask.HasOnlyFlags(Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bitmask","remarks":null,"summary":"\nChecks if the bitmask contains only the given flags\nand no other flags.\n<pre><code>((mask ^ flags) &amp; flags) == 0</code></pre>\n","syntax":{"content":"public bool HasOnlyFlags(int flags)","parameters":[{"description":"The flags to check for.","id":"flags","type":"System.Int32"}],"return":{"description":"True if the bitmask contains only the given flags, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Bitmask.HasOnlyFlags(System.Int32)"},{"children":null,"id":"Has(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Has(Int32)","nameWithType":"Bitmask.Has(Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bitmask","remarks":null,"summary":"\nChecks if the nth bit of the bitmask is set.\n","syntax":{"content":"public bool Has(int n)","parameters":[{"description":"The nth bit to check for.","id":"n","type":"System.Int32"}],"return":{"description":"True if the nth bit is set, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Bitmask.Has(System.Int32)"},{"children":null,"id":"Get(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Get(Int32)","nameWithType":"Bitmask.Get(Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bitmask","remarks":null,"summary":"\nReturns the nth bit of the bitmask.\n","syntax":{"content":"public int Get(int n)","parameters":[{"description":"The nth bit to get.","id":"n","type":"System.Int32"}],"return":{"description":"The nth bit of the bitmask.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Bitmask.Get(System.Int32)"},{"children":null,"id":"Set(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Set(Int32)","nameWithType":"Bitmask.Set(Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bitmask","remarks":null,"summary":"\nSets the nth bit of the bitmask to 1.\n","syntax":{"content":"public void Set(int n)","parameters":[{"description":"The nth bit to set.","id":"n","type":"System.Int32"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Bitmask.Set(System.Int32)"},{"children":null,"id":"Clear(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clear(Int32)","nameWithType":"Bitmask.Clear(Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bitmask","remarks":null,"summary":"\nSets the nth bit of the bitmask to 0.\n","syntax":{"content":"public void Clear(int n)","parameters":[{"description":"The nth bit to clear.","id":"n","type":"System.Int32"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Bitmask.Clear(System.Int32)"},{"children":null,"id":"Toggle(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Toggle(Int32)","nameWithType":"Bitmask.Toggle(Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bitmask","remarks":null,"summary":"\nToggles the nth bit of the bitmask.\n","syntax":{"content":"public void Toggle(int n)","parameters":[{"description":"The nth bit to toggle.","id":"n","type":"System.Int32"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Bitmask.Toggle(System.Int32)"},{"children":null,"id":"Change(System.Int32,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Change(Int32, Int32)","nameWithType":"Bitmask.Change(Int32, Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bitmask","remarks":null,"summary":"\nSets the nth bit of the bitmask to x.\n","syntax":{"content":"public void Change(int n, int x)","parameters":[{"description":"The nth bit to set.","id":"n","type":"System.Int32"},{"description":"The value to set the bit to.","id":"x","type":"System.Int32"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Bitmask.Change(System.Int32,System.Int32)"},{"children":null,"id":"Equals(Zigurous.Architecture.Bitmask)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Equals(Bitmask)","nameWithType":"Bitmask.Equals(Bitmask)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bitmask","remarks":null,"summary":"\nDetermines if the bitmask is equal to another bitmask.\n","syntax":{"content":"public bool Equals(Bitmask other)","parameters":[{"description":"The bitmask to compare to.","id":"other","type":"Zigurous.Architecture.Bitmask"}],"return":{"description":"True if the bitmasks are equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Bitmask.Equals(Zigurous.Architecture.Bitmask)"},{"children":null,"id":"Equals(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Equals(Int32)","nameWithType":"Bitmask.Equals(Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bitmask","remarks":null,"summary":"\nDetermines if the bitmask is equal to another bitmask.\n","syntax":{"content":"public bool Equals(int other)","parameters":[{"description":"The bitmask to compare to.","id":"other","type":"System.Int32"}],"return":{"description":"True if the bitmasks are equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Bitmask.Equals(System.Int32)"},{"children":null,"id":"Equals(System.Object)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Equals(Object)","nameWithType":"Bitmask.Equals(Object)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bitmask","remarks":null,"summary":"\nDetermines if the bitmask is equal to another bitmask.\n","syntax":{"content":"public override bool Equals(object other)","parameters":[{"description":"The object to compare to.","id":"other","type":"System.Object"}],"return":{"description":"True if the bitmasks are equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Bitmask.Equals(System.Object)"},{"children":null,"id":"GetHashCode","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetHashCode()","nameWithType":"Bitmask.GetHashCode()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bitmask","remarks":null,"summary":"\nReturns the hash code of the bitmask.\n","syntax":{"content":"public override int GetHashCode()","parameters":null,"return":{"description":"The hash code of the bitmask.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Bitmask.GetHashCode"},{"children":null,"id":"ToString","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ToString()","nameWithType":"Bitmask.ToString()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bitmask","remarks":null,"summary":"\nConverts the bitmask to a string.\n","syntax":{"content":"public override string ToString()","parameters":null,"return":{"description":"The bitmask as a string.","type":"System.String"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Bitmask.ToString"},{"children":null,"id":"op_Equality(Zigurous.Architecture.Bitmask,Zigurous.Architecture.Bitmask)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Equality(Bitmask, Bitmask)","nameWithType":"Bitmask.Equality(Bitmask, Bitmask)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bitmask","remarks":null,"summary":"\nDetermines if two bitmasks are equal.\n","syntax":{"content":"public static bool operator ==(Bitmask lhs, Bitmask rhs)","parameters":[{"description":"The first bitmask to compare.","id":"lhs","type":"Zigurous.Architecture.Bitmask"},{"description":"The second bitmask to compare.","id":"rhs","type":"Zigurous.Architecture.Bitmask"}],"return":{"description":"True if the bitmasks are equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.Bitmask.op_Equality(Zigurous.Architecture.Bitmask,Zigurous.Architecture.Bitmask)"},{"children":null,"id":"op_Equality(Zigurous.Architecture.Bitmask,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Equality(Bitmask, Int32)","nameWithType":"Bitmask.Equality(Bitmask, Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bitmask","remarks":null,"summary":"\nDetermines if two bitmasks are equal.\n","syntax":{"content":"public static bool operator ==(Bitmask lhs, int rhs)","parameters":[{"description":"The first bitmask to compare.","id":"lhs","type":"Zigurous.Architecture.Bitmask"},{"description":"The second bitmask to compare.","id":"rhs","type":"System.Int32"}],"return":{"description":"True if the bitmasks are equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.Bitmask.op_Equality(Zigurous.Architecture.Bitmask,System.Int32)"},{"children":null,"id":"op_Equality(System.Int32,Zigurous.Architecture.Bitmask)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Equality(Int32, Bitmask)","nameWithType":"Bitmask.Equality(Int32, Bitmask)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bitmask","remarks":null,"summary":"\nDetermines if two bitmasks are equal.\n","syntax":{"content":"public static bool operator ==(int lhs, Bitmask rhs)","parameters":[{"description":"The first bitmask to compare.","id":"lhs","type":"System.Int32"},{"description":"The second bitmask to compare.","id":"rhs","type":"Zigurous.Architecture.Bitmask"}],"return":{"description":"True if the bitmasks are equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.Bitmask.op_Equality(System.Int32,Zigurous.Architecture.Bitmask)"},{"children":null,"id":"op_Inequality(Zigurous.Architecture.Bitmask,Zigurous.Architecture.Bitmask)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Inequality(Bitmask, Bitmask)","nameWithType":"Bitmask.Inequality(Bitmask, Bitmask)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bitmask","remarks":null,"summary":"\nDetermines if two bitmasks are not equal.\n","syntax":{"content":"public static bool operator !=(Bitmask lhs, Bitmask rhs)","parameters":[{"description":"The first bitmask to compare.","id":"lhs","type":"Zigurous.Architecture.Bitmask"},{"description":"The second bitmask to compare.","id":"rhs","type":"Zigurous.Architecture.Bitmask"}],"return":{"description":"True if the bitmasks are not equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.Bitmask.op_Inequality(Zigurous.Architecture.Bitmask,Zigurous.Architecture.Bitmask)"},{"children":null,"id":"op_Inequality(Zigurous.Architecture.Bitmask,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Inequality(Bitmask, Int32)","nameWithType":"Bitmask.Inequality(Bitmask, Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bitmask","remarks":null,"summary":"\nDetermines if two bitmasks are not equal.\n","syntax":{"content":"public static bool operator !=(Bitmask lhs, int rhs)","parameters":[{"description":"The first bitmask to compare.","id":"lhs","type":"Zigurous.Architecture.Bitmask"},{"description":"The second bitmask to compare.","id":"rhs","type":"System.Int32"}],"return":{"description":"True if the bitmasks are not equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.Bitmask.op_Inequality(Zigurous.Architecture.Bitmask,System.Int32)"},{"children":null,"id":"op_Inequality(System.Int32,Zigurous.Architecture.Bitmask)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Inequality(Int32, Bitmask)","nameWithType":"Bitmask.Inequality(Int32, Bitmask)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bitmask","remarks":null,"summary":"\nDetermines if two bitmasks are not equal.\n","syntax":{"content":"public static bool operator !=(int lhs, Bitmask rhs)","parameters":[{"description":"The first bitmask to compare.","id":"lhs","type":"System.Int32"},{"description":"The second bitmask to compare.","id":"rhs","type":"Zigurous.Architecture.Bitmask"}],"return":{"description":"True if the bitmasks are not equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.Bitmask.op_Inequality(System.Int32,Zigurous.Architecture.Bitmask)"},{"children":null,"id":"op_BitwiseAnd(Zigurous.Architecture.Bitmask,Zigurous.Architecture.Bitmask)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"BitwiseAnd(Bitmask, Bitmask)","nameWithType":"Bitmask.BitwiseAnd(Bitmask, Bitmask)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bitmask","remarks":null,"summary":"\nPerforms a bitwise AND operation on two bitmasks.\n","syntax":{"content":"public static Bitmask operator &(Bitmask lhs, Bitmask rhs)","parameters":[{"description":"The first bitmask.","id":"lhs","type":"Zigurous.Architecture.Bitmask"},{"description":"The second bitmask.","id":"rhs","type":"Zigurous.Architecture.Bitmask"}],"return":{"description":"The result of the operation.","type":"Zigurous.Architecture.Bitmask"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.Bitmask.op_BitwiseAnd(Zigurous.Architecture.Bitmask,Zigurous.Architecture.Bitmask)"},{"children":null,"id":"op_BitwiseOr(Zigurous.Architecture.Bitmask,Zigurous.Architecture.Bitmask)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"BitwiseOr(Bitmask, Bitmask)","nameWithType":"Bitmask.BitwiseOr(Bitmask, Bitmask)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bitmask","remarks":null,"summary":"\nPerforms a bitwise OR operation on two bitmasks.\n","syntax":{"content":"public static Bitmask operator |(Bitmask lhs, Bitmask rhs)","parameters":[{"description":"The first bitmask.","id":"lhs","type":"Zigurous.Architecture.Bitmask"},{"description":"The second bitmask.","id":"rhs","type":"Zigurous.Architecture.Bitmask"}],"return":{"description":"The result of the operation.","type":"Zigurous.Architecture.Bitmask"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.Bitmask.op_BitwiseOr(Zigurous.Architecture.Bitmask,Zigurous.Architecture.Bitmask)"},{"children":null,"id":"op_ExclusiveOr(Zigurous.Architecture.Bitmask,Zigurous.Architecture.Bitmask)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ExclusiveOr(Bitmask, Bitmask)","nameWithType":"Bitmask.ExclusiveOr(Bitmask, Bitmask)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bitmask","remarks":null,"summary":"\nPerforms a bitwise XOR operation on two bitmasks.\n","syntax":{"content":"public static Bitmask operator ^(Bitmask lhs, Bitmask rhs)","parameters":[{"description":"The first bitmask.","id":"lhs","type":"Zigurous.Architecture.Bitmask"},{"description":"The second bitmask.","id":"rhs","type":"Zigurous.Architecture.Bitmask"}],"return":{"description":"The result of the operation.","type":"Zigurous.Architecture.Bitmask"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.Bitmask.op_ExclusiveOr(Zigurous.Architecture.Bitmask,Zigurous.Architecture.Bitmask)"},{"children":null,"id":"op_OnesComplement(Zigurous.Architecture.Bitmask)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnesComplement(Bitmask)","nameWithType":"Bitmask.OnesComplement(Bitmask)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bitmask","remarks":null,"summary":"\nPerforms a bitwise ones&apos; complement operation on a bitmask.\n","syntax":{"content":"public static Bitmask operator ~(Bitmask operand)","parameters":[{"description":null,"id":"operand","type":"Zigurous.Architecture.Bitmask"}],"return":{"description":"The result of the operation.","type":"Zigurous.Architecture.Bitmask"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.Bitmask.op_OnesComplement(Zigurous.Architecture.Bitmask)"},{"children":null,"id":"op_LeftShift(Zigurous.Architecture.Bitmask,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"LeftShift(Bitmask, Int32)","nameWithType":"Bitmask.LeftShift(Bitmask, Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bitmask","remarks":null,"summary":"\nPerforms a binary left shift operation on two bitmasks.\n","syntax":{"content":"public static Bitmask operator <<(Bitmask lhs, int rhs)","parameters":[{"description":"The first bitmask.","id":"lhs","type":"Zigurous.Architecture.Bitmask"},{"description":"The second bitmask.","id":"rhs","type":"System.Int32"}],"return":{"description":"The result of the operation.","type":"Zigurous.Architecture.Bitmask"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.Bitmask.op_LeftShift(Zigurous.Architecture.Bitmask,System.Int32)"},{"children":null,"id":"op_RightShift(Zigurous.Architecture.Bitmask,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"RightShift(Bitmask, Int32)","nameWithType":"Bitmask.RightShift(Bitmask, Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bitmask","remarks":null,"summary":"\nPerforms a binary right shift operation on two bitmasks.\n","syntax":{"content":"public static Bitmask operator >>(Bitmask lhs, int rhs)","parameters":[{"description":"The first bitmask.","id":"lhs","type":"Zigurous.Architecture.Bitmask"},{"description":"The second bitmask.","id":"rhs","type":"System.Int32"}],"return":{"description":"The result of the operation.","type":"Zigurous.Architecture.Bitmask"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.Bitmask.op_RightShift(Zigurous.Architecture.Bitmask,System.Int32)"},{"children":null,"id":"op_Implicit(Zigurous.Architecture.Bitmask)~System.Int32","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Implicit(Bitmask to Int32)","nameWithType":"Bitmask.Implicit(Bitmask to Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bitmask","remarks":null,"summary":"\nImplicitly converts a bitmask to an integer.\n","syntax":{"content":"public static implicit operator int (Bitmask bitmask)","parameters":[{"description":"The bitmask to convert.","id":"bitmask","type":"Zigurous.Architecture.Bitmask"}],"return":{"description":"The bitmask as an integer.","type":"System.Int32"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.Bitmask.op_Implicit(Zigurous.Architecture.Bitmask)~System.Int32"},{"children":null,"id":"op_Implicit(System.Int32)~Zigurous.Architecture.Bitmask","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Implicit(Int32 to Bitmask)","nameWithType":"Bitmask.Implicit(Int32 to Bitmask)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bitmask","remarks":null,"summary":"\nImplicitly converts an integer to a bitmask.\n","syntax":{"content":"public static implicit operator Bitmask(int mask)","parameters":[{"description":"The integer to convert.","id":"mask","type":"System.Int32"}],"return":{"description":"The integer as a bitmask.","type":"Zigurous.Architecture.Bitmask"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.Bitmask.op_Implicit(System.Int32)~Zigurous.Architecture.Bitmask"}]},{"items":[{"children":["Zigurous.Architecture.Bool3.#ctor(System.Boolean,System.Boolean,System.Boolean)","Zigurous.Architecture.Bool3.Equals(System.Object)","Zigurous.Architecture.Bool3.Equals(Zigurous.Architecture.Bool3)","Zigurous.Architecture.Bool3.False","Zigurous.Architecture.Bool3.GetHashCode","Zigurous.Architecture.Bool3.Item(System.Int32)","Zigurous.Architecture.Bool3.op_BitwiseAnd(Zigurous.Architecture.Bool3,Zigurous.Architecture.Bool3)","Zigurous.Architecture.Bool3.op_BitwiseOr(Zigurous.Architecture.Bool3,Zigurous.Architecture.Bool3)","Zigurous.Architecture.Bool3.op_Equality(Zigurous.Architecture.Bool3,Zigurous.Architecture.Bool3)","Zigurous.Architecture.Bool3.op_ExclusiveOr(Zigurous.Architecture.Bool3,Zigurous.Architecture.Bool3)","Zigurous.Architecture.Bool3.op_Inequality(Zigurous.Architecture.Bool3,Zigurous.Architecture.Bool3)","Zigurous.Architecture.Bool3.op_LogicalNot(Zigurous.Architecture.Bool3)","Zigurous.Architecture.Bool3.ToString","Zigurous.Architecture.Bool3.True","Zigurous.Architecture.Bool3.x","Zigurous.Architecture.Bool3.X","Zigurous.Architecture.Bool3.y","Zigurous.Architecture.Bool3.Y","Zigurous.Architecture.Bool3.z","Zigurous.Architecture.Bool3.Z"],"id":"Bool3","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Bool3","nameWithType":"Bool3","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nStores a tuple of 3 booleans.\n","syntax":{"content":"[Serializable]\npublic struct Bool3 : IEquatable<Bool3>","parameters":null,"return":null,"typeParameters":null},"type":"Struct","uid":"Zigurous.Architecture.Bool3"},{"children":null,"id":"False","implements":null,"inheritance":null,"inheritedMembers":null,"name":"False","nameWithType":"Bool3.False","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bool3","remarks":null,"summary":"\nShorthand for writing <code>Bool3(false, false, false)</code>.\n","syntax":{"content":"public static readonly Bool3 False { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.Bool3"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Bool3.False"},{"children":null,"id":"True","implements":null,"inheritance":null,"inheritedMembers":null,"name":"True","nameWithType":"Bool3.True","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bool3","remarks":null,"summary":"\nShorthand for writing <code>Bool3(true, true, true)</code>.\n","syntax":{"content":"public static readonly Bool3 True { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.Bool3"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Bool3.True"},{"children":null,"id":"X","implements":null,"inheritance":null,"inheritedMembers":null,"name":"X","nameWithType":"Bool3.X","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bool3","remarks":null,"summary":"\nShorthand for writing <code>Bool3(true, false, false)</code>.\n","syntax":{"content":"public static readonly Bool3 X { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.Bool3"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Bool3.X"},{"children":null,"id":"Y","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Y","nameWithType":"Bool3.Y","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bool3","remarks":null,"summary":"\nShorthand for writing <code>Bool3(false, true, false)</code>.\n","syntax":{"content":"public static readonly Bool3 Y { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.Bool3"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Bool3.Y"},{"children":null,"id":"Z","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Z","nameWithType":"Bool3.Z","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bool3","remarks":null,"summary":"\nShorthand for writing <code>Bool3(false, false, true)</code>.\n","syntax":{"content":"public static readonly Bool3 Z { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.Bool3"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Bool3.Z"},{"children":null,"id":"x","implements":null,"inheritance":null,"inheritedMembers":null,"name":"x","nameWithType":"Bool3.x","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bool3","remarks":null,"summary":"\nThe X component.\n","syntax":{"content":"public bool x","parameters":null,"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.Bool3.x"},{"children":null,"id":"y","implements":null,"inheritance":null,"inheritedMembers":null,"name":"y","nameWithType":"Bool3.y","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bool3","remarks":null,"summary":"\nThe Y component.\n","syntax":{"content":"public bool y","parameters":null,"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.Bool3.y"},{"children":null,"id":"z","implements":null,"inheritance":null,"inheritedMembers":null,"name":"z","nameWithType":"Bool3.z","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bool3","remarks":null,"summary":"\nThe Z component.\n","syntax":{"content":"public bool z","parameters":null,"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.Bool3.z"},{"children":null,"id":"Item(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Item[Int32]","nameWithType":"Bool3.Item[Int32]","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bool3","remarks":null,"summary":"\nGets or sets the component at the specified index.\n","syntax":{"content":"public bool this[int index] { get; set; }","parameters":[{"description":"The index of the component to get or set.","id":"index","type":"System.Int32"}],"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Bool3.Item(System.Int32)"},{"children":null,"id":"#ctor(System.Boolean,System.Boolean,System.Boolean)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Bool3(Boolean, Boolean, Boolean)","nameWithType":"Bool3.Bool3(Boolean, Boolean, Boolean)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bool3","remarks":null,"summary":"\nCreates a new Bool3 with the specified values.\n","syntax":{"content":"public Bool3(bool x = false, bool y = false, bool z = false)","parameters":[{"description":"The X component.","id":"x","type":"System.Boolean"},{"description":"The Y component.","id":"y","type":"System.Boolean"},{"description":"The Z component.","id":"z","type":"System.Boolean"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.Bool3.#ctor(System.Boolean,System.Boolean,System.Boolean)"},{"children":null,"id":"Equals(Zigurous.Architecture.Bool3)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Equals(Bool3)","nameWithType":"Bool3.Equals(Bool3)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bool3","remarks":null,"summary":"\nDetermines if the tuple is equal to another.\n","syntax":{"content":"public bool Equals(Bool3 other)","parameters":[{"description":"The tuple to compare to.","id":"other","type":"Zigurous.Architecture.Bool3"}],"return":{"description":"True if the tuples are equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Bool3.Equals(Zigurous.Architecture.Bool3)"},{"children":null,"id":"Equals(System.Object)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Equals(Object)","nameWithType":"Bool3.Equals(Object)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bool3","remarks":null,"summary":"\nDetermines if the tuple is equal to another.\n","syntax":{"content":"public override bool Equals(object other)","parameters":[{"description":"The object to compare to.","id":"other","type":"System.Object"}],"return":{"description":"True if the tuples are equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Bool3.Equals(System.Object)"},{"children":null,"id":"GetHashCode","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetHashCode()","nameWithType":"Bool3.GetHashCode()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bool3","remarks":null,"summary":"\nReturns the hash code of the tuple.\n","syntax":{"content":"public override int GetHashCode()","parameters":null,"return":{"description":"The hash code of the tuple.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Bool3.GetHashCode"},{"children":null,"id":"ToString","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ToString()","nameWithType":"Bool3.ToString()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bool3","remarks":null,"summary":"\nConverts the tuple to a string.\n","syntax":{"content":"public override string ToString()","parameters":null,"return":{"description":"The tuple as a string.","type":"System.String"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Bool3.ToString"},{"children":null,"id":"op_Equality(Zigurous.Architecture.Bool3,Zigurous.Architecture.Bool3)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Equality(Bool3, Bool3)","nameWithType":"Bool3.Equality(Bool3, Bool3)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bool3","remarks":null,"summary":"\nDetermines if two tuples are equal.\n","syntax":{"content":"public static bool operator ==(Bool3 lhs, Bool3 rhs)","parameters":[{"description":"The first tuple to compare.","id":"lhs","type":"Zigurous.Architecture.Bool3"},{"description":"The second tuple to compare.","id":"rhs","type":"Zigurous.Architecture.Bool3"}],"return":{"description":"True if the tuples are equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.Bool3.op_Equality(Zigurous.Architecture.Bool3,Zigurous.Architecture.Bool3)"},{"children":null,"id":"op_Inequality(Zigurous.Architecture.Bool3,Zigurous.Architecture.Bool3)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Inequality(Bool3, Bool3)","nameWithType":"Bool3.Inequality(Bool3, Bool3)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bool3","remarks":null,"summary":"\nDetermines if two tuples are not equal.\n","syntax":{"content":"public static bool operator !=(Bool3 lhs, Bool3 rhs)","parameters":[{"description":"The first tuple to compare.","id":"lhs","type":"Zigurous.Architecture.Bool3"},{"description":"The second tuple to compare.","id":"rhs","type":"Zigurous.Architecture.Bool3"}],"return":{"description":"True if the tuples are not equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.Bool3.op_Inequality(Zigurous.Architecture.Bool3,Zigurous.Architecture.Bool3)"},{"children":null,"id":"op_BitwiseAnd(Zigurous.Architecture.Bool3,Zigurous.Architecture.Bool3)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"BitwiseAnd(Bool3, Bool3)","nameWithType":"Bool3.BitwiseAnd(Bool3, Bool3)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bool3","remarks":null,"summary":"\nPerforms a bitwise AND operation on two tuples.\n","syntax":{"content":"public static Bool3 operator &(Bool3 lhs, Bool3 rhs)","parameters":[{"description":"The first tuple.","id":"lhs","type":"Zigurous.Architecture.Bool3"},{"description":"The second tuple.","id":"rhs","type":"Zigurous.Architecture.Bool3"}],"return":{"description":"The result of the operation.","type":"Zigurous.Architecture.Bool3"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.Bool3.op_BitwiseAnd(Zigurous.Architecture.Bool3,Zigurous.Architecture.Bool3)"},{"children":null,"id":"op_BitwiseOr(Zigurous.Architecture.Bool3,Zigurous.Architecture.Bool3)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"BitwiseOr(Bool3, Bool3)","nameWithType":"Bool3.BitwiseOr(Bool3, Bool3)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bool3","remarks":null,"summary":"\nPerforms a bitwise OR operation on two tuples.\n","syntax":{"content":"public static Bool3 operator |(Bool3 lhs, Bool3 rhs)","parameters":[{"description":"The first tuple.","id":"lhs","type":"Zigurous.Architecture.Bool3"},{"description":"The second tuple.","id":"rhs","type":"Zigurous.Architecture.Bool3"}],"return":{"description":"The result of the operation.","type":"Zigurous.Architecture.Bool3"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.Bool3.op_BitwiseOr(Zigurous.Architecture.Bool3,Zigurous.Architecture.Bool3)"},{"children":null,"id":"op_ExclusiveOr(Zigurous.Architecture.Bool3,Zigurous.Architecture.Bool3)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ExclusiveOr(Bool3, Bool3)","nameWithType":"Bool3.ExclusiveOr(Bool3, Bool3)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bool3","remarks":null,"summary":"\nPerforms a bitwise XOR operation on two tuples.\n","syntax":{"content":"public static Bool3 operator ^(Bool3 lhs, Bool3 rhs)","parameters":[{"description":"The first tuple.","id":"lhs","type":"Zigurous.Architecture.Bool3"},{"description":"The second tuple.","id":"rhs","type":"Zigurous.Architecture.Bool3"}],"return":{"description":"The result of the operation.","type":"Zigurous.Architecture.Bool3"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.Bool3.op_ExclusiveOr(Zigurous.Architecture.Bool3,Zigurous.Architecture.Bool3)"},{"children":null,"id":"op_LogicalNot(Zigurous.Architecture.Bool3)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"LogicalNot(Bool3)","nameWithType":"Bool3.LogicalNot(Bool3)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Bool3","remarks":null,"summary":"\nPerforms a logical negation operation on a tuple.\n","syntax":{"content":"public static Bool3 operator !(Bool3 operand)","parameters":[{"description":"The tuple to negate.","id":"operand","type":"Zigurous.Architecture.Bool3"}],"return":{"description":"The result of the operation.","type":"Zigurous.Architecture.Bool3"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.Bool3.op_LogicalNot(Zigurous.Architecture.Bool3)"}]},{"items":[{"children":["Zigurous.Architecture.BoolReference.#ctor","Zigurous.Architecture.BoolReference.#ctor(System.Boolean)","Zigurous.Architecture.BoolReference.#ctor(Zigurous.Architecture.BoolVariable)","Zigurous.Architecture.BoolReference.op_Implicit(Zigurous.Architecture.BoolReference)~System.Boolean"],"id":"BoolReference","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ValueReference{System.Boolean,Zigurous.Architecture.BoolVariable}"],"inheritedMembers":["Zigurous.Architecture.ValueReference{System.Boolean,Zigurous.Architecture.BoolVariable}.useConstant","Zigurous.Architecture.ValueReference{System.Boolean,Zigurous.Architecture.BoolVariable}.constantValue","Zigurous.Architecture.ValueReference{System.Boolean,Zigurous.Architecture.BoolVariable}.variable","Zigurous.Architecture.ValueReference{System.Boolean,Zigurous.Architecture.BoolVariable}.value"],"name":"BoolReference","nameWithType":"BoolReference","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA reference to a boolean value, either a constant or <xref href=\"Zigurous.Architecture.BoolVariable\" data-throw-if-not-resolved=\"false\"></xref>.\n","syntax":{"content":"[Serializable]\npublic class BoolReference : ValueReference<bool, BoolVariable>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.BoolReference"},{"children":null,"id":"#ctor","implements":null,"inheritance":null,"inheritedMembers":null,"name":"BoolReference()","nameWithType":"BoolReference.BoolReference()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.BoolReference","remarks":null,"summary":"\nCreates a new boolean reference.\n","syntax":{"content":"public BoolReference()","parameters":null,"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.BoolReference.#ctor"},{"children":null,"id":"#ctor(System.Boolean)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"BoolReference(Boolean)","nameWithType":"BoolReference.BoolReference(Boolean)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.BoolReference","remarks":null,"summary":"\nCreates a new boolean reference with the constant value.\n","syntax":{"content":"public BoolReference(bool value)","parameters":[{"description":"The constant value to set.","id":"value","type":"System.Boolean"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.BoolReference.#ctor(System.Boolean)"},{"children":null,"id":"#ctor(Zigurous.Architecture.BoolVariable)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"BoolReference(BoolVariable)","nameWithType":"BoolReference.BoolReference(BoolVariable)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.BoolReference","remarks":null,"summary":"\nCreates a new boolean reference to the variable value.\n","syntax":{"content":"public BoolReference(BoolVariable variable)","parameters":[{"description":"The variable to reference.","id":"variable","type":"Zigurous.Architecture.BoolVariable"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.BoolReference.#ctor(Zigurous.Architecture.BoolVariable)"},{"children":null,"id":"op_Implicit(Zigurous.Architecture.BoolReference)~System.Boolean","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Implicit(BoolReference to Boolean)","nameWithType":"BoolReference.Implicit(BoolReference to Boolean)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.BoolReference","remarks":null,"summary":"\nImplicitly converts the reference to a boolean.\n","syntax":{"content":"public static implicit operator bool (BoolReference reference)","parameters":[{"description":"The reference to convert.","id":"reference","type":"Zigurous.Architecture.BoolReference"}],"return":{"description":"The boolean value.","type":"System.Boolean"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.BoolReference.op_Implicit(Zigurous.Architecture.BoolReference)~System.Boolean"}]},{"items":[{"children":["Zigurous.Architecture.BoolVariable.value"],"id":"BoolVariable","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ScriptableVariable{System.Boolean}"],"inheritedMembers":null,"name":"BoolVariable","nameWithType":"BoolVariable","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA boolean variable saved as a ScriptableObject.\n","syntax":{"content":"public class BoolVariable : ScriptableVariable<bool>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.BoolVariable"},{"children":null,"id":"value","implements":null,"inheritance":null,"inheritedMembers":null,"name":"value","nameWithType":"BoolVariable.value","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.BoolVariable","remarks":null,"summary":"\nThe value of the variable.\n","syntax":{"content":"public override bool value { get; set; }","parameters":[],"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.BoolVariable.value"}]},{"items":[{"children":["Zigurous.Architecture.BoundsReference.#ctor","Zigurous.Architecture.BoundsReference.#ctor(Bounds)","Zigurous.Architecture.BoundsReference.#ctor(Zigurous.Architecture.BoundsVariable)","Zigurous.Architecture.BoundsReference.op_Implicit(Zigurous.Architecture.BoundsReference)~Bounds"],"id":"BoundsReference","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ValueReference{Bounds,Zigurous.Architecture.BoundsVariable}"],"inheritedMembers":["Zigurous.Architecture.ValueReference{Bounds,Zigurous.Architecture.BoundsVariable}.useConstant","Zigurous.Architecture.ValueReference{Bounds,Zigurous.Architecture.BoundsVariable}.constantValue","Zigurous.Architecture.ValueReference{Bounds,Zigurous.Architecture.BoundsVariable}.variable","Zigurous.Architecture.ValueReference{Bounds,Zigurous.Architecture.BoundsVariable}.value"],"name":"BoundsReference","nameWithType":"BoundsReference","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA reference to a Bounds value, either a constant or <xref href=\"Zigurous.Architecture.BoundsVariable\" data-throw-if-not-resolved=\"false\"></xref>.\n","syntax":{"content":"[Serializable]\npublic class BoundsReference : ValueReference<Bounds, BoundsVariable>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.BoundsReference"},{"children":null,"id":"#ctor","implements":null,"inheritance":null,"inheritedMembers":null,"name":"BoundsReference()","nameWithType":"BoundsReference.BoundsReference()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.BoundsReference","remarks":null,"summary":"\nCreates a new Bounds reference.\n","syntax":{"content":"public BoundsReference()","parameters":null,"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.BoundsReference.#ctor"},{"children":null,"id":"#ctor(Bounds)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"BoundsReference(Bounds)","nameWithType":"BoundsReference.BoundsReference(Bounds)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.BoundsReference","remarks":null,"summary":"\nCreates a new Bounds reference with the constant value.\n","syntax":{"content":"public BoundsReference(Bounds value)","parameters":[{"description":"The constant value to set.","id":"value","type":"Global.Bounds"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.BoundsReference.#ctor(Bounds)"},{"children":null,"id":"#ctor(Zigurous.Architecture.BoundsVariable)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"BoundsReference(BoundsVariable)","nameWithType":"BoundsReference.BoundsReference(BoundsVariable)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.BoundsReference","remarks":null,"summary":"\nCreates a new Bounds reference to the variable value.\n","syntax":{"content":"public BoundsReference(BoundsVariable variable)","parameters":[{"description":"The variable to reference.","id":"variable","type":"Zigurous.Architecture.BoundsVariable"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.BoundsReference.#ctor(Zigurous.Architecture.BoundsVariable)"},{"children":null,"id":"op_Implicit(Zigurous.Architecture.BoundsReference)~Bounds","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Implicit(BoundsReference to Bounds)","nameWithType":"BoundsReference.Implicit(BoundsReference to Bounds)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.BoundsReference","remarks":null,"summary":"\nImplicitly converts the reference to a Bounds.\n","syntax":{"content":"public static implicit operator Bounds(BoundsReference reference)","parameters":[{"description":"The reference to convert.","id":"reference","type":"Zigurous.Architecture.BoundsReference"}],"return":{"description":"The Bounds value.","type":"Global.Bounds"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.BoundsReference.op_Implicit(Zigurous.Architecture.BoundsReference)~Bounds"}]},{"items":[{"children":["Zigurous.Architecture.BoundsVariable.value"],"id":"BoundsVariable","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ScriptableVariable{Bounds}"],"inheritedMembers":null,"name":"BoundsVariable","nameWithType":"BoundsVariable","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA Bounds variable saved as a ScriptableObject.\n","syntax":{"content":"public class BoundsVariable : ScriptableVariable<Bounds>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.BoundsVariable"},{"children":null,"id":"value","implements":null,"inheritance":null,"inheritedMembers":null,"name":"value","nameWithType":"BoundsVariable.value","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.BoundsVariable","remarks":null,"summary":"\nThe value of the variable.\n","syntax":{"content":"public override Bounds value { get; set; }","parameters":[],"return":{"description":null,"type":"Global.Bounds"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.BoundsVariable.value"}]},{"items":[{"children":["Zigurous.Architecture.ClampedRange.#ctor(System.Single,System.Single,System.Single,System.Single)","Zigurous.Architecture.ClampedRange.clamp","Zigurous.Architecture.ClampedRange.Clamp(System.Single)","Zigurous.Architecture.ClampedRange.delta","Zigurous.Architecture.ClampedRange.Includes(System.Single)","Zigurous.Architecture.ClampedRange.Includes(System.Single,System.Boolean,System.Boolean)","Zigurous.Architecture.ClampedRange.InverseLerp(System.Single)","Zigurous.Architecture.ClampedRange.Lerp(System.Single)","Zigurous.Architecture.ClampedRange.max","Zigurous.Architecture.ClampedRange.median","Zigurous.Architecture.ClampedRange.min","Zigurous.Architecture.ClampedRange.Random"],"id":"ClampedRange","implements":["Zigurous.Architecture.INumberRange{System.Single}","Zigurous.Architecture.IRange{System.Single}"],"inheritance":null,"inheritedMembers":null,"name":"ClampedRange","nameWithType":"ClampedRange","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA range of values clamped between a lower and upper bound.\n","syntax":{"content":"[Serializable]\npublic struct ClampedRange : INumberRange<float>, IRange<float>","parameters":null,"return":null,"typeParameters":null},"type":"Struct","uid":"Zigurous.Architecture.ClampedRange"},{"children":null,"id":"clamp","implements":null,"inheritance":null,"inheritedMembers":null,"name":"clamp","nameWithType":"ClampedRange.clamp","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ClampedRange","remarks":null,"summary":"\nThe clamping values of the range.\n","syntax":{"content":"public FloatRange clamp","parameters":null,"return":{"description":null,"type":"Zigurous.Architecture.FloatRange"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.ClampedRange.clamp"},{"children":null,"id":"min","implements":["Zigurous.Architecture.IRange{System.Single}.min"],"inheritance":null,"inheritedMembers":null,"name":"min","nameWithType":"ClampedRange.min","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ClampedRange","remarks":null,"summary":"\nThe lower bound of the range.\n","syntax":{"content":"public float min { get; set; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.ClampedRange.min"},{"children":null,"id":"max","implements":["Zigurous.Architecture.IRange{System.Single}.max"],"inheritance":null,"inheritedMembers":null,"name":"max","nameWithType":"ClampedRange.max","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ClampedRange","remarks":null,"summary":"\nThe upper bound of the range.\n","syntax":{"content":"public float max { get; set; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.ClampedRange.max"},{"children":null,"id":"delta","implements":["Zigurous.Architecture.INumberRange{System.Single}.delta"],"inheritance":null,"inheritedMembers":null,"name":"delta","nameWithType":"ClampedRange.delta","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ClampedRange","remarks":null,"summary":"\nThe difference between the maximum and minimum values (Read only).\n","syntax":{"content":"public readonly float delta { get; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.ClampedRange.delta"},{"children":null,"id":"median","implements":["Zigurous.Architecture.INumberRange{System.Single}.median"],"inheritance":null,"inheritedMembers":null,"name":"median","nameWithType":"ClampedRange.median","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ClampedRange","remarks":null,"summary":"\nThe median value of the range (Read only).\n","syntax":{"content":"public readonly float median { get; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.ClampedRange.median"},{"children":null,"id":"#ctor(System.Single,System.Single,System.Single,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ClampedRange(Single, Single, Single, Single)","nameWithType":"ClampedRange.ClampedRange(Single, Single, Single, Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ClampedRange","remarks":null,"summary":"\nCreates a new range with the specified values.\n","syntax":{"content":"public ClampedRange(float min = 0F, float max = 1F, float clampLower = 0F, float clampUpper = 1F)","parameters":[{"description":"The lower bound of the range.","id":"min","type":"System.Single"},{"description":"The upper bound of the range.","id":"max","type":"System.Single"},{"description":"The lower clamping bound of the range.","id":"clampLower","type":"System.Single"},{"description":"The upper clamping bound of the range.","id":"clampUpper","type":"System.Single"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.ClampedRange.#ctor(System.Single,System.Single,System.Single,System.Single)"},{"children":null,"id":"Random","implements":["Zigurous.Architecture.INumberRange{System.Single}.Random"],"inheritance":null,"inheritedMembers":null,"name":"Random()","nameWithType":"ClampedRange.Random()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ClampedRange","remarks":null,"summary":"\nReturns a random value in the range.\n","syntax":{"content":"public float Random()","parameters":null,"return":{"description":"A random value in the range.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.ClampedRange.Random"},{"children":null,"id":"Includes(System.Single)","implements":["Zigurous.Architecture.IRange{System.Single}.Includes(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Single)","nameWithType":"ClampedRange.Includes(Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ClampedRange","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(float value)","parameters":[{"description":"The value to check.","id":"value","type":"System.Single"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.ClampedRange.Includes(System.Single)"},{"children":null,"id":"Includes(System.Single,System.Boolean,System.Boolean)","implements":["Zigurous.Architecture.IRange{System.Single}.Includes(System.Single,System.Boolean,System.Boolean)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Single, Boolean, Boolean)","nameWithType":"ClampedRange.Includes(Single, Boolean, Boolean)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ClampedRange","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(float value, bool includeMin, bool includeMax)","parameters":[{"description":"The value to check.","id":"value","type":"System.Single"},{"description":"The minimum value is inclusive if true, exclusive if false.","id":"includeMin","type":"System.Boolean"},{"description":"The maximum value is inclusive if true, exclusive if false.","id":"includeMax","type":"System.Boolean"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.ClampedRange.Includes(System.Single,System.Boolean,System.Boolean)"},{"children":null,"id":"Clamp(System.Single)","implements":["Zigurous.Architecture.INumberRange{System.Single}.Clamp(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"Clamp(Single)","nameWithType":"ClampedRange.Clamp(Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ClampedRange","remarks":null,"summary":"\nClamps a value to the range.\n","syntax":{"content":"public float Clamp(float value)","parameters":[{"description":"The value to clamp.","id":"value","type":"System.Single"}],"return":{"description":"The clamped value.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.ClampedRange.Clamp(System.Single)"},{"children":null,"id":"Lerp(System.Single)","implements":["Zigurous.Architecture.INumberRange{System.Single}.Lerp(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"Lerp(Single)","nameWithType":"ClampedRange.Lerp(Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ClampedRange","remarks":null,"summary":"\nLinearly interpolates between the range by <code data-dev-comment-type=\"paramref\" class=\"paramref\">t</code>.\n","syntax":{"content":"public float Lerp(float t)","parameters":[{"description":"The interpolant value between [0..1].","id":"t","type":"System.Single"}],"return":{"description":"The interpolated value.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.ClampedRange.Lerp(System.Single)"},{"children":null,"id":"InverseLerp(System.Single)","implements":["Zigurous.Architecture.INumberRange{System.Single}.InverseLerp(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"InverseLerp(Single)","nameWithType":"ClampedRange.InverseLerp(Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ClampedRange","remarks":null,"summary":"\nCalculates the linear parameter t that produces the interpolant\nvalue within the range.\n","syntax":{"content":"public float InverseLerp(float value)","parameters":[{"description":"The value within the range you want to calculate.","id":"value","type":"System.Single"}],"return":{"description":"The interpolant value between [0..1].","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.ClampedRange.InverseLerp(System.Single)"}]},{"items":[{"children":["Zigurous.Architecture.ColorRange.#ctor(Color,Color)","Zigurous.Architecture.ColorRange.black","Zigurous.Architecture.ColorRange.blackToWhite","Zigurous.Architecture.ColorRange.Clamp(Color)","Zigurous.Architecture.ColorRange.delta","Zigurous.Architecture.ColorRange.fadeIn","Zigurous.Architecture.ColorRange.fadeOut","Zigurous.Architecture.ColorRange.Includes(Color)","Zigurous.Architecture.ColorRange.Includes(Color,System.Boolean,System.Boolean)","Zigurous.Architecture.ColorRange.InverseLerp(Color)","Zigurous.Architecture.ColorRange.Lerp(System.Single)","Zigurous.Architecture.ColorRange.max","Zigurous.Architecture.ColorRange.median","Zigurous.Architecture.ColorRange.min","Zigurous.Architecture.ColorRange.Random","Zigurous.Architecture.ColorRange.transparent","Zigurous.Architecture.ColorRange.white","Zigurous.Architecture.ColorRange.whiteToBlack"],"id":"ColorRange","implements":["Zigurous.Architecture.INumberRange{Color}","Zigurous.Architecture.IRange{Color}"],"inheritance":null,"inheritedMembers":null,"name":"ColorRange","nameWithType":"ColorRange","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA range of Color values.\n","syntax":{"content":"[Serializable]\npublic struct ColorRange : INumberRange<Color>, IRange<Color>","parameters":null,"return":null,"typeParameters":null},"type":"Struct","uid":"Zigurous.Architecture.ColorRange"},{"children":null,"id":"black","implements":null,"inheritance":null,"inheritedMembers":null,"name":"black","nameWithType":"ColorRange.black","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ColorRange","remarks":null,"summary":"\nShorthand for writing <code>ColorRange(Color.black, Color.black)</code>.\n","syntax":{"content":"public static readonly ColorRange black { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.ColorRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.ColorRange.black"},{"children":null,"id":"white","implements":null,"inheritance":null,"inheritedMembers":null,"name":"white","nameWithType":"ColorRange.white","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ColorRange","remarks":null,"summary":"\nShorthand for writing <code>ColorRange(Color.white, Color.white)</code>.\n","syntax":{"content":"public static readonly ColorRange white { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.ColorRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.ColorRange.white"},{"children":null,"id":"blackToWhite","implements":null,"inheritance":null,"inheritedMembers":null,"name":"blackToWhite","nameWithType":"ColorRange.blackToWhite","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ColorRange","remarks":null,"summary":"\nShorthand for writing <code>ColorRange(Color.black, Color.white)</code>.\n","syntax":{"content":"public static readonly ColorRange blackToWhite { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.ColorRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.ColorRange.blackToWhite"},{"children":null,"id":"whiteToBlack","implements":null,"inheritance":null,"inheritedMembers":null,"name":"whiteToBlack","nameWithType":"ColorRange.whiteToBlack","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ColorRange","remarks":null,"summary":"\nShorthand for writing <code>ColorRange(Color.white, Color.black)</code>.\n","syntax":{"content":"public static readonly ColorRange whiteToBlack { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.ColorRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.ColorRange.whiteToBlack"},{"children":null,"id":"fadeIn","implements":null,"inheritance":null,"inheritedMembers":null,"name":"fadeIn","nameWithType":"ColorRange.fadeIn","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ColorRange","remarks":null,"summary":"\nShorthand for writing <code>ColorRange(Color(0,0,0,0), Color(0,0,0,1))</code>.\n","syntax":{"content":"public static readonly ColorRange fadeIn { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.ColorRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.ColorRange.fadeIn"},{"children":null,"id":"fadeOut","implements":null,"inheritance":null,"inheritedMembers":null,"name":"fadeOut","nameWithType":"ColorRange.fadeOut","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ColorRange","remarks":null,"summary":"\nShorthand for writing <code>ColorRange(Color(0,0,0,1), Color(0,0,0,0))</code>.\n","syntax":{"content":"public static readonly ColorRange fadeOut { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.ColorRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.ColorRange.fadeOut"},{"children":null,"id":"transparent","implements":null,"inheritance":null,"inheritedMembers":null,"name":"transparent","nameWithType":"ColorRange.transparent","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ColorRange","remarks":null,"summary":"\nShorthand for writing <code>ColorRange(Color(0,0,0,0), Color(0,0,0,0))</code>.\n","syntax":{"content":"public static readonly ColorRange transparent { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.ColorRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.ColorRange.transparent"},{"children":null,"id":"min","implements":["Zigurous.Architecture.IRange{Color}.min"],"inheritance":null,"inheritedMembers":null,"name":"min","nameWithType":"ColorRange.min","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ColorRange","remarks":null,"summary":"\nThe lower bound of the range.\n","syntax":{"content":"public Color min { get; set; }","parameters":[],"return":{"description":null,"type":"Global.Color"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.ColorRange.min"},{"children":null,"id":"max","implements":["Zigurous.Architecture.IRange{Color}.max"],"inheritance":null,"inheritedMembers":null,"name":"max","nameWithType":"ColorRange.max","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ColorRange","remarks":null,"summary":"\nThe upper bound of the range.\n","syntax":{"content":"public Color max { get; set; }","parameters":[],"return":{"description":null,"type":"Global.Color"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.ColorRange.max"},{"children":null,"id":"delta","implements":["Zigurous.Architecture.INumberRange{Color}.delta"],"inheritance":null,"inheritedMembers":null,"name":"delta","nameWithType":"ColorRange.delta","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ColorRange","remarks":null,"summary":"\nThe difference between the maximum and minimum values (Read only).\n","syntax":{"content":"public readonly Color delta { get; }","parameters":[],"return":{"description":null,"type":"Global.Color"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.ColorRange.delta"},{"children":null,"id":"median","implements":["Zigurous.Architecture.INumberRange{Color}.median"],"inheritance":null,"inheritedMembers":null,"name":"median","nameWithType":"ColorRange.median","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ColorRange","remarks":null,"summary":"\nThe median value of the range (Read only).\n","syntax":{"content":"public readonly Color median { get; }","parameters":[],"return":{"description":null,"type":"Global.Color"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.ColorRange.median"},{"children":null,"id":"#ctor(Color,Color)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ColorRange(Color, Color)","nameWithType":"ColorRange.ColorRange(Color, Color)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ColorRange","remarks":null,"summary":"\nCreates a new range with the specified values.\n","syntax":{"content":"public ColorRange(Color min, Color max)","parameters":[{"description":"The lower bound of the range.","id":"min","type":"Global.Color"},{"description":"The upper bound of the range.","id":"max","type":"Global.Color"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.ColorRange.#ctor(Color,Color)"},{"children":null,"id":"Random","implements":["Zigurous.Architecture.INumberRange{Color}.Random"],"inheritance":null,"inheritedMembers":null,"name":"Random()","nameWithType":"ColorRange.Random()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ColorRange","remarks":null,"summary":"\nReturns a random value in the range.\n","syntax":{"content":"public Color Random()","parameters":null,"return":{"description":"A random value in the range.","type":"Global.Color"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.ColorRange.Random"},{"children":null,"id":"Includes(Color)","implements":["Zigurous.Architecture.IRange{Color}.Includes(Color)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Color)","nameWithType":"ColorRange.Includes(Color)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ColorRange","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(Color value)","parameters":[{"description":"The value to check.","id":"value","type":"Global.Color"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.ColorRange.Includes(Color)"},{"children":null,"id":"Includes(Color,System.Boolean,System.Boolean)","implements":["Zigurous.Architecture.IRange{Color}.Includes(Color,System.Boolean,System.Boolean)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Color, Boolean, Boolean)","nameWithType":"ColorRange.Includes(Color, Boolean, Boolean)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ColorRange","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(Color value, bool includeMin, bool includeMax)","parameters":[{"description":"The value to check.","id":"value","type":"Global.Color"},{"description":"The minimum value is inclusive if true, exclusive if false.","id":"includeMin","type":"System.Boolean"},{"description":"The maximum value is inclusive if true, exclusive if false.","id":"includeMax","type":"System.Boolean"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.ColorRange.Includes(Color,System.Boolean,System.Boolean)"},{"children":null,"id":"Clamp(Color)","implements":["Zigurous.Architecture.INumberRange{Color}.Clamp(Color)"],"inheritance":null,"inheritedMembers":null,"name":"Clamp(Color)","nameWithType":"ColorRange.Clamp(Color)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ColorRange","remarks":null,"summary":"\nClamps a value to the range.\n","syntax":{"content":"public Color Clamp(Color value)","parameters":[{"description":"The value to clamp.","id":"value","type":"Global.Color"}],"return":{"description":"The clamped value.","type":"Global.Color"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.ColorRange.Clamp(Color)"},{"children":null,"id":"Lerp(System.Single)","implements":["Zigurous.Architecture.INumberRange{Color}.Lerp(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"Lerp(Single)","nameWithType":"ColorRange.Lerp(Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ColorRange","remarks":null,"summary":"\nLinearly interpolates between the range by <code data-dev-comment-type=\"paramref\" class=\"paramref\">t</code>.\n","syntax":{"content":"public Color Lerp(float t)","parameters":[{"description":"The interpolant value between [0..1].","id":"t","type":"System.Single"}],"return":{"description":"The interpolated value.","type":"Global.Color"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.ColorRange.Lerp(System.Single)"},{"children":null,"id":"InverseLerp(Color)","implements":["Zigurous.Architecture.INumberRange{Color}.InverseLerp(Color)"],"inheritance":null,"inheritedMembers":null,"name":"InverseLerp(Color)","nameWithType":"ColorRange.InverseLerp(Color)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ColorRange","remarks":null,"summary":"\nCalculates the linear parameter t that produces the interpolant\nvalue within the range.\n","syntax":{"content":"public float InverseLerp(Color value)","parameters":[{"description":"The value within the range you want to calculate.","id":"value","type":"Global.Color"}],"return":{"description":"The interpolant value between [0..1].","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.ColorRange.InverseLerp(Color)"}]},{"items":[{"children":["Zigurous.Architecture.ComparableExtensions.IsBetween``1(``0,``0,``0,System.Boolean,System.Boolean)"],"id":"ComparableExtensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"ComparableExtensions","nameWithType":"ComparableExtensions","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nExtension methods for IComparable.\n","syntax":{"content":"public static class ComparableExtensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.ComparableExtensions"},{"children":null,"id":"IsBetween``1(``0,``0,``0,System.Boolean,System.Boolean)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsBetween<T>(T, T, T, Boolean, Boolean)","nameWithType":"ComparableExtensions.IsBetween<T>(T, T, T, Boolean, Boolean)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ComparableExtensions","remarks":null,"summary":"\nChecks if the value is between a min and max.\n","syntax":{"content":"public static bool IsBetween<T>(this T value, T min, T max, bool includeMin, bool includeMax)\n    where T : IComparable<T>","parameters":[{"description":"The value to check.","id":"value","type":"{T}"},{"description":"The minimum value.","id":"min","type":"{T}"},{"description":"The maximum value.","id":"max","type":"{T}"},{"description":"The minimum value is inclusive if true, exclusive if false.","id":"includeMin","type":"System.Boolean"},{"description":"The maximum value is inclusive if true, exclusive if false.","id":"includeMax","type":"System.Boolean"}],"return":{"description":"True if the value is between the min and max.","type":"System.Boolean"},"typeParameters":[{"description":"The type of value to check.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ComparableExtensions.IsBetween``1(``0,``0,``0,System.Boolean,System.Boolean)"}]},{"items":[{"children":["Zigurous.Architecture.ConditionalAttribute.PropertyDrawer.Default","Zigurous.Architecture.ConditionalAttribute.PropertyDrawer.Slider"],"id":"ConditionalAttribute.PropertyDrawer","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ConditionalAttribute.PropertyDrawer","nameWithType":"ConditionalAttribute.PropertyDrawer","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA type of property drawer used to draw the field.\n","syntax":{"content":"public enum PropertyDrawer","parameters":null,"return":null,"typeParameters":null},"type":"Enum","uid":"Zigurous.Architecture.ConditionalAttribute.PropertyDrawer"},{"children":null,"id":"Default","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Default","nameWithType":"ConditionalAttribute.PropertyDrawer.Default","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ConditionalAttribute.PropertyDrawer","remarks":null,"summary":"\nDraws the field as a normal property based on its type.\n","syntax":{"content":"Default = 0","parameters":null,"return":{"description":null,"type":"Zigurous.Architecture.ConditionalAttribute.PropertyDrawer"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.ConditionalAttribute.PropertyDrawer.Default"},{"children":null,"id":"Slider","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Slider","nameWithType":"ConditionalAttribute.PropertyDrawer.Slider","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ConditionalAttribute.PropertyDrawer","remarks":null,"summary":"\nDraws the field with a slider.\n","syntax":{"content":"Slider = 1","parameters":null,"return":{"description":null,"type":"Zigurous.Architecture.ConditionalAttribute.PropertyDrawer"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.ConditionalAttribute.PropertyDrawer.Slider"}]},{"items":[{"children":["Zigurous.Architecture.ConditionalAttribute.conditionalField","Zigurous.Architecture.ConditionalAttribute.enumFlags","Zigurous.Architecture.ConditionalAttribute.enumValue","Zigurous.Architecture.ConditionalAttribute.propertyDrawer","Zigurous.Architecture.ConditionalAttribute.show","Zigurous.Architecture.ConditionalAttribute.sliderMaxValue","Zigurous.Architecture.ConditionalAttribute.sliderMinValue"],"id":"ConditionalAttribute","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"ConditionalAttribute","nameWithType":"ConditionalAttribute","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nAn attribute that shows or hides a field in the editor based on a condition.\n","syntax":{"content":"[AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = true)]\npublic abstract class ConditionalAttribute : PropertyAttribute","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.ConditionalAttribute"},{"children":null,"id":"propertyDrawer","implements":null,"inheritance":null,"inheritedMembers":null,"name":"propertyDrawer","nameWithType":"ConditionalAttribute.propertyDrawer","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ConditionalAttribute","remarks":null,"summary":"\nThe type of property drawer to use to draw the field.\n","syntax":{"content":"public ConditionalAttribute.PropertyDrawer propertyDrawer","parameters":null,"return":{"description":null,"type":"Zigurous.Architecture.ConditionalAttribute.PropertyDrawer"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.ConditionalAttribute.propertyDrawer"},{"children":null,"id":"conditionalField","implements":null,"inheritance":null,"inheritedMembers":null,"name":"conditionalField","nameWithType":"ConditionalAttribute.conditionalField","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ConditionalAttribute","remarks":null,"summary":"\nThe field being used to determine if the condition is met.\n","syntax":{"content":"public string conditionalField","parameters":null,"return":{"description":null,"type":"System.String"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.ConditionalAttribute.conditionalField"},{"children":null,"id":"show","implements":null,"inheritance":null,"inheritedMembers":null,"name":"show","nameWithType":"ConditionalAttribute.show","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ConditionalAttribute","remarks":null,"summary":"\nWhether to show or hide the field when the condition is met.\n","syntax":{"content":"public bool show","parameters":null,"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.ConditionalAttribute.show"},{"children":null,"id":"enumValue","implements":null,"inheritance":null,"inheritedMembers":null,"name":"enumValue","nameWithType":"ConditionalAttribute.enumValue","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ConditionalAttribute","remarks":null,"summary":"\nThe enum value to use to determine if the condition is met (only\napplicable if the conditional field is an enum).\n","syntax":{"content":"public int enumValue","parameters":null,"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.ConditionalAttribute.enumValue"},{"children":null,"id":"enumFlags","implements":null,"inheritance":null,"inheritedMembers":null,"name":"enumFlags","nameWithType":"ConditionalAttribute.enumFlags","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ConditionalAttribute","remarks":null,"summary":"\nWhether the enum should be treated as a bit field (only applicable\nif the conditional field is an enum).\n","syntax":{"content":"public bool enumFlags","parameters":null,"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.ConditionalAttribute.enumFlags"},{"children":null,"id":"sliderMinValue","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sliderMinValue","nameWithType":"ConditionalAttribute.sliderMinValue","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ConditionalAttribute","remarks":null,"summary":"\nThe minimum value of the slider (only applicable for Slider property\ndrawers).\n","syntax":{"content":"public float sliderMinValue","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.ConditionalAttribute.sliderMinValue"},{"children":null,"id":"sliderMaxValue","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sliderMaxValue","nameWithType":"ConditionalAttribute.sliderMaxValue","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ConditionalAttribute","remarks":null,"summary":"\nThe maximum value of the slider (only applicable for Slider property\ndrawers).\n","syntax":{"content":"public float sliderMaxValue","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.ConditionalAttribute.sliderMaxValue"}]},{"items":[{"children":["Zigurous.Architecture.ConditionalHideAttribute.#ctor(System.String)","Zigurous.Architecture.ConditionalHideAttribute.#ctor(System.String,System.Int32,System.Boolean)","Zigurous.Architecture.ConditionalHideAttribute.#ctor(System.String,System.Single,System.Single)"],"id":"ConditionalHideAttribute","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ConditionalAttribute"],"inheritedMembers":["Zigurous.Architecture.ConditionalAttribute.propertyDrawer","Zigurous.Architecture.ConditionalAttribute.conditionalField","Zigurous.Architecture.ConditionalAttribute.show","Zigurous.Architecture.ConditionalAttribute.enumValue","Zigurous.Architecture.ConditionalAttribute.enumFlags","Zigurous.Architecture.ConditionalAttribute.sliderMinValue","Zigurous.Architecture.ConditionalAttribute.sliderMaxValue"],"name":"ConditionalHideAttribute","nameWithType":"ConditionalHideAttribute","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nAn attribute that hides a field in the editor based on the state of\nanother field.\n","syntax":{"content":"[AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = true)]\npublic sealed class ConditionalHideAttribute : ConditionalAttribute","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.ConditionalHideAttribute"},{"children":null,"id":"#ctor(System.String)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ConditionalHideAttribute(String)","nameWithType":"ConditionalHideAttribute.ConditionalHideAttribute(String)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ConditionalHideAttribute","remarks":null,"summary":"\nHides the field when the conditional field is true.\n","syntax":{"content":"public ConditionalHideAttribute(string conditionalField)","parameters":[{"description":"The name of the conditional field.","id":"conditionalField","type":"System.String"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.ConditionalHideAttribute.#ctor(System.String)"},{"children":null,"id":"#ctor(System.String,System.Int32,System.Boolean)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ConditionalHideAttribute(String, Int32, Boolean)","nameWithType":"ConditionalHideAttribute.ConditionalHideAttribute(String, Int32, Boolean)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ConditionalHideAttribute","remarks":null,"summary":"\nHides the field when the conditional field is set to the specified\nenum value (this assumes the conditional field is an enum).\n","syntax":{"content":"public ConditionalHideAttribute(string conditionalField, int enumValue, bool flags = false)","parameters":[{"description":"The name of the conditional field.","id":"conditionalField","type":"System.String"},{"description":"The enum value to check for.","id":"enumValue","type":"System.Int32"},{"description":"Treats the enum as a bit field.","id":"flags","type":"System.Boolean"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.ConditionalHideAttribute.#ctor(System.String,System.Int32,System.Boolean)"},{"children":null,"id":"#ctor(System.String,System.Single,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ConditionalHideAttribute(String, Single, Single)","nameWithType":"ConditionalHideAttribute.ConditionalHideAttribute(String, Single, Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ConditionalHideAttribute","remarks":null,"summary":"\nHides the field when the conditional field is true.\nDraws the field as a slider.\n","syntax":{"content":"public ConditionalHideAttribute(string conditionalField, float sliderMinValue, float sliderMaxValue)","parameters":[{"description":"The name of the conditional field.","id":"conditionalField","type":"System.String"},{"description":"The minimum value of the slider.","id":"sliderMinValue","type":"System.Single"},{"description":"The maximum value of the slider.","id":"sliderMaxValue","type":"System.Single"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.ConditionalHideAttribute.#ctor(System.String,System.Single,System.Single)"}]},{"items":[{"children":["Zigurous.Architecture.ConditionalShowAttribute.#ctor(System.String)","Zigurous.Architecture.ConditionalShowAttribute.#ctor(System.String,System.Int32,System.Boolean)","Zigurous.Architecture.ConditionalShowAttribute.#ctor(System.String,System.Single,System.Single)"],"id":"ConditionalShowAttribute","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ConditionalAttribute"],"inheritedMembers":["Zigurous.Architecture.ConditionalAttribute.propertyDrawer","Zigurous.Architecture.ConditionalAttribute.conditionalField","Zigurous.Architecture.ConditionalAttribute.show","Zigurous.Architecture.ConditionalAttribute.enumValue","Zigurous.Architecture.ConditionalAttribute.enumFlags","Zigurous.Architecture.ConditionalAttribute.sliderMinValue","Zigurous.Architecture.ConditionalAttribute.sliderMaxValue"],"name":"ConditionalShowAttribute","nameWithType":"ConditionalShowAttribute","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nAn attribute that shows a field in the editor based on the state of\nanother field.\n","syntax":{"content":"[AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = true)]\npublic sealed class ConditionalShowAttribute : ConditionalAttribute","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.ConditionalShowAttribute"},{"children":null,"id":"#ctor(System.String)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ConditionalShowAttribute(String)","nameWithType":"ConditionalShowAttribute.ConditionalShowAttribute(String)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ConditionalShowAttribute","remarks":null,"summary":"\nHides the field when the conditional field is true.\n","syntax":{"content":"public ConditionalShowAttribute(string conditionalField)","parameters":[{"description":"The name of the conditional field.","id":"conditionalField","type":"System.String"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.ConditionalShowAttribute.#ctor(System.String)"},{"children":null,"id":"#ctor(System.String,System.Int32,System.Boolean)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ConditionalShowAttribute(String, Int32, Boolean)","nameWithType":"ConditionalShowAttribute.ConditionalShowAttribute(String, Int32, Boolean)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ConditionalShowAttribute","remarks":null,"summary":"\nHides the field when the conditional field is set to the specified\nenum value (this assumes the conditional field is an enum).\n","syntax":{"content":"public ConditionalShowAttribute(string conditionalField, int enumValue, bool flags = false)","parameters":[{"description":"The name of the conditional field.","id":"conditionalField","type":"System.String"},{"description":"The enum value to check for.","id":"enumValue","type":"System.Int32"},{"description":"Treats the enum as a bit field.","id":"flags","type":"System.Boolean"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.ConditionalShowAttribute.#ctor(System.String,System.Int32,System.Boolean)"},{"children":null,"id":"#ctor(System.String,System.Single,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ConditionalShowAttribute(String, Single, Single)","nameWithType":"ConditionalShowAttribute.ConditionalShowAttribute(String, Single, Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ConditionalShowAttribute","remarks":null,"summary":"\nHides the field when the conditional field is true.\nDraws the field as a slider.\n","syntax":{"content":"public ConditionalShowAttribute(string conditionalField, float sliderMinValue, float sliderMaxValue)","parameters":[{"description":"The name of the conditional field.","id":"conditionalField","type":"System.String"},{"description":"The minimum value of the slider.","id":"sliderMinValue","type":"System.Single"},{"description":"The maximum value of the slider.","id":"sliderMaxValue","type":"System.Single"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.ConditionalShowAttribute.#ctor(System.String,System.Single,System.Single)"}]},{"items":[{"children":["Zigurous.Architecture.CursorLockState.lockStateOnDisable","Zigurous.Architecture.CursorLockState.lockStateOnEnable"],"id":"CursorLockState","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"CursorLockState","nameWithType":"CursorLockState","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nSets the lock state of the cursor when the behaviour is enabled and disabled.\n","syntax":{"content":"public sealed class CursorLockState : MonoBehaviour","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.CursorLockState"},{"children":null,"id":"lockStateOnEnable","implements":null,"inheritance":null,"inheritedMembers":null,"name":"lockStateOnEnable","nameWithType":"CursorLockState.lockStateOnEnable","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.CursorLockState","remarks":null,"summary":"\nThe visibility of the cursor when the script is enabled.\n","syntax":{"content":"public CursorLockMode lockStateOnEnable { get; set; }","parameters":[],"return":{"description":null,"type":"Global.CursorLockMode"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.CursorLockState.lockStateOnEnable"},{"children":null,"id":"lockStateOnDisable","implements":null,"inheritance":null,"inheritedMembers":null,"name":"lockStateOnDisable","nameWithType":"CursorLockState.lockStateOnDisable","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.CursorLockState","remarks":null,"summary":"\nThe visibility of the cursor when the script is disabled.\n","syntax":{"content":"public CursorLockMode lockStateOnDisable { get; set; }","parameters":[],"return":{"description":null,"type":"Global.CursorLockMode"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.CursorLockState.lockStateOnDisable"}]},{"items":[{"children":["Zigurous.Architecture.CursorVisibility.visibleOnDisable","Zigurous.Architecture.CursorVisibility.visibleOnEnable"],"id":"CursorVisibility","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"CursorVisibility","nameWithType":"CursorVisibility","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nSets the visibility of the cursor when the behaviour is enabled and disabled.\n","syntax":{"content":"public sealed class CursorVisibility : MonoBehaviour","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.CursorVisibility"},{"children":null,"id":"visibleOnEnable","implements":null,"inheritance":null,"inheritedMembers":null,"name":"visibleOnEnable","nameWithType":"CursorVisibility.visibleOnEnable","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.CursorVisibility","remarks":null,"summary":"\nThe visibility of the cursor when the script is enabled.\n","syntax":{"content":"public bool visibleOnEnable { get; set; }","parameters":[],"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.CursorVisibility.visibleOnEnable"},{"children":null,"id":"visibleOnDisable","implements":null,"inheritance":null,"inheritedMembers":null,"name":"visibleOnDisable","nameWithType":"CursorVisibility.visibleOnDisable","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.CursorVisibility","remarks":null,"summary":"\nThe visibility of the cursor when the script is disabled.\n","syntax":{"content":"public bool visibleOnDisable { get; set; }","parameters":[],"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.CursorVisibility.visibleOnDisable"}]},{"items":[{"children":["Zigurous.Architecture.DictionaryExtensions.Where``2(Dictionary{``0,``1},System.Predicate{KeyValuePair{``0,``1}})","Zigurous.Architecture.DictionaryExtensions.Where``2(Dictionary{``0,``1}.KeyCollection,System.Predicate{``0})","Zigurous.Architecture.DictionaryExtensions.Where``2(Dictionary{``0,``1}.ValueCollection,System.Predicate{``1})"],"id":"DictionaryExtensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"DictionaryExtensions","nameWithType":"DictionaryExtensions","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nExtension methods for dictionaries.\n","syntax":{"content":"public static class DictionaryExtensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.DictionaryExtensions"},{"children":null,"id":"Where``2(Dictionary{``0,``1},System.Predicate{KeyValuePair{``0,``1}})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Where<TKey, TValue>(Dictionary<TKey, TValue>, Predicate<KeyValuePair<TKey, TValue>>)","nameWithType":"DictionaryExtensions.Where<TKey, TValue>(Dictionary<TKey, TValue>, Predicate<KeyValuePair<TKey, TValue>>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.DictionaryExtensions","remarks":null,"summary":"\nFilters the dictionary by a predicate.\n","syntax":{"content":"public static Dictionary<TKey, TValue> Where<TKey, TValue>(this Dictionary<TKey, TValue> dictionary, Predicate<KeyValuePair<TKey, TValue>> predicate)","parameters":[{"description":"The dictionary to filter.","id":"dictionary","type":"Global.Dictionary{{TKey},{TValue}}"},{"description":"The predicate to use.","id":"predicate","type":"System.Predicate{KeyValuePair{{TKey},{TValue}}}"}],"return":{"description":"A new dictionary with the filtered key-value pairs removed.","type":"Global.Dictionary{{TKey},{TValue}}"},"typeParameters":[{"description":"The type of the keys in the dictionary.","id":"TKey"},{"description":"The type of the values in the dictionary.","id":"TValue"}]},"type":"Method","uid":"Zigurous.Architecture.DictionaryExtensions.Where``2(Dictionary{``0,``1},System.Predicate{KeyValuePair{``0,``1}})"},{"children":null,"id":"Where``2(Dictionary{``0,``1}.KeyCollection,System.Predicate{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Where<TKey, TValue>(Dictionary<TKey, TValue>.KeyCollection, Predicate<TKey>)","nameWithType":"DictionaryExtensions.Where<TKey, TValue>(Dictionary<TKey, TValue>.KeyCollection, Predicate<TKey>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.DictionaryExtensions","remarks":null,"summary":"\nFilters the dictionary keys by a predicate.\n","syntax":{"content":"public static List<TKey> Where<TKey, TValue>(this Dictionary<TKey, TValue>.KeyCollection keys, Predicate<TKey> predicate)","parameters":[{"description":"The keys to filter.","id":"keys","type":"Global.Dictionary{{TKey},{TValue}}.KeyCollection"},{"description":"The predicate to use.","id":"predicate","type":"System.Predicate{{TKey}}"}],"return":{"description":"A new list with the filtered keys removed.","type":"Global.List{{TKey}}"},"typeParameters":[{"description":"The type of the keys in the dictionary.","id":"TKey"},{"description":"The type of the values in the dictionary.","id":"TValue"}]},"type":"Method","uid":"Zigurous.Architecture.DictionaryExtensions.Where``2(Dictionary{``0,``1}.KeyCollection,System.Predicate{``0})"},{"children":null,"id":"Where``2(Dictionary{``0,``1}.ValueCollection,System.Predicate{``1})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Where<TKey, TValue>(Dictionary<TKey, TValue>.ValueCollection, Predicate<TValue>)","nameWithType":"DictionaryExtensions.Where<TKey, TValue>(Dictionary<TKey, TValue>.ValueCollection, Predicate<TValue>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.DictionaryExtensions","remarks":null,"summary":"\nFilters the dictionary values by a predicate.\n","syntax":{"content":"public static List<TValue> Where<TKey, TValue>(this Dictionary<TKey, TValue>.ValueCollection values, Predicate<TValue> predicate)","parameters":[{"description":"The values to filter.","id":"values","type":"Global.Dictionary{{TKey},{TValue}}.ValueCollection"},{"description":"The predicate to use.","id":"predicate","type":"System.Predicate{{TValue}}"}],"return":{"description":"A new list with the filtered values removed.","type":"Global.List{{TValue}}"},"typeParameters":[{"description":"The type of the keys in the dictionary.","id":"TKey"},{"description":"The type of the values in the dictionary.","id":"TValue"}]},"type":"Method","uid":"Zigurous.Architecture.DictionaryExtensions.Where``2(Dictionary{``0,``1}.ValueCollection,System.Predicate{``1})"}]},{"items":[{"children":["Zigurous.Architecture.DoubleAccumulator.Add(System.Double)","Zigurous.Architecture.DoubleAccumulator.Subtract(System.Double)"],"id":"DoubleAccumulator","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ValueAccumulator{System.Double}"],"inheritedMembers":["Zigurous.Architecture.ValueAccumulator{System.Double}.values","Zigurous.Architecture.ValueAccumulator{System.Double}.total","Zigurous.Architecture.ValueAccumulator{System.Double}.count","Zigurous.Architecture.ValueAccumulator{System.Double}.defaultValue","Zigurous.Architecture.ValueAccumulator{System.Double}.GetValue(System.Int32)","Zigurous.Architecture.ValueAccumulator{System.Double}.SetValue(System.Int32,System.Double)","Zigurous.Architecture.ValueAccumulator{System.Double}.RemoveValue(System.Int32)","Zigurous.Architecture.ValueAccumulator{System.Double}.Clear"],"name":"DoubleAccumulator","nameWithType":"DoubleAccumulator","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nAccumulates double values into a single total value.\n","syntax":{"content":"public sealed class DoubleAccumulator : ValueAccumulator<double>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.DoubleAccumulator"},{"children":null,"id":"Add(System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Add(Double)","nameWithType":"DoubleAccumulator.Add(Double)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.DoubleAccumulator","remarks":null,"summary":"\nIncreases the accumulated total by a given value.\n","syntax":{"content":"protected override double Add(double value)","parameters":[{"description":"The value to add to the total.","id":"value","type":"System.Double"}],"return":{"description":"The new total value.","type":"System.Double"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.DoubleAccumulator.Add(System.Double)"},{"children":null,"id":"Subtract(System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Subtract(Double)","nameWithType":"DoubleAccumulator.Subtract(Double)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.DoubleAccumulator","remarks":null,"summary":"\nDecreases the accumulated total by a given value.\n","syntax":{"content":"protected override double Subtract(double value)","parameters":[{"description":"The value to subtract from the total.","id":"value","type":"System.Double"}],"return":{"description":"The new total value.","type":"System.Double"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.DoubleAccumulator.Subtract(System.Double)"}]},{"items":[{"children":["Zigurous.Architecture.DoubleRange.#ctor(System.Double,System.Double)","Zigurous.Architecture.DoubleRange.Clamp(System.Double)","Zigurous.Architecture.DoubleRange.delta","Zigurous.Architecture.DoubleRange.Includes(System.Double)","Zigurous.Architecture.DoubleRange.Includes(System.Double,System.Boolean,System.Boolean)","Zigurous.Architecture.DoubleRange.InverseLerp(System.Double)","Zigurous.Architecture.DoubleRange.Lerp(System.Double)","Zigurous.Architecture.DoubleRange.max","Zigurous.Architecture.DoubleRange.median","Zigurous.Architecture.DoubleRange.min","Zigurous.Architecture.DoubleRange.minMax","Zigurous.Architecture.DoubleRange.negative","Zigurous.Architecture.DoubleRange.one","Zigurous.Architecture.DoubleRange.percent","Zigurous.Architecture.DoubleRange.positive","Zigurous.Architecture.DoubleRange.zero"],"id":"DoubleRange","implements":null,"inheritance":null,"inheritedMembers":null,"name":"DoubleRange","nameWithType":"DoubleRange","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA range of double values.\n","syntax":{"content":"[Serializable]\npublic struct DoubleRange","parameters":null,"return":null,"typeParameters":null},"type":"Struct","uid":"Zigurous.Architecture.DoubleRange"},{"children":null,"id":"zero","implements":null,"inheritance":null,"inheritedMembers":null,"name":"zero","nameWithType":"DoubleRange.zero","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.DoubleRange","remarks":null,"summary":"\nShorthand for writing <code>DoubleRange(0.0, 0.0)</code>.\n","syntax":{"content":"public static readonly DoubleRange zero { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.DoubleRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.DoubleRange.zero"},{"children":null,"id":"one","implements":null,"inheritance":null,"inheritedMembers":null,"name":"one","nameWithType":"DoubleRange.one","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.DoubleRange","remarks":null,"summary":"\nShorthand for writing <code>DoubleRange(1.0, 1.0)</code>.\n","syntax":{"content":"public static readonly DoubleRange one { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.DoubleRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.DoubleRange.one"},{"children":null,"id":"percent","implements":null,"inheritance":null,"inheritedMembers":null,"name":"percent","nameWithType":"DoubleRange.percent","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.DoubleRange","remarks":null,"summary":"\nShorthand for writing <code>DoubleRange(0.0, 1.0)</code>.\n","syntax":{"content":"public static readonly DoubleRange percent { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.DoubleRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.DoubleRange.percent"},{"children":null,"id":"positive","implements":null,"inheritance":null,"inheritedMembers":null,"name":"positive","nameWithType":"DoubleRange.positive","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.DoubleRange","remarks":null,"summary":"\nShorthand for writing <code>DoubleRange(0.0, double.MaxValue)</code>.\n","syntax":{"content":"public static readonly DoubleRange positive { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.DoubleRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.DoubleRange.positive"},{"children":null,"id":"negative","implements":null,"inheritance":null,"inheritedMembers":null,"name":"negative","nameWithType":"DoubleRange.negative","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.DoubleRange","remarks":null,"summary":"\nShorthand for writing <code>DoubleRange(double.MinValue, 0.0)</code>.\n","syntax":{"content":"public static readonly DoubleRange negative { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.DoubleRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.DoubleRange.negative"},{"children":null,"id":"minMax","implements":null,"inheritance":null,"inheritedMembers":null,"name":"minMax","nameWithType":"DoubleRange.minMax","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.DoubleRange","remarks":null,"summary":"\nShorthand for writing <code>DoubleRange(double.MinValue, double.MaxValue)</code>.\n","syntax":{"content":"public static readonly DoubleRange minMax { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.DoubleRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.DoubleRange.minMax"},{"children":null,"id":"min","implements":null,"inheritance":null,"inheritedMembers":null,"name":"min","nameWithType":"DoubleRange.min","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.DoubleRange","remarks":null,"summary":"\nThe lower bound of the range.\n","syntax":{"content":"public double min { get; set; }","parameters":[],"return":{"description":null,"type":"System.Double"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.DoubleRange.min"},{"children":null,"id":"max","implements":null,"inheritance":null,"inheritedMembers":null,"name":"max","nameWithType":"DoubleRange.max","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.DoubleRange","remarks":null,"summary":"\nThe upper bound of the range.\n","syntax":{"content":"public double max { get; set; }","parameters":[],"return":{"description":null,"type":"System.Double"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.DoubleRange.max"},{"children":null,"id":"delta","implements":null,"inheritance":null,"inheritedMembers":null,"name":"delta","nameWithType":"DoubleRange.delta","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.DoubleRange","remarks":null,"summary":"\nThe difference between the maximum and minimum values (Read only).\n","syntax":{"content":"public readonly double delta { get; }","parameters":[],"return":{"description":null,"type":"System.Double"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.DoubleRange.delta"},{"children":null,"id":"median","implements":null,"inheritance":null,"inheritedMembers":null,"name":"median","nameWithType":"DoubleRange.median","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.DoubleRange","remarks":null,"summary":"\nThe median value of the range (Read only).\n","syntax":{"content":"public readonly double median { get; }","parameters":[],"return":{"description":null,"type":"System.Double"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.DoubleRange.median"},{"children":null,"id":"#ctor(System.Double,System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"DoubleRange(Double, Double)","nameWithType":"DoubleRange.DoubleRange(Double, Double)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.DoubleRange","remarks":null,"summary":"\nCreates a new range with the specified values.\n","syntax":{"content":"public DoubleRange(double min = 0, double max = 1)","parameters":[{"description":"The lower bound of the range.","id":"min","type":"System.Double"},{"description":"The upper bound of the range.","id":"max","type":"System.Double"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.DoubleRange.#ctor(System.Double,System.Double)"},{"children":null,"id":"Includes(System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Includes(Double)","nameWithType":"DoubleRange.Includes(Double)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.DoubleRange","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(double value)","parameters":[{"description":"The value to check.","id":"value","type":"System.Double"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.DoubleRange.Includes(System.Double)"},{"children":null,"id":"Includes(System.Double,System.Boolean,System.Boolean)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Includes(Double, Boolean, Boolean)","nameWithType":"DoubleRange.Includes(Double, Boolean, Boolean)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.DoubleRange","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(double value, bool includeMin, bool includeMax)","parameters":[{"description":"The value to check.","id":"value","type":"System.Double"},{"description":"The minimum value is inclusive if true, exclusive if false.","id":"includeMin","type":"System.Boolean"},{"description":"The maximum value is inclusive if true, exclusive if false.","id":"includeMax","type":"System.Boolean"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.DoubleRange.Includes(System.Double,System.Boolean,System.Boolean)"},{"children":null,"id":"Clamp(System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clamp(Double)","nameWithType":"DoubleRange.Clamp(Double)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.DoubleRange","remarks":null,"summary":"\nClamps a value to the range.\n","syntax":{"content":"public double Clamp(double value)","parameters":[{"description":"The value to clamp.","id":"value","type":"System.Double"}],"return":{"description":"The clamped value.","type":"System.Double"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.DoubleRange.Clamp(System.Double)"},{"children":null,"id":"Lerp(System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Lerp(Double)","nameWithType":"DoubleRange.Lerp(Double)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.DoubleRange","remarks":null,"summary":"\nLinearly interpolates between the range by <code data-dev-comment-type=\"paramref\" class=\"paramref\">t</code>.\n","syntax":{"content":"public double Lerp(double t)","parameters":[{"description":"The interpolant value between [0..1].","id":"t","type":"System.Double"}],"return":{"description":"The interpolated value.","type":"System.Double"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.DoubleRange.Lerp(System.Double)"},{"children":null,"id":"InverseLerp(System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"InverseLerp(Double)","nameWithType":"DoubleRange.InverseLerp(Double)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.DoubleRange","remarks":null,"summary":"\nCalculates the linear parameter t that produces the interpolant\nvalue within the range.\n","syntax":{"content":"public double InverseLerp(double value)","parameters":[{"description":"The value within the range you want to calculate.","id":"value","type":"System.Double"}],"return":{"description":"The interpolant value between [0..1].","type":"System.Double"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.DoubleRange.InverseLerp(System.Double)"}]},{"items":[{"children":["Zigurous.Architecture.DoubleReference.#ctor","Zigurous.Architecture.DoubleReference.#ctor(System.Double)","Zigurous.Architecture.DoubleReference.#ctor(Zigurous.Architecture.DoubleVariable)","Zigurous.Architecture.DoubleReference.op_Implicit(Zigurous.Architecture.DoubleReference)~System.Double"],"id":"DoubleReference","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ValueReference{System.Double,Zigurous.Architecture.DoubleVariable}"],"inheritedMembers":["Zigurous.Architecture.ValueReference{System.Double,Zigurous.Architecture.DoubleVariable}.useConstant","Zigurous.Architecture.ValueReference{System.Double,Zigurous.Architecture.DoubleVariable}.constantValue","Zigurous.Architecture.ValueReference{System.Double,Zigurous.Architecture.DoubleVariable}.variable","Zigurous.Architecture.ValueReference{System.Double,Zigurous.Architecture.DoubleVariable}.value"],"name":"DoubleReference","nameWithType":"DoubleReference","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA reference to a double value, either a constant or <xref href=\"Zigurous.Architecture.DoubleVariable\" data-throw-if-not-resolved=\"false\"></xref>.\n","syntax":{"content":"[Serializable]\npublic class DoubleReference : ValueReference<double, DoubleVariable>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.DoubleReference"},{"children":null,"id":"#ctor","implements":null,"inheritance":null,"inheritedMembers":null,"name":"DoubleReference()","nameWithType":"DoubleReference.DoubleReference()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.DoubleReference","remarks":null,"summary":"\nCreates a new double reference.\n","syntax":{"content":"public DoubleReference()","parameters":null,"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.DoubleReference.#ctor"},{"children":null,"id":"#ctor(System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"DoubleReference(Double)","nameWithType":"DoubleReference.DoubleReference(Double)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.DoubleReference","remarks":null,"summary":"\nCreates a new double reference with the constant value.\n","syntax":{"content":"public DoubleReference(double value)","parameters":[{"description":"The constant value to set.","id":"value","type":"System.Double"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.DoubleReference.#ctor(System.Double)"},{"children":null,"id":"#ctor(Zigurous.Architecture.DoubleVariable)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"DoubleReference(DoubleVariable)","nameWithType":"DoubleReference.DoubleReference(DoubleVariable)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.DoubleReference","remarks":null,"summary":"\nCreates a new double reference to the variable value.\n","syntax":{"content":"public DoubleReference(DoubleVariable variable)","parameters":[{"description":"The variable to reference.","id":"variable","type":"Zigurous.Architecture.DoubleVariable"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.DoubleReference.#ctor(Zigurous.Architecture.DoubleVariable)"},{"children":null,"id":"op_Implicit(Zigurous.Architecture.DoubleReference)~System.Double","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Implicit(DoubleReference to Double)","nameWithType":"DoubleReference.Implicit(DoubleReference to Double)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.DoubleReference","remarks":null,"summary":"\nImplicitly converts the reference to a double.\n","syntax":{"content":"public static implicit operator double (DoubleReference reference)","parameters":[{"description":"The reference to convert.","id":"reference","type":"Zigurous.Architecture.DoubleReference"}],"return":{"description":"The double value.","type":"System.Double"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.DoubleReference.op_Implicit(Zigurous.Architecture.DoubleReference)~System.Double"}]},{"items":[{"children":["Zigurous.Architecture.EulerRange.#ctor(System.Single,System.Single)","Zigurous.Architecture.EulerRange.Clamp(System.Single)","Zigurous.Architecture.EulerRange.delta","Zigurous.Architecture.EulerRange.fullRange","Zigurous.Architecture.EulerRange.halfRange","Zigurous.Architecture.EulerRange.Includes(System.Single)","Zigurous.Architecture.EulerRange.Includes(System.Single,System.Boolean,System.Boolean)","Zigurous.Architecture.EulerRange.InverseLerp(System.Single)","Zigurous.Architecture.EulerRange.Lerp(System.Single)","Zigurous.Architecture.EulerRange.max","Zigurous.Architecture.EulerRange.median","Zigurous.Architecture.EulerRange.min","Zigurous.Architecture.EulerRange.pi","Zigurous.Architecture.EulerRange.pi2","Zigurous.Architecture.EulerRange.Random","Zigurous.Architecture.EulerRange.Wrap(System.Single)","Zigurous.Architecture.EulerRange.zero"],"id":"EulerRange","implements":["Zigurous.Architecture.INumberRange{System.Single}","Zigurous.Architecture.IRange{System.Single}"],"inheritance":null,"inheritedMembers":null,"name":"EulerRange","nameWithType":"EulerRange","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA range of euler values wrapped between -360 and +360.\n","syntax":{"content":"[Serializable]\npublic struct EulerRange : INumberRange<float>, IRange<float>","parameters":null,"return":null,"typeParameters":null},"type":"Struct","uid":"Zigurous.Architecture.EulerRange"},{"children":null,"id":"zero","implements":null,"inheritance":null,"inheritedMembers":null,"name":"zero","nameWithType":"EulerRange.zero","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.EulerRange","remarks":null,"summary":"\nShorthand for writing <code>EulerRange(0f, 0f)</code>.\n","syntax":{"content":"public static readonly EulerRange zero { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.EulerRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.EulerRange.zero"},{"children":null,"id":"pi","implements":null,"inheritance":null,"inheritedMembers":null,"name":"pi","nameWithType":"EulerRange.pi","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.EulerRange","remarks":null,"summary":"\nShorthand for writing <code>EulerRange(0f, 180f)</code>.\n","syntax":{"content":"public static readonly EulerRange pi { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.EulerRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.EulerRange.pi"},{"children":null,"id":"pi2","implements":null,"inheritance":null,"inheritedMembers":null,"name":"pi2","nameWithType":"EulerRange.pi2","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.EulerRange","remarks":null,"summary":"\nShorthand for writing <code>EulerRange(0f, 360f)</code>.\n","syntax":{"content":"public static readonly EulerRange pi2 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.EulerRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.EulerRange.pi2"},{"children":null,"id":"halfRange","implements":null,"inheritance":null,"inheritedMembers":null,"name":"halfRange","nameWithType":"EulerRange.halfRange","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.EulerRange","remarks":null,"summary":"\nShorthand for writing <code>EulerRange(-180f, 180f)</code>.\n","syntax":{"content":"public static readonly EulerRange halfRange { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.EulerRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.EulerRange.halfRange"},{"children":null,"id":"fullRange","implements":null,"inheritance":null,"inheritedMembers":null,"name":"fullRange","nameWithType":"EulerRange.fullRange","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.EulerRange","remarks":null,"summary":"\nShorthand for writing <code>EulerRange(-360f, 360f)</code>.\n","syntax":{"content":"public static readonly EulerRange fullRange { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.EulerRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.EulerRange.fullRange"},{"children":null,"id":"min","implements":["Zigurous.Architecture.IRange{System.Single}.min"],"inheritance":null,"inheritedMembers":null,"name":"min","nameWithType":"EulerRange.min","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.EulerRange","remarks":null,"summary":"\nThe lower bound of the range.\n","syntax":{"content":"public float min { get; set; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.EulerRange.min"},{"children":null,"id":"max","implements":["Zigurous.Architecture.IRange{System.Single}.max"],"inheritance":null,"inheritedMembers":null,"name":"max","nameWithType":"EulerRange.max","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.EulerRange","remarks":null,"summary":"\nThe upper bound of the range.\n","syntax":{"content":"public float max { get; set; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.EulerRange.max"},{"children":null,"id":"delta","implements":["Zigurous.Architecture.INumberRange{System.Single}.delta"],"inheritance":null,"inheritedMembers":null,"name":"delta","nameWithType":"EulerRange.delta","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.EulerRange","remarks":null,"summary":"\nThe difference between the maximum and minimum values (Read only).\n","syntax":{"content":"public readonly float delta { get; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.EulerRange.delta"},{"children":null,"id":"median","implements":["Zigurous.Architecture.INumberRange{System.Single}.median"],"inheritance":null,"inheritedMembers":null,"name":"median","nameWithType":"EulerRange.median","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.EulerRange","remarks":null,"summary":"\nThe median value of the range (Read only).\n","syntax":{"content":"public readonly float median { get; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.EulerRange.median"},{"children":null,"id":"#ctor(System.Single,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"EulerRange(Single, Single)","nameWithType":"EulerRange.EulerRange(Single, Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.EulerRange","remarks":null,"summary":"\nCreates a new range with the specified values.\n","syntax":{"content":"public EulerRange(float min = -360F, float max = 360F)","parameters":[{"description":"The lower bound of the range.","id":"min","type":"System.Single"},{"description":"The upper bound of the range.","id":"max","type":"System.Single"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.EulerRange.#ctor(System.Single,System.Single)"},{"children":null,"id":"Random","implements":["Zigurous.Architecture.INumberRange{System.Single}.Random"],"inheritance":null,"inheritedMembers":null,"name":"Random()","nameWithType":"EulerRange.Random()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.EulerRange","remarks":null,"summary":"\nReturns a random value in the range.\n","syntax":{"content":"public float Random()","parameters":null,"return":{"description":"A random value in the range.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.EulerRange.Random"},{"children":null,"id":"Includes(System.Single)","implements":["Zigurous.Architecture.IRange{System.Single}.Includes(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Single)","nameWithType":"EulerRange.Includes(Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.EulerRange","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(float value)","parameters":[{"description":"The value to check.","id":"value","type":"System.Single"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.EulerRange.Includes(System.Single)"},{"children":null,"id":"Includes(System.Single,System.Boolean,System.Boolean)","implements":["Zigurous.Architecture.IRange{System.Single}.Includes(System.Single,System.Boolean,System.Boolean)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Single, Boolean, Boolean)","nameWithType":"EulerRange.Includes(Single, Boolean, Boolean)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.EulerRange","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(float value, bool includeMin, bool includeMax)","parameters":[{"description":"The value to check.","id":"value","type":"System.Single"},{"description":"The minimum value is inclusive if true, exclusive if false.","id":"includeMin","type":"System.Boolean"},{"description":"The maximum value is inclusive if true, exclusive if false.","id":"includeMax","type":"System.Boolean"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.EulerRange.Includes(System.Single,System.Boolean,System.Boolean)"},{"children":null,"id":"Clamp(System.Single)","implements":["Zigurous.Architecture.INumberRange{System.Single}.Clamp(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"Clamp(Single)","nameWithType":"EulerRange.Clamp(Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.EulerRange","remarks":null,"summary":"\nClamps a value to the range.\n","syntax":{"content":"public float Clamp(float value)","parameters":[{"description":"The value to clamp.","id":"value","type":"System.Single"}],"return":{"description":"The clamped value.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.EulerRange.Clamp(System.Single)"},{"children":null,"id":"Wrap(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Wrap(Single)","nameWithType":"EulerRange.Wrap(Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.EulerRange","remarks":null,"summary":"\nWraps a value within the range.\n","syntax":{"content":"public float Wrap(float value)","parameters":[{"description":"The value to wrap.","id":"value","type":"System.Single"}],"return":{"description":"The wrapped value.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.EulerRange.Wrap(System.Single)"},{"children":null,"id":"Lerp(System.Single)","implements":["Zigurous.Architecture.INumberRange{System.Single}.Lerp(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"Lerp(Single)","nameWithType":"EulerRange.Lerp(Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.EulerRange","remarks":null,"summary":"\nLinearly interpolates between the range by <code data-dev-comment-type=\"paramref\" class=\"paramref\">t</code>.\n","syntax":{"content":"public float Lerp(float t)","parameters":[{"description":"The interpolant value between [0..1].","id":"t","type":"System.Single"}],"return":{"description":"The interpolated value.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.EulerRange.Lerp(System.Single)"},{"children":null,"id":"InverseLerp(System.Single)","implements":["Zigurous.Architecture.INumberRange{System.Single}.InverseLerp(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"InverseLerp(Single)","nameWithType":"EulerRange.InverseLerp(Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.EulerRange","remarks":null,"summary":"\nCalculates the linear parameter t that produces the interpolant\nvalue within the range.\n","syntax":{"content":"public float InverseLerp(float value)","parameters":[{"description":"The value within the range you want to calculate.","id":"value","type":"System.Single"}],"return":{"description":"The interpolant value between [0..1].","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.EulerRange.InverseLerp(System.Single)"}]},{"items":[{"children":["Zigurous.Architecture.DoubleVariable.value"],"id":"DoubleVariable","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ScriptableVariable{System.Double}"],"inheritedMembers":null,"name":"DoubleVariable","nameWithType":"DoubleVariable","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA double variable saved as a ScriptableObject.\n","syntax":{"content":"public class DoubleVariable : ScriptableVariable<double>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.DoubleVariable"},{"children":null,"id":"value","implements":null,"inheritance":null,"inheritedMembers":null,"name":"value","nameWithType":"DoubleVariable.value","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.DoubleVariable","remarks":null,"summary":"\nThe value of the variable.\n","syntax":{"content":"public override double value { get; set; }","parameters":[],"return":{"description":null,"type":"System.Double"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.DoubleVariable.value"}]},{"items":[{"children":[],"id":"FixedUpdateStrategy","implements":null,"inheritance":["System.Object","Zigurous.Architecture.UpdateStrategy"],"inheritedMembers":["Zigurous.Architecture.UpdateStrategy.Execute(System.Single)","Zigurous.Architecture.UpdateStrategy.Register(Zigurous.Architecture.UpdateStrategy.UpdateAction)","Zigurous.Architecture.UpdateStrategy.Unregister(Zigurous.Architecture.UpdateStrategy.UpdateAction)"],"name":"FixedUpdateStrategy","nameWithType":"FixedUpdateStrategy","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nAn update strategy executed during the fixed update loop.\n","syntax":{"content":"public sealed class FixedUpdateStrategy : UpdateStrategy","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.FixedUpdateStrategy"}]},{"items":[{"children":["Zigurous.Architecture.EventReference.#ctor","Zigurous.Architecture.EventReference.#ctor(UnityEvent)","Zigurous.Architecture.EventReference.#ctor(Zigurous.Architecture.GameEvent)","Zigurous.Architecture.EventReference.gameEvent","Zigurous.Architecture.EventReference.Invoke","Zigurous.Architecture.EventReference.unityEvent","Zigurous.Architecture.EventReference.useUnityEvent"],"id":"EventReference","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"EventReference","nameWithType":"EventReference","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA reference to a UnityEvent or a GameEvent.\n","syntax":{"content":"[Serializable]\npublic sealed class EventReference","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.EventReference"},{"children":null,"id":"useUnityEvent","implements":null,"inheritance":null,"inheritedMembers":null,"name":"useUnityEvent","nameWithType":"EventReference.useUnityEvent","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.EventReference","remarks":null,"summary":"\nUses a UnityEvent instead of a GameEvent.\n","syntax":{"content":"public bool useUnityEvent","parameters":null,"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.EventReference.useUnityEvent"},{"children":null,"id":"unityEvent","implements":null,"inheritance":null,"inheritedMembers":null,"name":"unityEvent","nameWithType":"EventReference.unityEvent","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.EventReference","remarks":null,"summary":"\nThe UnityEvent to use.\n","syntax":{"content":"public UnityEvent unityEvent","parameters":null,"return":{"description":null,"type":"Global.UnityEvent"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.EventReference.unityEvent"},{"children":null,"id":"gameEvent","implements":null,"inheritance":null,"inheritedMembers":null,"name":"gameEvent","nameWithType":"EventReference.gameEvent","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.EventReference","remarks":null,"summary":"\nThe GameEvent to use.\n","syntax":{"content":"public GameEvent gameEvent","parameters":null,"return":{"description":null,"type":"Zigurous.Architecture.GameEvent"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.EventReference.gameEvent"},{"children":null,"id":"#ctor","implements":null,"inheritance":null,"inheritedMembers":null,"name":"EventReference()","nameWithType":"EventReference.EventReference()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.EventReference","remarks":null,"summary":"\nCreates a new event reference.\n","syntax":{"content":"public EventReference()","parameters":null,"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.EventReference.#ctor"},{"children":null,"id":"#ctor(UnityEvent)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"EventReference(UnityEvent)","nameWithType":"EventReference.EventReference(UnityEvent)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.EventReference","remarks":null,"summary":"\nCreates a new event reference to the UnityEvent.\n","syntax":{"content":"public EventReference(UnityEvent unityEvent)","parameters":[{"description":"The UnityEvent to use.","id":"unityEvent","type":"Global.UnityEvent"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.EventReference.#ctor(UnityEvent)"},{"children":null,"id":"#ctor(Zigurous.Architecture.GameEvent)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"EventReference(GameEvent)","nameWithType":"EventReference.EventReference(GameEvent)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.EventReference","remarks":null,"summary":"\nCreates a new event reference to the GameEvent.\n","syntax":{"content":"public EventReference(GameEvent gameEvent)","parameters":[{"description":"The GameEvent to use.","id":"gameEvent","type":"Zigurous.Architecture.GameEvent"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.EventReference.#ctor(Zigurous.Architecture.GameEvent)"},{"children":null,"id":"Invoke","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Invoke()","nameWithType":"EventReference.Invoke()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.EventReference","remarks":null,"summary":"\nInvokes or raises the event depending on the type.\n","syntax":{"content":"public void Invoke()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.EventReference.Invoke"}]},{"items":[{"children":["Zigurous.Architecture.FloatAccumulator.Add(System.Single)","Zigurous.Architecture.FloatAccumulator.Subtract(System.Single)"],"id":"FloatAccumulator","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ValueAccumulator{System.Single}"],"inheritedMembers":["Zigurous.Architecture.ValueAccumulator{System.Single}.values","Zigurous.Architecture.ValueAccumulator{System.Single}.total","Zigurous.Architecture.ValueAccumulator{System.Single}.count","Zigurous.Architecture.ValueAccumulator{System.Single}.defaultValue","Zigurous.Architecture.ValueAccumulator{System.Single}.GetValue(System.Int32)","Zigurous.Architecture.ValueAccumulator{System.Single}.SetValue(System.Int32,System.Single)","Zigurous.Architecture.ValueAccumulator{System.Single}.RemoveValue(System.Int32)","Zigurous.Architecture.ValueAccumulator{System.Single}.Clear"],"name":"FloatAccumulator","nameWithType":"FloatAccumulator","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nAccumulates float values into a single total value.\n","syntax":{"content":"public sealed class FloatAccumulator : ValueAccumulator<float>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.FloatAccumulator"},{"children":null,"id":"Add(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Add(Single)","nameWithType":"FloatAccumulator.Add(Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.FloatAccumulator","remarks":null,"summary":"\nIncreases the accumulated total by a given value.\n","syntax":{"content":"protected override float Add(float value)","parameters":[{"description":"The value to add to the total.","id":"value","type":"System.Single"}],"return":{"description":"The new total value.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.FloatAccumulator.Add(System.Single)"},{"children":null,"id":"Subtract(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Subtract(Single)","nameWithType":"FloatAccumulator.Subtract(Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.FloatAccumulator","remarks":null,"summary":"\nDecreases the accumulated total by a given value.\n","syntax":{"content":"protected override float Subtract(float value)","parameters":[{"description":"The value to subtract from the total.","id":"value","type":"System.Single"}],"return":{"description":"The new total value.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.FloatAccumulator.Subtract(System.Single)"}]},{"items":[{"children":["Zigurous.Architecture.FloatRange.#ctor(System.Single,System.Single)","Zigurous.Architecture.FloatRange.Clamp(System.Single)","Zigurous.Architecture.FloatRange.delta","Zigurous.Architecture.FloatRange.Includes(System.Single)","Zigurous.Architecture.FloatRange.Includes(System.Single,System.Boolean,System.Boolean)","Zigurous.Architecture.FloatRange.InverseLerp(System.Single)","Zigurous.Architecture.FloatRange.Lerp(System.Single)","Zigurous.Architecture.FloatRange.max","Zigurous.Architecture.FloatRange.median","Zigurous.Architecture.FloatRange.min","Zigurous.Architecture.FloatRange.minMax","Zigurous.Architecture.FloatRange.negative","Zigurous.Architecture.FloatRange.one","Zigurous.Architecture.FloatRange.percent","Zigurous.Architecture.FloatRange.positive","Zigurous.Architecture.FloatRange.Random","Zigurous.Architecture.FloatRange.zero"],"id":"FloatRange","implements":["Zigurous.Architecture.INumberRange{System.Single}","Zigurous.Architecture.IRange{System.Single}"],"inheritance":null,"inheritedMembers":null,"name":"FloatRange","nameWithType":"FloatRange","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA range of float values.\n","syntax":{"content":"[Serializable]\npublic struct FloatRange : INumberRange<float>, IRange<float>","parameters":null,"return":null,"typeParameters":null},"type":"Struct","uid":"Zigurous.Architecture.FloatRange"},{"children":null,"id":"zero","implements":null,"inheritance":null,"inheritedMembers":null,"name":"zero","nameWithType":"FloatRange.zero","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.FloatRange","remarks":null,"summary":"\nShorthand for writing <code>FloatRange(0f, 0f)</code>.\n","syntax":{"content":"public static readonly FloatRange zero { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.FloatRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.FloatRange.zero"},{"children":null,"id":"one","implements":null,"inheritance":null,"inheritedMembers":null,"name":"one","nameWithType":"FloatRange.one","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.FloatRange","remarks":null,"summary":"\nShorthand for writing <code>FloatRange(1f, 1f)</code>.\n","syntax":{"content":"public static readonly FloatRange one { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.FloatRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.FloatRange.one"},{"children":null,"id":"percent","implements":null,"inheritance":null,"inheritedMembers":null,"name":"percent","nameWithType":"FloatRange.percent","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.FloatRange","remarks":null,"summary":"\nShorthand for writing <code>FloatRange(0f, 1f)</code>.\n","syntax":{"content":"public static readonly FloatRange percent { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.FloatRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.FloatRange.percent"},{"children":null,"id":"positive","implements":null,"inheritance":null,"inheritedMembers":null,"name":"positive","nameWithType":"FloatRange.positive","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.FloatRange","remarks":null,"summary":"\nShorthand for writing <code>FloatRange(0f, float.MaxValue)</code>.\n","syntax":{"content":"public static readonly FloatRange positive { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.FloatRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.FloatRange.positive"},{"children":null,"id":"negative","implements":null,"inheritance":null,"inheritedMembers":null,"name":"negative","nameWithType":"FloatRange.negative","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.FloatRange","remarks":null,"summary":"\nShorthand for writing <code>FloatRange(float.MinValue, 0f)</code>.\n","syntax":{"content":"public static readonly FloatRange negative { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.FloatRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.FloatRange.negative"},{"children":null,"id":"minMax","implements":null,"inheritance":null,"inheritedMembers":null,"name":"minMax","nameWithType":"FloatRange.minMax","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.FloatRange","remarks":null,"summary":"\nShorthand for writing <code>FloatRange(float.MinValue, float.MaxValue)</code>.\n","syntax":{"content":"public static readonly FloatRange minMax { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.FloatRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.FloatRange.minMax"},{"children":null,"id":"min","implements":["Zigurous.Architecture.IRange{System.Single}.min"],"inheritance":null,"inheritedMembers":null,"name":"min","nameWithType":"FloatRange.min","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.FloatRange","remarks":null,"summary":"\nThe lower bound of the range.\n","syntax":{"content":"public float min { get; set; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.FloatRange.min"},{"children":null,"id":"max","implements":["Zigurous.Architecture.IRange{System.Single}.max"],"inheritance":null,"inheritedMembers":null,"name":"max","nameWithType":"FloatRange.max","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.FloatRange","remarks":null,"summary":"\nThe upper bound of the range.\n","syntax":{"content":"public float max { get; set; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.FloatRange.max"},{"children":null,"id":"delta","implements":["Zigurous.Architecture.INumberRange{System.Single}.delta"],"inheritance":null,"inheritedMembers":null,"name":"delta","nameWithType":"FloatRange.delta","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.FloatRange","remarks":null,"summary":"\nThe difference between the maximum and minimum values (Read only).\n","syntax":{"content":"public readonly float delta { get; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.FloatRange.delta"},{"children":null,"id":"median","implements":["Zigurous.Architecture.INumberRange{System.Single}.median"],"inheritance":null,"inheritedMembers":null,"name":"median","nameWithType":"FloatRange.median","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.FloatRange","remarks":null,"summary":"\nThe median value of the range (Read only).\n","syntax":{"content":"public readonly float median { get; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.FloatRange.median"},{"children":null,"id":"#ctor(System.Single,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"FloatRange(Single, Single)","nameWithType":"FloatRange.FloatRange(Single, Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.FloatRange","remarks":null,"summary":"\nCreates a new range with the specified values.\n","syntax":{"content":"public FloatRange(float min = 0F, float max = 1F)","parameters":[{"description":"The lower bound of the range.","id":"min","type":"System.Single"},{"description":"The upper bound of the range.","id":"max","type":"System.Single"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.FloatRange.#ctor(System.Single,System.Single)"},{"children":null,"id":"Random","implements":["Zigurous.Architecture.INumberRange{System.Single}.Random"],"inheritance":null,"inheritedMembers":null,"name":"Random()","nameWithType":"FloatRange.Random()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.FloatRange","remarks":null,"summary":"\nReturns a random value in the range.\n","syntax":{"content":"public float Random()","parameters":null,"return":{"description":"A random value in the range.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.FloatRange.Random"},{"children":null,"id":"Includes(System.Single)","implements":["Zigurous.Architecture.IRange{System.Single}.Includes(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Single)","nameWithType":"FloatRange.Includes(Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.FloatRange","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(float value)","parameters":[{"description":"The value to check.","id":"value","type":"System.Single"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.FloatRange.Includes(System.Single)"},{"children":null,"id":"Includes(System.Single,System.Boolean,System.Boolean)","implements":["Zigurous.Architecture.IRange{System.Single}.Includes(System.Single,System.Boolean,System.Boolean)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Single, Boolean, Boolean)","nameWithType":"FloatRange.Includes(Single, Boolean, Boolean)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.FloatRange","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(float value, bool includeMin, bool includeMax)","parameters":[{"description":"The value to check.","id":"value","type":"System.Single"},{"description":"The minimum value is inclusive if true, exclusive if false.","id":"includeMin","type":"System.Boolean"},{"description":"The maximum value is inclusive if true, exclusive if false.","id":"includeMax","type":"System.Boolean"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.FloatRange.Includes(System.Single,System.Boolean,System.Boolean)"},{"children":null,"id":"Clamp(System.Single)","implements":["Zigurous.Architecture.INumberRange{System.Single}.Clamp(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"Clamp(Single)","nameWithType":"FloatRange.Clamp(Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.FloatRange","remarks":null,"summary":"\nClamps a value to the range.\n","syntax":{"content":"public float Clamp(float value)","parameters":[{"description":"The value to clamp.","id":"value","type":"System.Single"}],"return":{"description":"The clamped value.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.FloatRange.Clamp(System.Single)"},{"children":null,"id":"Lerp(System.Single)","implements":["Zigurous.Architecture.INumberRange{System.Single}.Lerp(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"Lerp(Single)","nameWithType":"FloatRange.Lerp(Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.FloatRange","remarks":null,"summary":"\nLinearly interpolates between the range by <code data-dev-comment-type=\"paramref\" class=\"paramref\">t</code>.\n","syntax":{"content":"public float Lerp(float t)","parameters":[{"description":"The interpolant value between [0..1].","id":"t","type":"System.Single"}],"return":{"description":"The interpolated value.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.FloatRange.Lerp(System.Single)"},{"children":null,"id":"InverseLerp(System.Single)","implements":["Zigurous.Architecture.INumberRange{System.Single}.InverseLerp(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"InverseLerp(Single)","nameWithType":"FloatRange.InverseLerp(Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.FloatRange","remarks":null,"summary":"\nCalculates the linear parameter t that produces the interpolant\nvalue within the range.\n","syntax":{"content":"public float InverseLerp(float value)","parameters":[{"description":"The value within the range you want to calculate.","id":"value","type":"System.Single"}],"return":{"description":"The interpolant value between [0..1].","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.FloatRange.InverseLerp(System.Single)"}]},{"items":[{"children":["Zigurous.Architecture.FloatReference.#ctor","Zigurous.Architecture.FloatReference.#ctor(System.Single)","Zigurous.Architecture.FloatReference.#ctor(Zigurous.Architecture.FloatVariable)","Zigurous.Architecture.FloatReference.op_Implicit(Zigurous.Architecture.FloatReference)~System.Single"],"id":"FloatReference","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ValueReference{System.Single,Zigurous.Architecture.FloatVariable}"],"inheritedMembers":["Zigurous.Architecture.ValueReference{System.Single,Zigurous.Architecture.FloatVariable}.useConstant","Zigurous.Architecture.ValueReference{System.Single,Zigurous.Architecture.FloatVariable}.constantValue","Zigurous.Architecture.ValueReference{System.Single,Zigurous.Architecture.FloatVariable}.variable","Zigurous.Architecture.ValueReference{System.Single,Zigurous.Architecture.FloatVariable}.value"],"name":"FloatReference","nameWithType":"FloatReference","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA reference to a float value, either a constant or <xref href=\"Zigurous.Architecture.FloatVariable\" data-throw-if-not-resolved=\"false\"></xref>.\n","syntax":{"content":"[Serializable]\npublic class FloatReference : ValueReference<float, FloatVariable>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.FloatReference"},{"children":null,"id":"#ctor","implements":null,"inheritance":null,"inheritedMembers":null,"name":"FloatReference()","nameWithType":"FloatReference.FloatReference()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.FloatReference","remarks":null,"summary":"\nCreates a new float reference.\n","syntax":{"content":"public FloatReference()","parameters":null,"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.FloatReference.#ctor"},{"children":null,"id":"#ctor(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"FloatReference(Single)","nameWithType":"FloatReference.FloatReference(Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.FloatReference","remarks":null,"summary":"\nCreates a new float reference with the constant value.\n","syntax":{"content":"public FloatReference(float value)","parameters":[{"description":"The constant value to set.","id":"value","type":"System.Single"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.FloatReference.#ctor(System.Single)"},{"children":null,"id":"#ctor(Zigurous.Architecture.FloatVariable)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"FloatReference(FloatVariable)","nameWithType":"FloatReference.FloatReference(FloatVariable)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.FloatReference","remarks":null,"summary":"\nCreates a new float reference to the variable value.\n","syntax":{"content":"public FloatReference(FloatVariable variable)","parameters":[{"description":"The variable to reference.","id":"variable","type":"Zigurous.Architecture.FloatVariable"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.FloatReference.#ctor(Zigurous.Architecture.FloatVariable)"},{"children":null,"id":"op_Implicit(Zigurous.Architecture.FloatReference)~System.Single","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Implicit(FloatReference to Single)","nameWithType":"FloatReference.Implicit(FloatReference to Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.FloatReference","remarks":null,"summary":"\nImplicitly converts the reference to a float.\n","syntax":{"content":"public static implicit operator float (FloatReference reference)","parameters":[{"description":"The reference to convert.","id":"reference","type":"Zigurous.Architecture.FloatReference"}],"return":{"description":"The float value.","type":"System.Single"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.FloatReference.op_Implicit(Zigurous.Architecture.FloatReference)~System.Single"}]},{"items":[{"children":["Zigurous.Architecture.FloatVariable.value"],"id":"FloatVariable","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ScriptableVariable{System.Single}"],"inheritedMembers":null,"name":"FloatVariable","nameWithType":"FloatVariable","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA float variable saved as a ScriptableObject.\n","syntax":{"content":"public class FloatVariable : ScriptableVariable<float>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.FloatVariable"},{"children":null,"id":"value","implements":null,"inheritance":null,"inheritedMembers":null,"name":"value","nameWithType":"FloatVariable.value","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.FloatVariable","remarks":null,"summary":"\nThe value of the variable.\n","syntax":{"content":"public override float value { get; set; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.FloatVariable.value"}]},{"items":[{"children":["Zigurous.Architecture.GameEvent.Raise","Zigurous.Architecture.GameEvent.RegisterListener(Zigurous.Architecture.GameEventListener)","Zigurous.Architecture.GameEvent.UnregisterListener(Zigurous.Architecture.GameEventListener)"],"id":"GameEvent","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"GameEvent","nameWithType":"GameEvent","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA custom game event that can be saved as a project asset and referenced\nthroughout the application.\n","syntax":{"content":"public class GameEvent : ScriptableObject","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.GameEvent"},{"children":null,"id":"Raise","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Raise()","nameWithType":"GameEvent.Raise()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GameEvent","remarks":null,"summary":"\nRaises the game event and invokes all of the registered listeners.\n","syntax":{"content":"public void Raise()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.GameEvent.Raise"},{"children":null,"id":"RegisterListener(Zigurous.Architecture.GameEventListener)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"RegisterListener(GameEventListener)","nameWithType":"GameEvent.RegisterListener(GameEventListener)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GameEvent","remarks":null,"summary":"\nAdds the event listener to the list of listeners that are invoked\nwhen the event is raised.\n","syntax":{"content":"public void RegisterListener(GameEventListener listener)","parameters":[{"description":"The event listener to register.","id":"listener","type":"Zigurous.Architecture.GameEventListener"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.GameEvent.RegisterListener(Zigurous.Architecture.GameEventListener)"},{"children":null,"id":"UnregisterListener(Zigurous.Architecture.GameEventListener)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"UnregisterListener(GameEventListener)","nameWithType":"GameEvent.UnregisterListener(GameEventListener)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GameEvent","remarks":null,"summary":"\nRemoves the event listener from the list of listeners that are\ninvoked when the event is raised.\n","syntax":{"content":"public void UnregisterListener(GameEventListener listener)","parameters":[{"description":"The event listener to unregister.","id":"listener","type":"Zigurous.Architecture.GameEventListener"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.GameEvent.UnregisterListener(Zigurous.Architecture.GameEventListener)"}]},{"items":[{"children":["Zigurous.Architecture.GameEventListener.Event","Zigurous.Architecture.GameEventListener.OnDisable","Zigurous.Architecture.GameEventListener.OnEnable","Zigurous.Architecture.GameEventListener.OnEventRaised","Zigurous.Architecture.GameEventListener.Response"],"id":"GameEventListener","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"GameEventListener","nameWithType":"GameEventListener","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nListens for a custom game event to be raised and invokes a Unity event\nin response.\n","syntax":{"content":"public class GameEventListener : MonoBehaviour","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.GameEventListener"},{"children":null,"id":"Event","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Event","nameWithType":"GameEventListener.Event","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GameEventListener","remarks":null,"summary":"\nThe game event to listen to.\n","syntax":{"content":"public GameEvent Event","parameters":null,"return":{"description":null,"type":"Zigurous.Architecture.GameEvent"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.GameEventListener.Event"},{"children":null,"id":"Response","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Response","nameWithType":"GameEventListener.Response","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GameEventListener","remarks":null,"summary":"\nThe Unity event invoked in response to the event being raised.\n","syntax":{"content":"public UnityEvent Response","parameters":null,"return":{"description":null,"type":"Global.UnityEvent"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.GameEventListener.Response"},{"children":null,"id":"OnEnable","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnEnable()","nameWithType":"GameEventListener.OnEnable()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GameEventListener","remarks":null,"summary":"\nA Unity lifecycle method called when the behavior is enabled.\n","syntax":{"content":"protected virtual void OnEnable()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.GameEventListener.OnEnable"},{"children":null,"id":"OnDisable","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnDisable()","nameWithType":"GameEventListener.OnDisable()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GameEventListener","remarks":null,"summary":"\nA Unity lifecycle method called when the behavior is disabled.\n","syntax":{"content":"protected virtual void OnDisable()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.GameEventListener.OnDisable"},{"children":null,"id":"OnEventRaised","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnEventRaised()","nameWithType":"GameEventListener.OnEventRaised()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GameEventListener","remarks":null,"summary":"\nA callback invoked when the event is raised.\n","syntax":{"content":"public virtual void OnEventRaised()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.GameEventListener.OnEventRaised"}]},{"items":[{"children":["Zigurous.Architecture.GameObjectExtensions.DestroyChildren(GameObject)","Zigurous.Architecture.GameObjectExtensions.DestroyChildren(GameObject,System.Single)","Zigurous.Architecture.GameObjectExtensions.DestroyChildrenImmediate(GameObject,System.Boolean)","Zigurous.Architecture.GameObjectExtensions.GetRequiredComponent``1(GameObject)","Zigurous.Architecture.GameObjectExtensions.HasComponent(GameObject,System.Type)","Zigurous.Architecture.GameObjectExtensions.HasComponent``1(GameObject)","Zigurous.Architecture.GameObjectExtensions.HasComponentInChildren(GameObject,System.Type,System.Boolean)","Zigurous.Architecture.GameObjectExtensions.HasComponentInChildren``1(GameObject,System.Boolean)","Zigurous.Architecture.GameObjectExtensions.HasComponentInParent(GameObject,System.Type)","Zigurous.Architecture.GameObjectExtensions.HasComponentInParent``1(GameObject)","Zigurous.Architecture.GameObjectExtensions.SetLayerInChildren(GameObject,System.Int32)","Zigurous.Architecture.GameObjectExtensions.SetLayerInChildren(GameObject,System.String)"],"id":"GameObjectExtensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"GameObjectExtensions","nameWithType":"GameObjectExtensions","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nExtension methods for Unity GameObjects.\n","syntax":{"content":"public static class GameObjectExtensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.GameObjectExtensions"},{"children":null,"id":"SetLayerInChildren(GameObject,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SetLayerInChildren(GameObject, Int32)","nameWithType":"GameObjectExtensions.SetLayerInChildren(GameObject, Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GameObjectExtensions","remarks":null,"summary":"\nSets the layer of the parent game object and all of its children.\n","syntax":{"content":"public static void SetLayerInChildren(this GameObject parent, int layer)","parameters":[{"description":"The parent game object to set the layer of and its children.","id":"parent","type":"Global.GameObject"},{"description":"The layer to assign.","id":"layer","type":"System.Int32"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.GameObjectExtensions.SetLayerInChildren(GameObject,System.Int32)"},{"children":null,"id":"SetLayerInChildren(GameObject,System.String)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SetLayerInChildren(GameObject, String)","nameWithType":"GameObjectExtensions.SetLayerInChildren(GameObject, String)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GameObjectExtensions","remarks":null,"summary":"\nSets the layer of the parent game object and all of its children.\n","syntax":{"content":"public static void SetLayerInChildren(this GameObject parent, string layer)","parameters":[{"description":"The parent game object to set the layer of and its children.","id":"parent","type":"Global.GameObject"},{"description":"The layer to assign.","id":"layer","type":"System.String"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.GameObjectExtensions.SetLayerInChildren(GameObject,System.String)"},{"children":null,"id":"DestroyChildren(GameObject)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"DestroyChildren(GameObject)","nameWithType":"GameObjectExtensions.DestroyChildren(GameObject)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GameObjectExtensions","remarks":null,"summary":"\nDestroys all children game objects of the parent.\n","syntax":{"content":"public static void DestroyChildren(this GameObject parent)","parameters":[{"description":"The parent game object to destroy the children of.","id":"parent","type":"Global.GameObject"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.GameObjectExtensions.DestroyChildren(GameObject)"},{"children":null,"id":"DestroyChildren(GameObject,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"DestroyChildren(GameObject, Single)","nameWithType":"GameObjectExtensions.DestroyChildren(GameObject, Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GameObjectExtensions","remarks":null,"summary":"\nDestroys all children game objects of the parent after a delay.\n","syntax":{"content":"public static void DestroyChildren(this GameObject parent, float delay)","parameters":[{"description":"The parent game object to destroy the children of.","id":"parent","type":"Global.GameObject"},{"description":"The delay before destroying the game objects.","id":"delay","type":"System.Single"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.GameObjectExtensions.DestroyChildren(GameObject,System.Single)"},{"children":null,"id":"DestroyChildrenImmediate(GameObject,System.Boolean)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"DestroyChildrenImmediate(GameObject, Boolean)","nameWithType":"GameObjectExtensions.DestroyChildrenImmediate(GameObject, Boolean)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GameObjectExtensions","remarks":null,"summary":"\nDestroys all children game objects of the parent immediately. You\nare strongly recommended to use DestroyChildren instead.\n","syntax":{"content":"public static void DestroyChildrenImmediate(this GameObject parent, bool allowDestroyingAssets = false)","parameters":[{"description":"The parent game object to destroy the children of.","id":"parent","type":"Global.GameObject"},{"description":"Allows project assets to be destroyed (default=false).","id":"allowDestroyingAssets","type":"System.Boolean"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.GameObjectExtensions.DestroyChildrenImmediate(GameObject,System.Boolean)"},{"children":null,"id":"GetRequiredComponent``1(GameObject)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetRequiredComponent<T>(GameObject)","nameWithType":"GameObjectExtensions.GetRequiredComponent<T>(GameObject)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GameObjectExtensions","remarks":null,"summary":"\nGets the specified component from the game object. If the component\ndoes not exist, then it will be added to the game object.\n","syntax":{"content":"public static T GetRequiredComponent<T>(this GameObject gameObject)\n    where T : Component","parameters":[{"description":"The game object to get the component from.","id":"gameObject","type":"Global.GameObject"}],"return":{"description":"The component reference.","type":"{T}"},"typeParameters":[{"description":"The type of component to get.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.GameObjectExtensions.GetRequiredComponent``1(GameObject)"},{"children":null,"id":"HasComponent``1(GameObject)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"HasComponent<T>(GameObject)","nameWithType":"GameObjectExtensions.HasComponent<T>(GameObject)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GameObjectExtensions","remarks":null,"summary":"\nChecks if the game object has a component of the specified type.\n","syntax":{"content":"public static bool HasComponent<T>(this GameObject gameObject)","parameters":[{"description":"The game object to check for the component.","id":"gameObject","type":"Global.GameObject"}],"return":{"description":"True if the component exists, false otherwise.","type":"System.Boolean"},"typeParameters":[{"description":"The type of component to check for.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.GameObjectExtensions.HasComponent``1(GameObject)"},{"children":null,"id":"HasComponent(GameObject,System.Type)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"HasComponent(GameObject, Type)","nameWithType":"GameObjectExtensions.HasComponent(GameObject, Type)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GameObjectExtensions","remarks":null,"summary":"\nChecks if the game object has a component of the specified type.\n","syntax":{"content":"public static bool HasComponent(this GameObject gameObject, Type component)","parameters":[{"description":"The game object to check for the component.","id":"gameObject","type":"Global.GameObject"},{"description":"The type of component to check for.","id":"component","type":"System.Type"}],"return":{"description":"True if the component exists, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.GameObjectExtensions.HasComponent(GameObject,System.Type)"},{"children":null,"id":"HasComponentInChildren``1(GameObject,System.Boolean)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"HasComponentInChildren<T>(GameObject, Boolean)","nameWithType":"GameObjectExtensions.HasComponentInChildren<T>(GameObject, Boolean)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GameObjectExtensions","remarks":null,"summary":"\nChecks if the game object has a component of the specified type on\nitself or on any of its children using depth first search.\n","syntax":{"content":"public static bool HasComponentInChildren<T>(this GameObject gameObject, bool includeInactive = false)","parameters":[{"description":"The game object to check for the component.","id":"gameObject","type":"Global.GameObject"},{"description":"Includes inactive game objects.","id":"includeInactive","type":"System.Boolean"}],"return":{"description":"True if the component exists, false otherwise.","type":"System.Boolean"},"typeParameters":[{"description":"The type of component to check for.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.GameObjectExtensions.HasComponentInChildren``1(GameObject,System.Boolean)"},{"children":null,"id":"HasComponentInChildren(GameObject,System.Type,System.Boolean)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"HasComponentInChildren(GameObject, Type, Boolean)","nameWithType":"GameObjectExtensions.HasComponentInChildren(GameObject, Type, Boolean)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GameObjectExtensions","remarks":null,"summary":"\nChecks if the game object has a component of the specified type on\nitself or on any of its children using depth first search.\n","syntax":{"content":"public static bool HasComponentInChildren(this GameObject gameObject, Type component, bool includeInactive = false)","parameters":[{"description":"The game object to check for the component.","id":"gameObject","type":"Global.GameObject"},{"description":"The type of component to check for.","id":"component","type":"System.Type"},{"description":"Includes inactive game objects.","id":"includeInactive","type":"System.Boolean"}],"return":{"description":"True if the component exists, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.GameObjectExtensions.HasComponentInChildren(GameObject,System.Type,System.Boolean)"},{"children":null,"id":"HasComponentInParent``1(GameObject)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"HasComponentInParent<T>(GameObject)","nameWithType":"GameObjectExtensions.HasComponentInParent<T>(GameObject)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GameObjectExtensions","remarks":null,"summary":"\nChecks if the game object has a component of the specified type on\nitself or any of its parents.\n","syntax":{"content":"public static bool HasComponentInParent<T>(this GameObject gameObject)","parameters":[{"description":"The game object to check for the component.","id":"gameObject","type":"Global.GameObject"}],"return":{"description":"True if the component exists, false otherwise.","type":"System.Boolean"},"typeParameters":[{"description":"The type of component to check for.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.GameObjectExtensions.HasComponentInParent``1(GameObject)"},{"children":null,"id":"HasComponentInParent(GameObject,System.Type)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"HasComponentInParent(GameObject, Type)","nameWithType":"GameObjectExtensions.HasComponentInParent(GameObject, Type)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GameObjectExtensions","remarks":null,"summary":"\nChecks if the game object has a component of the specified type on\nitself or any of its parents.\n","syntax":{"content":"public static bool HasComponentInParent(this GameObject gameObject, Type component)","parameters":[{"description":"The game object to check for the component.","id":"gameObject","type":"Global.GameObject"},{"description":"The type of component to check for.","id":"component","type":"System.Type"}],"return":{"description":"True if the component exists, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.GameObjectExtensions.HasComponentInParent(GameObject,System.Type)"}]},{"items":[{"children":["Zigurous.Architecture.GridSize.#ctor(System.Int32)","Zigurous.Architecture.GridSize.#ctor(System.Int32,System.Int32)","Zigurous.Architecture.GridSize.area","Zigurous.Architecture.GridSize.columns","Zigurous.Architecture.GridSize.CompareTo(Zigurous.Architecture.GridSize)","Zigurous.Architecture.GridSize.Equals(System.Object)","Zigurous.Architecture.GridSize.Equals(Zigurous.Architecture.GridSize)","Zigurous.Architecture.GridSize.GetHashCode","Zigurous.Architecture.GridSize.max","Zigurous.Architecture.GridSize.one","Zigurous.Architecture.GridSize.op_Equality(Zigurous.Architecture.GridSize,Zigurous.Architecture.GridSize)","Zigurous.Architecture.GridSize.op_Inequality(Zigurous.Architecture.GridSize,Zigurous.Architecture.GridSize)","Zigurous.Architecture.GridSize.rows","Zigurous.Architecture.GridSize.sq1024","Zigurous.Architecture.GridSize.sq128","Zigurous.Architecture.GridSize.sq16","Zigurous.Architecture.GridSize.sq2","Zigurous.Architecture.GridSize.sq2048","Zigurous.Architecture.GridSize.sq256","Zigurous.Architecture.GridSize.sq32","Zigurous.Architecture.GridSize.sq4","Zigurous.Architecture.GridSize.sq4096","Zigurous.Architecture.GridSize.sq512","Zigurous.Architecture.GridSize.sq64","Zigurous.Architecture.GridSize.sq8","Zigurous.Architecture.GridSize.sq8192","Zigurous.Architecture.GridSize.ToString","Zigurous.Architecture.GridSize.zero"],"id":"GridSize","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GridSize","nameWithType":"GridSize","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nStores the size of a grid as rows and columns.\n","syntax":{"content":"[Serializable]\npublic struct GridSize : IEquatable<GridSize>, IComparable<GridSize>","parameters":null,"return":null,"typeParameters":null},"type":"Struct","uid":"Zigurous.Architecture.GridSize"},{"children":null,"id":"zero","implements":null,"inheritance":null,"inheritedMembers":null,"name":"zero","nameWithType":"GridSize.zero","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GridSize","remarks":null,"summary":"\nShorthand for writing <code>GridSize(0, 0)</code>.\n","syntax":{"content":"public static readonly GridSize zero { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.GridSize"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.GridSize.zero"},{"children":null,"id":"one","implements":null,"inheritance":null,"inheritedMembers":null,"name":"one","nameWithType":"GridSize.one","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GridSize","remarks":null,"summary":"\nShorthand for writing <code>GridSize(1, 1)</code>.\n","syntax":{"content":"public static readonly GridSize one { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.GridSize"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.GridSize.one"},{"children":null,"id":"max","implements":null,"inheritance":null,"inheritedMembers":null,"name":"max","nameWithType":"GridSize.max","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GridSize","remarks":null,"summary":"\nShorthand for writing <code>GridSize(int.MaxValue, int.MaxValue)</code>.\n","syntax":{"content":"public static readonly GridSize max { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.GridSize"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.GridSize.max"},{"children":null,"id":"sq2","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq2","nameWithType":"GridSize.sq2","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GridSize","remarks":null,"summary":"\nShorthand for writing <code>GridSize(2)</code>.\n","syntax":{"content":"public static readonly GridSize sq2 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.GridSize"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.GridSize.sq2"},{"children":null,"id":"sq4","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq4","nameWithType":"GridSize.sq4","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GridSize","remarks":null,"summary":"\nShorthand for writing <code>GridSize(4)</code>.\n","syntax":{"content":"public static readonly GridSize sq4 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.GridSize"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.GridSize.sq4"},{"children":null,"id":"sq8","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq8","nameWithType":"GridSize.sq8","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GridSize","remarks":null,"summary":"\nShorthand for writing <code>GridSize(8)</code>.\n","syntax":{"content":"public static readonly GridSize sq8 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.GridSize"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.GridSize.sq8"},{"children":null,"id":"sq16","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq16","nameWithType":"GridSize.sq16","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GridSize","remarks":null,"summary":"\nShorthand for writing <code>GridSize(16)</code>.\n","syntax":{"content":"public static readonly GridSize sq16 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.GridSize"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.GridSize.sq16"},{"children":null,"id":"sq32","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq32","nameWithType":"GridSize.sq32","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GridSize","remarks":null,"summary":"\nShorthand for writing <code>GridSize(32)</code>.\n","syntax":{"content":"public static readonly GridSize sq32 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.GridSize"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.GridSize.sq32"},{"children":null,"id":"sq64","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq64","nameWithType":"GridSize.sq64","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GridSize","remarks":null,"summary":"\nShorthand for writing <code>GridSize(64)</code>.\n","syntax":{"content":"public static readonly GridSize sq64 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.GridSize"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.GridSize.sq64"},{"children":null,"id":"sq128","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq128","nameWithType":"GridSize.sq128","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GridSize","remarks":null,"summary":"\nShorthand for writing <code>GridSize(128)</code>.\n","syntax":{"content":"public static readonly GridSize sq128 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.GridSize"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.GridSize.sq128"},{"children":null,"id":"sq256","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq256","nameWithType":"GridSize.sq256","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GridSize","remarks":null,"summary":"\nShorthand for writing <code>GridSize(256)</code>.\n","syntax":{"content":"public static readonly GridSize sq256 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.GridSize"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.GridSize.sq256"},{"children":null,"id":"sq512","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq512","nameWithType":"GridSize.sq512","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GridSize","remarks":null,"summary":"\nShorthand for writing <code>GridSize(512)</code>.\n","syntax":{"content":"public static readonly GridSize sq512 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.GridSize"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.GridSize.sq512"},{"children":null,"id":"sq1024","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq1024","nameWithType":"GridSize.sq1024","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GridSize","remarks":null,"summary":"\nShorthand for writing <code>GridSize(1024)</code>.\n","syntax":{"content":"public static readonly GridSize sq1024 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.GridSize"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.GridSize.sq1024"},{"children":null,"id":"sq2048","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq2048","nameWithType":"GridSize.sq2048","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GridSize","remarks":null,"summary":"\nShorthand for writing <code>GridSize(2048)</code>.\n","syntax":{"content":"public static readonly GridSize sq2048 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.GridSize"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.GridSize.sq2048"},{"children":null,"id":"sq4096","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq4096","nameWithType":"GridSize.sq4096","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GridSize","remarks":null,"summary":"\nShorthand for writing <code>GridSize(4096)</code>.\n","syntax":{"content":"public static readonly GridSize sq4096 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.GridSize"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.GridSize.sq4096"},{"children":null,"id":"sq8192","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq8192","nameWithType":"GridSize.sq8192","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GridSize","remarks":null,"summary":"\nShorthand for writing <code>GridSize(8192)</code>.\n","syntax":{"content":"public static readonly GridSize sq8192 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.GridSize"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.GridSize.sq8192"},{"children":null,"id":"rows","implements":null,"inheritance":null,"inheritedMembers":null,"name":"rows","nameWithType":"GridSize.rows","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GridSize","remarks":null,"summary":"\nThe number of rows in the grid.\n","syntax":{"content":"public int rows","parameters":null,"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.GridSize.rows"},{"children":null,"id":"columns","implements":null,"inheritance":null,"inheritedMembers":null,"name":"columns","nameWithType":"GridSize.columns","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GridSize","remarks":null,"summary":"\nThe number of columns in the grid.\n","syntax":{"content":"public int columns","parameters":null,"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.GridSize.columns"},{"children":null,"id":"area","implements":null,"inheritance":null,"inheritedMembers":null,"name":"area","nameWithType":"GridSize.area","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GridSize","remarks":null,"summary":"\nThe area of the grid (rows * columns) (Read only).\n","syntax":{"content":"public readonly int area { get; }","parameters":[],"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.GridSize.area"},{"children":null,"id":"#ctor(System.Int32,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GridSize(Int32, Int32)","nameWithType":"GridSize.GridSize(Int32, Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GridSize","remarks":null,"summary":"\nCreates a new grid size with the specified rows and columns.\n","syntax":{"content":"public GridSize(int rows = 0, int columns = 0)","parameters":[{"description":"The number of rows in the grid.","id":"rows","type":"System.Int32"},{"description":"The number of columns in the grid.","id":"columns","type":"System.Int32"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.GridSize.#ctor(System.Int32,System.Int32)"},{"children":null,"id":"#ctor(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GridSize(Int32)","nameWithType":"GridSize.GridSize(Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GridSize","remarks":null,"summary":"\nCreates a new grid size with uniform rows and columns.\n","syntax":{"content":"public GridSize(int size)","parameters":[{"description":"The uniform size of the grid.","id":"size","type":"System.Int32"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.GridSize.#ctor(System.Int32)"},{"children":null,"id":"CompareTo(Zigurous.Architecture.GridSize)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"CompareTo(GridSize)","nameWithType":"GridSize.CompareTo(GridSize)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GridSize","remarks":null,"summary":"\nCompares this instance with another and returns an integer that\nindicates whether this instance precedes, follows, or appears in the\nsame position in the sort order as the other instance.\n","syntax":{"content":"public int CompareTo(GridSize other)","parameters":[{"description":"The grid size to compare to.","id":"other","type":"Zigurous.Architecture.GridSize"}],"return":{"description":"\nGreater than zero if this instance follows the other, less than zero\nif this instance precedes the other, and zero if this instance has\nthe same position as the other.\n","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.GridSize.CompareTo(Zigurous.Architecture.GridSize)"},{"children":null,"id":"Equals(Zigurous.Architecture.GridSize)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Equals(GridSize)","nameWithType":"GridSize.Equals(GridSize)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GridSize","remarks":null,"summary":"\nChecks if the grid size is equal to another grid size.\n","syntax":{"content":"public bool Equals(GridSize other)","parameters":[{"description":"The grid size to compare to.","id":"other","type":"Zigurous.Architecture.GridSize"}],"return":{"description":"True if the grid sizes are equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.GridSize.Equals(Zigurous.Architecture.GridSize)"},{"children":null,"id":"Equals(System.Object)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Equals(Object)","nameWithType":"GridSize.Equals(Object)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GridSize","remarks":null,"summary":"\nChecks if the grid size is equal to another grid size.\n","syntax":{"content":"public override bool Equals(object other)","parameters":[{"description":"The object to compare to.","id":"other","type":"System.Object"}],"return":{"description":"True if the grid sizes are equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.GridSize.Equals(System.Object)"},{"children":null,"id":"GetHashCode","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetHashCode()","nameWithType":"GridSize.GetHashCode()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GridSize","remarks":null,"summary":"\nReturns the hash code of the grid size.\n","syntax":{"content":"public override int GetHashCode()","parameters":null,"return":{"description":"The hash code of the grid size.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.GridSize.GetHashCode"},{"children":null,"id":"ToString","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ToString()","nameWithType":"GridSize.ToString()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GridSize","remarks":null,"summary":"\nConverts the grid size to a string.\n","syntax":{"content":"public override string ToString()","parameters":null,"return":{"description":"The grid size as a string.","type":"System.String"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.GridSize.ToString"},{"children":null,"id":"op_Equality(Zigurous.Architecture.GridSize,Zigurous.Architecture.GridSize)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Equality(GridSize, GridSize)","nameWithType":"GridSize.Equality(GridSize, GridSize)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GridSize","remarks":null,"summary":"\nDetermines if two grid sizes are equal.\n","syntax":{"content":"public static bool operator ==(GridSize lhs, GridSize rhs)","parameters":[{"description":"The first grid size to compare.","id":"lhs","type":"Zigurous.Architecture.GridSize"},{"description":"The second grid size to compare.","id":"rhs","type":"Zigurous.Architecture.GridSize"}],"return":{"description":"True if the grid sizes are equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.GridSize.op_Equality(Zigurous.Architecture.GridSize,Zigurous.Architecture.GridSize)"},{"children":null,"id":"op_Inequality(Zigurous.Architecture.GridSize,Zigurous.Architecture.GridSize)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Inequality(GridSize, GridSize)","nameWithType":"GridSize.Inequality(GridSize, GridSize)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.GridSize","remarks":null,"summary":"\nDetermines if two grid sizes are not equal.\n","syntax":{"content":"public static bool operator !=(GridSize lhs, GridSize rhs)","parameters":[{"description":"The first grid size to compare.","id":"lhs","type":"Zigurous.Architecture.GridSize"},{"description":"The second grid size to compare.","id":"rhs","type":"Zigurous.Architecture.GridSize"}],"return":{"description":"True if the grid sizes are not equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.GridSize.op_Inequality(Zigurous.Architecture.GridSize,Zigurous.Architecture.GridSize)"}]},{"items":[{"children":["Zigurous.Architecture.HashCode.Combine(System.Int32,System.Int32)","Zigurous.Architecture.HashCode.Combine(System.Int32,System.Int32,System.Int32)","Zigurous.Architecture.HashCode.Combine(System.Int32,System.Int32,System.Int32,System.Int32)"],"id":"HashCode","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"HashCode","nameWithType":"HashCode","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nCombines multiple hash codes into a single value.\n","syntax":{"content":"public static class HashCode","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.HashCode"},{"children":null,"id":"Combine(System.Int32,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Combine(Int32, Int32)","nameWithType":"HashCode.Combine(Int32, Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.HashCode","remarks":null,"summary":"\nCombines two hash codes into one unique hash.\n","syntax":{"content":"public static int Combine(int hash1, int hash2)","parameters":[{"description":"The first hash.","id":"hash1","type":"System.Int32"},{"description":"The second hash.","id":"hash2","type":"System.Int32"}],"return":{"description":"The combined hash code.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.HashCode.Combine(System.Int32,System.Int32)"},{"children":null,"id":"Combine(System.Int32,System.Int32,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Combine(Int32, Int32, Int32)","nameWithType":"HashCode.Combine(Int32, Int32, Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.HashCode","remarks":null,"summary":"\nCombines three hash codes into one unique hash.\n","syntax":{"content":"public static int Combine(int hash1, int hash2, int hash3)","parameters":[{"description":"The first hash.","id":"hash1","type":"System.Int32"},{"description":"The second hash.","id":"hash2","type":"System.Int32"},{"description":"The third hash.","id":"hash3","type":"System.Int32"}],"return":{"description":"The combined hash code.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.HashCode.Combine(System.Int32,System.Int32,System.Int32)"},{"children":null,"id":"Combine(System.Int32,System.Int32,System.Int32,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Combine(Int32, Int32, Int32, Int32)","nameWithType":"HashCode.Combine(Int32, Int32, Int32, Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.HashCode","remarks":null,"summary":"\nCombines four hash codes into one unique hash.\n","syntax":{"content":"public static int Combine(int hash1, int hash2, int hash3, int hash4)","parameters":[{"description":"The first hash.","id":"hash1","type":"System.Int32"},{"description":"The second hash.","id":"hash2","type":"System.Int32"},{"description":"The third hash.","id":"hash3","type":"System.Int32"},{"description":"The fourth hash.","id":"hash4","type":"System.Int32"}],"return":{"description":"The combined hash code.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.HashCode.Combine(System.Int32,System.Int32,System.Int32,System.Int32)"}]},{"items":[{"children":["Zigurous.Architecture.HashSetExtensions.First``1(HashSet{``0},System.Predicate{``0})","Zigurous.Architecture.HashSetExtensions.ForEach``1(HashSet{``0},System.Action{``0})","Zigurous.Architecture.HashSetExtensions.IsAny``1(HashSet{``0},System.Predicate{``0})","Zigurous.Architecture.HashSetExtensions.IsEach``1(HashSet{``0},System.Predicate{``0})"],"id":"HashSetExtensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"HashSetExtensions","nameWithType":"HashSetExtensions","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nExtension methods for hash sets.\n","syntax":{"content":"public static class HashSetExtensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.HashSetExtensions"},{"children":null,"id":"First``1(HashSet{``0},System.Predicate{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"First<T>(HashSet<T>, Predicate<T>)","nameWithType":"HashSetExtensions.First<T>(HashSet<T>, Predicate<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.HashSetExtensions","remarks":null,"summary":"\nReturns the first element in the set that satisifies a predicate.\n","syntax":{"content":"public static T First<T>(this HashSet<T> set, Predicate<T> predicate)","parameters":[{"description":"The set to get the element from.","id":"set","type":"Global.HashSet{{T}}"},{"description":"The predicate to use.","id":"predicate","type":"System.Predicate{{T}}"}],"return":{"description":"The first element in the set that satisifies the predicate.","type":"{T}"},"typeParameters":[{"description":"The type of the elements in the set.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.HashSetExtensions.First``1(HashSet{``0},System.Predicate{``0})"},{"children":null,"id":"ForEach``1(HashSet{``0},System.Action{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ForEach<T>(HashSet<T>, Action<T>)","nameWithType":"HashSetExtensions.ForEach<T>(HashSet<T>, Action<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.HashSetExtensions","remarks":null,"summary":"\nInvokes an action on each element in the set. The element is passed\nas a parameter.\n","syntax":{"content":"public static void ForEach<T>(this HashSet<T> set, Action<T> action)","parameters":[{"description":"The set to iterate over.","id":"set","type":"Global.HashSet{{T}}"},{"description":"The action to invoke on each element.","id":"action","type":"System.Action{{T}}"}],"return":null,"typeParameters":[{"description":"The type of the elements in the set.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.HashSetExtensions.ForEach``1(HashSet{``0},System.Action{``0})"},{"children":null,"id":"IsAny``1(HashSet{``0},System.Predicate{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsAny<T>(HashSet<T>, Predicate<T>)","nameWithType":"HashSetExtensions.IsAny<T>(HashSet<T>, Predicate<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.HashSetExtensions","remarks":null,"summary":"\nChecks if any element in the set satisfies a predicate.\n","syntax":{"content":"public static bool IsAny<T>(this HashSet<T> set, Predicate<T> predicate)","parameters":[{"description":"The set to check.","id":"set","type":"Global.HashSet{{T}}"},{"description":"The predicate to use.","id":"predicate","type":"System.Predicate{{T}}"}],"return":{"description":"True if any element in the set satisfies the predicate.","type":"System.Boolean"},"typeParameters":[{"description":"The type of the elements in the set.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.HashSetExtensions.IsAny``1(HashSet{``0},System.Predicate{``0})"},{"children":null,"id":"IsEach``1(HashSet{``0},System.Predicate{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsEach<T>(HashSet<T>, Predicate<T>)","nameWithType":"HashSetExtensions.IsEach<T>(HashSet<T>, Predicate<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.HashSetExtensions","remarks":null,"summary":"\nChecks if each element in the set satisfies a predicate.\n","syntax":{"content":"public static bool IsEach<T>(this HashSet<T> set, Predicate<T> predicate)","parameters":[{"description":"The set to check.","id":"set","type":"Global.HashSet{{T}}"},{"description":"The predicate to use.","id":"predicate","type":"System.Predicate{{T}}"}],"return":{"description":"True if all elements in the set satisfy the predicate.","type":"System.Boolean"},"typeParameters":[{"description":"The type of the elements in the set.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.HashSetExtensions.IsEach``1(HashSet{``0},System.Predicate{``0})"}]},{"items":[{"children":["Zigurous.Architecture.Identifier.Guid","Zigurous.Architecture.Identifier.SerialNumber(System.Int32)","Zigurous.Architecture.Identifier.UnixTime"],"id":"Identifier","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"Identifier","nameWithType":"Identifier","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nGenerates identifiers.\n","syntax":{"content":"public static class Identifier","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.Identifier"},{"children":null,"id":"Guid","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Guid()","nameWithType":"Identifier.Guid()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Identifier","remarks":null,"summary":"\nGenerates a GUID string in a format similar to the following\n&quot;0f8fad5b-d9cb-469f-a165-70867728950e&quot;.\n","syntax":{"content":"public static string Guid()","parameters":null,"return":{"description":"The generated GUID.","type":"System.String"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Identifier.Guid"},{"children":null,"id":"SerialNumber(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SerialNumber(Int32)","nameWithType":"Identifier.SerialNumber(Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Identifier","remarks":null,"summary":"\nGenerates a serial number of the specified length in a format\nsimilar to the following &quot;4935E22CD7854C15&quot;.\n","syntax":{"content":"public static string SerialNumber(int length)","parameters":[{"description":"The length of the serial number","id":"length","type":"System.Int32"}],"return":{"description":"The generated serial number.","type":"System.String"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Identifier.SerialNumber(System.Int32)"},{"children":null,"id":"UnixTime","implements":null,"inheritance":null,"inheritedMembers":null,"name":"UnixTime()","nameWithType":"Identifier.UnixTime()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Identifier","remarks":"\nThis should not be used to guarantee uniqueness since ids generated\nwithin the same cycle will usually be identical.\n","summary":"\nCreates an identifier based on unix time. Since time is always\nincreasing, this value will be different than generations made in\nprevious cycles.\n","syntax":{"content":"public static long UnixTime()","parameters":null,"return":{"description":"The generated identifier.","type":"System.Int64"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Identifier.UnixTime"}]},{"items":[{"children":["Zigurous.Architecture.IntAccumulator.Add(System.Int32)","Zigurous.Architecture.IntAccumulator.Subtract(System.Int32)"],"id":"IntAccumulator","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ValueAccumulator{System.Int32}"],"inheritedMembers":["Zigurous.Architecture.ValueAccumulator{System.Int32}.values","Zigurous.Architecture.ValueAccumulator{System.Int32}.total","Zigurous.Architecture.ValueAccumulator{System.Int32}.count","Zigurous.Architecture.ValueAccumulator{System.Int32}.defaultValue","Zigurous.Architecture.ValueAccumulator{System.Int32}.GetValue(System.Int32)","Zigurous.Architecture.ValueAccumulator{System.Int32}.SetValue(System.Int32,System.Int32)","Zigurous.Architecture.ValueAccumulator{System.Int32}.RemoveValue(System.Int32)","Zigurous.Architecture.ValueAccumulator{System.Int32}.Clear"],"name":"IntAccumulator","nameWithType":"IntAccumulator","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nAccumulates int values into a single total value.\n","syntax":{"content":"public sealed class IntAccumulator : ValueAccumulator<int>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.IntAccumulator"},{"children":null,"id":"Add(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Add(Int32)","nameWithType":"IntAccumulator.Add(Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.IntAccumulator","remarks":null,"summary":"\nIncreases the accumulated total by a given value.\n","syntax":{"content":"protected override int Add(int value)","parameters":[{"description":"The value to add to the total.","id":"value","type":"System.Int32"}],"return":{"description":"The new total value.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.IntAccumulator.Add(System.Int32)"},{"children":null,"id":"Subtract(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Subtract(Int32)","nameWithType":"IntAccumulator.Subtract(Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.IntAccumulator","remarks":null,"summary":"\nDecreases the accumulated total by a given value.\n","syntax":{"content":"protected override int Subtract(int value)","parameters":[{"description":"The value to subtract from the total.","id":"value","type":"System.Int32"}],"return":{"description":"The new total value.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.IntAccumulator.Subtract(System.Int32)"}]},{"items":[{"children":["Zigurous.Architecture.IntRange.#ctor(System.Int32,System.Int32)","Zigurous.Architecture.IntRange.Clamp(System.Int32)","Zigurous.Architecture.IntRange.delta","Zigurous.Architecture.IntRange.Includes(System.Int32)","Zigurous.Architecture.IntRange.Includes(System.Int32,System.Boolean,System.Boolean)","Zigurous.Architecture.IntRange.InverseLerp(System.Int32)","Zigurous.Architecture.IntRange.Lerp(System.Single)","Zigurous.Architecture.IntRange.max","Zigurous.Architecture.IntRange.median","Zigurous.Architecture.IntRange.min","Zigurous.Architecture.IntRange.minMax","Zigurous.Architecture.IntRange.negative","Zigurous.Architecture.IntRange.one","Zigurous.Architecture.IntRange.positive","Zigurous.Architecture.IntRange.Random","Zigurous.Architecture.IntRange.RandomInclusive","Zigurous.Architecture.IntRange.zero"],"id":"IntRange","implements":["Zigurous.Architecture.INumberRange{System.Int32}","Zigurous.Architecture.IRange{System.Int32}"],"inheritance":null,"inheritedMembers":null,"name":"IntRange","nameWithType":"IntRange","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA range of int values.\n","syntax":{"content":"[Serializable]\npublic struct IntRange : INumberRange<int>, IRange<int>","parameters":null,"return":null,"typeParameters":null},"type":"Struct","uid":"Zigurous.Architecture.IntRange"},{"children":null,"id":"zero","implements":null,"inheritance":null,"inheritedMembers":null,"name":"zero","nameWithType":"IntRange.zero","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.IntRange","remarks":null,"summary":"\nShorthand for writing <code>IntRange(0, 0)</code>.\n","syntax":{"content":"public static readonly IntRange zero { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.IntRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.IntRange.zero"},{"children":null,"id":"one","implements":null,"inheritance":null,"inheritedMembers":null,"name":"one","nameWithType":"IntRange.one","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.IntRange","remarks":null,"summary":"\nShorthand for writing <code>IntRange(1, 1)</code>.\n","syntax":{"content":"public static readonly IntRange one { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.IntRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.IntRange.one"},{"children":null,"id":"positive","implements":null,"inheritance":null,"inheritedMembers":null,"name":"positive","nameWithType":"IntRange.positive","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.IntRange","remarks":null,"summary":"\nShorthand for writing <code>IntRange(0, int.MaxValue)</code>.\n","syntax":{"content":"public static readonly IntRange positive { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.IntRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.IntRange.positive"},{"children":null,"id":"negative","implements":null,"inheritance":null,"inheritedMembers":null,"name":"negative","nameWithType":"IntRange.negative","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.IntRange","remarks":null,"summary":"\nShorthand for writing <code>IntRange(int.MinValue, 0)</code>.\n","syntax":{"content":"public static readonly IntRange negative { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.IntRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.IntRange.negative"},{"children":null,"id":"minMax","implements":null,"inheritance":null,"inheritedMembers":null,"name":"minMax","nameWithType":"IntRange.minMax","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.IntRange","remarks":null,"summary":"\nShorthand for writing <code>IntRange(int.MinValue, int.MaxValue)</code>.\n","syntax":{"content":"public static readonly IntRange minMax { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.IntRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.IntRange.minMax"},{"children":null,"id":"min","implements":["Zigurous.Architecture.IRange{System.Int32}.min"],"inheritance":null,"inheritedMembers":null,"name":"min","nameWithType":"IntRange.min","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.IntRange","remarks":null,"summary":"\nThe lower bound of the range.\n","syntax":{"content":"public int min { get; set; }","parameters":[],"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.IntRange.min"},{"children":null,"id":"max","implements":["Zigurous.Architecture.IRange{System.Int32}.max"],"inheritance":null,"inheritedMembers":null,"name":"max","nameWithType":"IntRange.max","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.IntRange","remarks":null,"summary":"\nThe upper bound of the range.\n","syntax":{"content":"public int max { get; set; }","parameters":[],"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.IntRange.max"},{"children":null,"id":"delta","implements":["Zigurous.Architecture.INumberRange{System.Int32}.delta"],"inheritance":null,"inheritedMembers":null,"name":"delta","nameWithType":"IntRange.delta","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.IntRange","remarks":null,"summary":"\nThe difference between the maximum and minimum values (Read only).\n","syntax":{"content":"public readonly int delta { get; }","parameters":[],"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.IntRange.delta"},{"children":null,"id":"median","implements":["Zigurous.Architecture.INumberRange{System.Int32}.median"],"inheritance":null,"inheritedMembers":null,"name":"median","nameWithType":"IntRange.median","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.IntRange","remarks":null,"summary":"\nThe median value of the range (Read only).\n","syntax":{"content":"public readonly int median { get; }","parameters":[],"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.IntRange.median"},{"children":null,"id":"#ctor(System.Int32,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IntRange(Int32, Int32)","nameWithType":"IntRange.IntRange(Int32, Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.IntRange","remarks":null,"summary":"\nCreates a new range with the specified values.\n","syntax":{"content":"public IntRange(int min, int max)","parameters":[{"description":"The lower bound of the range.","id":"min","type":"System.Int32"},{"description":"The upper bound of the range.","id":"max","type":"System.Int32"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.IntRange.#ctor(System.Int32,System.Int32)"},{"children":null,"id":"Random","implements":["Zigurous.Architecture.INumberRange{System.Int32}.Random"],"inheritance":null,"inheritedMembers":null,"name":"Random()","nameWithType":"IntRange.Random()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.IntRange","remarks":null,"summary":"\nReturns a random value in the range [inclusive, exclusive).\n","syntax":{"content":"public int Random()","parameters":null,"return":{"description":"A random value in the range [inclusive, exclusive).","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.IntRange.Random"},{"children":null,"id":"RandomInclusive","implements":null,"inheritance":null,"inheritedMembers":null,"name":"RandomInclusive()","nameWithType":"IntRange.RandomInclusive()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.IntRange","remarks":null,"summary":"\nReturns a random value in the range [inclusive, inclusive].\n","syntax":{"content":"public int RandomInclusive()","parameters":null,"return":{"description":"A random value in the range [inclusive, inclusive].","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.IntRange.RandomInclusive"},{"children":null,"id":"Includes(System.Int32)","implements":["Zigurous.Architecture.IRange{System.Int32}.Includes(System.Int32)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Int32)","nameWithType":"IntRange.Includes(Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.IntRange","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(int value)","parameters":[{"description":"The value to check.","id":"value","type":"System.Int32"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.IntRange.Includes(System.Int32)"},{"children":null,"id":"Includes(System.Int32,System.Boolean,System.Boolean)","implements":["Zigurous.Architecture.IRange{System.Int32}.Includes(System.Int32,System.Boolean,System.Boolean)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Int32, Boolean, Boolean)","nameWithType":"IntRange.Includes(Int32, Boolean, Boolean)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.IntRange","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(int value, bool includeMin, bool includeMax)","parameters":[{"description":"The value to check.","id":"value","type":"System.Int32"},{"description":"The minimum value is inclusive if true, exclusive if false.","id":"includeMin","type":"System.Boolean"},{"description":"The maximum value is inclusive if true, exclusive if false.","id":"includeMax","type":"System.Boolean"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.IntRange.Includes(System.Int32,System.Boolean,System.Boolean)"},{"children":null,"id":"Clamp(System.Int32)","implements":["Zigurous.Architecture.INumberRange{System.Int32}.Clamp(System.Int32)"],"inheritance":null,"inheritedMembers":null,"name":"Clamp(Int32)","nameWithType":"IntRange.Clamp(Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.IntRange","remarks":null,"summary":"\nClamps a value to the range.\n","syntax":{"content":"public int Clamp(int value)","parameters":[{"description":"The value to clamp.","id":"value","type":"System.Int32"}],"return":{"description":"The clamped value.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.IntRange.Clamp(System.Int32)"},{"children":null,"id":"Lerp(System.Single)","implements":["Zigurous.Architecture.INumberRange{System.Int32}.Lerp(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"Lerp(Single)","nameWithType":"IntRange.Lerp(Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.IntRange","remarks":null,"summary":"\nLinearly interpolates between the range by <code data-dev-comment-type=\"paramref\" class=\"paramref\">t</code>.\n","syntax":{"content":"public int Lerp(float t)","parameters":[{"description":"The interpolant value between [0..1].","id":"t","type":"System.Single"}],"return":{"description":"The interpolated value.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.IntRange.Lerp(System.Single)"},{"children":null,"id":"InverseLerp(System.Int32)","implements":["Zigurous.Architecture.INumberRange{System.Int32}.InverseLerp(System.Int32)"],"inheritance":null,"inheritedMembers":null,"name":"InverseLerp(Int32)","nameWithType":"IntRange.InverseLerp(Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.IntRange","remarks":null,"summary":"\nCalculates the linear parameter t that produces the interpolant\nvalue within the range.\n","syntax":{"content":"public float InverseLerp(int value)","parameters":[{"description":"The value within the range you want to calculate.","id":"value","type":"System.Int32"}],"return":{"description":"The interpolant value between [0..1].","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.IntRange.InverseLerp(System.Int32)"}]},{"items":[{"children":["Zigurous.Architecture.IntReference.#ctor","Zigurous.Architecture.IntReference.#ctor(System.Int32)","Zigurous.Architecture.IntReference.#ctor(Zigurous.Architecture.IntVariable)","Zigurous.Architecture.IntReference.op_Implicit(Zigurous.Architecture.IntReference)~System.Int32"],"id":"IntReference","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ValueReference{System.Int32,Zigurous.Architecture.IntVariable}"],"inheritedMembers":["Zigurous.Architecture.ValueReference{System.Int32,Zigurous.Architecture.IntVariable}.useConstant","Zigurous.Architecture.ValueReference{System.Int32,Zigurous.Architecture.IntVariable}.constantValue","Zigurous.Architecture.ValueReference{System.Int32,Zigurous.Architecture.IntVariable}.variable","Zigurous.Architecture.ValueReference{System.Int32,Zigurous.Architecture.IntVariable}.value"],"name":"IntReference","nameWithType":"IntReference","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA reference to an int value, either a constant or <xref href=\"Zigurous.Architecture.IntVariable\" data-throw-if-not-resolved=\"false\"></xref>.\n","syntax":{"content":"[Serializable]\npublic class IntReference : ValueReference<int, IntVariable>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.IntReference"},{"children":null,"id":"#ctor","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IntReference()","nameWithType":"IntReference.IntReference()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.IntReference","remarks":null,"summary":"\nCreates a new int reference.\n","syntax":{"content":"public IntReference()","parameters":null,"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.IntReference.#ctor"},{"children":null,"id":"#ctor(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IntReference(Int32)","nameWithType":"IntReference.IntReference(Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.IntReference","remarks":null,"summary":"\nCreates a new int reference with the constant value.\n","syntax":{"content":"public IntReference(int value)","parameters":[{"description":"The constant value to set.","id":"value","type":"System.Int32"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.IntReference.#ctor(System.Int32)"},{"children":null,"id":"#ctor(Zigurous.Architecture.IntVariable)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IntReference(IntVariable)","nameWithType":"IntReference.IntReference(IntVariable)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.IntReference","remarks":null,"summary":"\nCreates a new int reference to the variable value.\n","syntax":{"content":"public IntReference(IntVariable variable)","parameters":[{"description":"The variable to reference.","id":"variable","type":"Zigurous.Architecture.IntVariable"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.IntReference.#ctor(Zigurous.Architecture.IntVariable)"},{"children":null,"id":"op_Implicit(Zigurous.Architecture.IntReference)~System.Int32","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Implicit(IntReference to Int32)","nameWithType":"IntReference.Implicit(IntReference to Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.IntReference","remarks":null,"summary":"\nImplicitly converts the reference to an int.\n","syntax":{"content":"public static implicit operator int (IntReference reference)","parameters":[{"description":"The reference to convert.","id":"reference","type":"Zigurous.Architecture.IntReference"}],"return":{"description":"The int value.","type":"System.Int32"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.IntReference.op_Implicit(Zigurous.Architecture.IntReference)~System.Int32"}]},{"items":[{"children":["Zigurous.Architecture.IntVariable.value"],"id":"IntVariable","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ScriptableVariable{System.Int32}"],"inheritedMembers":null,"name":"IntVariable","nameWithType":"IntVariable","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nAn int variable saved as a ScriptableObject.\n","syntax":{"content":"public class IntVariable : ScriptableVariable<int>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.IntVariable"},{"children":null,"id":"value","implements":null,"inheritance":null,"inheritedMembers":null,"name":"value","nameWithType":"IntVariable.value","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.IntVariable","remarks":null,"summary":"\nThe value of the variable.\n","syntax":{"content":"public override int value { get; set; }","parameters":[],"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.IntVariable.value"}]},{"items":[{"children":["Zigurous.Architecture.INumberRange`1.Clamp(`0)","Zigurous.Architecture.INumberRange`1.delta","Zigurous.Architecture.INumberRange`1.InverseLerp(`0)","Zigurous.Architecture.INumberRange`1.Lerp(System.Single)","Zigurous.Architecture.INumberRange`1.median","Zigurous.Architecture.INumberRange`1.Random"],"id":"INumberRange`1","implements":null,"inheritance":null,"inheritedMembers":["Zigurous.Architecture.IRange{{T}}.min","Zigurous.Architecture.IRange{{T}}.max","Zigurous.Architecture.IRange{{T}}.Includes({T})","Zigurous.Architecture.IRange{{T}}.Includes({T},System.Boolean,System.Boolean)"],"name":"INumberRange<T>","nameWithType":"INumberRange<T>","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA generic interface for a range of number values.\n","syntax":{"content":"public interface INumberRange<T> : IRange<T>","parameters":null,"return":null,"typeParameters":[{"description":"The type of values in the range.","id":"T"}]},"type":"Interface","uid":"Zigurous.Architecture.INumberRange`1"},{"children":null,"id":"delta","implements":null,"inheritance":null,"inheritedMembers":null,"name":"delta","nameWithType":"INumberRange<T>.delta","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.INumberRange`1","remarks":null,"summary":"\nThe difference between the maximum and minimum values (Read only).\n","syntax":{"content":"T delta { get; }","parameters":[],"return":{"description":null,"type":"{T}"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.INumberRange`1.delta"},{"children":null,"id":"median","implements":null,"inheritance":null,"inheritedMembers":null,"name":"median","nameWithType":"INumberRange<T>.median","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.INumberRange`1","remarks":null,"summary":"\nThe median value of the range (Read only).\n","syntax":{"content":"T median { get; }","parameters":[],"return":{"description":null,"type":"{T}"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.INumberRange`1.median"},{"children":null,"id":"Random","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Random()","nameWithType":"INumberRange<T>.Random()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.INumberRange`1","remarks":null,"summary":"\nReturns a random value in the range.\n","syntax":{"content":"T Random()","parameters":null,"return":{"description":"A random value in the range.","type":"{T}"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.INumberRange`1.Random"},{"children":null,"id":"Clamp(`0)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clamp(T)","nameWithType":"INumberRange<T>.Clamp(T)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.INumberRange`1","remarks":null,"summary":"\nClamps a value to the range.\n","syntax":{"content":"T Clamp(T value)","parameters":[{"description":"The value to clamp.","id":"value","type":"{T}"}],"return":{"description":"The clamped value.","type":"{T}"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.INumberRange`1.Clamp(`0)"},{"children":null,"id":"Lerp(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Lerp(Single)","nameWithType":"INumberRange<T>.Lerp(Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.INumberRange`1","remarks":null,"summary":"\nLinearly interpolates between the range by <code data-dev-comment-type=\"paramref\" class=\"paramref\">t</code>.\n","syntax":{"content":"T Lerp(float t)","parameters":[{"description":"The interpolant value between [0..1].","id":"t","type":"System.Single"}],"return":{"description":"The interpolated value.","type":"{T}"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.INumberRange`1.Lerp(System.Single)"},{"children":null,"id":"InverseLerp(`0)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"InverseLerp(T)","nameWithType":"INumberRange<T>.InverseLerp(T)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.INumberRange`1","remarks":null,"summary":"\nCalculates the linear parameter t that produces the interpolant\nvalue within the range.\n","syntax":{"content":"float InverseLerp(T value)","parameters":[{"description":"The value within the range you want to calculate.","id":"value","type":"{T}"}],"return":{"description":"The interpolant value between [0..1].","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.INumberRange`1.InverseLerp(`0)"}]},{"items":[{"children":["Zigurous.Architecture.IRange`1.Includes(`0)","Zigurous.Architecture.IRange`1.Includes(`0,System.Boolean,System.Boolean)","Zigurous.Architecture.IRange`1.max","Zigurous.Architecture.IRange`1.min"],"id":"IRange`1","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IRange<T>","nameWithType":"IRange<T>","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA generic interface for a range of values.\n","syntax":{"content":"public interface IRange<T>","parameters":null,"return":null,"typeParameters":[{"description":"The type of values in the range.","id":"T"}]},"type":"Interface","uid":"Zigurous.Architecture.IRange`1"},{"children":null,"id":"min","implements":null,"inheritance":null,"inheritedMembers":null,"name":"min","nameWithType":"IRange<T>.min","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.IRange`1","remarks":null,"summary":"\nThe lower bound of the range.\n","syntax":{"content":"T min { get; set; }","parameters":[],"return":{"description":null,"type":"{T}"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.IRange`1.min"},{"children":null,"id":"max","implements":null,"inheritance":null,"inheritedMembers":null,"name":"max","nameWithType":"IRange<T>.max","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.IRange`1","remarks":null,"summary":"\nThe upper bound of the range.\n","syntax":{"content":"T max { get; set; }","parameters":[],"return":{"description":null,"type":"{T}"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.IRange`1.max"},{"children":null,"id":"Includes(`0)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Includes(T)","nameWithType":"IRange<T>.Includes(T)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.IRange`1","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"bool Includes(T value)","parameters":[{"description":"The value to check.","id":"value","type":"{T}"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.IRange`1.Includes(`0)"},{"children":null,"id":"Includes(`0,System.Boolean,System.Boolean)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Includes(T, Boolean, Boolean)","nameWithType":"IRange<T>.Includes(T, Boolean, Boolean)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.IRange`1","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"bool Includes(T value, bool includeMin, bool includeMax)","parameters":[{"description":"The value to check.","id":"value","type":"{T}"},{"description":"The minimum value is inclusive if true, exclusive if false.","id":"includeMin","type":"System.Boolean"},{"description":"The maximum value is inclusive if true, exclusive if false.","id":"includeMax","type":"System.Boolean"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.IRange`1.Includes(`0,System.Boolean,System.Boolean)"}]},{"items":[{"children":["Zigurous.Architecture.IScriptableObjectResettable.ResetValues"],"id":"IScriptableObjectResettable","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IScriptableObjectResettable","nameWithType":"IScriptableObjectResettable","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA type of ScriptableObject that can reset its values.\n","syntax":{"content":"public interface IScriptableObjectResettable","parameters":null,"return":null,"typeParameters":null},"type":"Interface","uid":"Zigurous.Architecture.IScriptableObjectResettable"},{"children":null,"id":"ResetValues","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ResetValues()","nameWithType":"IScriptableObjectResettable.ResetValues()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.IScriptableObjectResettable","remarks":null,"summary":"\nResets the values of the ScriptableObject.\n","syntax":{"content":"void ResetValues()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.IScriptableObjectResettable.ResetValues"}]},{"items":[{"children":[],"id":"LateUpdateStrategy","implements":null,"inheritance":["System.Object","Zigurous.Architecture.UpdateStrategy"],"inheritedMembers":["Zigurous.Architecture.UpdateStrategy.Execute(System.Single)","Zigurous.Architecture.UpdateStrategy.Register(Zigurous.Architecture.UpdateStrategy.UpdateAction)","Zigurous.Architecture.UpdateStrategy.Unregister(Zigurous.Architecture.UpdateStrategy.UpdateAction)"],"name":"LateUpdateStrategy","nameWithType":"LateUpdateStrategy","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nAn update strategy executed during the late update loop.\n","syntax":{"content":"public sealed class LateUpdateStrategy : UpdateStrategy","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.LateUpdateStrategy"}]},{"items":[{"children":[],"id":"ListExtensions.Reducer`2","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ListExtensions.Reducer<TSum, TItem>","nameWithType":"ListExtensions.Reducer<TSum, TItem>","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA function delegate that reduces a list into a single value.\n","syntax":{"content":"public delegate TSum Reducer<TSum, TItem>(TSum sum, TItem item);","parameters":[{"description":"The current sum.","id":"sum","type":"{TSum}"},{"description":"The current item being reduced.","id":"item","type":"{TItem}"}],"return":{"description":"The reduced value.","type":"{TSum}"},"typeParameters":[{"description":"The type of the reduced value.","id":"TSum"},{"description":"The type of items in the list.","id":"TItem"}]},"type":"Delegate","uid":"Zigurous.Architecture.ListExtensions.Reducer`2"}]},{"items":[{"children":["Zigurous.Architecture.LoadScene.async","Zigurous.Architecture.LoadScene.delay","Zigurous.Architecture.LoadScene.Load","Zigurous.Architecture.LoadScene.LoadImmediate","Zigurous.Architecture.LoadScene.loadOnStart","Zigurous.Architecture.LoadScene.mode","Zigurous.Architecture.LoadScene.scene"],"id":"LoadScene","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"LoadScene","nameWithType":"LoadScene","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nLoads a scene using a specified set of options.\n","syntax":{"content":"public sealed class LoadScene : MonoBehaviour","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.LoadScene"},{"children":null,"id":"mode","implements":null,"inheritance":null,"inheritedMembers":null,"name":"mode","nameWithType":"LoadScene.mode","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.LoadScene","remarks":null,"summary":"\nThe mode to use for loading the scene.\n","syntax":{"content":"public LoadSceneMode mode","parameters":null,"return":{"description":null,"type":"Global.LoadSceneMode"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.LoadScene.mode"},{"children":null,"id":"scene","implements":null,"inheritance":null,"inheritedMembers":null,"name":"scene","nameWithType":"LoadScene.scene","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.LoadScene","remarks":null,"summary":"\nThe name of the scene to load.\n","syntax":{"content":"public string scene","parameters":null,"return":{"description":null,"type":"System.String"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.LoadScene.scene"},{"children":null,"id":"delay","implements":null,"inheritance":null,"inheritedMembers":null,"name":"delay","nameWithType":"LoadScene.delay","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.LoadScene","remarks":null,"summary":"\nThe delay in seconds before loading the scene.\n","syntax":{"content":"public float delay","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.LoadScene.delay"},{"children":null,"id":"loadOnStart","implements":null,"inheritance":null,"inheritedMembers":null,"name":"loadOnStart","nameWithType":"LoadScene.loadOnStart","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.LoadScene","remarks":null,"summary":"\nLoads the scene when the script starts.\n","syntax":{"content":"public bool loadOnStart","parameters":null,"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.LoadScene.loadOnStart"},{"children":null,"id":"async","implements":null,"inheritance":null,"inheritedMembers":null,"name":"async","nameWithType":"LoadScene.async","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.LoadScene","remarks":null,"summary":"\nLoads the scene asyncronously in the background.\n","syntax":{"content":"public bool async","parameters":null,"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.LoadScene.async"},{"children":null,"id":"Load","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Load()","nameWithType":"LoadScene.Load()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.LoadScene","remarks":null,"summary":"\nLoads the scene using the settings provided in the script.\n","syntax":{"content":"public void Load()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.LoadScene.Load"},{"children":null,"id":"LoadImmediate","implements":null,"inheritance":null,"inheritedMembers":null,"name":"LoadImmediate()","nameWithType":"LoadScene.LoadImmediate()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.LoadScene","remarks":null,"summary":"\nLoads the scene using the settings provided in the script while\nignoring any delay.\n","syntax":{"content":"public void LoadImmediate()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.LoadScene.LoadImmediate"}]},{"items":[{"children":["Zigurous.Architecture.LongReference.#ctor","Zigurous.Architecture.LongReference.#ctor(System.Int64)","Zigurous.Architecture.LongReference.#ctor(Zigurous.Architecture.LongVariable)","Zigurous.Architecture.LongReference.op_Implicit(Zigurous.Architecture.LongReference)~System.Int64"],"id":"LongReference","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ValueReference{System.Int64,Zigurous.Architecture.LongVariable}"],"inheritedMembers":["Zigurous.Architecture.ValueReference{System.Int64,Zigurous.Architecture.LongVariable}.useConstant","Zigurous.Architecture.ValueReference{System.Int64,Zigurous.Architecture.LongVariable}.constantValue","Zigurous.Architecture.ValueReference{System.Int64,Zigurous.Architecture.LongVariable}.variable","Zigurous.Architecture.ValueReference{System.Int64,Zigurous.Architecture.LongVariable}.value"],"name":"LongReference","nameWithType":"LongReference","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA reference to a long value, either a constant or <xref href=\"Zigurous.Architecture.LongVariable\" data-throw-if-not-resolved=\"false\"></xref>.\n","syntax":{"content":"[Serializable]\npublic class LongReference : ValueReference<long, LongVariable>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.LongReference"},{"children":null,"id":"#ctor","implements":null,"inheritance":null,"inheritedMembers":null,"name":"LongReference()","nameWithType":"LongReference.LongReference()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.LongReference","remarks":null,"summary":"\nCreates a new long reference.\n","syntax":{"content":"public LongReference()","parameters":null,"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.LongReference.#ctor"},{"children":null,"id":"#ctor(System.Int64)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"LongReference(Int64)","nameWithType":"LongReference.LongReference(Int64)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.LongReference","remarks":null,"summary":"\nCreates a new long reference with the constant value.\n","syntax":{"content":"public LongReference(long value)","parameters":[{"description":"The constant value to set.","id":"value","type":"System.Int64"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.LongReference.#ctor(System.Int64)"},{"children":null,"id":"#ctor(Zigurous.Architecture.LongVariable)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"LongReference(LongVariable)","nameWithType":"LongReference.LongReference(LongVariable)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.LongReference","remarks":null,"summary":"\nCreates a new long reference to the variable value.\n","syntax":{"content":"public LongReference(LongVariable variable)","parameters":[{"description":"The variable to reference.","id":"variable","type":"Zigurous.Architecture.LongVariable"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.LongReference.#ctor(Zigurous.Architecture.LongVariable)"},{"children":null,"id":"op_Implicit(Zigurous.Architecture.LongReference)~System.Int64","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Implicit(LongReference to Int64)","nameWithType":"LongReference.Implicit(LongReference to Int64)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.LongReference","remarks":null,"summary":"\nImplicitly converts the reference to a long.\n","syntax":{"content":"public static implicit operator long (LongReference reference)","parameters":[{"description":"The reference to convert.","id":"reference","type":"Zigurous.Architecture.LongReference"}],"return":{"description":"The long value.","type":"System.Int64"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.LongReference.op_Implicit(Zigurous.Architecture.LongReference)~System.Int64"}]},{"items":[{"children":["Zigurous.Architecture.LongVariable.value"],"id":"LongVariable","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ScriptableVariable{System.Int64}"],"inheritedMembers":null,"name":"LongVariable","nameWithType":"LongVariable","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA long variable saved as a ScriptableObject.\n","syntax":{"content":"public class LongVariable : ScriptableVariable<long>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.LongVariable"},{"children":null,"id":"value","implements":null,"inheritance":null,"inheritedMembers":null,"name":"value","nameWithType":"LongVariable.value","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.LongVariable","remarks":null,"summary":"\nThe value of the variable.\n","syntax":{"content":"public override long value { get; set; }","parameters":[],"return":{"description":null,"type":"System.Int64"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.LongVariable.value"}]},{"items":[{"children":["Zigurous.Architecture.MonoBehaviourExtensions.Repeat(MonoBehaviour,System.Action,System.Single)","Zigurous.Architecture.MonoBehaviourExtensions.RepeatUntil(MonoBehaviour,System.Func{System.Boolean},System.Action,System.Single)","Zigurous.Architecture.MonoBehaviourExtensions.RepeatWhile(MonoBehaviour,System.Func{System.Boolean},System.Action,System.Single)","Zigurous.Architecture.MonoBehaviourExtensions.Wait(MonoBehaviour,System.Single,System.Action)","Zigurous.Architecture.MonoBehaviourExtensions.Wait``1(MonoBehaviour,System.Single,System.Action{``0},``0)"],"id":"MonoBehaviourExtensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"MonoBehaviourExtensions","nameWithType":"MonoBehaviourExtensions","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nExtension methods for Unity MonoBehaviors.\n","syntax":{"content":"public static class MonoBehaviourExtensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.MonoBehaviourExtensions"},{"children":null,"id":"Wait(MonoBehaviour,System.Single,System.Action)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Wait(MonoBehaviour, Single, Action)","nameWithType":"MonoBehaviourExtensions.Wait(MonoBehaviour, Single, Action)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.MonoBehaviourExtensions","remarks":null,"summary":"\nExecutes an action after a delay.\n","syntax":{"content":"public static Coroutine Wait(this MonoBehaviour behavior, float delay, Action action)","parameters":[{"description":"The behavior to execute the action on.","id":"behavior","type":"Global.MonoBehaviour"},{"description":"The delay in seconds.","id":"delay","type":"System.Single"},{"description":"The action to execute.","id":"action","type":"System.Action"}],"return":{"description":"The coroutine.","type":"Global.Coroutine"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.MonoBehaviourExtensions.Wait(MonoBehaviour,System.Single,System.Action)"},{"children":null,"id":"Wait``1(MonoBehaviour,System.Single,System.Action{``0},``0)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Wait<T>(MonoBehaviour, Single, Action<T>, T)","nameWithType":"MonoBehaviourExtensions.Wait<T>(MonoBehaviour, Single, Action<T>, T)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.MonoBehaviourExtensions","remarks":null,"summary":"\nExecutes an action after a delay.\n","syntax":{"content":"public static Coroutine Wait<T>(this MonoBehaviour behavior, float delay, Action<T> action, T obj)","parameters":[{"description":"The behavior to execute the action on.","id":"behavior","type":"Global.MonoBehaviour"},{"description":"The delay in seconds.","id":"delay","type":"System.Single"},{"description":"The action to execute.","id":"action","type":"System.Action{{T}}"},{"description":"The object to pass to the action.","id":"obj","type":"{T}"}],"return":{"description":"The coroutine.","type":"Global.Coroutine"},"typeParameters":[{"description":"The type of the object to pass to the action.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.MonoBehaviourExtensions.Wait``1(MonoBehaviour,System.Single,System.Action{``0},``0)"},{"children":null,"id":"Repeat(MonoBehaviour,System.Action,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Repeat(MonoBehaviour, Action, Single)","nameWithType":"MonoBehaviourExtensions.Repeat(MonoBehaviour, Action, Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.MonoBehaviourExtensions","remarks":null,"summary":"\nRepeats an action at a set interval.\n","syntax":{"content":"public static Coroutine Repeat(this MonoBehaviour behavior, Action action, float interval)","parameters":[{"description":"The behavior to execute the action on.","id":"behavior","type":"Global.MonoBehaviour"},{"description":"The action to execute.","id":"action","type":"System.Action"},{"description":"The interval to repeat the action, in seconds.","id":"interval","type":"System.Single"}],"return":{"description":"The coroutine.","type":"Global.Coroutine"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.MonoBehaviourExtensions.Repeat(MonoBehaviour,System.Action,System.Single)"},{"children":null,"id":"RepeatWhile(MonoBehaviour,System.Func{System.Boolean},System.Action,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"RepeatWhile(MonoBehaviour, Func<Boolean>, Action, Single)","nameWithType":"MonoBehaviourExtensions.RepeatWhile(MonoBehaviour, Func<Boolean>, Action, Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.MonoBehaviourExtensions","remarks":null,"summary":"\nRepeats an action at a set interval while a condition is true.\n","syntax":{"content":"public static Coroutine RepeatWhile(this MonoBehaviour behaviour, Func<bool> condition, Action action, float interval)","parameters":[{"description":null,"id":"behaviour","type":"Global.MonoBehaviour"},{"description":"The condition to check.","id":"condition","type":"System.Func{System.Boolean}"},{"description":"The action to execute.","id":"action","type":"System.Action"},{"description":"The interval to repeat the action, in seconds.","id":"interval","type":"System.Single"}],"return":{"description":"The coroutine.","type":"Global.Coroutine"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.MonoBehaviourExtensions.RepeatWhile(MonoBehaviour,System.Func{System.Boolean},System.Action,System.Single)"},{"children":null,"id":"RepeatUntil(MonoBehaviour,System.Func{System.Boolean},System.Action,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"RepeatUntil(MonoBehaviour, Func<Boolean>, Action, Single)","nameWithType":"MonoBehaviourExtensions.RepeatUntil(MonoBehaviour, Func<Boolean>, Action, Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.MonoBehaviourExtensions","remarks":null,"summary":"\nRepeats an action at a set interval until a condition is met.\n","syntax":{"content":"public static Coroutine RepeatUntil(this MonoBehaviour behaviour, Func<bool> condition, Action action, float interval)","parameters":[{"description":null,"id":"behaviour","type":"Global.MonoBehaviour"},{"description":"The condition to check.","id":"condition","type":"System.Func{System.Boolean}"},{"description":"The action to execute.","id":"action","type":"System.Action"},{"description":"The interval to repeat the action, in seconds.","id":"interval","type":"System.Single"}],"return":{"description":"The coroutine.","type":"Global.Coroutine"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.MonoBehaviourExtensions.RepeatUntil(MonoBehaviour,System.Func{System.Boolean},System.Action,System.Single)"}]},{"items":[{"children":[],"id":"NormalUpdateStrategy","implements":null,"inheritance":["System.Object","Zigurous.Architecture.UpdateStrategy"],"inheritedMembers":["Zigurous.Architecture.UpdateStrategy.Execute(System.Single)","Zigurous.Architecture.UpdateStrategy.Register(Zigurous.Architecture.UpdateStrategy.UpdateAction)","Zigurous.Architecture.UpdateStrategy.Unregister(Zigurous.Architecture.UpdateStrategy.UpdateAction)"],"name":"NormalUpdateStrategy","nameWithType":"NormalUpdateStrategy","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nAn update strategy executed during the normal update loop.\n","syntax":{"content":"public sealed class NormalUpdateStrategy : UpdateStrategy","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.NormalUpdateStrategy"}]},{"items":[{"children":["Zigurous.Architecture.ObjectExtensions.FindNonNullReference``1(``0)"],"id":"ObjectExtensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"ObjectExtensions","nameWithType":"ObjectExtensions","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nExtension methods for Unity objects.\n","syntax":{"content":"public static class ObjectExtensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.ObjectExtensions"},{"children":null,"id":"FindNonNullReference``1(``0)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"FindNonNullReference<T>(T)","nameWithType":"ObjectExtensions.FindNonNullReference<T>(T)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ObjectExtensions","remarks":null,"summary":"\nFinds a reference to the specified object type in the scene. If the\nobject reference is already assigned, then the current reference\nwill be returned.\n","syntax":{"content":"public static T FindNonNullReference<T>(this T obj)","parameters":[{"description":"The object to find the reference for.","id":"obj","type":"{T}"}],"return":{"description":"The reference to the object if it exists.","type":"{T}"},"typeParameters":[{"description":"The type of object to find.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ObjectExtensions.FindNonNullReference``1(``0)"}]},{"items":[{"children":["Zigurous.Architecture.PathEscaper.Escape(System.String)","Zigurous.Architecture.PathEscaper.Escape(System.String,Regex,System.String)","Zigurous.Architecture.PathEscaper.escapeCharacter","Zigurous.Architecture.PathEscaper.EscapeRegex(System.String,System.String)","Zigurous.Architecture.PathEscaper.invalidCharacters","Zigurous.Architecture.PathEscaper.Unescape(System.String)","Zigurous.Architecture.PathEscaper.Unescape(System.String,Regex)","Zigurous.Architecture.PathEscaper.UnescapeRegex(System.String)"],"id":"PathEscaper","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"PathEscaper","nameWithType":"PathEscaper","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nHandles escaping and unescaping paths.\n","syntax":{"content":"public static class PathEscaper","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.PathEscaper"},{"children":null,"id":"escapeCharacter","implements":null,"inheritance":null,"inheritedMembers":null,"name":"escapeCharacter","nameWithType":"PathEscaper.escapeCharacter","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.PathEscaper","remarks":null,"summary":"\nThe default escape character to use.\n","syntax":{"content":"public static string escapeCharacter { get; set; }","parameters":[],"return":{"description":null,"type":"System.String"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.PathEscaper.escapeCharacter"},{"children":null,"id":"invalidCharacters","implements":null,"inheritance":null,"inheritedMembers":null,"name":"invalidCharacters","nameWithType":"PathEscaper.invalidCharacters","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.PathEscaper","remarks":null,"summary":"\nThe default invalid characters to escape.\n","syntax":{"content":"public static string invalidCharacters { get; set; }","parameters":[],"return":{"description":null,"type":"System.String"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.PathEscaper.invalidCharacters"},{"children":null,"id":"Escape(System.String)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Escape(String)","nameWithType":"PathEscaper.Escape(String)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.PathEscaper","remarks":null,"summary":"\nEscapes the path.\n","syntax":{"content":"public static string Escape(string path)","parameters":[{"description":"The path to escape.","id":"path","type":"System.String"}],"return":{"description":"The escaped path.","type":"System.String"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.PathEscaper.Escape(System.String)"},{"children":null,"id":"Escape(System.String,Regex,System.String)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Escape(String, Regex, String)","nameWithType":"PathEscaper.Escape(String, Regex, String)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.PathEscaper","remarks":null,"summary":"\nEscapes the path.\n","syntax":{"content":"public static string Escape(string path, Regex regex, string escapeCharacter)","parameters":[{"description":"The path to escape.","id":"path","type":"System.String"},{"description":"The escape regex to use.","id":"regex","type":"Global.Regex"},{"description":"The character used to replace invalid characters, e.g. &quot;_&quot;.","id":"escapeCharacter","type":"System.String"}],"return":{"description":"The escaped path.","type":"System.String"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.PathEscaper.Escape(System.String,Regex,System.String)"},{"children":null,"id":"EscapeRegex(System.String,System.String)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"EscapeRegex(String, String)","nameWithType":"PathEscaper.EscapeRegex(String, String)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.PathEscaper","remarks":null,"summary":"\nCreates a regex for escaping paths.\n","syntax":{"content":"public static Regex EscapeRegex(string escapeCharacter, string invalidCharacters)","parameters":[{"description":"The character used to replace invalid characters, e.g. &quot;_&quot;.","id":"escapeCharacter","type":"System.String"},{"description":"The invalid characters that will be replaced by the escaped character.","id":"invalidCharacters","type":"System.String"}],"return":{"description":"The escape regex.","type":"Global.Regex"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.PathEscaper.EscapeRegex(System.String,System.String)"},{"children":null,"id":"Unescape(System.String)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Unescape(String)","nameWithType":"PathEscaper.Unescape(String)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.PathEscaper","remarks":null,"summary":"\nUnescapes the path.\n","syntax":{"content":"public static string Unescape(string path)","parameters":[{"description":"The path to unescape.","id":"path","type":"System.String"}],"return":{"description":"The unescaped path.","type":"System.String"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.PathEscaper.Unescape(System.String)"},{"children":null,"id":"Unescape(System.String,Regex)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Unescape(String, Regex)","nameWithType":"PathEscaper.Unescape(String, Regex)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.PathEscaper","remarks":null,"summary":"\nUnescapes the path.\n","syntax":{"content":"public static string Unescape(string path, Regex regex)","parameters":[{"description":"The path to unescape.","id":"path","type":"System.String"},{"description":"The unescape regex to use.","id":"regex","type":"Global.Regex"}],"return":{"description":"The unescaped path.","type":"System.String"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.PathEscaper.Unescape(System.String,Regex)"},{"children":null,"id":"UnescapeRegex(System.String)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"UnescapeRegex(String)","nameWithType":"PathEscaper.UnescapeRegex(String)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.PathEscaper","remarks":null,"summary":"\nCreates a regex for unescaping paths.\n","syntax":{"content":"public static Regex UnescapeRegex(string escapeCharacter)","parameters":[{"description":"The character used to replace invalid characters, e.g. &quot;_&quot;.","id":"escapeCharacter","type":"System.String"}],"return":{"description":"The unescape regex.","type":"Global.Regex"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.PathEscaper.UnescapeRegex(System.String)"}]},{"items":[{"children":["Zigurous.Architecture.Quantity`1.#ctor(`0,System.Int32)","Zigurous.Architecture.Quantity`1.amount","Zigurous.Architecture.Quantity`1.entity","Zigurous.Architecture.Quantity`1.Equals(System.Object)","Zigurous.Architecture.Quantity`1.Equals(Zigurous.Architecture.Quantity{`0})","Zigurous.Architecture.Quantity`1.GetHashCode","Zigurous.Architecture.Quantity`1.op_Equality(Zigurous.Architecture.Quantity{`0},Zigurous.Architecture.Quantity{`0})","Zigurous.Architecture.Quantity`1.op_Inequality(Zigurous.Architecture.Quantity{`0},Zigurous.Architecture.Quantity{`0})","Zigurous.Architecture.Quantity`1.ToString"],"id":"Quantity`1","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Quantity<T>","nameWithType":"Quantity<T>","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nStores a quantity of a given entity type.\n","syntax":{"content":"[Serializable]\npublic struct Quantity<T> : IEquatable<Quantity<T>> where T : IEquatable<T>","parameters":null,"return":null,"typeParameters":[{"description":"The type of entity being counted.","id":"T"}]},"type":"Struct","uid":"Zigurous.Architecture.Quantity`1"},{"children":null,"id":"entity","implements":null,"inheritance":null,"inheritedMembers":null,"name":"entity","nameWithType":"Quantity<T>.entity","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Quantity`1","remarks":null,"summary":"\nThe entity being counted.\n","syntax":{"content":"public T entity","parameters":null,"return":{"description":null,"type":"{T}"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.Quantity`1.entity"},{"children":null,"id":"amount","implements":null,"inheritance":null,"inheritedMembers":null,"name":"amount","nameWithType":"Quantity<T>.amount","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Quantity`1","remarks":null,"summary":"\nThe number of entities.\n","syntax":{"content":"public int amount","parameters":null,"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.Quantity`1.amount"},{"children":null,"id":"#ctor(`0,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Quantity(T, Int32)","nameWithType":"Quantity<T>.Quantity(T, Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Quantity`1","remarks":null,"summary":"\nCreates a new quantity with the specified amount of a given entity.\n","syntax":{"content":"public Quantity(T entity, int amount)","parameters":[{"description":"The entity being counted.","id":"entity","type":"{T}"},{"description":"The amount of entities.","id":"amount","type":"System.Int32"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.Quantity`1.#ctor(`0,System.Int32)"},{"children":null,"id":"Equals(Zigurous.Architecture.Quantity{`0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Equals(Quantity<T>)","nameWithType":"Quantity<T>.Equals(Quantity<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Quantity`1","remarks":null,"summary":"\nDetermines if the quantity is equal to another quantity.\n","syntax":{"content":"public bool Equals(Quantity<T> other)","parameters":[{"description":"The quantity to compare to.","id":"other","type":"Zigurous.Architecture.Quantity`1"}],"return":{"description":"True if the quantities are equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Quantity`1.Equals(Zigurous.Architecture.Quantity{`0})"},{"children":null,"id":"Equals(System.Object)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Equals(Object)","nameWithType":"Quantity<T>.Equals(Object)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Quantity`1","remarks":null,"summary":"\nDetermines if the quantity is equal to another quantity.\n","syntax":{"content":"public override bool Equals(object other)","parameters":[{"description":"The object to compare to.","id":"other","type":"System.Object"}],"return":{"description":"True if the quantities are equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Quantity`1.Equals(System.Object)"},{"children":null,"id":"GetHashCode","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetHashCode()","nameWithType":"Quantity<T>.GetHashCode()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Quantity`1","remarks":null,"summary":"\nReturns the hash code of the quantity.\n","syntax":{"content":"public override int GetHashCode()","parameters":null,"return":{"description":"The hash code of the quantity.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Quantity`1.GetHashCode"},{"children":null,"id":"ToString","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ToString()","nameWithType":"Quantity<T>.ToString()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Quantity`1","remarks":null,"summary":"\nConverts the quantity to a string.\n","syntax":{"content":"public override string ToString()","parameters":null,"return":{"description":"The quantity as a string.","type":"System.String"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Quantity`1.ToString"},{"children":null,"id":"op_Equality(Zigurous.Architecture.Quantity{`0},Zigurous.Architecture.Quantity{`0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Equality(Quantity<T>, Quantity<T>)","nameWithType":"Quantity<T>.Equality(Quantity<T>, Quantity<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Quantity`1","remarks":null,"summary":"\nDetermines if two quantities are equal.\n","syntax":{"content":"public static bool operator ==(Quantity<T> lhs, Quantity<T> rhs)","parameters":[{"description":"The first quantity to compare.","id":"lhs","type":"Zigurous.Architecture.Quantity`1"},{"description":"The second quantity to compare.","id":"rhs","type":"Zigurous.Architecture.Quantity`1"}],"return":{"description":"True if the quantities are equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.Quantity`1.op_Equality(Zigurous.Architecture.Quantity{`0},Zigurous.Architecture.Quantity{`0})"},{"children":null,"id":"op_Inequality(Zigurous.Architecture.Quantity{`0},Zigurous.Architecture.Quantity{`0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Inequality(Quantity<T>, Quantity<T>)","nameWithType":"Quantity<T>.Inequality(Quantity<T>, Quantity<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Quantity`1","remarks":null,"summary":"\nDetermines if two quantities are not equal.\n","syntax":{"content":"public static bool operator !=(Quantity<T> lhs, Quantity<T> rhs)","parameters":[{"description":"The first quantity to compare.","id":"lhs","type":"Zigurous.Architecture.Quantity`1"},{"description":"The second quantity to compare.","id":"rhs","type":"Zigurous.Architecture.Quantity`1"}],"return":{"description":"True if the quantities are not equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.Quantity`1.op_Inequality(Zigurous.Architecture.Quantity{`0},Zigurous.Architecture.Quantity{`0})"}]},{"items":[{"children":["Zigurous.Architecture.QuaternionAccumulator.Add(Quaternion)","Zigurous.Architecture.QuaternionAccumulator.defaultValue","Zigurous.Architecture.QuaternionAccumulator.Subtract(Quaternion)"],"id":"QuaternionAccumulator","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ValueAccumulator{Quaternion}"],"inheritedMembers":["Zigurous.Architecture.ValueAccumulator{Quaternion}.values","Zigurous.Architecture.ValueAccumulator{Quaternion}.total","Zigurous.Architecture.ValueAccumulator{Quaternion}.count","Zigurous.Architecture.ValueAccumulator{Quaternion}.GetValue(System.Int32)","Zigurous.Architecture.ValueAccumulator{Quaternion}.SetValue(System.Int32,Quaternion)","Zigurous.Architecture.ValueAccumulator{Quaternion}.RemoveValue(System.Int32)","Zigurous.Architecture.ValueAccumulator{Quaternion}.Clear"],"name":"QuaternionAccumulator","nameWithType":"QuaternionAccumulator","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nAccumulates Quaternion values into a single total value.\n","syntax":{"content":"public sealed class QuaternionAccumulator : ValueAccumulator<Quaternion>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.QuaternionAccumulator"},{"children":null,"id":"defaultValue","implements":null,"inheritance":null,"inheritedMembers":null,"name":"defaultValue","nameWithType":"QuaternionAccumulator.defaultValue","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.QuaternionAccumulator","remarks":null,"summary":"\nThe default value of <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code>.\n","syntax":{"content":"protected override Quaternion defaultValue { get; }","parameters":[],"return":{"description":null,"type":"Global.Quaternion"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.QuaternionAccumulator.defaultValue"},{"children":null,"id":"Add(Quaternion)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Add(Quaternion)","nameWithType":"QuaternionAccumulator.Add(Quaternion)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.QuaternionAccumulator","remarks":null,"summary":"\nIncreases the accumulated total by a given value.\n","syntax":{"content":"protected override Quaternion Add(Quaternion value)","parameters":[{"description":"The value to add to the total.","id":"value","type":"Global.Quaternion"}],"return":{"description":"The new total value.","type":"Global.Quaternion"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.QuaternionAccumulator.Add(Quaternion)"},{"children":null,"id":"Subtract(Quaternion)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Subtract(Quaternion)","nameWithType":"QuaternionAccumulator.Subtract(Quaternion)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.QuaternionAccumulator","remarks":null,"summary":"\nDecreases the accumulated total by a given value.\n","syntax":{"content":"protected override Quaternion Subtract(Quaternion value)","parameters":[{"description":"The value to subtract from the total.","id":"value","type":"Global.Quaternion"}],"return":{"description":"The new total value.","type":"Global.Quaternion"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.QuaternionAccumulator.Subtract(Quaternion)"}]},{"items":[{"children":["Zigurous.Architecture.QuaternionReference.#ctor","Zigurous.Architecture.QuaternionReference.#ctor(Quaternion)","Zigurous.Architecture.QuaternionReference.#ctor(Zigurous.Architecture.QuaternionVariable)","Zigurous.Architecture.QuaternionReference.op_Implicit(Zigurous.Architecture.QuaternionReference)~Quaternion"],"id":"QuaternionReference","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ValueReference{Quaternion,Zigurous.Architecture.QuaternionVariable}"],"inheritedMembers":["Zigurous.Architecture.ValueReference{Quaternion,Zigurous.Architecture.QuaternionVariable}.useConstant","Zigurous.Architecture.ValueReference{Quaternion,Zigurous.Architecture.QuaternionVariable}.constantValue","Zigurous.Architecture.ValueReference{Quaternion,Zigurous.Architecture.QuaternionVariable}.variable","Zigurous.Architecture.ValueReference{Quaternion,Zigurous.Architecture.QuaternionVariable}.value"],"name":"QuaternionReference","nameWithType":"QuaternionReference","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA reference to a Quaternion value, either a constant or <xref href=\"Zigurous.Architecture.QuaternionVariable\" data-throw-if-not-resolved=\"false\"></xref>.\n","syntax":{"content":"[Serializable]\npublic class QuaternionReference : ValueReference<Quaternion, QuaternionVariable>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.QuaternionReference"},{"children":null,"id":"#ctor","implements":null,"inheritance":null,"inheritedMembers":null,"name":"QuaternionReference()","nameWithType":"QuaternionReference.QuaternionReference()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.QuaternionReference","remarks":null,"summary":"\nCreates a new Quaternion reference.\n","syntax":{"content":"public QuaternionReference()","parameters":null,"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.QuaternionReference.#ctor"},{"children":null,"id":"#ctor(Quaternion)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"QuaternionReference(Quaternion)","nameWithType":"QuaternionReference.QuaternionReference(Quaternion)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.QuaternionReference","remarks":null,"summary":"\nCreates a new Quaternion reference with the constant value.\n","syntax":{"content":"public QuaternionReference(Quaternion value)","parameters":[{"description":"The constant value to set.","id":"value","type":"Global.Quaternion"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.QuaternionReference.#ctor(Quaternion)"},{"children":null,"id":"#ctor(Zigurous.Architecture.QuaternionVariable)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"QuaternionReference(QuaternionVariable)","nameWithType":"QuaternionReference.QuaternionReference(QuaternionVariable)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.QuaternionReference","remarks":null,"summary":"\nCreates a new Quaternion reference to the variable value.\n","syntax":{"content":"public QuaternionReference(QuaternionVariable variable)","parameters":[{"description":"The variable to reference.","id":"variable","type":"Zigurous.Architecture.QuaternionVariable"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.QuaternionReference.#ctor(Zigurous.Architecture.QuaternionVariable)"},{"children":null,"id":"op_Implicit(Zigurous.Architecture.QuaternionReference)~Quaternion","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Implicit(QuaternionReference to Quaternion)","nameWithType":"QuaternionReference.Implicit(QuaternionReference to Quaternion)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.QuaternionReference","remarks":null,"summary":"\nImplicitly converts the reference to a Quaternion.\n","syntax":{"content":"public static implicit operator Quaternion(QuaternionReference reference)","parameters":[{"description":"The reference to convert.","id":"reference","type":"Zigurous.Architecture.QuaternionReference"}],"return":{"description":"The Quaternion value.","type":"Global.Quaternion"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.QuaternionReference.op_Implicit(Zigurous.Architecture.QuaternionReference)~Quaternion"}]},{"items":[{"children":["Zigurous.Architecture.QuaternionVariable.value"],"id":"QuaternionVariable","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ScriptableVariable{Quaternion}"],"inheritedMembers":null,"name":"QuaternionVariable","nameWithType":"QuaternionVariable","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA Quaternion variable saved as a ScriptableObject.\n","syntax":{"content":"public class QuaternionVariable : ScriptableVariable<Quaternion>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.QuaternionVariable"},{"children":null,"id":"value","implements":null,"inheritance":null,"inheritedMembers":null,"name":"value","nameWithType":"QuaternionVariable.value","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.QuaternionVariable","remarks":null,"summary":"\nThe value of the variable.\n","syntax":{"content":"public override Quaternion value { get; set; }","parameters":[],"return":{"description":null,"type":"Global.Quaternion"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.QuaternionVariable.value"}]},{"items":[{"children":["Zigurous.Architecture.Range`1.#ctor(`0,`0)","Zigurous.Architecture.Range`1.Includes(`0)","Zigurous.Architecture.Range`1.Includes(`0,System.Boolean,System.Boolean)","Zigurous.Architecture.Range`1.max","Zigurous.Architecture.Range`1.min"],"id":"Range`1","implements":["Zigurous.Architecture.IRange{{T}}"],"inheritance":null,"inheritedMembers":null,"name":"Range<T>","nameWithType":"Range<T>","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA range of values of the given type.\n","syntax":{"content":"[Serializable]\npublic struct Range<T> : IRange<T> where T : IComparable<T>","parameters":null,"return":null,"typeParameters":[{"description":"The type of values in the range.","id":"T"}]},"type":"Struct","uid":"Zigurous.Architecture.Range`1"},{"children":null,"id":"min","implements":["Zigurous.Architecture.IRange{{T}}.min"],"inheritance":null,"inheritedMembers":null,"name":"min","nameWithType":"Range<T>.min","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Range`1","remarks":null,"summary":"\nThe lower bound of the range.\n","syntax":{"content":"public T min { get; set; }","parameters":[],"return":{"description":null,"type":"{T}"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Range`1.min"},{"children":null,"id":"max","implements":["Zigurous.Architecture.IRange{{T}}.max"],"inheritance":null,"inheritedMembers":null,"name":"max","nameWithType":"Range<T>.max","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Range`1","remarks":null,"summary":"\nThe upper bound of the range.\n","syntax":{"content":"public T max { get; set; }","parameters":[],"return":{"description":null,"type":"{T}"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Range`1.max"},{"children":null,"id":"#ctor(`0,`0)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Range(T, T)","nameWithType":"Range<T>.Range(T, T)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Range`1","remarks":null,"summary":"\nCreates a new range with the specified values.\n","syntax":{"content":"public Range(T min = null, T max = null)","parameters":[{"description":"The lower bound of the range.","id":"min","type":"{T}"},{"description":"The upper bound of the range.","id":"max","type":"{T}"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.Range`1.#ctor(`0,`0)"},{"children":null,"id":"Includes(`0)","implements":["Zigurous.Architecture.IRange{{T}}.Includes({T})"],"inheritance":null,"inheritedMembers":null,"name":"Includes(T)","nameWithType":"Range<T>.Includes(T)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Range`1","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(T value)","parameters":[{"description":"The value to check.","id":"value","type":"{T}"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Range`1.Includes(`0)"},{"children":null,"id":"Includes(`0,System.Boolean,System.Boolean)","implements":["Zigurous.Architecture.IRange{{T}}.Includes({T},System.Boolean,System.Boolean)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(T, Boolean, Boolean)","nameWithType":"Range<T>.Includes(T, Boolean, Boolean)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Range`1","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(T value, bool includeMin, bool includeMax)","parameters":[{"description":"The value to check.","id":"value","type":"{T}"},{"description":"The minimum value is inclusive if true, exclusive if false.","id":"includeMin","type":"System.Boolean"},{"description":"The maximum value is inclusive if true, exclusive if false.","id":"includeMax","type":"System.Boolean"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Range`1.Includes(`0,System.Boolean,System.Boolean)"}]},{"items":[{"children":[],"id":"ReadOnlyAttribute","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"ReadOnlyAttribute","nameWithType":"ReadOnlyAttribute","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nAn attribute that prevents a field from being modified in the editor.\n","syntax":{"content":"[AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = true)]\npublic class ReadOnlyAttribute : PropertyAttribute","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.ReadOnlyAttribute"}]},{"items":[{"children":["Zigurous.Architecture.RectReference.#ctor","Zigurous.Architecture.RectReference.#ctor(Rect)","Zigurous.Architecture.RectReference.#ctor(Zigurous.Architecture.RectVariable)","Zigurous.Architecture.RectReference.op_Implicit(Zigurous.Architecture.RectReference)~Rect"],"id":"RectReference","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ValueReference{Rect,Zigurous.Architecture.RectVariable}"],"inheritedMembers":["Zigurous.Architecture.ValueReference{Rect,Zigurous.Architecture.RectVariable}.useConstant","Zigurous.Architecture.ValueReference{Rect,Zigurous.Architecture.RectVariable}.constantValue","Zigurous.Architecture.ValueReference{Rect,Zigurous.Architecture.RectVariable}.variable","Zigurous.Architecture.ValueReference{Rect,Zigurous.Architecture.RectVariable}.value"],"name":"RectReference","nameWithType":"RectReference","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA reference to a Rect value, either a constant or <xref href=\"Zigurous.Architecture.RectVariable\" data-throw-if-not-resolved=\"false\"></xref>.\n","syntax":{"content":"[Serializable]\npublic class RectReference : ValueReference<Rect, RectVariable>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.RectReference"},{"children":null,"id":"#ctor","implements":null,"inheritance":null,"inheritedMembers":null,"name":"RectReference()","nameWithType":"RectReference.RectReference()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.RectReference","remarks":null,"summary":"\nCreates a new Rect reference.\n","syntax":{"content":"public RectReference()","parameters":null,"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.RectReference.#ctor"},{"children":null,"id":"#ctor(Rect)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"RectReference(Rect)","nameWithType":"RectReference.RectReference(Rect)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.RectReference","remarks":null,"summary":"\nCreates a new Rect reference with the constant value.\n","syntax":{"content":"public RectReference(Rect value)","parameters":[{"description":"The constant value to set.","id":"value","type":"Global.Rect"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.RectReference.#ctor(Rect)"},{"children":null,"id":"#ctor(Zigurous.Architecture.RectVariable)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"RectReference(RectVariable)","nameWithType":"RectReference.RectReference(RectVariable)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.RectReference","remarks":null,"summary":"\nCreates a new Rect reference to the variable value.\n","syntax":{"content":"public RectReference(RectVariable variable)","parameters":[{"description":"The variable to reference.","id":"variable","type":"Zigurous.Architecture.RectVariable"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.RectReference.#ctor(Zigurous.Architecture.RectVariable)"},{"children":null,"id":"op_Implicit(Zigurous.Architecture.RectReference)~Rect","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Implicit(RectReference to Rect)","nameWithType":"RectReference.Implicit(RectReference to Rect)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.RectReference","remarks":null,"summary":"\nImplicitly converts the reference to a Rect.\n","syntax":{"content":"public static implicit operator Rect(RectReference reference)","parameters":[{"description":"The reference to convert.","id":"reference","type":"Zigurous.Architecture.RectReference"}],"return":{"description":"The Rect value.","type":"Global.Rect"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.RectReference.op_Implicit(Zigurous.Architecture.RectReference)~Rect"}]},{"items":[{"children":["Zigurous.Architecture.RectVariable.value"],"id":"RectVariable","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ScriptableVariable{Rect}"],"inheritedMembers":null,"name":"RectVariable","nameWithType":"RectVariable","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA Rect variable saved as a ScriptableObject.\n","syntax":{"content":"public class RectVariable : ScriptableVariable<Rect>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.RectVariable"},{"children":null,"id":"value","implements":null,"inheritance":null,"inheritedMembers":null,"name":"value","nameWithType":"RectVariable.value","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.RectVariable","remarks":null,"summary":"\nThe value of the variable.\n","syntax":{"content":"public override Rect value { get; set; }","parameters":[],"return":{"description":null,"type":"Global.Rect"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.RectVariable.value"}]},{"items":[{"children":["Zigurous.Architecture.Registry`1.#ctor(`0[],System.Action{`0},System.Action{`0})","Zigurous.Architecture.Registry`1.#ctor(System.Int32,System.Action{`0},System.Action{`0})","Zigurous.Architecture.Registry`1.Clear","Zigurous.Architecture.Registry`1.Contains(`0)","Zigurous.Architecture.Registry`1.Count","Zigurous.Architecture.Registry`1.Item(System.Int32)","Zigurous.Architecture.Registry`1.items","Zigurous.Architecture.Registry`1.Register(`0)","Zigurous.Architecture.Registry`1.registered","Zigurous.Architecture.Registry`1.Unregister(`0)","Zigurous.Architecture.Registry`1.unregistered"],"id":"Registry`1","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"Registry<T>","nameWithType":"Registry<T>","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nManages a list of unique items and invokes callbacks when an item is\nadded or removed from the list.\n","syntax":{"content":"public class Registry<T>","parameters":null,"return":null,"typeParameters":[{"description":"The type of item to register.","id":"T"}]},"type":"Class","uid":"Zigurous.Architecture.Registry`1"},{"children":null,"id":"items","implements":null,"inheritance":null,"inheritedMembers":null,"name":"items","nameWithType":"Registry<T>.items","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Registry`1","remarks":null,"summary":"\nThe items registered in the list (Read only).\n","syntax":{"content":"public readonly List<T> items","parameters":null,"return":{"description":null,"type":"Global.List{{T}}"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.Registry`1.items"},{"children":null,"id":"registered","implements":null,"inheritance":null,"inheritedMembers":null,"name":"registered","nameWithType":"Registry<T>.registered","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Registry`1","remarks":null,"summary":"\nA callback invoked when an item is registered.\n","syntax":{"content":"public Action<T> registered","parameters":null,"return":{"description":null,"type":"System.Action{{T}}"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.Registry`1.registered"},{"children":null,"id":"unregistered","implements":null,"inheritance":null,"inheritedMembers":null,"name":"unregistered","nameWithType":"Registry<T>.unregistered","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Registry`1","remarks":null,"summary":"\nA callback invoked when an item is unregistered.\n","syntax":{"content":"public Action<T> unregistered","parameters":null,"return":{"description":null,"type":"System.Action{{T}}"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.Registry`1.unregistered"},{"children":null,"id":"Count","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Count","nameWithType":"Registry<T>.Count","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Registry`1","remarks":null,"summary":"\nThe amount of items registered in the list (Read only).\n","syntax":{"content":"public int Count { get; }","parameters":[],"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Registry`1.Count"},{"children":null,"id":"Item(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Item[Int32]","nameWithType":"Registry<T>.Item[Int32]","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Registry`1","remarks":null,"summary":"\nReturns the item at the specified index.\n","syntax":{"content":"public T this[int index] { get; }","parameters":[{"description":"The index of the item to return.","id":"index","type":"System.Int32"}],"return":{"description":null,"type":"{T}"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Registry`1.Item(System.Int32)"},{"children":null,"id":"#ctor(System.Int32,System.Action{`0},System.Action{`0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Registry(Int32, Action<T>, Action<T>)","nameWithType":"Registry<T>.Registry(Int32, Action<T>, Action<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Registry`1","remarks":null,"summary":"\nCreates a new list with a set capacity.\n","syntax":{"content":"public Registry(int capacity, Action<T> registered = null, Action<T> unregistered = null)","parameters":[{"description":"The initial capacity of the collection.","id":"capacity","type":"System.Int32"},{"description":"The callback invoked when an item is registered.","id":"registered","type":"System.Action{{T}}"},{"description":"The callback invoked when an item is unregistered.","id":"unregistered","type":"System.Action{{T}}"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.Registry`1.#ctor(System.Int32,System.Action{`0},System.Action{`0})"},{"children":null,"id":"#ctor(`0[],System.Action{`0},System.Action{`0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Registry(T[], Action<T>, Action<T>)","nameWithType":"Registry<T>.Registry(T[], Action<T>, Action<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Registry`1","remarks":null,"summary":"\nCreates a new list and pre-registers a list of items.\n","syntax":{"content":"public Registry(T[] items, Action<T> registered = null, Action<T> unregistered = null)","parameters":[{"description":"The items to pre-register.","id":"items","type":"{T}[]"},{"description":"The callback invoked when an item is registered.","id":"registered","type":"System.Action{{T}}"},{"description":"The callback invoked when an item is unregistered.","id":"unregistered","type":"System.Action{{T}}"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.Registry`1.#ctor(`0[],System.Action{`0},System.Action{`0})"},{"children":null,"id":"Register(`0)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Register(T)","nameWithType":"Registry<T>.Register(T)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Registry`1","remarks":null,"summary":"\nRegisters an item in the list.\n","syntax":{"content":"public bool Register(T item)","parameters":[{"description":"The item to register.","id":"item","type":"{T}"}],"return":{"description":"True if the item was registered, false if the item cannot be registered.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Registry`1.Register(`0)"},{"children":null,"id":"Unregister(`0)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Unregister(T)","nameWithType":"Registry<T>.Unregister(T)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Registry`1","remarks":null,"summary":"\nUnregisters an item from the list.\n","syntax":{"content":"public bool Unregister(T item)","parameters":[{"description":"The item to unregister.","id":"item","type":"{T}"}],"return":{"description":"True if the item was unregistered, false if the item cannot be unregistered.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Registry`1.Unregister(`0)"},{"children":null,"id":"Clear","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clear()","nameWithType":"Registry<T>.Clear()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Registry`1","remarks":null,"summary":"\nUnregisters all items from the list.\n","syntax":{"content":"public void Clear()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Registry`1.Clear"},{"children":null,"id":"Contains(`0)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Contains(T)","nameWithType":"Registry<T>.Contains(T)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Registry`1","remarks":null,"summary":"\nChecks if a given item is registered in the list.\n","syntax":{"content":"public bool Contains(T item)","parameters":[{"description":"The item to check.","id":"item","type":"{T}"}],"return":{"description":"True if the item is registered, false if the item is not registered.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Registry`1.Contains(`0)"}]},{"items":[{"children":["Zigurous.Architecture.RenameAttribute.#ctor(System.String)","Zigurous.Architecture.RenameAttribute.newName"],"id":"RenameAttribute","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"RenameAttribute","nameWithType":"RenameAttribute","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nAn attribute that renames a field in the editor.\n","syntax":{"content":"[AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = true)]\npublic class RenameAttribute : PropertyAttribute","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.RenameAttribute"},{"children":null,"id":"newName","implements":null,"inheritance":null,"inheritedMembers":null,"name":"newName","nameWithType":"RenameAttribute.newName","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.RenameAttribute","remarks":null,"summary":"\nThe new name of the field.\n","syntax":{"content":"public string newName","parameters":null,"return":{"description":null,"type":"System.String"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.RenameAttribute.newName"},{"children":null,"id":"#ctor(System.String)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"RenameAttribute(String)","nameWithType":"RenameAttribute.RenameAttribute(String)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.RenameAttribute","remarks":null,"summary":"\nCreates a new RenameAttribute with the given name.\n","syntax":{"content":"public RenameAttribute(string newName)","parameters":[{"description":null,"id":"newName","type":"System.String"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.RenameAttribute.#ctor(System.String)"}]},{"items":[{"children":["Zigurous.Architecture.RuntimeSet`1.Add(`0)","Zigurous.Architecture.RuntimeSet`1.Clear","Zigurous.Architecture.RuntimeSet`1.Contains(`0)","Zigurous.Architecture.RuntimeSet`1.Count","Zigurous.Architecture.RuntimeSet`1.items","Zigurous.Architecture.RuntimeSet`1.Remove(`0)"],"id":"RuntimeSet`1","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"RuntimeSet<T>","nameWithType":"RuntimeSet<T>","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA ScriptableObject that stores a list of items. A project asset can be\ncreated for the runtime set so it can be referenced throughout the\napplication, but the items are added and removed at runtime.\n","syntax":{"content":"public abstract class RuntimeSet<T> : ScriptableObject","parameters":null,"return":null,"typeParameters":[{"description":"The type of items to store.","id":"T"}]},"type":"Class","uid":"Zigurous.Architecture.RuntimeSet`1"},{"children":null,"id":"items","implements":null,"inheritance":null,"inheritedMembers":null,"name":"items","nameWithType":"RuntimeSet<T>.items","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.RuntimeSet`1","remarks":null,"summary":"\nThe list of stored items in the set (Read only).\n","syntax":{"content":"public readonly List<T> items","parameters":null,"return":{"description":null,"type":"Global.List{{T}}"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.RuntimeSet`1.items"},{"children":null,"id":"Count","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Count","nameWithType":"RuntimeSet<T>.Count","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.RuntimeSet`1","remarks":null,"summary":"\nThe number of items in the set (Read only).\n","syntax":{"content":"public int Count { get; }","parameters":[],"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.RuntimeSet`1.Count"},{"children":null,"id":"Add(`0)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Add(T)","nameWithType":"RuntimeSet<T>.Add(T)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.RuntimeSet`1","remarks":null,"summary":"\nAdds an item to the set if it is not already contained in the set.\n","syntax":{"content":"public void Add(T item)","parameters":[{"description":"The item to add to the set.","id":"item","type":"{T}"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.RuntimeSet`1.Add(`0)"},{"children":null,"id":"Remove(`0)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Remove(T)","nameWithType":"RuntimeSet<T>.Remove(T)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.RuntimeSet`1","remarks":null,"summary":"\nRemoves an item from the set if it is contained in the set.\n","syntax":{"content":"public void Remove(T item)","parameters":[{"description":"The item to remove from the set.","id":"item","type":"{T}"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.RuntimeSet`1.Remove(`0)"},{"children":null,"id":"Clear","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clear()","nameWithType":"RuntimeSet<T>.Clear()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.RuntimeSet`1","remarks":null,"summary":"\nRemoves all items from the set.\n","syntax":{"content":"public void Clear()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.RuntimeSet`1.Clear"},{"children":null,"id":"Contains(`0)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Contains(T)","nameWithType":"RuntimeSet<T>.Contains(T)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.RuntimeSet`1","remarks":null,"summary":"\nChecks if the given item is contained in the set.\n","syntax":{"content":"public bool Contains(T item)","parameters":[{"description":"The item to check.","id":"item","type":"{T}"}],"return":{"description":"True if the item is contained in the set, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.RuntimeSet`1.Contains(`0)"}]},{"items":[{"children":["Zigurous.Architecture.ScriptableVariable`1.value"],"id":"ScriptableVariable`1","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"ScriptableVariable<T>","nameWithType":"ScriptableVariable<T>","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA variable type that derives from ScriptableObject.\n","syntax":{"content":"public abstract class ScriptableVariable<T> : ScriptableObject","parameters":null,"return":null,"typeParameters":[{"description":"The type of value.","id":"T"}]},"type":"Class","uid":"Zigurous.Architecture.ScriptableVariable`1"},{"children":null,"id":"value","implements":null,"inheritance":null,"inheritedMembers":null,"name":"value","nameWithType":"ScriptableVariable<T>.value","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ScriptableVariable`1","remarks":null,"summary":"\nThe value of the variable.\n","syntax":{"content":"public abstract T value { get; set; }","parameters":[],"return":{"description":null,"type":"{T}"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.ScriptableVariable`1.value"}]},{"items":[{"children":["Zigurous.Architecture.ShortReference.#ctor","Zigurous.Architecture.ShortReference.#ctor(System.Int16)","Zigurous.Architecture.ShortReference.#ctor(Zigurous.Architecture.ShortVariable)","Zigurous.Architecture.ShortReference.op_Implicit(Zigurous.Architecture.ShortReference)~System.Int16"],"id":"ShortReference","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ValueReference{System.Int16,Zigurous.Architecture.ShortVariable}"],"inheritedMembers":["Zigurous.Architecture.ValueReference{System.Int16,Zigurous.Architecture.ShortVariable}.useConstant","Zigurous.Architecture.ValueReference{System.Int16,Zigurous.Architecture.ShortVariable}.constantValue","Zigurous.Architecture.ValueReference{System.Int16,Zigurous.Architecture.ShortVariable}.variable","Zigurous.Architecture.ValueReference{System.Int16,Zigurous.Architecture.ShortVariable}.value"],"name":"ShortReference","nameWithType":"ShortReference","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA reference to a short value, either a constant or <xref href=\"Zigurous.Architecture.ShortVariable\" data-throw-if-not-resolved=\"false\"></xref>.\n","syntax":{"content":"[Serializable]\npublic class ShortReference : ValueReference<short, ShortVariable>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.ShortReference"},{"children":null,"id":"#ctor","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ShortReference()","nameWithType":"ShortReference.ShortReference()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ShortReference","remarks":null,"summary":"\nCreates a new short reference.\n","syntax":{"content":"public ShortReference()","parameters":null,"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.ShortReference.#ctor"},{"children":null,"id":"#ctor(System.Int16)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ShortReference(Int16)","nameWithType":"ShortReference.ShortReference(Int16)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ShortReference","remarks":null,"summary":"\nCreates a new short reference with the constant value.\n","syntax":{"content":"public ShortReference(short value)","parameters":[{"description":"The constant value to set.","id":"value","type":"System.Int16"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.ShortReference.#ctor(System.Int16)"},{"children":null,"id":"#ctor(Zigurous.Architecture.ShortVariable)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ShortReference(ShortVariable)","nameWithType":"ShortReference.ShortReference(ShortVariable)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ShortReference","remarks":null,"summary":"\nCreates a new short reference to the variable value.\n","syntax":{"content":"public ShortReference(ShortVariable variable)","parameters":[{"description":"The variable to reference.","id":"variable","type":"Zigurous.Architecture.ShortVariable"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.ShortReference.#ctor(Zigurous.Architecture.ShortVariable)"},{"children":null,"id":"op_Implicit(Zigurous.Architecture.ShortReference)~System.Int16","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Implicit(ShortReference to Int16)","nameWithType":"ShortReference.Implicit(ShortReference to Int16)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ShortReference","remarks":null,"summary":"\nImplicitly converts the reference to a short.\n","syntax":{"content":"public static implicit operator short (ShortReference reference)","parameters":[{"description":"The reference to convert.","id":"reference","type":"Zigurous.Architecture.ShortReference"}],"return":{"description":"The short value.","type":"System.Int16"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.ShortReference.op_Implicit(Zigurous.Architecture.ShortReference)~System.Int16"}]},{"items":[{"children":["Zigurous.Architecture.ShortVariable.value"],"id":"ShortVariable","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ScriptableVariable{System.Int16}"],"inheritedMembers":null,"name":"ShortVariable","nameWithType":"ShortVariable","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA short variable saved as a ScriptableObject.\n","syntax":{"content":"public class ShortVariable : ScriptableVariable<short>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.ShortVariable"},{"children":null,"id":"value","implements":null,"inheritance":null,"inheritedMembers":null,"name":"value","nameWithType":"ShortVariable.value","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ShortVariable","remarks":null,"summary":"\nThe value of the variable.\n","syntax":{"content":"public override short value { get; set; }","parameters":[],"return":{"description":null,"type":"System.Int16"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.ShortVariable.value"}]},{"items":[{"children":["Zigurous.Architecture.Singleton`1.HasInstance","Zigurous.Architecture.Singleton`1.Instance","Zigurous.Architecture.Singleton`1.SetUp","Zigurous.Architecture.Singleton`1.TearDown"],"id":"Singleton`1","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"Singleton<T>","nameWithType":"Singleton<T>","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA singleton behavior that ensures only a single instance of a specified\ntype is instantiated in the scene. The singleton will be destroyed when\nthe scene is unloaded.\n","syntax":{"content":"public abstract class Singleton<T> : MonoBehaviour where T : Component","parameters":null,"return":null,"typeParameters":[{"description":"The type of component to instantiate.","id":"T"}]},"type":"Class","uid":"Zigurous.Architecture.Singleton`1"},{"children":null,"id":"Instance","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Instance","nameWithType":"Singleton<T>.Instance","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Singleton`1","remarks":null,"summary":"\nThe current instance of the class.\nThe instance will be created if it does not already exist.\n","syntax":{"content":"public static T Instance { get; }","parameters":[],"return":{"description":"The instance of the class.","type":"{T}"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Singleton`1.Instance"},{"children":null,"id":"HasInstance","implements":null,"inheritance":null,"inheritedMembers":null,"name":"HasInstance","nameWithType":"Singleton<T>.HasInstance","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Singleton`1","remarks":null,"summary":"\nChecks if the singleton has been initialized and an instance is\navailable to use.\n","syntax":{"content":"public static bool HasInstance { get; }","parameters":[],"return":{"description":"True if an instance is available, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Singleton`1.HasInstance"},{"children":null,"id":"SetUp","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SetUp()","nameWithType":"Singleton<T>.SetUp()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Singleton`1","remarks":null,"summary":"\nHandles initializing the singleton on Awake. This function should be\nused in replacement of Awake.\n","syntax":{"content":"protected virtual void SetUp()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Singleton`1.SetUp"},{"children":null,"id":"TearDown","implements":null,"inheritance":null,"inheritedMembers":null,"name":"TearDown()","nameWithType":"Singleton<T>.TearDown()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Singleton`1","remarks":null,"summary":"\nHandles deinitializing the singleton. This function should be used\nin replacement of OnDestroy.\n","syntax":{"content":"protected virtual void TearDown()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Singleton`1.TearDown"}]},{"items":[{"children":["Zigurous.Architecture.SingletonPersistent`1.SetUp"],"id":"SingletonPersistent`1","implements":null,"inheritance":["System.Object","Zigurous.Architecture.Singleton{{T}}"],"inheritedMembers":["Zigurous.Architecture.Singleton{{T}}.Instance","Zigurous.Architecture.Singleton{{T}}.HasInstance","Zigurous.Architecture.Singleton{{T}}.TearDown"],"name":"SingletonPersistent<T>","nameWithType":"SingletonPersistent<T>","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA singleton behavior that ensures only a single instance of a specified\ntype is instantiated in the scene. The singleton will not be destroyed\nwhen changing scenes, thus making it persistent.\n","syntax":{"content":"public abstract class SingletonPersistent<T> : Singleton<T> where T : Component","parameters":null,"return":null,"typeParameters":[{"description":"The type of component to instantiate.","id":"T"}]},"type":"Class","uid":"Zigurous.Architecture.SingletonPersistent`1"},{"children":null,"id":"SetUp","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SetUp()","nameWithType":"SingletonPersistent<T>.SetUp()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.SingletonPersistent`1","remarks":null,"summary":"\nHandles initializing the singleton on Awake. This function should be\nused in replacement of Awake.\n","syntax":{"content":"protected override void SetUp()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.SingletonPersistent`1.SetUp"}]},{"items":[{"children":["Zigurous.Architecture.SortedSetExtensions.First``1(SortedSet{``0},System.Predicate{``0})","Zigurous.Architecture.SortedSetExtensions.ForEach``1(SortedSet{``0},System.Action{``0})","Zigurous.Architecture.SortedSetExtensions.IsAny``1(SortedSet{``0},System.Predicate{``0})","Zigurous.Architecture.SortedSetExtensions.IsEach``1(SortedSet{``0},System.Predicate{``0})"],"id":"SortedSetExtensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"SortedSetExtensions","nameWithType":"SortedSetExtensions","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nExtension methods for sorted sets.\n","syntax":{"content":"public static class SortedSetExtensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.SortedSetExtensions"},{"children":null,"id":"First``1(SortedSet{``0},System.Predicate{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"First<T>(SortedSet<T>, Predicate<T>)","nameWithType":"SortedSetExtensions.First<T>(SortedSet<T>, Predicate<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.SortedSetExtensions","remarks":null,"summary":"\nReturns the first element in the set that satisfies a predicate.\n","syntax":{"content":"public static T First<T>(this SortedSet<T> set, Predicate<T> predicate)","parameters":[{"description":"The set to get the element from.","id":"set","type":"Global.SortedSet{{T}}"},{"description":"The predicate to use.","id":"predicate","type":"System.Predicate{{T}}"}],"return":{"description":"The first element in the set that satisfies the predicate, or <code>default(T)</code> if no item satisfies the predicate.","type":"{T}"},"typeParameters":[{"description":"The type of the elements in the set.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.SortedSetExtensions.First``1(SortedSet{``0},System.Predicate{``0})"},{"children":null,"id":"ForEach``1(SortedSet{``0},System.Action{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ForEach<T>(SortedSet<T>, Action<T>)","nameWithType":"SortedSetExtensions.ForEach<T>(SortedSet<T>, Action<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.SortedSetExtensions","remarks":null,"summary":"\nInvokes an action on each element in the set. The element is passed\nas a parameter.\n","syntax":{"content":"public static void ForEach<T>(this SortedSet<T> set, Action<T> action)","parameters":[{"description":"The set to iterate over.","id":"set","type":"Global.SortedSet{{T}}"},{"description":"The action to invoke on each element.","id":"action","type":"System.Action{{T}}"}],"return":null,"typeParameters":[{"description":"The type of the elements in the set.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.SortedSetExtensions.ForEach``1(SortedSet{``0},System.Action{``0})"},{"children":null,"id":"IsAny``1(SortedSet{``0},System.Predicate{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsAny<T>(SortedSet<T>, Predicate<T>)","nameWithType":"SortedSetExtensions.IsAny<T>(SortedSet<T>, Predicate<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.SortedSetExtensions","remarks":null,"summary":"\nChecks if any element in the set satisfies a predicate.\n","syntax":{"content":"public static bool IsAny<T>(this SortedSet<T> set, Predicate<T> predicate)","parameters":[{"description":"The set to check.","id":"set","type":"Global.SortedSet{{T}}"},{"description":"The predicate to use.","id":"predicate","type":"System.Predicate{{T}}"}],"return":{"description":"True if any element satisfies the predicate.","type":"System.Boolean"},"typeParameters":[{"description":"The type of the elements in the set.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.SortedSetExtensions.IsAny``1(SortedSet{``0},System.Predicate{``0})"},{"children":null,"id":"IsEach``1(SortedSet{``0},System.Predicate{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsEach<T>(SortedSet<T>, Predicate<T>)","nameWithType":"SortedSetExtensions.IsEach<T>(SortedSet<T>, Predicate<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.SortedSetExtensions","remarks":null,"summary":"\nChecks if each element in the set satisfies a predicate.\n","syntax":{"content":"public static bool IsEach<T>(this SortedSet<T> set, Predicate<T> predicate)","parameters":[{"description":"The set to check.","id":"set","type":"Global.SortedSet{{T}}"},{"description":"The predicate to use.","id":"predicate","type":"System.Predicate{{T}}"}],"return":{"description":"True if all elements satisfy the predicate.","type":"System.Boolean"},"typeParameters":[{"description":"The type of the elements in the set.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.SortedSetExtensions.IsEach``1(SortedSet{``0},System.Predicate{``0})"}]},{"items":[{"children":["Zigurous.Architecture.Size.#ctor(System.Int32)","Zigurous.Architecture.Size.#ctor(System.Int32,System.Int32)","Zigurous.Architecture.Size.area","Zigurous.Architecture.Size.CompareTo(Zigurous.Architecture.Size)","Zigurous.Architecture.Size.Equals(System.Object)","Zigurous.Architecture.Size.Equals(Zigurous.Architecture.Size)","Zigurous.Architecture.Size.GetHashCode","Zigurous.Architecture.Size.height","Zigurous.Architecture.Size.max","Zigurous.Architecture.Size.one","Zigurous.Architecture.Size.op_Equality(Zigurous.Architecture.Size,Zigurous.Architecture.Size)","Zigurous.Architecture.Size.op_Inequality(Zigurous.Architecture.Size,Zigurous.Architecture.Size)","Zigurous.Architecture.Size.sq1024","Zigurous.Architecture.Size.sq128","Zigurous.Architecture.Size.sq16","Zigurous.Architecture.Size.sq2","Zigurous.Architecture.Size.sq2048","Zigurous.Architecture.Size.sq256","Zigurous.Architecture.Size.sq32","Zigurous.Architecture.Size.sq4","Zigurous.Architecture.Size.sq4096","Zigurous.Architecture.Size.sq512","Zigurous.Architecture.Size.sq64","Zigurous.Architecture.Size.sq8","Zigurous.Architecture.Size.sq8192","Zigurous.Architecture.Size.ToString","Zigurous.Architecture.Size.width","Zigurous.Architecture.Size.zero"],"id":"Size","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Size","nameWithType":"Size","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nStores the size of an entity as a width and height.\n","syntax":{"content":"[Serializable]\npublic struct Size : IEquatable<Size>, IComparable<Size>","parameters":null,"return":null,"typeParameters":null},"type":"Struct","uid":"Zigurous.Architecture.Size"},{"children":null,"id":"zero","implements":null,"inheritance":null,"inheritedMembers":null,"name":"zero","nameWithType":"Size.zero","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Size","remarks":null,"summary":"\nShorthand for writing <code>Size(0, 0)</code>.\n","syntax":{"content":"public static readonly Size zero { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.Size"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Size.zero"},{"children":null,"id":"one","implements":null,"inheritance":null,"inheritedMembers":null,"name":"one","nameWithType":"Size.one","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Size","remarks":null,"summary":"\nShorthand for writing <code>Size(1, 1)</code>.\n","syntax":{"content":"public static readonly Size one { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.Size"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Size.one"},{"children":null,"id":"max","implements":null,"inheritance":null,"inheritedMembers":null,"name":"max","nameWithType":"Size.max","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Size","remarks":null,"summary":"\nShorthand for writing <code>Size(int.MaxValue, int.MaxValue)</code>.\n","syntax":{"content":"public static readonly Size max { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.Size"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Size.max"},{"children":null,"id":"sq2","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq2","nameWithType":"Size.sq2","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Size","remarks":null,"summary":"\nShorthand for writing <code>Size(2)</code>.\n","syntax":{"content":"public static readonly Size sq2 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.Size"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Size.sq2"},{"children":null,"id":"sq4","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq4","nameWithType":"Size.sq4","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Size","remarks":null,"summary":"\nShorthand for writing <code>Size(4)</code>.\n","syntax":{"content":"public static readonly Size sq4 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.Size"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Size.sq4"},{"children":null,"id":"sq8","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq8","nameWithType":"Size.sq8","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Size","remarks":null,"summary":"\nShorthand for writing <code>Size(8)</code>.\n","syntax":{"content":"public static readonly Size sq8 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.Size"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Size.sq8"},{"children":null,"id":"sq16","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq16","nameWithType":"Size.sq16","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Size","remarks":null,"summary":"\nShorthand for writing <code>Size(16)</code>.\n","syntax":{"content":"public static readonly Size sq16 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.Size"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Size.sq16"},{"children":null,"id":"sq32","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq32","nameWithType":"Size.sq32","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Size","remarks":null,"summary":"\nShorthand for writing <code>Size(32)</code>.\n","syntax":{"content":"public static readonly Size sq32 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.Size"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Size.sq32"},{"children":null,"id":"sq64","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq64","nameWithType":"Size.sq64","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Size","remarks":null,"summary":"\nShorthand for writing <code>Size(64)</code>.\n","syntax":{"content":"public static readonly Size sq64 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.Size"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Size.sq64"},{"children":null,"id":"sq128","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq128","nameWithType":"Size.sq128","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Size","remarks":null,"summary":"\nShorthand for writing <code>Size(128)</code>.\n","syntax":{"content":"public static readonly Size sq128 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.Size"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Size.sq128"},{"children":null,"id":"sq256","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq256","nameWithType":"Size.sq256","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Size","remarks":null,"summary":"\nShorthand for writing <code>Size(256)</code>.\n","syntax":{"content":"public static readonly Size sq256 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.Size"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Size.sq256"},{"children":null,"id":"sq512","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq512","nameWithType":"Size.sq512","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Size","remarks":null,"summary":"\nShorthand for writing <code>Size(512)</code>.\n","syntax":{"content":"public static readonly Size sq512 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.Size"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Size.sq512"},{"children":null,"id":"sq1024","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq1024","nameWithType":"Size.sq1024","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Size","remarks":null,"summary":"\nShorthand for writing <code>Size(1024)</code>.\n","syntax":{"content":"public static readonly Size sq1024 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.Size"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Size.sq1024"},{"children":null,"id":"sq2048","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq2048","nameWithType":"Size.sq2048","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Size","remarks":null,"summary":"\nShorthand for writing <code>Size(2048)</code>.\n","syntax":{"content":"public static readonly Size sq2048 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.Size"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Size.sq2048"},{"children":null,"id":"sq4096","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq4096","nameWithType":"Size.sq4096","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Size","remarks":null,"summary":"\nShorthand for writing <code>Size(4096)</code>.\n","syntax":{"content":"public static readonly Size sq4096 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.Size"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Size.sq4096"},{"children":null,"id":"sq8192","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq8192","nameWithType":"Size.sq8192","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Size","remarks":null,"summary":"\nShorthand for writing <code>Size(8192)</code>.\n","syntax":{"content":"public static readonly Size sq8192 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.Size"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Size.sq8192"},{"children":null,"id":"width","implements":null,"inheritance":null,"inheritedMembers":null,"name":"width","nameWithType":"Size.width","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Size","remarks":null,"summary":"\nThe width of the entity.\n","syntax":{"content":"public int width","parameters":null,"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.Size.width"},{"children":null,"id":"height","implements":null,"inheritance":null,"inheritedMembers":null,"name":"height","nameWithType":"Size.height","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Size","remarks":null,"summary":"\nThe height of the entity.\n","syntax":{"content":"public int height","parameters":null,"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.Size.height"},{"children":null,"id":"area","implements":null,"inheritance":null,"inheritedMembers":null,"name":"area","nameWithType":"Size.area","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Size","remarks":null,"summary":"\nThe area of the entity (width * height) (Read only).\n","syntax":{"content":"public readonly int area { get; }","parameters":[],"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Size.area"},{"children":null,"id":"#ctor(System.Int32,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Size(Int32, Int32)","nameWithType":"Size.Size(Int32, Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Size","remarks":null,"summary":"\nCreates a new size with the specified width and height.\n","syntax":{"content":"public Size(int width = 0, int height = 0)","parameters":[{"description":"The width of the entity.","id":"width","type":"System.Int32"},{"description":"The height of the entity.","id":"height","type":"System.Int32"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.Size.#ctor(System.Int32,System.Int32)"},{"children":null,"id":"#ctor(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Size(Int32)","nameWithType":"Size.Size(Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Size","remarks":null,"summary":"\nCreates a new size with uniform width and height.\n","syntax":{"content":"public Size(int size)","parameters":[{"description":"The uniform size of the entity.","id":"size","type":"System.Int32"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.Size.#ctor(System.Int32)"},{"children":null,"id":"CompareTo(Zigurous.Architecture.Size)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"CompareTo(Size)","nameWithType":"Size.CompareTo(Size)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Size","remarks":null,"summary":"\nCompares this instance with another and returns an integer that\nindicates whether this instance precedes, follows, or appears in the\nsame position in the sort order as the other instance.\n","syntax":{"content":"public int CompareTo(Size other)","parameters":[{"description":"The size to compare to.","id":"other","type":"Zigurous.Architecture.Size"}],"return":{"description":"\nGreater than zero if this instance follows the other, less than zero\nif this instance precedes the other, and zero if this instance has\nthe same position as the other.\n","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Size.CompareTo(Zigurous.Architecture.Size)"},{"children":null,"id":"Equals(Zigurous.Architecture.Size)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Equals(Size)","nameWithType":"Size.Equals(Size)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Size","remarks":null,"summary":"\nDetermines if the size is equal to another size.\n","syntax":{"content":"public bool Equals(Size other)","parameters":[{"description":"The size to compare to.","id":"other","type":"Zigurous.Architecture.Size"}],"return":{"description":"True if the sizes are equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Size.Equals(Zigurous.Architecture.Size)"},{"children":null,"id":"Equals(System.Object)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Equals(Object)","nameWithType":"Size.Equals(Object)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Size","remarks":null,"summary":"\nDetermines if the size is equal to another size.\n","syntax":{"content":"public override bool Equals(object other)","parameters":[{"description":"The object to compare to.","id":"other","type":"System.Object"}],"return":{"description":"True if the sizes are equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Size.Equals(System.Object)"},{"children":null,"id":"GetHashCode","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetHashCode()","nameWithType":"Size.GetHashCode()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Size","remarks":null,"summary":"\nReturns the hash code of the size.\n","syntax":{"content":"public override int GetHashCode()","parameters":null,"return":{"description":"The hash code of the size.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Size.GetHashCode"},{"children":null,"id":"ToString","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ToString()","nameWithType":"Size.ToString()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Size","remarks":null,"summary":"\nConverts the size to a string.\n","syntax":{"content":"public override string ToString()","parameters":null,"return":{"description":"The size as a string.","type":"System.String"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Size.ToString"},{"children":null,"id":"op_Equality(Zigurous.Architecture.Size,Zigurous.Architecture.Size)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Equality(Size, Size)","nameWithType":"Size.Equality(Size, Size)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Size","remarks":null,"summary":"\nDetermines if two sizes are equal.\n","syntax":{"content":"public static bool operator ==(Size lhs, Size rhs)","parameters":[{"description":"The first size to compare.","id":"lhs","type":"Zigurous.Architecture.Size"},{"description":"The second size to compare.","id":"rhs","type":"Zigurous.Architecture.Size"}],"return":{"description":"True if the sizes are equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.Size.op_Equality(Zigurous.Architecture.Size,Zigurous.Architecture.Size)"},{"children":null,"id":"op_Inequality(Zigurous.Architecture.Size,Zigurous.Architecture.Size)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Inequality(Size, Size)","nameWithType":"Size.Inequality(Size, Size)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Size","remarks":null,"summary":"\nDetermines if two sizes are not equal.\n","syntax":{"content":"public static bool operator !=(Size lhs, Size rhs)","parameters":[{"description":"The first size to compare.","id":"lhs","type":"Zigurous.Architecture.Size"},{"description":"The second size to compare.","id":"rhs","type":"Zigurous.Architecture.Size"}],"return":{"description":"True if the sizes are not equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.Size.op_Inequality(Zigurous.Architecture.Size,Zigurous.Architecture.Size)"}]},{"items":[{"children":["Zigurous.Architecture.StringExtensions.IsEmpty(System.String)","Zigurous.Architecture.StringExtensions.IsNotEmpty(System.String)","Zigurous.Architecture.StringExtensions.Repeat(System.String,System.Int32)","Zigurous.Architecture.StringExtensions.ToTitleCase(System.String,System.String)"],"id":"StringExtensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"StringExtensions","nameWithType":"StringExtensions","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nExtension methods for strings.\n","syntax":{"content":"public static class StringExtensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.StringExtensions"},{"children":null,"id":"IsEmpty(System.String)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsEmpty(String)","nameWithType":"StringExtensions.IsEmpty(String)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.StringExtensions","remarks":null,"summary":"\nChecks if the string is null or empty.\n","syntax":{"content":"public static bool IsEmpty(this string str)","parameters":[{"description":"The string to test.","id":"str","type":"System.String"}],"return":{"description":"True if the string is null or empty.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.StringExtensions.IsEmpty(System.String)"},{"children":null,"id":"IsNotEmpty(System.String)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsNotEmpty(String)","nameWithType":"StringExtensions.IsNotEmpty(String)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.StringExtensions","remarks":null,"summary":"\nChecks if the string is not null and not empty.\n","syntax":{"content":"public static bool IsNotEmpty(this string str)","parameters":[{"description":"The string to test.","id":"str","type":"System.String"}],"return":{"description":"True if the string is not null and not empty.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.StringExtensions.IsNotEmpty(System.String)"},{"children":null,"id":"Repeat(System.String,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Repeat(String, Int32)","nameWithType":"StringExtensions.Repeat(String, Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.StringExtensions","remarks":null,"summary":"\nRepeats the string a given number of times.\n","syntax":{"content":"public static string Repeat(this string str, int n)","parameters":[{"description":"The string to repeat.","id":"str","type":"System.String"},{"description":"The number of times to repeat the string.","id":"n","type":"System.Int32"}],"return":{"description":"A new repeated string.","type":"System.String"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.StringExtensions.Repeat(System.String,System.Int32)"},{"children":null,"id":"ToTitleCase(System.String,System.String)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ToTitleCase(String, String)","nameWithType":"StringExtensions.ToTitleCase(String, String)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.StringExtensions","remarks":null,"summary":"\nFormats the string using title case. If the string is null, then the\ndefault text will be returned instead.\n","syntax":{"content":"public static string ToTitleCase(this string str, string defaultText = null)","parameters":[{"description":"The string to format.","id":"str","type":"System.String"},{"description":"An optional string returned if the formatted string is null.","id":"defaultText","type":"System.String"}],"return":{"description":"The formatted string.","type":"System.String"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.StringExtensions.ToTitleCase(System.String,System.String)"}]},{"items":[{"children":["Zigurous.Architecture.StringReference.#ctor","Zigurous.Architecture.StringReference.#ctor(System.String)","Zigurous.Architecture.StringReference.#ctor(Zigurous.Architecture.StringVariable)","Zigurous.Architecture.StringReference.op_Implicit(Zigurous.Architecture.StringReference)~System.String"],"id":"StringReference","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ValueReference{System.String,Zigurous.Architecture.StringVariable}"],"inheritedMembers":["Zigurous.Architecture.ValueReference{System.String,Zigurous.Architecture.StringVariable}.useConstant","Zigurous.Architecture.ValueReference{System.String,Zigurous.Architecture.StringVariable}.constantValue","Zigurous.Architecture.ValueReference{System.String,Zigurous.Architecture.StringVariable}.variable","Zigurous.Architecture.ValueReference{System.String,Zigurous.Architecture.StringVariable}.value"],"name":"StringReference","nameWithType":"StringReference","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA reference to a string value, either a constant or <xref href=\"Zigurous.Architecture.StringVariable\" data-throw-if-not-resolved=\"false\"></xref>.\n","syntax":{"content":"[Serializable]\npublic class StringReference : ValueReference<string, StringVariable>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.StringReference"},{"children":null,"id":"#ctor","implements":null,"inheritance":null,"inheritedMembers":null,"name":"StringReference()","nameWithType":"StringReference.StringReference()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.StringReference","remarks":null,"summary":"\nCreates a new string reference.\n","syntax":{"content":"public StringReference()","parameters":null,"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.StringReference.#ctor"},{"children":null,"id":"#ctor(System.String)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"StringReference(String)","nameWithType":"StringReference.StringReference(String)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.StringReference","remarks":null,"summary":"\nCreates a new string reference with the constant value.\n","syntax":{"content":"public StringReference(string value)","parameters":[{"description":"The constant value to set.","id":"value","type":"System.String"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.StringReference.#ctor(System.String)"},{"children":null,"id":"#ctor(Zigurous.Architecture.StringVariable)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"StringReference(StringVariable)","nameWithType":"StringReference.StringReference(StringVariable)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.StringReference","remarks":null,"summary":"\nCreates a new string reference to the variable value.\n","syntax":{"content":"public StringReference(StringVariable variable)","parameters":[{"description":"The variable to reference.","id":"variable","type":"Zigurous.Architecture.StringVariable"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.StringReference.#ctor(Zigurous.Architecture.StringVariable)"},{"children":null,"id":"op_Implicit(Zigurous.Architecture.StringReference)~System.String","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Implicit(StringReference to String)","nameWithType":"StringReference.Implicit(StringReference to String)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.StringReference","remarks":null,"summary":"\nImplicitly converts the reference to a string.\n","syntax":{"content":"public static implicit operator string (StringReference reference)","parameters":[{"description":"The reference to convert.","id":"reference","type":"Zigurous.Architecture.StringReference"}],"return":{"description":"The string value.","type":"System.String"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.StringReference.op_Implicit(Zigurous.Architecture.StringReference)~System.String"}]},{"items":[{"children":["Zigurous.Architecture.StringVariable.value"],"id":"StringVariable","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ScriptableVariable{System.String}"],"inheritedMembers":null,"name":"StringVariable","nameWithType":"StringVariable","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA string variable saved as a ScriptableObject.\n","syntax":{"content":"public class StringVariable : ScriptableVariable<string>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.StringVariable"},{"children":null,"id":"value","implements":null,"inheritance":null,"inheritedMembers":null,"name":"value","nameWithType":"StringVariable.value","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.StringVariable","remarks":null,"summary":"\nThe value of the variable.\n","syntax":{"content":"public override string value { get; set; }","parameters":[],"return":{"description":null,"type":"System.String"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.StringVariable.value"}]},{"items":[{"children":["Zigurous.Architecture.TargetFrameRate.targetFrameRate"],"id":"TargetFrameRate","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"TargetFrameRate","nameWithType":"TargetFrameRate","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nSets the target frame rate of the application.\n","syntax":{"content":"public sealed class TargetFrameRate : MonoBehaviour","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.TargetFrameRate"},{"children":null,"id":"targetFrameRate","implements":null,"inheritance":null,"inheritedMembers":null,"name":"targetFrameRate","nameWithType":"TargetFrameRate.targetFrameRate","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.TargetFrameRate","remarks":null,"summary":"\nThe target frame rate of the application.\n","syntax":{"content":"public int targetFrameRate { get; set; }","parameters":[],"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.TargetFrameRate.targetFrameRate"}]},{"items":[{"children":["Zigurous.Architecture.TimerBehaviour.events","Zigurous.Architecture.TimerBehaviour.Restart","Zigurous.Architecture.TimerBehaviour.settings","Zigurous.Architecture.TimerBehaviour.stats"],"id":"TimerBehaviour","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"TimerBehaviour","nameWithType":"TimerBehaviour","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA behaviour that invokes timed events at a set interval and/or duration.\n","syntax":{"content":"public sealed class TimerBehaviour : MonoBehaviour","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.TimerBehaviour"},{"children":null,"id":"settings","implements":null,"inheritance":null,"inheritedMembers":null,"name":"settings","nameWithType":"TimerBehaviour.settings","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.TimerBehaviour","remarks":null,"summary":"\nThe settings of the timer.\n","syntax":{"content":"public TimerSettings settings","parameters":null,"return":{"description":null,"type":"Zigurous.Architecture.TimerSettings"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.TimerBehaviour.settings"},{"children":null,"id":"events","implements":null,"inheritance":null,"inheritedMembers":null,"name":"events","nameWithType":"TimerBehaviour.events","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.TimerBehaviour","remarks":null,"summary":"\nThe events invoked by the timer.\n","syntax":{"content":"public TimerEvents events","parameters":null,"return":{"description":null,"type":"Zigurous.Architecture.TimerEvents"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.TimerBehaviour.events"},{"children":null,"id":"stats","implements":null,"inheritance":null,"inheritedMembers":null,"name":"stats","nameWithType":"TimerBehaviour.stats","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.TimerBehaviour","remarks":null,"summary":"\nThe current stats of the timer (Read only).\n","syntax":{"content":"public TimerStats stats { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.TimerStats"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.TimerBehaviour.stats"},{"children":null,"id":"Restart","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Restart()","nameWithType":"TimerBehaviour.Restart()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.TimerBehaviour","remarks":null,"summary":"\nResets the elapsed time and re-enables the timer. This does not\nreset the tracked timer stats.\n","syntax":{"content":"public void Restart()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.TimerBehaviour.Restart"}]},{"items":[{"children":["Zigurous.Architecture.TimerEvents.onComplete","Zigurous.Architecture.TimerEvents.onTick"],"id":"TimerEvents","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"TimerEvents","nameWithType":"TimerEvents","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nThe events invoked for a timer.\n","syntax":{"content":"[Serializable]\npublic sealed class TimerEvents","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.TimerEvents"},{"children":null,"id":"onTick","implements":null,"inheritance":null,"inheritedMembers":null,"name":"onTick","nameWithType":"TimerEvents.onTick","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.TimerEvents","remarks":null,"summary":"\nAn event invoked every timer interval.\n","syntax":{"content":"public EventReference onTick","parameters":null,"return":{"description":null,"type":"Zigurous.Architecture.EventReference"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.TimerEvents.onTick"},{"children":null,"id":"onComplete","implements":null,"inheritance":null,"inheritedMembers":null,"name":"onComplete","nameWithType":"TimerEvents.onComplete","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.TimerEvents","remarks":null,"summary":"\nAn event invoked every timer completion.\n","syntax":{"content":"public EventReference onComplete","parameters":null,"return":{"description":null,"type":"Zigurous.Architecture.EventReference"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.TimerEvents.onComplete"}]},{"items":[{"children":["Zigurous.Architecture.TimerSettings.duration","Zigurous.Architecture.TimerSettings.interval","Zigurous.Architecture.TimerSettings.resetCountersOnEnable","Zigurous.Architecture.TimerSettings.resetElapsedOnEnable","Zigurous.Architecture.TimerSettings.useUnscaledTime"],"id":"TimerSettings","implements":null,"inheritance":null,"inheritedMembers":null,"name":"TimerSettings","nameWithType":"TimerSettings","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nThe settings for a timer.\n","syntax":{"content":"[Serializable]\npublic struct TimerSettings","parameters":null,"return":null,"typeParameters":null},"type":"Struct","uid":"Zigurous.Architecture.TimerSettings"},{"children":null,"id":"interval","implements":null,"inheritance":null,"inheritedMembers":null,"name":"interval","nameWithType":"TimerSettings.interval","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.TimerSettings","remarks":null,"summary":"\nThe amount of seconds between tick intervals. A tick event is\ninvoked every interval.\n","syntax":{"content":"public float interval","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.TimerSettings.interval"},{"children":null,"id":"duration","implements":null,"inheritance":null,"inheritedMembers":null,"name":"duration","nameWithType":"TimerSettings.duration","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.TimerSettings","remarks":null,"summary":"\nThe amount of seconds the timer runs for. A completion event is\ninvoked after the duration has elapsed, and the timer is disabled.\nThe timer can be re-enabled to run again with the same duration.\n","syntax":{"content":"public float duration","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.TimerSettings.duration"},{"children":null,"id":"resetElapsedOnEnable","implements":null,"inheritance":null,"inheritedMembers":null,"name":"resetElapsedOnEnable","nameWithType":"TimerSettings.resetElapsedOnEnable","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.TimerSettings","remarks":null,"summary":"\nResets the previous amount of time elapsed when the timer is\nre-enabled. Leaving this off allows the timer to be paused and\nresumed by disabling and enabling the timer behaviour.\n","syntax":{"content":"public bool resetElapsedOnEnable","parameters":null,"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.TimerSettings.resetElapsedOnEnable"},{"children":null,"id":"resetCountersOnEnable","implements":null,"inheritance":null,"inheritedMembers":null,"name":"resetCountersOnEnable","nameWithType":"TimerSettings.resetCountersOnEnable","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.TimerSettings","remarks":null,"summary":"\nResets the timer counters when the timer is re-enabled, including\nthe number of times ticked, the number of times completed, and the\ntimestamps of those events.\n","syntax":{"content":"public bool resetCountersOnEnable","parameters":null,"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.TimerSettings.resetCountersOnEnable"},{"children":null,"id":"useUnscaledTime","implements":null,"inheritance":null,"inheritedMembers":null,"name":"useUnscaledTime","nameWithType":"TimerSettings.useUnscaledTime","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.TimerSettings","remarks":null,"summary":"\nAdvances the timer using unscaled time.\n","syntax":{"content":"public bool useUnscaledTime","parameters":null,"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.TimerSettings.useUnscaledTime"}]},{"items":[{"children":["Zigurous.Architecture.TimerStats.elapsedTime","Zigurous.Architecture.TimerStats.elapsedTimeSinceLastCompletion","Zigurous.Architecture.TimerStats.elapsedTimeSinceLastTick","Zigurous.Architecture.TimerStats.IncrementCompletion(System.Single)","Zigurous.Architecture.TimerStats.IncrementTick(System.Single)","Zigurous.Architecture.TimerStats.Reset","Zigurous.Architecture.TimerStats.ResetCounters","Zigurous.Architecture.TimerStats.ResetElapsedTime","Zigurous.Architecture.TimerStats.timeOfLastCompletion","Zigurous.Architecture.TimerStats.timeOfLastTick","Zigurous.Architecture.TimerStats.timesCompleted","Zigurous.Architecture.TimerStats.timesTicked"],"id":"TimerStats","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"TimerStats","nameWithType":"TimerStats","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nThe running stats for a timer.\n","syntax":{"content":"[Serializable]\npublic sealed class TimerStats","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.TimerStats"},{"children":null,"id":"elapsedTime","implements":null,"inheritance":null,"inheritedMembers":null,"name":"elapsedTime","nameWithType":"TimerStats.elapsedTime","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.TimerStats","remarks":null,"summary":"\nThe amount of seconds elapsed since the timer was started.\n","syntax":{"content":"public float elapsedTime","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.TimerStats.elapsedTime"},{"children":null,"id":"elapsedTimeSinceLastTick","implements":null,"inheritance":null,"inheritedMembers":null,"name":"elapsedTimeSinceLastTick","nameWithType":"TimerStats.elapsedTimeSinceLastTick","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.TimerStats","remarks":null,"summary":"\nThe amount of seconds elapsed since the last tick interval.\n","syntax":{"content":"public float elapsedTimeSinceLastTick","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.TimerStats.elapsedTimeSinceLastTick"},{"children":null,"id":"elapsedTimeSinceLastCompletion","implements":null,"inheritance":null,"inheritedMembers":null,"name":"elapsedTimeSinceLastCompletion","nameWithType":"TimerStats.elapsedTimeSinceLastCompletion","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.TimerStats","remarks":null,"summary":"\nThe amount of seconds elapsed since the last completion.\n","syntax":{"content":"public float elapsedTimeSinceLastCompletion","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.TimerStats.elapsedTimeSinceLastCompletion"},{"children":null,"id":"timeOfLastTick","implements":null,"inheritance":null,"inheritedMembers":null,"name":"timeOfLastTick","nameWithType":"TimerStats.timeOfLastTick","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.TimerStats","remarks":null,"summary":"\nThe timestamp of the last tick event.\n","syntax":{"content":"public float timeOfLastTick","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.TimerStats.timeOfLastTick"},{"children":null,"id":"timeOfLastCompletion","implements":null,"inheritance":null,"inheritedMembers":null,"name":"timeOfLastCompletion","nameWithType":"TimerStats.timeOfLastCompletion","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.TimerStats","remarks":null,"summary":"\nThe timestamp of the last completion event.\n","syntax":{"content":"public float timeOfLastCompletion","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.TimerStats.timeOfLastCompletion"},{"children":null,"id":"timesTicked","implements":null,"inheritance":null,"inheritedMembers":null,"name":"timesTicked","nameWithType":"TimerStats.timesTicked","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.TimerStats","remarks":null,"summary":"\nThe number of times the timer has ticked.\n","syntax":{"content":"public int timesTicked","parameters":null,"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.TimerStats.timesTicked"},{"children":null,"id":"timesCompleted","implements":null,"inheritance":null,"inheritedMembers":null,"name":"timesCompleted","nameWithType":"TimerStats.timesCompleted","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.TimerStats","remarks":null,"summary":"\nThe number of times the timer has completed.\n","syntax":{"content":"public int timesCompleted","parameters":null,"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.TimerStats.timesCompleted"},{"children":null,"id":"IncrementTick(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IncrementTick(Single)","nameWithType":"TimerStats.IncrementTick(Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.TimerStats","remarks":null,"summary":"\nIncrements the number of times ticked and timestamps it.\n","syntax":{"content":"public void IncrementTick(float time)","parameters":[{"description":"The time of the tick interval.","id":"time","type":"System.Single"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.TimerStats.IncrementTick(System.Single)"},{"children":null,"id":"IncrementCompletion(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IncrementCompletion(Single)","nameWithType":"TimerStats.IncrementCompletion(Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.TimerStats","remarks":null,"summary":"\nIncrements the number of times completed and timestamps it.\n","syntax":{"content":"public void IncrementCompletion(float time)","parameters":[{"description":"The time of completion.","id":"time","type":"System.Single"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.TimerStats.IncrementCompletion(System.Single)"},{"children":null,"id":"Reset","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Reset()","nameWithType":"TimerStats.Reset()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.TimerStats","remarks":null,"summary":"\nResets all timer stats.\n","syntax":{"content":"public void Reset()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.TimerStats.Reset"},{"children":null,"id":"ResetElapsedTime","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ResetElapsedTime()","nameWithType":"TimerStats.ResetElapsedTime()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.TimerStats","remarks":null,"summary":"\nResets the amount of time elapsed.\n","syntax":{"content":"public void ResetElapsedTime()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.TimerStats.ResetElapsedTime"},{"children":null,"id":"ResetCounters","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ResetCounters()","nameWithType":"TimerStats.ResetCounters()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.TimerStats","remarks":null,"summary":"\nResets the timer counters, i.e., the number of times ticked, the\nnumber of times completed, and the timestamps of those events.\n","syntax":{"content":"public void ResetCounters()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.TimerStats.ResetCounters"}]},{"items":[{"children":["Zigurous.Architecture.TransformExtensions.HasChangedInHierarchy(Transform)","Zigurous.Architecture.TransformExtensions.Reset(Transform)","Zigurous.Architecture.TransformExtensions.ResetLocal(Transform)"],"id":"TransformExtensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"TransformExtensions","nameWithType":"TransformExtensions","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nExtension methods for Transform components.\n","syntax":{"content":"public static class TransformExtensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.TransformExtensions"},{"children":null,"id":"HasChangedInHierarchy(Transform)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"HasChangedInHierarchy(Transform)","nameWithType":"TransformExtensions.HasChangedInHierarchy(Transform)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.TransformExtensions","remarks":null,"summary":"\nDetermines if the transform or any of its parents has changed since\nthe last time the flag was set to false.\n","syntax":{"content":"public static bool HasChangedInHierarchy(this Transform transform)","parameters":[{"description":"The transform to check.","id":"transform","type":"Global.Transform"}],"return":{"description":"True if the transform or any of its parents has changed.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.TransformExtensions.HasChangedInHierarchy(Transform)"},{"children":null,"id":"Reset(Transform)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Reset(Transform)","nameWithType":"TransformExtensions.Reset(Transform)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.TransformExtensions","remarks":null,"summary":"\nResets the position, rotation, and scale of the transform.\n","syntax":{"content":"public static void Reset(this Transform transform)","parameters":[{"description":"The transform to reset.","id":"transform","type":"Global.Transform"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.TransformExtensions.Reset(Transform)"},{"children":null,"id":"ResetLocal(Transform)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ResetLocal(Transform)","nameWithType":"TransformExtensions.ResetLocal(Transform)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.TransformExtensions","remarks":null,"summary":"\nResets the local position, rotation, and scale of the transform.\n","syntax":{"content":"public static void ResetLocal(this Transform transform)","parameters":[{"description":"The transform to reset.","id":"transform","type":"Global.Transform"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.TransformExtensions.ResetLocal(Transform)"}]},{"items":[{"children":["Zigurous.Architecture.UIntRange.#ctor(System.UInt32,System.UInt32)","Zigurous.Architecture.UIntRange.Clamp(System.UInt32)","Zigurous.Architecture.UIntRange.delta","Zigurous.Architecture.UIntRange.Includes(System.UInt32)","Zigurous.Architecture.UIntRange.Includes(System.UInt32,System.Boolean,System.Boolean)","Zigurous.Architecture.UIntRange.InverseLerp(System.UInt32)","Zigurous.Architecture.UIntRange.Lerp(System.Single)","Zigurous.Architecture.UIntRange.max","Zigurous.Architecture.UIntRange.median","Zigurous.Architecture.UIntRange.min","Zigurous.Architecture.UIntRange.minMax","Zigurous.Architecture.UIntRange.one","Zigurous.Architecture.UIntRange.Random","Zigurous.Architecture.UIntRange.RandomInclusive","Zigurous.Architecture.UIntRange.zero"],"id":"UIntRange","implements":["Zigurous.Architecture.INumberRange{System.UInt32}","Zigurous.Architecture.IRange{System.UInt32}"],"inheritance":null,"inheritedMembers":null,"name":"UIntRange","nameWithType":"UIntRange","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA range of uint values.\n","syntax":{"content":"[Serializable]\npublic struct UIntRange : INumberRange<uint>, IRange<uint>","parameters":null,"return":null,"typeParameters":null},"type":"Struct","uid":"Zigurous.Architecture.UIntRange"},{"children":null,"id":"zero","implements":null,"inheritance":null,"inheritedMembers":null,"name":"zero","nameWithType":"UIntRange.zero","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UIntRange","remarks":null,"summary":"\nShorthand for writing <code>UIntRange(0, 0)</code>.\n","syntax":{"content":"public static readonly UIntRange zero { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.UIntRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.UIntRange.zero"},{"children":null,"id":"one","implements":null,"inheritance":null,"inheritedMembers":null,"name":"one","nameWithType":"UIntRange.one","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UIntRange","remarks":null,"summary":"\nShorthand for writing <code>UIntRange(1, 1)</code>.\n","syntax":{"content":"public static readonly UIntRange one { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.UIntRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.UIntRange.one"},{"children":null,"id":"minMax","implements":null,"inheritance":null,"inheritedMembers":null,"name":"minMax","nameWithType":"UIntRange.minMax","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UIntRange","remarks":null,"summary":"\nShorthand for writing <code>UIntRange(uint.MinValue, uint.MaxValue)</code>.\n","syntax":{"content":"public static readonly UIntRange minMax { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.UIntRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.UIntRange.minMax"},{"children":null,"id":"min","implements":["Zigurous.Architecture.IRange{System.UInt32}.min"],"inheritance":null,"inheritedMembers":null,"name":"min","nameWithType":"UIntRange.min","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UIntRange","remarks":null,"summary":"\nThe lower bound of the range.\n","syntax":{"content":"public uint min { get; set; }","parameters":[],"return":{"description":null,"type":"System.UInt32"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.UIntRange.min"},{"children":null,"id":"max","implements":["Zigurous.Architecture.IRange{System.UInt32}.max"],"inheritance":null,"inheritedMembers":null,"name":"max","nameWithType":"UIntRange.max","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UIntRange","remarks":null,"summary":"\nThe upper bound of the range.\n","syntax":{"content":"public uint max { get; set; }","parameters":[],"return":{"description":null,"type":"System.UInt32"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.UIntRange.max"},{"children":null,"id":"delta","implements":["Zigurous.Architecture.INumberRange{System.UInt32}.delta"],"inheritance":null,"inheritedMembers":null,"name":"delta","nameWithType":"UIntRange.delta","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UIntRange","remarks":null,"summary":"\nThe difference between the maximum and minimum values (Read only).\n","syntax":{"content":"public readonly uint delta { get; }","parameters":[],"return":{"description":null,"type":"System.UInt32"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.UIntRange.delta"},{"children":null,"id":"median","implements":["Zigurous.Architecture.INumberRange{System.UInt32}.median"],"inheritance":null,"inheritedMembers":null,"name":"median","nameWithType":"UIntRange.median","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UIntRange","remarks":null,"summary":"\nThe median value of the range (Read only).\n","syntax":{"content":"public readonly uint median { get; }","parameters":[],"return":{"description":null,"type":"System.UInt32"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.UIntRange.median"},{"children":null,"id":"#ctor(System.UInt32,System.UInt32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"UIntRange(UInt32, UInt32)","nameWithType":"UIntRange.UIntRange(UInt32, UInt32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UIntRange","remarks":null,"summary":"\nCreates a new range with the specified values.\n","syntax":{"content":"public UIntRange(uint min, uint max)","parameters":[{"description":"The lower bound of the range.","id":"min","type":"System.UInt32"},{"description":"The upper bound of the range.","id":"max","type":"System.UInt32"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.UIntRange.#ctor(System.UInt32,System.UInt32)"},{"children":null,"id":"Random","implements":["Zigurous.Architecture.INumberRange{System.UInt32}.Random"],"inheritance":null,"inheritedMembers":null,"name":"Random()","nameWithType":"UIntRange.Random()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UIntRange","remarks":null,"summary":"\nReturns a random value in the range [inclusive, exclusive).\n","syntax":{"content":"public uint Random()","parameters":null,"return":{"description":"A random value in the range [inclusive, exclusive).","type":"System.UInt32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.UIntRange.Random"},{"children":null,"id":"RandomInclusive","implements":null,"inheritance":null,"inheritedMembers":null,"name":"RandomInclusive()","nameWithType":"UIntRange.RandomInclusive()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UIntRange","remarks":null,"summary":"\nReturns a random value in the range [inclusive, inclusive].\n","syntax":{"content":"public uint RandomInclusive()","parameters":null,"return":{"description":"A random value in the range [inclusive, inclusive].","type":"System.UInt32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.UIntRange.RandomInclusive"},{"children":null,"id":"Includes(System.UInt32)","implements":["Zigurous.Architecture.IRange{System.UInt32}.Includes(System.UInt32)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(UInt32)","nameWithType":"UIntRange.Includes(UInt32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UIntRange","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(uint value)","parameters":[{"description":"The value to check.","id":"value","type":"System.UInt32"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.UIntRange.Includes(System.UInt32)"},{"children":null,"id":"Includes(System.UInt32,System.Boolean,System.Boolean)","implements":["Zigurous.Architecture.IRange{System.UInt32}.Includes(System.UInt32,System.Boolean,System.Boolean)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(UInt32, Boolean, Boolean)","nameWithType":"UIntRange.Includes(UInt32, Boolean, Boolean)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UIntRange","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(uint value, bool includeMin, bool includeMax)","parameters":[{"description":"The value to check.","id":"value","type":"System.UInt32"},{"description":"The minimum value is inclusive if true, exclusive if false.","id":"includeMin","type":"System.Boolean"},{"description":"The maximum value is inclusive if true, exclusive if false.","id":"includeMax","type":"System.Boolean"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.UIntRange.Includes(System.UInt32,System.Boolean,System.Boolean)"},{"children":null,"id":"Clamp(System.UInt32)","implements":["Zigurous.Architecture.INumberRange{System.UInt32}.Clamp(System.UInt32)"],"inheritance":null,"inheritedMembers":null,"name":"Clamp(UInt32)","nameWithType":"UIntRange.Clamp(UInt32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UIntRange","remarks":null,"summary":"\nClamps a value to the range.\n","syntax":{"content":"public uint Clamp(uint value)","parameters":[{"description":"The value to clamp.","id":"value","type":"System.UInt32"}],"return":{"description":"The clamped value.","type":"System.UInt32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.UIntRange.Clamp(System.UInt32)"},{"children":null,"id":"Lerp(System.Single)","implements":["Zigurous.Architecture.INumberRange{System.UInt32}.Lerp(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"Lerp(Single)","nameWithType":"UIntRange.Lerp(Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UIntRange","remarks":null,"summary":"\nLinearly interpolates between the range by <code data-dev-comment-type=\"paramref\" class=\"paramref\">t</code>.\n","syntax":{"content":"public uint Lerp(float t)","parameters":[{"description":"The interpolant value between [0..1].","id":"t","type":"System.Single"}],"return":{"description":"The interpolated value.","type":"System.UInt32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.UIntRange.Lerp(System.Single)"},{"children":null,"id":"InverseLerp(System.UInt32)","implements":["Zigurous.Architecture.INumberRange{System.UInt32}.InverseLerp(System.UInt32)"],"inheritance":null,"inheritedMembers":null,"name":"InverseLerp(UInt32)","nameWithType":"UIntRange.InverseLerp(UInt32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UIntRange","remarks":null,"summary":"\nCalculates the linear parameter t that produces the interpolant\nvalue within the range.\n","syntax":{"content":"public float InverseLerp(uint value)","parameters":[{"description":"The value within the range you want to calculate.","id":"value","type":"System.UInt32"}],"return":{"description":"The interpolant value between [0..1].","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.UIntRange.InverseLerp(System.UInt32)"}]},{"items":[{"children":["Zigurous.Architecture.UIntReference.#ctor","Zigurous.Architecture.UIntReference.#ctor(System.UInt32)","Zigurous.Architecture.UIntReference.#ctor(Zigurous.Architecture.UIntVariable)","Zigurous.Architecture.UIntReference.op_Implicit(Zigurous.Architecture.UIntReference)~System.UInt32"],"id":"UIntReference","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ValueReference{System.UInt32,Zigurous.Architecture.UIntVariable}"],"inheritedMembers":["Zigurous.Architecture.ValueReference{System.UInt32,Zigurous.Architecture.UIntVariable}.useConstant","Zigurous.Architecture.ValueReference{System.UInt32,Zigurous.Architecture.UIntVariable}.constantValue","Zigurous.Architecture.ValueReference{System.UInt32,Zigurous.Architecture.UIntVariable}.variable","Zigurous.Architecture.ValueReference{System.UInt32,Zigurous.Architecture.UIntVariable}.value"],"name":"UIntReference","nameWithType":"UIntReference","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA reference to a uint value, either a constant or <xref href=\"Zigurous.Architecture.UIntVariable\" data-throw-if-not-resolved=\"false\"></xref>.\n","syntax":{"content":"[Serializable]\npublic class UIntReference : ValueReference<uint, UIntVariable>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.UIntReference"},{"children":null,"id":"#ctor","implements":null,"inheritance":null,"inheritedMembers":null,"name":"UIntReference()","nameWithType":"UIntReference.UIntReference()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UIntReference","remarks":null,"summary":"\nCreates a new uint reference.\n","syntax":{"content":"public UIntReference()","parameters":null,"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.UIntReference.#ctor"},{"children":null,"id":"#ctor(System.UInt32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"UIntReference(UInt32)","nameWithType":"UIntReference.UIntReference(UInt32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UIntReference","remarks":null,"summary":"\nCreates a new uint reference with the constant value.\n","syntax":{"content":"public UIntReference(uint value)","parameters":[{"description":"The constant value to set.","id":"value","type":"System.UInt32"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.UIntReference.#ctor(System.UInt32)"},{"children":null,"id":"#ctor(Zigurous.Architecture.UIntVariable)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"UIntReference(UIntVariable)","nameWithType":"UIntReference.UIntReference(UIntVariable)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UIntReference","remarks":null,"summary":"\nCreates a new uint reference to the variable value.\n","syntax":{"content":"public UIntReference(UIntVariable variable)","parameters":[{"description":"The variable to reference.","id":"variable","type":"Zigurous.Architecture.UIntVariable"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.UIntReference.#ctor(Zigurous.Architecture.UIntVariable)"},{"children":null,"id":"op_Implicit(Zigurous.Architecture.UIntReference)~System.UInt32","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Implicit(UIntReference to UInt32)","nameWithType":"UIntReference.Implicit(UIntReference to UInt32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UIntReference","remarks":null,"summary":"\nImplicitly converts the reference to a uint.\n","syntax":{"content":"public static implicit operator uint (UIntReference reference)","parameters":[{"description":"The reference to convert.","id":"reference","type":"Zigurous.Architecture.UIntReference"}],"return":{"description":"The uint value.","type":"System.UInt32"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.UIntReference.op_Implicit(Zigurous.Architecture.UIntReference)~System.UInt32"}]},{"items":[{"children":["Zigurous.Architecture.UIntVariable.value"],"id":"UIntVariable","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ScriptableVariable{System.UInt32}"],"inheritedMembers":null,"name":"UIntVariable","nameWithType":"UIntVariable","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA uint variable saved as a ScriptableObject.\n","syntax":{"content":"public class UIntVariable : ScriptableVariable<uint>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.UIntVariable"},{"children":null,"id":"value","implements":null,"inheritance":null,"inheritedMembers":null,"name":"value","nameWithType":"UIntVariable.value","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UIntVariable","remarks":null,"summary":"\nThe value of the variable.\n","syntax":{"content":"public override uint value { get; set; }","parameters":[],"return":{"description":null,"type":"System.UInt32"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.UIntVariable.value"}]},{"items":[{"children":["Zigurous.Architecture.UnitIntervalRange.#ctor(System.Single,System.Single)","Zigurous.Architecture.UnitIntervalRange.Clamp(System.Single)","Zigurous.Architecture.UnitIntervalRange.delta","Zigurous.Architecture.UnitIntervalRange.Includes(System.Single)","Zigurous.Architecture.UnitIntervalRange.Includes(System.Single,System.Boolean,System.Boolean)","Zigurous.Architecture.UnitIntervalRange.InverseLerp(System.Single)","Zigurous.Architecture.UnitIntervalRange.Lerp(System.Single)","Zigurous.Architecture.UnitIntervalRange.max","Zigurous.Architecture.UnitIntervalRange.median","Zigurous.Architecture.UnitIntervalRange.min","Zigurous.Architecture.UnitIntervalRange.minMax","Zigurous.Architecture.UnitIntervalRange.one","Zigurous.Architecture.UnitIntervalRange.Random","Zigurous.Architecture.UnitIntervalRange.zero"],"id":"UnitIntervalRange","implements":["Zigurous.Architecture.INumberRange{System.Single}","Zigurous.Architecture.IRange{System.Single}"],"inheritance":null,"inheritedMembers":null,"name":"UnitIntervalRange","nameWithType":"UnitIntervalRange","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA range of values between zero and one.\n","syntax":{"content":"[Serializable]\npublic struct UnitIntervalRange : INumberRange<float>, IRange<float>","parameters":null,"return":null,"typeParameters":null},"type":"Struct","uid":"Zigurous.Architecture.UnitIntervalRange"},{"children":null,"id":"zero","implements":null,"inheritance":null,"inheritedMembers":null,"name":"zero","nameWithType":"UnitIntervalRange.zero","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UnitIntervalRange","remarks":null,"summary":"\nShorthand for writing <code>UnitIntervalRange(0f, 0f)</code>.\n","syntax":{"content":"public static readonly UnitIntervalRange zero { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.UnitIntervalRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.UnitIntervalRange.zero"},{"children":null,"id":"one","implements":null,"inheritance":null,"inheritedMembers":null,"name":"one","nameWithType":"UnitIntervalRange.one","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UnitIntervalRange","remarks":null,"summary":"\nShorthand for writing <code>UnitIntervalRange(1f, 1f)</code>.\n","syntax":{"content":"public static readonly UnitIntervalRange one { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.UnitIntervalRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.UnitIntervalRange.one"},{"children":null,"id":"minMax","implements":null,"inheritance":null,"inheritedMembers":null,"name":"minMax","nameWithType":"UnitIntervalRange.minMax","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UnitIntervalRange","remarks":null,"summary":"\nShorthand for writing <code>UnitIntervalRange(0f, 1f)</code>.\n","syntax":{"content":"public static readonly UnitIntervalRange minMax { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.Architecture.UnitIntervalRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.UnitIntervalRange.minMax"},{"children":null,"id":"min","implements":["Zigurous.Architecture.IRange{System.Single}.min"],"inheritance":null,"inheritedMembers":null,"name":"min","nameWithType":"UnitIntervalRange.min","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UnitIntervalRange","remarks":null,"summary":"\nThe lower bound of the range.\n","syntax":{"content":"public float min { get; set; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.UnitIntervalRange.min"},{"children":null,"id":"max","implements":["Zigurous.Architecture.IRange{System.Single}.max"],"inheritance":null,"inheritedMembers":null,"name":"max","nameWithType":"UnitIntervalRange.max","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UnitIntervalRange","remarks":null,"summary":"\nThe upper bound of the range.\n","syntax":{"content":"public float max { get; set; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.UnitIntervalRange.max"},{"children":null,"id":"delta","implements":["Zigurous.Architecture.INumberRange{System.Single}.delta"],"inheritance":null,"inheritedMembers":null,"name":"delta","nameWithType":"UnitIntervalRange.delta","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UnitIntervalRange","remarks":null,"summary":"\nThe difference between the maximum and minimum values (Read only).\n","syntax":{"content":"public readonly float delta { get; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.UnitIntervalRange.delta"},{"children":null,"id":"median","implements":["Zigurous.Architecture.INumberRange{System.Single}.median"],"inheritance":null,"inheritedMembers":null,"name":"median","nameWithType":"UnitIntervalRange.median","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UnitIntervalRange","remarks":null,"summary":"\nThe median value of the range (Read only).\n","syntax":{"content":"public readonly float median { get; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.UnitIntervalRange.median"},{"children":null,"id":"#ctor(System.Single,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"UnitIntervalRange(Single, Single)","nameWithType":"UnitIntervalRange.UnitIntervalRange(Single, Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UnitIntervalRange","remarks":null,"summary":"\nCreates a new range with the specified values.\n","syntax":{"content":"public UnitIntervalRange(float min = 0F, float max = 1F)","parameters":[{"description":"The lower bound of the range.","id":"min","type":"System.Single"},{"description":"The upper bound of the range.","id":"max","type":"System.Single"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.UnitIntervalRange.#ctor(System.Single,System.Single)"},{"children":null,"id":"Random","implements":["Zigurous.Architecture.INumberRange{System.Single}.Random"],"inheritance":null,"inheritedMembers":null,"name":"Random()","nameWithType":"UnitIntervalRange.Random()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UnitIntervalRange","remarks":null,"summary":"\nReturns a random value in the range.\n","syntax":{"content":"public float Random()","parameters":null,"return":{"description":"A random value in the range.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.UnitIntervalRange.Random"},{"children":null,"id":"Includes(System.Single)","implements":["Zigurous.Architecture.IRange{System.Single}.Includes(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Single)","nameWithType":"UnitIntervalRange.Includes(Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UnitIntervalRange","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(float value)","parameters":[{"description":"The value to check.","id":"value","type":"System.Single"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.UnitIntervalRange.Includes(System.Single)"},{"children":null,"id":"Includes(System.Single,System.Boolean,System.Boolean)","implements":["Zigurous.Architecture.IRange{System.Single}.Includes(System.Single,System.Boolean,System.Boolean)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Single, Boolean, Boolean)","nameWithType":"UnitIntervalRange.Includes(Single, Boolean, Boolean)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UnitIntervalRange","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(float value, bool includeMin, bool includeMax)","parameters":[{"description":"The value to check.","id":"value","type":"System.Single"},{"description":"The minimum value is inclusive if true, exclusive if false.","id":"includeMin","type":"System.Boolean"},{"description":"The maximum value is inclusive if true, exclusive if false.","id":"includeMax","type":"System.Boolean"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.UnitIntervalRange.Includes(System.Single,System.Boolean,System.Boolean)"},{"children":null,"id":"Clamp(System.Single)","implements":["Zigurous.Architecture.INumberRange{System.Single}.Clamp(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"Clamp(Single)","nameWithType":"UnitIntervalRange.Clamp(Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UnitIntervalRange","remarks":null,"summary":"\nClamps a value to the range.\n","syntax":{"content":"public float Clamp(float value)","parameters":[{"description":"The value to clamp.","id":"value","type":"System.Single"}],"return":{"description":"The clamped value.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.UnitIntervalRange.Clamp(System.Single)"},{"children":null,"id":"Lerp(System.Single)","implements":["Zigurous.Architecture.INumberRange{System.Single}.Lerp(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"Lerp(Single)","nameWithType":"UnitIntervalRange.Lerp(Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UnitIntervalRange","remarks":null,"summary":"\nLinearly interpolates between the range by <code data-dev-comment-type=\"paramref\" class=\"paramref\">t</code>.\n","syntax":{"content":"public float Lerp(float t)","parameters":[{"description":"The interpolant value between [0..1].","id":"t","type":"System.Single"}],"return":{"description":"The interpolated value.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.UnitIntervalRange.Lerp(System.Single)"},{"children":null,"id":"InverseLerp(System.Single)","implements":["Zigurous.Architecture.INumberRange{System.Single}.InverseLerp(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"InverseLerp(Single)","nameWithType":"UnitIntervalRange.InverseLerp(Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UnitIntervalRange","remarks":null,"summary":"\nCalculates the linear parameter t that produces the interpolant\nvalue within the range.\n","syntax":{"content":"public float InverseLerp(float value)","parameters":[{"description":"The value within the range you want to calculate.","id":"value","type":"System.Single"}],"return":{"description":"The interpolant value between [0..1].","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.UnitIntervalRange.InverseLerp(System.Single)"}]},{"items":[{"children":["Zigurous.Architecture.UpdateBehaviour.customStrategy","Zigurous.Architecture.UpdateBehaviour.OnDisable","Zigurous.Architecture.UpdateBehaviour.OnEnable","Zigurous.Architecture.UpdateBehaviour.OnUpdate(System.Single)","Zigurous.Architecture.UpdateBehaviour.updateMode"],"id":"UpdateBehaviour","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"UpdateBehaviour","nameWithType":"UpdateBehaviour","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA behaviour that can run in any update mode. The update mode can be\nchanged as needed without occuring any additional performance cost.\n","syntax":{"content":"public abstract class UpdateBehaviour : MonoBehaviour","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.UpdateBehaviour"},{"children":null,"id":"updateMode","implements":null,"inheritance":null,"inheritedMembers":null,"name":"updateMode","nameWithType":"UpdateBehaviour.updateMode","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UpdateBehaviour","remarks":null,"summary":"\nThe update mode of the behavior.\n","syntax":{"content":"public UpdateMode updateMode","parameters":null,"return":{"description":null,"type":"Zigurous.Architecture.UpdateMode"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.UpdateBehaviour.updateMode"},{"children":null,"id":"customStrategy","implements":null,"inheritance":null,"inheritedMembers":null,"name":"customStrategy","nameWithType":"UpdateBehaviour.customStrategy","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UpdateBehaviour","remarks":null,"summary":"\nThe custom update strategy to use.\n","syntax":{"content":"public UpdateStrategy customStrategy","parameters":null,"return":{"description":null,"type":"Zigurous.Architecture.UpdateStrategy"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.UpdateBehaviour.customStrategy"},{"children":null,"id":"OnUpdate(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnUpdate(Single)","nameWithType":"UpdateBehaviour.OnUpdate(Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UpdateBehaviour","remarks":null,"summary":"\nHandles behavior updates.\n","syntax":{"content":"protected abstract void OnUpdate(float deltaTime)","parameters":[{"description":"The time since the last frame.","id":"deltaTime","type":"System.Single"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.UpdateBehaviour.OnUpdate(System.Single)"},{"children":null,"id":"OnEnable","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnEnable()","nameWithType":"UpdateBehaviour.OnEnable()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UpdateBehaviour","remarks":null,"summary":"\nA Unity lifecycle method called when the behavior is enabled.\n","syntax":{"content":"protected virtual void OnEnable()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.UpdateBehaviour.OnEnable"},{"children":null,"id":"OnDisable","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnDisable()","nameWithType":"UpdateBehaviour.OnDisable()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UpdateBehaviour","remarks":null,"summary":"\nA Unity lifecycle method called when the behavior is disabled.\n","syntax":{"content":"protected virtual void OnDisable()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.UpdateBehaviour.OnDisable"}]},{"items":[{"children":[],"id":"UpdateStrategy.UpdateAction","implements":null,"inheritance":null,"inheritedMembers":null,"name":"UpdateStrategy.UpdateAction","nameWithType":"UpdateStrategy.UpdateAction","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA function delegate to execute an update action.\n","syntax":{"content":"public delegate void UpdateAction(float deltaTime);","parameters":[{"description":"The time since the last frame.","id":"deltaTime","type":"System.Single"}],"return":null,"typeParameters":null},"type":"Delegate","uid":"Zigurous.Architecture.UpdateStrategy.UpdateAction"}]},{"items":[{"children":["Zigurous.Architecture.UpdateMode.Custom","Zigurous.Architecture.UpdateMode.FixedUpdate","Zigurous.Architecture.UpdateMode.LateUpdate","Zigurous.Architecture.UpdateMode.Update"],"id":"UpdateMode","implements":null,"inheritance":null,"inheritedMembers":null,"name":"UpdateMode","nameWithType":"UpdateMode","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nAn update mode a behavior can run with.\n","syntax":{"content":"public enum UpdateMode","parameters":null,"return":null,"typeParameters":null},"type":"Enum","uid":"Zigurous.Architecture.UpdateMode"},{"children":null,"id":"Update","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Update","nameWithType":"UpdateMode.Update","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UpdateMode","remarks":null,"summary":"\nUpdates during the normal loop, once every frame.\n","syntax":{"content":"Update = 0","parameters":null,"return":{"description":null,"type":"Zigurous.Architecture.UpdateMode"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.UpdateMode.Update"},{"children":null,"id":"LateUpdate","implements":null,"inheritance":null,"inheritedMembers":null,"name":"LateUpdate","nameWithType":"UpdateMode.LateUpdate","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UpdateMode","remarks":null,"summary":"\nUpdates after all other update functions, once every frame.\n","syntax":{"content":"LateUpdate = 1","parameters":null,"return":{"description":null,"type":"Zigurous.Architecture.UpdateMode"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.UpdateMode.LateUpdate"},{"children":null,"id":"FixedUpdate","implements":null,"inheritance":null,"inheritedMembers":null,"name":"FixedUpdate","nameWithType":"UpdateMode.FixedUpdate","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UpdateMode","remarks":null,"summary":"\nUpdates during the physics loop at a fixed timestep.\n","syntax":{"content":"FixedUpdate = 2","parameters":null,"return":{"description":null,"type":"Zigurous.Architecture.UpdateMode"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.UpdateMode.FixedUpdate"},{"children":null,"id":"Custom","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Custom","nameWithType":"UpdateMode.Custom","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UpdateMode","remarks":null,"summary":"\nUpdates using a custom update loop.\n","syntax":{"content":"Custom = 3","parameters":null,"return":{"description":null,"type":"Zigurous.Architecture.UpdateMode"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.UpdateMode.Custom"}]},{"items":[{"children":["Zigurous.Architecture.UpdateStrategy.Execute(System.Single)","Zigurous.Architecture.UpdateStrategy.Register(Zigurous.Architecture.UpdateStrategy.UpdateAction)","Zigurous.Architecture.UpdateStrategy.Unregister(Zigurous.Architecture.UpdateStrategy.UpdateAction)"],"id":"UpdateStrategy","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"UpdateStrategy","nameWithType":"UpdateStrategy","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nAn update strategy that executes an update action.\n","syntax":{"content":"public abstract class UpdateStrategy : MonoBehaviour","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.UpdateStrategy"},{"children":null,"id":"Execute(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Execute(Single)","nameWithType":"UpdateStrategy.Execute(Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UpdateStrategy","remarks":null,"summary":"\nExecutes the update action.\n","syntax":{"content":"public void Execute(float deltaTime)","parameters":[{"description":"The time since the last frame.","id":"deltaTime","type":"System.Single"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.UpdateStrategy.Execute(System.Single)"},{"children":null,"id":"Register(Zigurous.Architecture.UpdateStrategy.UpdateAction)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Register(UpdateStrategy.UpdateAction)","nameWithType":"UpdateStrategy.Register(UpdateStrategy.UpdateAction)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UpdateStrategy","remarks":null,"summary":"\nRegisters an update action to be executed by the strategy.\n","syntax":{"content":"public void Register(UpdateStrategy.UpdateAction action)","parameters":[{"description":"The update action to register.","id":"action","type":"Zigurous.Architecture.UpdateStrategy.UpdateAction"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.UpdateStrategy.Register(Zigurous.Architecture.UpdateStrategy.UpdateAction)"},{"children":null,"id":"Unregister(Zigurous.Architecture.UpdateStrategy.UpdateAction)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Unregister(UpdateStrategy.UpdateAction)","nameWithType":"UpdateStrategy.Unregister(UpdateStrategy.UpdateAction)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.UpdateStrategy","remarks":null,"summary":"\nUnregisters an update action from being executed by the strategy.\n","syntax":{"content":"public void Unregister(UpdateStrategy.UpdateAction action)","parameters":[{"description":"The update action to unregister.","id":"action","type":"Zigurous.Architecture.UpdateStrategy.UpdateAction"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.UpdateStrategy.Unregister(Zigurous.Architecture.UpdateStrategy.UpdateAction)"}]},{"items":[{"children":["Zigurous.Architecture.ValueAccumulator`1.#ctor","Zigurous.Architecture.ValueAccumulator`1.Add(`0)","Zigurous.Architecture.ValueAccumulator`1.Clear","Zigurous.Architecture.ValueAccumulator`1.count","Zigurous.Architecture.ValueAccumulator`1.defaultValue","Zigurous.Architecture.ValueAccumulator`1.GetValue(System.Int32)","Zigurous.Architecture.ValueAccumulator`1.RemoveValue(System.Int32)","Zigurous.Architecture.ValueAccumulator`1.SetValue(System.Int32,`0)","Zigurous.Architecture.ValueAccumulator`1.Subtract(`0)","Zigurous.Architecture.ValueAccumulator`1.total","Zigurous.Architecture.ValueAccumulator`1.values"],"id":"ValueAccumulator`1","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"ValueAccumulator<T>","nameWithType":"ValueAccumulator<T>","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nAccumulates a set of stored values into a single total value.\n","syntax":{"content":"public abstract class ValueAccumulator<T>","parameters":null,"return":null,"typeParameters":[{"description":"The type of value to accumulate.","id":"T"}]},"type":"Class","uid":"Zigurous.Architecture.ValueAccumulator`1"},{"children":null,"id":"values","implements":null,"inheritance":null,"inheritedMembers":null,"name":"values","nameWithType":"ValueAccumulator<T>.values","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ValueAccumulator`1","remarks":null,"summary":"\nThe stored values with their given identifiers (Read only).\n","syntax":{"content":"public readonly Dictionary<int, T> values","parameters":null,"return":{"description":null,"type":"Global.Dictionary{System.Int32,{T}}"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.ValueAccumulator`1.values"},{"children":null,"id":"total","implements":null,"inheritance":null,"inheritedMembers":null,"name":"total","nameWithType":"ValueAccumulator<T>.total","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ValueAccumulator`1","remarks":null,"summary":"\nThe total accumulated value (Read only).\n","syntax":{"content":"public T total { get; protected set; }","parameters":[],"return":{"description":null,"type":"{T}"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.ValueAccumulator`1.total"},{"children":null,"id":"count","implements":null,"inheritance":null,"inheritedMembers":null,"name":"count","nameWithType":"ValueAccumulator<T>.count","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ValueAccumulator`1","remarks":null,"summary":"\nThe number of unique values being accumulated (Read only).\n","syntax":{"content":"public int count { get; }","parameters":[],"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.ValueAccumulator`1.count"},{"children":null,"id":"defaultValue","implements":null,"inheritance":null,"inheritedMembers":null,"name":"defaultValue","nameWithType":"ValueAccumulator<T>.defaultValue","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ValueAccumulator`1","remarks":null,"summary":"\nThe default value of <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code>.\n","syntax":{"content":"protected virtual T defaultValue { get; }","parameters":[],"return":{"description":null,"type":"{T}"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.ValueAccumulator`1.defaultValue"},{"children":null,"id":"#ctor","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ValueAccumulator()","nameWithType":"ValueAccumulator<T>.ValueAccumulator()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ValueAccumulator`1","remarks":null,"summary":"\nCreates a new instance of the value accumulator.\n","syntax":{"content":"public ValueAccumulator()","parameters":null,"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.ValueAccumulator`1.#ctor"},{"children":null,"id":"GetValue(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetValue(Int32)","nameWithType":"ValueAccumulator<T>.GetValue(Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ValueAccumulator`1","remarks":null,"summary":"\nReturns the value stored with the specified identifier.\n","syntax":{"content":"public T GetValue(int identifier)","parameters":[{"description":"The identifier of the stored value.","id":"identifier","type":"System.Int32"}],"return":{"description":"The value stored with the identifier, or <code>default(T)</code> if the value does not exist.","type":"{T}"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.ValueAccumulator`1.GetValue(System.Int32)"},{"children":null,"id":"SetValue(System.Int32,`0)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SetValue(Int32, T)","nameWithType":"ValueAccumulator<T>.SetValue(Int32, T)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ValueAccumulator`1","remarks":null,"summary":"\nStores a given value with the specified identifier. The total\naccumulated value is updated based on the difference between the new\nand old value.\n","syntax":{"content":"public void SetValue(int identifier, T value)","parameters":[{"description":"The identifier of the value.","id":"identifier","type":"System.Int32"},{"description":"The value to set.","id":"value","type":"{T}"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.ValueAccumulator`1.SetValue(System.Int32,`0)"},{"children":null,"id":"RemoveValue(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"RemoveValue(Int32)","nameWithType":"ValueAccumulator<T>.RemoveValue(Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ValueAccumulator`1","remarks":null,"summary":"\nRemoves the value stored with the given identifier and updates the\ntotal accumulated value.\n","syntax":{"content":"public void RemoveValue(int identifier)","parameters":[{"description":"The identifier of the stored value to remove.","id":"identifier","type":"System.Int32"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.ValueAccumulator`1.RemoveValue(System.Int32)"},{"children":null,"id":"Clear","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clear()","nameWithType":"ValueAccumulator<T>.Clear()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ValueAccumulator`1","remarks":null,"summary":"\nRemoves all stored values and resets the total accumulated value.\n","syntax":{"content":"public void Clear()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.ValueAccumulator`1.Clear"},{"children":null,"id":"Add(`0)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Add(T)","nameWithType":"ValueAccumulator<T>.Add(T)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ValueAccumulator`1","remarks":null,"summary":"\nIncreases the accumulated total by a given value.\n","syntax":{"content":"protected abstract T Add(T value)","parameters":[{"description":"The value to add to the total.","id":"value","type":"{T}"}],"return":{"description":"The new total value.","type":"{T}"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.ValueAccumulator`1.Add(`0)"},{"children":null,"id":"Subtract(`0)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Subtract(T)","nameWithType":"ValueAccumulator<T>.Subtract(T)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ValueAccumulator`1","remarks":null,"summary":"\nDecreases the accumulated total by a given value.\n","syntax":{"content":"protected abstract T Subtract(T value)","parameters":[{"description":"The value to subtract from the total.","id":"value","type":"{T}"}],"return":{"description":"The new total value.","type":"{T}"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.ValueAccumulator`1.Subtract(`0)"}]},{"items":[{"children":["Zigurous.Architecture.ValueReference`2.#ctor","Zigurous.Architecture.ValueReference`2.#ctor(`0)","Zigurous.Architecture.ValueReference`2.#ctor(`1)","Zigurous.Architecture.ValueReference`2.constantValue","Zigurous.Architecture.ValueReference`2.useConstant","Zigurous.Architecture.ValueReference`2.value","Zigurous.Architecture.ValueReference`2.variable"],"id":"ValueReference`2","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"ValueReference<TValue, TVariable>","nameWithType":"ValueReference<TValue, TVariable>","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA reference to a value of the specified type, either a constant or a variable.\n","syntax":{"content":"[Serializable]\npublic abstract class ValueReference<TValue, TVariable>\n    where TVariable : ScriptableVariable<TValue>","parameters":null,"return":null,"typeParameters":[{"description":"The type of value.","id":"TValue"},{"description":"The type of variable reference.","id":"TVariable"}]},"type":"Class","uid":"Zigurous.Architecture.ValueReference`2"},{"children":null,"id":"useConstant","implements":null,"inheritance":null,"inheritedMembers":null,"name":"useConstant","nameWithType":"ValueReference<TValue, TVariable>.useConstant","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ValueReference`2","remarks":null,"summary":"\nUses a constant value instead of a variable reference.\n","syntax":{"content":"public bool useConstant","parameters":null,"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.ValueReference`2.useConstant"},{"children":null,"id":"constantValue","implements":null,"inheritance":null,"inheritedMembers":null,"name":"constantValue","nameWithType":"ValueReference<TValue, TVariable>.constantValue","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ValueReference`2","remarks":null,"summary":"\nThe constant value to use.\n","syntax":{"content":"public TValue constantValue","parameters":null,"return":{"description":null,"type":"{TValue}"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.ValueReference`2.constantValue"},{"children":null,"id":"variable","implements":null,"inheritance":null,"inheritedMembers":null,"name":"variable","nameWithType":"ValueReference<TValue, TVariable>.variable","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ValueReference`2","remarks":null,"summary":"\nThe variable to reference.\n","syntax":{"content":"public TVariable variable","parameters":null,"return":{"description":null,"type":"{TVariable}"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.ValueReference`2.variable"},{"children":null,"id":"value","implements":null,"inheritance":null,"inheritedMembers":null,"name":"value","nameWithType":"ValueReference<TValue, TVariable>.value","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ValueReference`2","remarks":null,"summary":"\nThe current value, either the constant value if set to use constant\nor the value of the variable reference.\n","syntax":{"content":"public TValue value { get; }","parameters":[],"return":{"description":null,"type":"{TValue}"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.ValueReference`2.value"},{"children":null,"id":"#ctor","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ValueReference()","nameWithType":"ValueReference<TValue, TVariable>.ValueReference()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ValueReference`2","remarks":null,"summary":"\nCreates a new value reference.\n","syntax":{"content":"public ValueReference()","parameters":null,"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.ValueReference`2.#ctor"},{"children":null,"id":"#ctor(`0)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ValueReference(TValue)","nameWithType":"ValueReference<TValue, TVariable>.ValueReference(TValue)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ValueReference`2","remarks":null,"summary":"\nCreates a new value reference with the constant value.\n","syntax":{"content":"public ValueReference(TValue value)","parameters":[{"description":"The constant value to set.","id":"value","type":"{TValue}"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.ValueReference`2.#ctor(`0)"},{"children":null,"id":"#ctor(`1)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ValueReference(TVariable)","nameWithType":"ValueReference<TValue, TVariable>.ValueReference(TVariable)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ValueReference`2","remarks":null,"summary":"\nCreates a new value reference to the variable value.\n","syntax":{"content":"public ValueReference(TVariable variable)","parameters":[{"description":"The variable to reference.","id":"variable","type":"{TVariable}"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.ValueReference`2.#ctor(`1)"}]},{"items":[{"children":["Zigurous.Architecture.Vector2Accumulator.Add(Vector2)","Zigurous.Architecture.Vector2Accumulator.defaultValue","Zigurous.Architecture.Vector2Accumulator.Subtract(Vector2)"],"id":"Vector2Accumulator","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ValueAccumulator{Vector2}"],"inheritedMembers":["Zigurous.Architecture.ValueAccumulator{Vector2}.values","Zigurous.Architecture.ValueAccumulator{Vector2}.total","Zigurous.Architecture.ValueAccumulator{Vector2}.count","Zigurous.Architecture.ValueAccumulator{Vector2}.GetValue(System.Int32)","Zigurous.Architecture.ValueAccumulator{Vector2}.SetValue(System.Int32,Vector2)","Zigurous.Architecture.ValueAccumulator{Vector2}.RemoveValue(System.Int32)","Zigurous.Architecture.ValueAccumulator{Vector2}.Clear"],"name":"Vector2Accumulator","nameWithType":"Vector2Accumulator","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nAccumulates Vector2 values into a single total value.\n","syntax":{"content":"public sealed class Vector2Accumulator : ValueAccumulator<Vector2>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.Vector2Accumulator"},{"children":null,"id":"defaultValue","implements":null,"inheritance":null,"inheritedMembers":null,"name":"defaultValue","nameWithType":"Vector2Accumulator.defaultValue","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector2Accumulator","remarks":null,"summary":"\nThe default value of <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code>.\n","syntax":{"content":"protected override Vector2 defaultValue { get; }","parameters":[],"return":{"description":null,"type":"Global.Vector2"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Vector2Accumulator.defaultValue"},{"children":null,"id":"Add(Vector2)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Add(Vector2)","nameWithType":"Vector2Accumulator.Add(Vector2)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector2Accumulator","remarks":null,"summary":"\nIncreases the accumulated total by a given value.\n","syntax":{"content":"protected override Vector2 Add(Vector2 value)","parameters":[{"description":"The value to add to the total.","id":"value","type":"Global.Vector2"}],"return":{"description":"The new total value.","type":"Global.Vector2"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector2Accumulator.Add(Vector2)"},{"children":null,"id":"Subtract(Vector2)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Subtract(Vector2)","nameWithType":"Vector2Accumulator.Subtract(Vector2)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector2Accumulator","remarks":null,"summary":"\nDecreases the accumulated total by a given value.\n","syntax":{"content":"protected override Vector2 Subtract(Vector2 value)","parameters":[{"description":"The value to subtract from the total.","id":"value","type":"Global.Vector2"}],"return":{"description":"The new total value.","type":"Global.Vector2"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector2Accumulator.Subtract(Vector2)"}]},{"items":[{"children":["Zigurous.Architecture.Vector2IntAccumulator.Add(Vector2Int)","Zigurous.Architecture.Vector2IntAccumulator.defaultValue","Zigurous.Architecture.Vector2IntAccumulator.Subtract(Vector2Int)"],"id":"Vector2IntAccumulator","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ValueAccumulator{Vector2Int}"],"inheritedMembers":["Zigurous.Architecture.ValueAccumulator{Vector2Int}.values","Zigurous.Architecture.ValueAccumulator{Vector2Int}.total","Zigurous.Architecture.ValueAccumulator{Vector2Int}.count","Zigurous.Architecture.ValueAccumulator{Vector2Int}.GetValue(System.Int32)","Zigurous.Architecture.ValueAccumulator{Vector2Int}.SetValue(System.Int32,Vector2Int)","Zigurous.Architecture.ValueAccumulator{Vector2Int}.RemoveValue(System.Int32)","Zigurous.Architecture.ValueAccumulator{Vector2Int}.Clear"],"name":"Vector2IntAccumulator","nameWithType":"Vector2IntAccumulator","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nAccumulates Vector2Int values into a single total value.\n","syntax":{"content":"public sealed class Vector2IntAccumulator : ValueAccumulator<Vector2Int>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.Vector2IntAccumulator"},{"children":null,"id":"defaultValue","implements":null,"inheritance":null,"inheritedMembers":null,"name":"defaultValue","nameWithType":"Vector2IntAccumulator.defaultValue","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector2IntAccumulator","remarks":null,"summary":"\nThe default value of <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code>.\n","syntax":{"content":"protected override Vector2Int defaultValue { get; }","parameters":[],"return":{"description":null,"type":"Global.Vector2Int"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Vector2IntAccumulator.defaultValue"},{"children":null,"id":"Add(Vector2Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Add(Vector2Int)","nameWithType":"Vector2IntAccumulator.Add(Vector2Int)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector2IntAccumulator","remarks":null,"summary":"\nIncreases the accumulated total by a given value.\n","syntax":{"content":"protected override Vector2Int Add(Vector2Int value)","parameters":[{"description":"The value to add to the total.","id":"value","type":"Global.Vector2Int"}],"return":{"description":"The new total value.","type":"Global.Vector2Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector2IntAccumulator.Add(Vector2Int)"},{"children":null,"id":"Subtract(Vector2Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Subtract(Vector2Int)","nameWithType":"Vector2IntAccumulator.Subtract(Vector2Int)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector2IntAccumulator","remarks":null,"summary":"\nDecreases the accumulated total by a given value.\n","syntax":{"content":"protected override Vector2Int Subtract(Vector2Int value)","parameters":[{"description":"The value to subtract from the total.","id":"value","type":"Global.Vector2Int"}],"return":{"description":"The new total value.","type":"Global.Vector2Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector2IntAccumulator.Subtract(Vector2Int)"}]},{"items":[{"children":["Zigurous.Architecture.Vector2IntRange.#ctor(Vector2Int,Vector2Int)","Zigurous.Architecture.Vector2IntRange.Clamp(Vector2Int)","Zigurous.Architecture.Vector2IntRange.delta","Zigurous.Architecture.Vector2IntRange.Includes(Vector2Int)","Zigurous.Architecture.Vector2IntRange.Includes(Vector2Int,System.Boolean,System.Boolean)","Zigurous.Architecture.Vector2IntRange.InverseLerp(Vector2Int)","Zigurous.Architecture.Vector2IntRange.Lerp(System.Single)","Zigurous.Architecture.Vector2IntRange.max","Zigurous.Architecture.Vector2IntRange.median","Zigurous.Architecture.Vector2IntRange.min","Zigurous.Architecture.Vector2IntRange.Random"],"id":"Vector2IntRange","implements":["Zigurous.Architecture.INumberRange{Vector2Int}","Zigurous.Architecture.IRange{Vector2Int}"],"inheritance":null,"inheritedMembers":null,"name":"Vector2IntRange","nameWithType":"Vector2IntRange","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA range of Vector2Int values.\n","syntax":{"content":"[Serializable]\npublic struct Vector2IntRange : INumberRange<Vector2Int>, IRange<Vector2Int>","parameters":null,"return":null,"typeParameters":null},"type":"Struct","uid":"Zigurous.Architecture.Vector2IntRange"},{"children":null,"id":"min","implements":["Zigurous.Architecture.IRange{Vector2Int}.min"],"inheritance":null,"inheritedMembers":null,"name":"min","nameWithType":"Vector2IntRange.min","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector2IntRange","remarks":null,"summary":"\nThe lower bound of the range.\n","syntax":{"content":"public Vector2Int min { get; set; }","parameters":[],"return":{"description":null,"type":"Global.Vector2Int"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Vector2IntRange.min"},{"children":null,"id":"max","implements":["Zigurous.Architecture.IRange{Vector2Int}.max"],"inheritance":null,"inheritedMembers":null,"name":"max","nameWithType":"Vector2IntRange.max","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector2IntRange","remarks":null,"summary":"\nThe upper bound of the range.\n","syntax":{"content":"public Vector2Int max { get; set; }","parameters":[],"return":{"description":null,"type":"Global.Vector2Int"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Vector2IntRange.max"},{"children":null,"id":"delta","implements":["Zigurous.Architecture.INumberRange{Vector2Int}.delta"],"inheritance":null,"inheritedMembers":null,"name":"delta","nameWithType":"Vector2IntRange.delta","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector2IntRange","remarks":null,"summary":"\nThe difference between the maximum and minimum values (Read only).\n","syntax":{"content":"public readonly Vector2Int delta { get; }","parameters":[],"return":{"description":null,"type":"Global.Vector2Int"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Vector2IntRange.delta"},{"children":null,"id":"median","implements":["Zigurous.Architecture.INumberRange{Vector2Int}.median"],"inheritance":null,"inheritedMembers":null,"name":"median","nameWithType":"Vector2IntRange.median","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector2IntRange","remarks":null,"summary":"\nThe median value of the range (Read only).\n","syntax":{"content":"public readonly Vector2Int median { get; }","parameters":[],"return":{"description":null,"type":"Global.Vector2Int"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Vector2IntRange.median"},{"children":null,"id":"#ctor(Vector2Int,Vector2Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Vector2IntRange(Vector2Int, Vector2Int)","nameWithType":"Vector2IntRange.Vector2IntRange(Vector2Int, Vector2Int)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector2IntRange","remarks":null,"summary":"\nCreates a new range with the specified values.\n","syntax":{"content":"public Vector2IntRange(Vector2Int min, Vector2Int max)","parameters":[{"description":"The lower bound of the range.","id":"min","type":"Global.Vector2Int"},{"description":"The upper bound of the range.","id":"max","type":"Global.Vector2Int"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.Vector2IntRange.#ctor(Vector2Int,Vector2Int)"},{"children":null,"id":"Random","implements":["Zigurous.Architecture.INumberRange{Vector2Int}.Random"],"inheritance":null,"inheritedMembers":null,"name":"Random()","nameWithType":"Vector2IntRange.Random()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector2IntRange","remarks":null,"summary":"\nReturns a random value in the range.\n","syntax":{"content":"public Vector2Int Random()","parameters":null,"return":{"description":"A random value in the range.","type":"Global.Vector2Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector2IntRange.Random"},{"children":null,"id":"Includes(Vector2Int)","implements":["Zigurous.Architecture.IRange{Vector2Int}.Includes(Vector2Int)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Vector2Int)","nameWithType":"Vector2IntRange.Includes(Vector2Int)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector2IntRange","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(Vector2Int value)","parameters":[{"description":"The value to check.","id":"value","type":"Global.Vector2Int"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector2IntRange.Includes(Vector2Int)"},{"children":null,"id":"Includes(Vector2Int,System.Boolean,System.Boolean)","implements":["Zigurous.Architecture.IRange{Vector2Int}.Includes(Vector2Int,System.Boolean,System.Boolean)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Vector2Int, Boolean, Boolean)","nameWithType":"Vector2IntRange.Includes(Vector2Int, Boolean, Boolean)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector2IntRange","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(Vector2Int value, bool includeMin, bool includeMax)","parameters":[{"description":"The value to check.","id":"value","type":"Global.Vector2Int"},{"description":"The minimum value is inclusive if true, exclusive if false.","id":"includeMin","type":"System.Boolean"},{"description":"The maximum value is inclusive if true, exclusive if false.","id":"includeMax","type":"System.Boolean"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector2IntRange.Includes(Vector2Int,System.Boolean,System.Boolean)"},{"children":null,"id":"Clamp(Vector2Int)","implements":["Zigurous.Architecture.INumberRange{Vector2Int}.Clamp(Vector2Int)"],"inheritance":null,"inheritedMembers":null,"name":"Clamp(Vector2Int)","nameWithType":"Vector2IntRange.Clamp(Vector2Int)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector2IntRange","remarks":null,"summary":"\nClamps a value to the range.\n","syntax":{"content":"public Vector2Int Clamp(Vector2Int value)","parameters":[{"description":"The value to clamp.","id":"value","type":"Global.Vector2Int"}],"return":{"description":"The clamped value.","type":"Global.Vector2Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector2IntRange.Clamp(Vector2Int)"},{"children":null,"id":"Lerp(System.Single)","implements":["Zigurous.Architecture.INumberRange{Vector2Int}.Lerp(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"Lerp(Single)","nameWithType":"Vector2IntRange.Lerp(Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector2IntRange","remarks":null,"summary":"\nLinearly interpolates between the range by <code data-dev-comment-type=\"paramref\" class=\"paramref\">t</code>.\n","syntax":{"content":"public Vector2Int Lerp(float t)","parameters":[{"description":"The interpolant value between [0..1].","id":"t","type":"System.Single"}],"return":{"description":"The interpolated value.","type":"Global.Vector2Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector2IntRange.Lerp(System.Single)"},{"children":null,"id":"InverseLerp(Vector2Int)","implements":["Zigurous.Architecture.INumberRange{Vector2Int}.InverseLerp(Vector2Int)"],"inheritance":null,"inheritedMembers":null,"name":"InverseLerp(Vector2Int)","nameWithType":"Vector2IntRange.InverseLerp(Vector2Int)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector2IntRange","remarks":null,"summary":"\nCalculates the linear parameter t that produces the interpolant\nvalue within the range.\n","syntax":{"content":"public float InverseLerp(Vector2Int value)","parameters":[{"description":"The value within the range you want to calculate.","id":"value","type":"Global.Vector2Int"}],"return":{"description":"The interpolant value between [0..1].","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector2IntRange.InverseLerp(Vector2Int)"}]},{"items":[{"children":["Zigurous.Architecture.Vector2IntReference.#ctor","Zigurous.Architecture.Vector2IntReference.#ctor(Vector2Int)","Zigurous.Architecture.Vector2IntReference.#ctor(Zigurous.Architecture.Vector2IntVariable)","Zigurous.Architecture.Vector2IntReference.op_Implicit(Zigurous.Architecture.Vector2IntReference)~Vector2Int"],"id":"Vector2IntReference","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ValueReference{Vector2Int,Zigurous.Architecture.Vector2IntVariable}"],"inheritedMembers":["Zigurous.Architecture.ValueReference{Vector2Int,Zigurous.Architecture.Vector2IntVariable}.useConstant","Zigurous.Architecture.ValueReference{Vector2Int,Zigurous.Architecture.Vector2IntVariable}.constantValue","Zigurous.Architecture.ValueReference{Vector2Int,Zigurous.Architecture.Vector2IntVariable}.variable","Zigurous.Architecture.ValueReference{Vector2Int,Zigurous.Architecture.Vector2IntVariable}.value"],"name":"Vector2IntReference","nameWithType":"Vector2IntReference","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA reference to a Vector2Int value, either a constant or <xref href=\"Zigurous.Architecture.Vector2IntVariable\" data-throw-if-not-resolved=\"false\"></xref>.\n","syntax":{"content":"[Serializable]\npublic class Vector2IntReference : ValueReference<Vector2Int, Vector2IntVariable>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.Vector2IntReference"},{"children":null,"id":"#ctor","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Vector2IntReference()","nameWithType":"Vector2IntReference.Vector2IntReference()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector2IntReference","remarks":null,"summary":"\nCreates a new Vector2Int reference.\n","syntax":{"content":"public Vector2IntReference()","parameters":null,"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.Vector2IntReference.#ctor"},{"children":null,"id":"#ctor(Vector2Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Vector2IntReference(Vector2Int)","nameWithType":"Vector2IntReference.Vector2IntReference(Vector2Int)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector2IntReference","remarks":null,"summary":"\nCreates a new Vector2Int reference with the constant value.\n","syntax":{"content":"public Vector2IntReference(Vector2Int value)","parameters":[{"description":"The constant value to set.","id":"value","type":"Global.Vector2Int"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.Vector2IntReference.#ctor(Vector2Int)"},{"children":null,"id":"#ctor(Zigurous.Architecture.Vector2IntVariable)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Vector2IntReference(Vector2IntVariable)","nameWithType":"Vector2IntReference.Vector2IntReference(Vector2IntVariable)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector2IntReference","remarks":null,"summary":"\nCreates a new Vector2Int reference to the variable value.\n","syntax":{"content":"public Vector2IntReference(Vector2IntVariable variable)","parameters":[{"description":"The variable to reference.","id":"variable","type":"Zigurous.Architecture.Vector2IntVariable"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.Vector2IntReference.#ctor(Zigurous.Architecture.Vector2IntVariable)"},{"children":null,"id":"op_Implicit(Zigurous.Architecture.Vector2IntReference)~Vector2Int","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Implicit(Vector2IntReference to Vector2Int)","nameWithType":"Vector2IntReference.Implicit(Vector2IntReference to Vector2Int)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector2IntReference","remarks":null,"summary":"\nImplicitly converts the reference to a Vector2Int.\n","syntax":{"content":"public static implicit operator Vector2Int(Vector2IntReference reference)","parameters":[{"description":"The reference to convert.","id":"reference","type":"Zigurous.Architecture.Vector2IntReference"}],"return":{"description":"The Vector2Int value.","type":"Global.Vector2Int"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.Vector2IntReference.op_Implicit(Zigurous.Architecture.Vector2IntReference)~Vector2Int"}]},{"items":[{"children":["Zigurous.Architecture.Vector2IntVariable.value"],"id":"Vector2IntVariable","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ScriptableVariable{Vector2Int}"],"inheritedMembers":null,"name":"Vector2IntVariable","nameWithType":"Vector2IntVariable","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA Vector2Int variable saved as a ScriptableObject.\n","syntax":{"content":"public class Vector2IntVariable : ScriptableVariable<Vector2Int>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.Vector2IntVariable"},{"children":null,"id":"value","implements":null,"inheritance":null,"inheritedMembers":null,"name":"value","nameWithType":"Vector2IntVariable.value","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector2IntVariable","remarks":null,"summary":"\nThe value of the variable.\n","syntax":{"content":"public override Vector2Int value { get; set; }","parameters":[],"return":{"description":null,"type":"Global.Vector2Int"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Vector2IntVariable.value"}]},{"items":[{"children":["Zigurous.Architecture.Vector2Range.#ctor(Vector2,Vector2)","Zigurous.Architecture.Vector2Range.Clamp(Vector2)","Zigurous.Architecture.Vector2Range.delta","Zigurous.Architecture.Vector2Range.Includes(Vector2)","Zigurous.Architecture.Vector2Range.Includes(Vector2,System.Boolean,System.Boolean)","Zigurous.Architecture.Vector2Range.InverseLerp(Vector2)","Zigurous.Architecture.Vector2Range.Lerp(System.Single)","Zigurous.Architecture.Vector2Range.max","Zigurous.Architecture.Vector2Range.median","Zigurous.Architecture.Vector2Range.min","Zigurous.Architecture.Vector2Range.Random"],"id":"Vector2Range","implements":["Zigurous.Architecture.INumberRange{Vector2}","Zigurous.Architecture.IRange{Vector2}"],"inheritance":null,"inheritedMembers":null,"name":"Vector2Range","nameWithType":"Vector2Range","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA range of Vector2 values.\n","syntax":{"content":"[Serializable]\npublic struct Vector2Range : INumberRange<Vector2>, IRange<Vector2>","parameters":null,"return":null,"typeParameters":null},"type":"Struct","uid":"Zigurous.Architecture.Vector2Range"},{"children":null,"id":"min","implements":["Zigurous.Architecture.IRange{Vector2}.min"],"inheritance":null,"inheritedMembers":null,"name":"min","nameWithType":"Vector2Range.min","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector2Range","remarks":null,"summary":"\nThe lower bound of the range.\n","syntax":{"content":"public Vector2 min { get; set; }","parameters":[],"return":{"description":null,"type":"Global.Vector2"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Vector2Range.min"},{"children":null,"id":"max","implements":["Zigurous.Architecture.IRange{Vector2}.max"],"inheritance":null,"inheritedMembers":null,"name":"max","nameWithType":"Vector2Range.max","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector2Range","remarks":null,"summary":"\nThe upper bound of the range.\n","syntax":{"content":"public Vector2 max { get; set; }","parameters":[],"return":{"description":null,"type":"Global.Vector2"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Vector2Range.max"},{"children":null,"id":"delta","implements":["Zigurous.Architecture.INumberRange{Vector2}.delta"],"inheritance":null,"inheritedMembers":null,"name":"delta","nameWithType":"Vector2Range.delta","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector2Range","remarks":null,"summary":"\nThe difference between the maximum and minimum values (Read only).\n","syntax":{"content":"public readonly Vector2 delta { get; }","parameters":[],"return":{"description":null,"type":"Global.Vector2"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Vector2Range.delta"},{"children":null,"id":"median","implements":["Zigurous.Architecture.INumberRange{Vector2}.median"],"inheritance":null,"inheritedMembers":null,"name":"median","nameWithType":"Vector2Range.median","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector2Range","remarks":null,"summary":"\nThe median value of the range (Read only).\n","syntax":{"content":"public readonly Vector2 median { get; }","parameters":[],"return":{"description":null,"type":"Global.Vector2"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Vector2Range.median"},{"children":null,"id":"#ctor(Vector2,Vector2)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Vector2Range(Vector2, Vector2)","nameWithType":"Vector2Range.Vector2Range(Vector2, Vector2)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector2Range","remarks":null,"summary":"\nCreates a new range with the specified values.\n","syntax":{"content":"public Vector2Range(Vector2 min, Vector2 max)","parameters":[{"description":"The lower bound of the range.","id":"min","type":"Global.Vector2"},{"description":"The upper bound of the range.","id":"max","type":"Global.Vector2"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.Vector2Range.#ctor(Vector2,Vector2)"},{"children":null,"id":"Random","implements":["Zigurous.Architecture.INumberRange{Vector2}.Random"],"inheritance":null,"inheritedMembers":null,"name":"Random()","nameWithType":"Vector2Range.Random()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector2Range","remarks":null,"summary":"\nReturns a random value in the range.\n","syntax":{"content":"public Vector2 Random()","parameters":null,"return":{"description":"A random value in the range.","type":"Global.Vector2"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector2Range.Random"},{"children":null,"id":"Includes(Vector2)","implements":["Zigurous.Architecture.IRange{Vector2}.Includes(Vector2)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Vector2)","nameWithType":"Vector2Range.Includes(Vector2)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector2Range","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(Vector2 value)","parameters":[{"description":"The value to check.","id":"value","type":"Global.Vector2"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector2Range.Includes(Vector2)"},{"children":null,"id":"Includes(Vector2,System.Boolean,System.Boolean)","implements":["Zigurous.Architecture.IRange{Vector2}.Includes(Vector2,System.Boolean,System.Boolean)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Vector2, Boolean, Boolean)","nameWithType":"Vector2Range.Includes(Vector2, Boolean, Boolean)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector2Range","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(Vector2 value, bool includeMin, bool includeMax)","parameters":[{"description":"The value to check.","id":"value","type":"Global.Vector2"},{"description":"The minimum value is inclusive if true, exclusive if false.","id":"includeMin","type":"System.Boolean"},{"description":"The maximum value is inclusive if true, exclusive if false.","id":"includeMax","type":"System.Boolean"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector2Range.Includes(Vector2,System.Boolean,System.Boolean)"},{"children":null,"id":"Clamp(Vector2)","implements":["Zigurous.Architecture.INumberRange{Vector2}.Clamp(Vector2)"],"inheritance":null,"inheritedMembers":null,"name":"Clamp(Vector2)","nameWithType":"Vector2Range.Clamp(Vector2)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector2Range","remarks":null,"summary":"\nClamps a value to the range.\n","syntax":{"content":"public Vector2 Clamp(Vector2 value)","parameters":[{"description":"The value to clamp.","id":"value","type":"Global.Vector2"}],"return":{"description":"The clamped value.","type":"Global.Vector2"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector2Range.Clamp(Vector2)"},{"children":null,"id":"Lerp(System.Single)","implements":["Zigurous.Architecture.INumberRange{Vector2}.Lerp(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"Lerp(Single)","nameWithType":"Vector2Range.Lerp(Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector2Range","remarks":null,"summary":"\nLinearly interpolates between the range by <code data-dev-comment-type=\"paramref\" class=\"paramref\">t</code>.\n","syntax":{"content":"public Vector2 Lerp(float t)","parameters":[{"description":"The interpolant value between [0..1].","id":"t","type":"System.Single"}],"return":{"description":"The interpolated value.","type":"Global.Vector2"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector2Range.Lerp(System.Single)"},{"children":null,"id":"InverseLerp(Vector2)","implements":["Zigurous.Architecture.INumberRange{Vector2}.InverseLerp(Vector2)"],"inheritance":null,"inheritedMembers":null,"name":"InverseLerp(Vector2)","nameWithType":"Vector2Range.InverseLerp(Vector2)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector2Range","remarks":null,"summary":"\nCalculates the linear parameter t that produces the interpolant\nvalue within the range.\n","syntax":{"content":"public float InverseLerp(Vector2 value)","parameters":[{"description":"The value within the range you want to calculate.","id":"value","type":"Global.Vector2"}],"return":{"description":"The interpolant value between [0..1].","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector2Range.InverseLerp(Vector2)"}]},{"items":[{"children":["Zigurous.Architecture.Vector2Reference.#ctor","Zigurous.Architecture.Vector2Reference.#ctor(Vector2)","Zigurous.Architecture.Vector2Reference.#ctor(Zigurous.Architecture.Vector2Variable)","Zigurous.Architecture.Vector2Reference.op_Implicit(Zigurous.Architecture.Vector2Reference)~Vector2"],"id":"Vector2Reference","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ValueReference{Vector2,Zigurous.Architecture.Vector2Variable}"],"inheritedMembers":["Zigurous.Architecture.ValueReference{Vector2,Zigurous.Architecture.Vector2Variable}.useConstant","Zigurous.Architecture.ValueReference{Vector2,Zigurous.Architecture.Vector2Variable}.constantValue","Zigurous.Architecture.ValueReference{Vector2,Zigurous.Architecture.Vector2Variable}.variable","Zigurous.Architecture.ValueReference{Vector2,Zigurous.Architecture.Vector2Variable}.value"],"name":"Vector2Reference","nameWithType":"Vector2Reference","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA reference to a Vector2 value, either a constant or <xref href=\"Zigurous.Architecture.Vector2Variable\" data-throw-if-not-resolved=\"false\"></xref>.\n","syntax":{"content":"[Serializable]\npublic class Vector2Reference : ValueReference<Vector2, Vector2Variable>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.Vector2Reference"},{"children":null,"id":"#ctor","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Vector2Reference()","nameWithType":"Vector2Reference.Vector2Reference()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector2Reference","remarks":null,"summary":"\nCreates a new Vector2 reference.\n","syntax":{"content":"public Vector2Reference()","parameters":null,"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.Vector2Reference.#ctor"},{"children":null,"id":"#ctor(Vector2)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Vector2Reference(Vector2)","nameWithType":"Vector2Reference.Vector2Reference(Vector2)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector2Reference","remarks":null,"summary":"\nCreates a new Vector2 reference with the constant value.\n","syntax":{"content":"public Vector2Reference(Vector2 value)","parameters":[{"description":"The constant value to set.","id":"value","type":"Global.Vector2"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.Vector2Reference.#ctor(Vector2)"},{"children":null,"id":"#ctor(Zigurous.Architecture.Vector2Variable)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Vector2Reference(Vector2Variable)","nameWithType":"Vector2Reference.Vector2Reference(Vector2Variable)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector2Reference","remarks":null,"summary":"\nCreates a new Vector2 reference to the variable value.\n","syntax":{"content":"public Vector2Reference(Vector2Variable variable)","parameters":[{"description":"The variable to reference.","id":"variable","type":"Zigurous.Architecture.Vector2Variable"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.Vector2Reference.#ctor(Zigurous.Architecture.Vector2Variable)"},{"children":null,"id":"op_Implicit(Zigurous.Architecture.Vector2Reference)~Vector2","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Implicit(Vector2Reference to Vector2)","nameWithType":"Vector2Reference.Implicit(Vector2Reference to Vector2)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector2Reference","remarks":null,"summary":"\nImplicitly converts the reference to a Vector2.\n","syntax":{"content":"public static implicit operator Vector2(Vector2Reference reference)","parameters":[{"description":"The reference to convert.","id":"reference","type":"Zigurous.Architecture.Vector2Reference"}],"return":{"description":"The Vector2 value.","type":"Global.Vector2"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.Vector2Reference.op_Implicit(Zigurous.Architecture.Vector2Reference)~Vector2"}]},{"items":[{"children":["Zigurous.Architecture.Vector2Variable.value"],"id":"Vector2Variable","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ScriptableVariable{Vector2}"],"inheritedMembers":null,"name":"Vector2Variable","nameWithType":"Vector2Variable","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA Vector2 variable saved as a ScriptableObject.\n","syntax":{"content":"public class Vector2Variable : ScriptableVariable<Vector2>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.Vector2Variable"},{"children":null,"id":"value","implements":null,"inheritance":null,"inheritedMembers":null,"name":"value","nameWithType":"Vector2Variable.value","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector2Variable","remarks":null,"summary":"\nThe value of the variable.\n","syntax":{"content":"public override Vector2 value { get; set; }","parameters":[],"return":{"description":null,"type":"Global.Vector2"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Vector2Variable.value"}]},{"items":[{"children":["Zigurous.Architecture.Vector3Accumulator.Add(Vector3)","Zigurous.Architecture.Vector3Accumulator.defaultValue","Zigurous.Architecture.Vector3Accumulator.Subtract(Vector3)"],"id":"Vector3Accumulator","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ValueAccumulator{Vector3}"],"inheritedMembers":["Zigurous.Architecture.ValueAccumulator{Vector3}.values","Zigurous.Architecture.ValueAccumulator{Vector3}.total","Zigurous.Architecture.ValueAccumulator{Vector3}.count","Zigurous.Architecture.ValueAccumulator{Vector3}.GetValue(System.Int32)","Zigurous.Architecture.ValueAccumulator{Vector3}.SetValue(System.Int32,Vector3)","Zigurous.Architecture.ValueAccumulator{Vector3}.RemoveValue(System.Int32)","Zigurous.Architecture.ValueAccumulator{Vector3}.Clear"],"name":"Vector3Accumulator","nameWithType":"Vector3Accumulator","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nAccumulates Vector3 values into a single total value.\n","syntax":{"content":"public sealed class Vector3Accumulator : ValueAccumulator<Vector3>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.Vector3Accumulator"},{"children":null,"id":"defaultValue","implements":null,"inheritance":null,"inheritedMembers":null,"name":"defaultValue","nameWithType":"Vector3Accumulator.defaultValue","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector3Accumulator","remarks":null,"summary":"\nThe default value of <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code>.\n","syntax":{"content":"protected override Vector3 defaultValue { get; }","parameters":[],"return":{"description":null,"type":"Global.Vector3"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Vector3Accumulator.defaultValue"},{"children":null,"id":"Add(Vector3)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Add(Vector3)","nameWithType":"Vector3Accumulator.Add(Vector3)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector3Accumulator","remarks":null,"summary":"\nIncreases the accumulated total by a given value.\n","syntax":{"content":"protected override Vector3 Add(Vector3 value)","parameters":[{"description":"The value to add to the total.","id":"value","type":"Global.Vector3"}],"return":{"description":"The new total value.","type":"Global.Vector3"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector3Accumulator.Add(Vector3)"},{"children":null,"id":"Subtract(Vector3)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Subtract(Vector3)","nameWithType":"Vector3Accumulator.Subtract(Vector3)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector3Accumulator","remarks":null,"summary":"\nDecreases the accumulated total by a given value.\n","syntax":{"content":"protected override Vector3 Subtract(Vector3 value)","parameters":[{"description":"The value to subtract from the total.","id":"value","type":"Global.Vector3"}],"return":{"description":"The new total value.","type":"Global.Vector3"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector3Accumulator.Subtract(Vector3)"}]},{"items":[{"children":["Zigurous.Architecture.Vector3IntAccumulator.Add(Vector3Int)","Zigurous.Architecture.Vector3IntAccumulator.defaultValue","Zigurous.Architecture.Vector3IntAccumulator.Subtract(Vector3Int)"],"id":"Vector3IntAccumulator","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ValueAccumulator{Vector3Int}"],"inheritedMembers":["Zigurous.Architecture.ValueAccumulator{Vector3Int}.values","Zigurous.Architecture.ValueAccumulator{Vector3Int}.total","Zigurous.Architecture.ValueAccumulator{Vector3Int}.count","Zigurous.Architecture.ValueAccumulator{Vector3Int}.GetValue(System.Int32)","Zigurous.Architecture.ValueAccumulator{Vector3Int}.SetValue(System.Int32,Vector3Int)","Zigurous.Architecture.ValueAccumulator{Vector3Int}.RemoveValue(System.Int32)","Zigurous.Architecture.ValueAccumulator{Vector3Int}.Clear"],"name":"Vector3IntAccumulator","nameWithType":"Vector3IntAccumulator","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nAccumulates Vector3Int values into a single total value.\n","syntax":{"content":"public sealed class Vector3IntAccumulator : ValueAccumulator<Vector3Int>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.Vector3IntAccumulator"},{"children":null,"id":"defaultValue","implements":null,"inheritance":null,"inheritedMembers":null,"name":"defaultValue","nameWithType":"Vector3IntAccumulator.defaultValue","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector3IntAccumulator","remarks":null,"summary":"\nThe default value of <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code>.\n","syntax":{"content":"protected override Vector3Int defaultValue { get; }","parameters":[],"return":{"description":null,"type":"Global.Vector3Int"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Vector3IntAccumulator.defaultValue"},{"children":null,"id":"Add(Vector3Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Add(Vector3Int)","nameWithType":"Vector3IntAccumulator.Add(Vector3Int)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector3IntAccumulator","remarks":null,"summary":"\nIncreases the accumulated total by a given value.\n","syntax":{"content":"protected override Vector3Int Add(Vector3Int value)","parameters":[{"description":"The value to add to the total.","id":"value","type":"Global.Vector3Int"}],"return":{"description":"The new total value.","type":"Global.Vector3Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector3IntAccumulator.Add(Vector3Int)"},{"children":null,"id":"Subtract(Vector3Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Subtract(Vector3Int)","nameWithType":"Vector3IntAccumulator.Subtract(Vector3Int)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector3IntAccumulator","remarks":null,"summary":"\nDecreases the accumulated total by a given value.\n","syntax":{"content":"protected override Vector3Int Subtract(Vector3Int value)","parameters":[{"description":"The value to subtract from the total.","id":"value","type":"Global.Vector3Int"}],"return":{"description":"The new total value.","type":"Global.Vector3Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector3IntAccumulator.Subtract(Vector3Int)"}]},{"items":[{"children":["Zigurous.Architecture.Vector3IntRange.#ctor(Vector3Int,Vector3Int)","Zigurous.Architecture.Vector3IntRange.Clamp(Vector3Int)","Zigurous.Architecture.Vector3IntRange.delta","Zigurous.Architecture.Vector3IntRange.Includes(Vector3Int)","Zigurous.Architecture.Vector3IntRange.Includes(Vector3Int,System.Boolean,System.Boolean)","Zigurous.Architecture.Vector3IntRange.InverseLerp(Vector3Int)","Zigurous.Architecture.Vector3IntRange.Lerp(System.Single)","Zigurous.Architecture.Vector3IntRange.max","Zigurous.Architecture.Vector3IntRange.median","Zigurous.Architecture.Vector3IntRange.min","Zigurous.Architecture.Vector3IntRange.Random"],"id":"Vector3IntRange","implements":["Zigurous.Architecture.INumberRange{Vector3Int}","Zigurous.Architecture.IRange{Vector3Int}"],"inheritance":null,"inheritedMembers":null,"name":"Vector3IntRange","nameWithType":"Vector3IntRange","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA range of Vector3Int values.\n","syntax":{"content":"[Serializable]\npublic struct Vector3IntRange : INumberRange<Vector3Int>, IRange<Vector3Int>","parameters":null,"return":null,"typeParameters":null},"type":"Struct","uid":"Zigurous.Architecture.Vector3IntRange"},{"children":null,"id":"min","implements":["Zigurous.Architecture.IRange{Vector3Int}.min"],"inheritance":null,"inheritedMembers":null,"name":"min","nameWithType":"Vector3IntRange.min","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector3IntRange","remarks":null,"summary":"\nThe lower bound of the range.\n","syntax":{"content":"public Vector3Int min { get; set; }","parameters":[],"return":{"description":null,"type":"Global.Vector3Int"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Vector3IntRange.min"},{"children":null,"id":"max","implements":["Zigurous.Architecture.IRange{Vector3Int}.max"],"inheritance":null,"inheritedMembers":null,"name":"max","nameWithType":"Vector3IntRange.max","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector3IntRange","remarks":null,"summary":"\nThe upper bound of the range.\n","syntax":{"content":"public Vector3Int max { get; set; }","parameters":[],"return":{"description":null,"type":"Global.Vector3Int"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Vector3IntRange.max"},{"children":null,"id":"delta","implements":["Zigurous.Architecture.INumberRange{Vector3Int}.delta"],"inheritance":null,"inheritedMembers":null,"name":"delta","nameWithType":"Vector3IntRange.delta","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector3IntRange","remarks":null,"summary":"\nThe difference between the maximum and minimum values (Read only).\n","syntax":{"content":"public readonly Vector3Int delta { get; }","parameters":[],"return":{"description":null,"type":"Global.Vector3Int"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Vector3IntRange.delta"},{"children":null,"id":"median","implements":["Zigurous.Architecture.INumberRange{Vector3Int}.median"],"inheritance":null,"inheritedMembers":null,"name":"median","nameWithType":"Vector3IntRange.median","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector3IntRange","remarks":null,"summary":"\nThe median value of the range (Read only).\n","syntax":{"content":"public readonly Vector3Int median { get; }","parameters":[],"return":{"description":null,"type":"Global.Vector3Int"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Vector3IntRange.median"},{"children":null,"id":"#ctor(Vector3Int,Vector3Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Vector3IntRange(Vector3Int, Vector3Int)","nameWithType":"Vector3IntRange.Vector3IntRange(Vector3Int, Vector3Int)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector3IntRange","remarks":null,"summary":"\nCreates a new range with the specified values.\n","syntax":{"content":"public Vector3IntRange(Vector3Int min, Vector3Int max)","parameters":[{"description":"The lower bound of the range.","id":"min","type":"Global.Vector3Int"},{"description":"The upper bound of the range.","id":"max","type":"Global.Vector3Int"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.Vector3IntRange.#ctor(Vector3Int,Vector3Int)"},{"children":null,"id":"Random","implements":["Zigurous.Architecture.INumberRange{Vector3Int}.Random"],"inheritance":null,"inheritedMembers":null,"name":"Random()","nameWithType":"Vector3IntRange.Random()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector3IntRange","remarks":null,"summary":"\nReturns a random value in the range.\n","syntax":{"content":"public Vector3Int Random()","parameters":null,"return":{"description":"A random value in the range.","type":"Global.Vector3Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector3IntRange.Random"},{"children":null,"id":"Includes(Vector3Int)","implements":["Zigurous.Architecture.IRange{Vector3Int}.Includes(Vector3Int)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Vector3Int)","nameWithType":"Vector3IntRange.Includes(Vector3Int)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector3IntRange","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(Vector3Int value)","parameters":[{"description":"The value to check.","id":"value","type":"Global.Vector3Int"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector3IntRange.Includes(Vector3Int)"},{"children":null,"id":"Includes(Vector3Int,System.Boolean,System.Boolean)","implements":["Zigurous.Architecture.IRange{Vector3Int}.Includes(Vector3Int,System.Boolean,System.Boolean)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Vector3Int, Boolean, Boolean)","nameWithType":"Vector3IntRange.Includes(Vector3Int, Boolean, Boolean)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector3IntRange","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(Vector3Int value, bool includeMin, bool includeMax)","parameters":[{"description":"The value to check.","id":"value","type":"Global.Vector3Int"},{"description":"The minimum value is inclusive if true, exclusive if false.","id":"includeMin","type":"System.Boolean"},{"description":"The maximum value is inclusive if true, exclusive if false.","id":"includeMax","type":"System.Boolean"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector3IntRange.Includes(Vector3Int,System.Boolean,System.Boolean)"},{"children":null,"id":"Clamp(Vector3Int)","implements":["Zigurous.Architecture.INumberRange{Vector3Int}.Clamp(Vector3Int)"],"inheritance":null,"inheritedMembers":null,"name":"Clamp(Vector3Int)","nameWithType":"Vector3IntRange.Clamp(Vector3Int)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector3IntRange","remarks":null,"summary":"\nClamps a value to the range.\n","syntax":{"content":"public Vector3Int Clamp(Vector3Int value)","parameters":[{"description":"The value to clamp.","id":"value","type":"Global.Vector3Int"}],"return":{"description":"The clamped value.","type":"Global.Vector3Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector3IntRange.Clamp(Vector3Int)"},{"children":null,"id":"Lerp(System.Single)","implements":["Zigurous.Architecture.INumberRange{Vector3Int}.Lerp(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"Lerp(Single)","nameWithType":"Vector3IntRange.Lerp(Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector3IntRange","remarks":null,"summary":"\nLinearly interpolates between the range by <code data-dev-comment-type=\"paramref\" class=\"paramref\">t</code>.\n","syntax":{"content":"public Vector3Int Lerp(float t)","parameters":[{"description":"The interpolant value between [0..1].","id":"t","type":"System.Single"}],"return":{"description":"The interpolated value.","type":"Global.Vector3Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector3IntRange.Lerp(System.Single)"},{"children":null,"id":"InverseLerp(Vector3Int)","implements":["Zigurous.Architecture.INumberRange{Vector3Int}.InverseLerp(Vector3Int)"],"inheritance":null,"inheritedMembers":null,"name":"InverseLerp(Vector3Int)","nameWithType":"Vector3IntRange.InverseLerp(Vector3Int)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector3IntRange","remarks":null,"summary":"\nCalculates the linear parameter t that produces the interpolant\nvalue within the range.\n","syntax":{"content":"public float InverseLerp(Vector3Int value)","parameters":[{"description":"The value within the range you want to calculate.","id":"value","type":"Global.Vector3Int"}],"return":{"description":"The interpolant value between [0..1].","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector3IntRange.InverseLerp(Vector3Int)"}]},{"items":[{"children":["Zigurous.Architecture.Vector3IntReference.#ctor","Zigurous.Architecture.Vector3IntReference.#ctor(Vector3Int)","Zigurous.Architecture.Vector3IntReference.#ctor(Zigurous.Architecture.Vector3IntVariable)","Zigurous.Architecture.Vector3IntReference.op_Implicit(Zigurous.Architecture.Vector3IntReference)~Vector3Int"],"id":"Vector3IntReference","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ValueReference{Vector3Int,Zigurous.Architecture.Vector3IntVariable}"],"inheritedMembers":["Zigurous.Architecture.ValueReference{Vector3Int,Zigurous.Architecture.Vector3IntVariable}.useConstant","Zigurous.Architecture.ValueReference{Vector3Int,Zigurous.Architecture.Vector3IntVariable}.constantValue","Zigurous.Architecture.ValueReference{Vector3Int,Zigurous.Architecture.Vector3IntVariable}.variable","Zigurous.Architecture.ValueReference{Vector3Int,Zigurous.Architecture.Vector3IntVariable}.value"],"name":"Vector3IntReference","nameWithType":"Vector3IntReference","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA reference to a Vector3Int value, either a constant or <xref href=\"Zigurous.Architecture.Vector3IntVariable\" data-throw-if-not-resolved=\"false\"></xref>.\n","syntax":{"content":"[Serializable]\npublic class Vector3IntReference : ValueReference<Vector3Int, Vector3IntVariable>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.Vector3IntReference"},{"children":null,"id":"#ctor","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Vector3IntReference()","nameWithType":"Vector3IntReference.Vector3IntReference()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector3IntReference","remarks":null,"summary":"\nCreates a new Vector3Int reference.\n","syntax":{"content":"public Vector3IntReference()","parameters":null,"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.Vector3IntReference.#ctor"},{"children":null,"id":"#ctor(Vector3Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Vector3IntReference(Vector3Int)","nameWithType":"Vector3IntReference.Vector3IntReference(Vector3Int)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector3IntReference","remarks":null,"summary":"\nCreates a new Vector3Int reference with the constant value.\n","syntax":{"content":"public Vector3IntReference(Vector3Int value)","parameters":[{"description":"The constant value to set.","id":"value","type":"Global.Vector3Int"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.Vector3IntReference.#ctor(Vector3Int)"},{"children":null,"id":"#ctor(Zigurous.Architecture.Vector3IntVariable)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Vector3IntReference(Vector3IntVariable)","nameWithType":"Vector3IntReference.Vector3IntReference(Vector3IntVariable)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector3IntReference","remarks":null,"summary":"\nCreates a new Vector3Int reference to the variable value.\n","syntax":{"content":"public Vector3IntReference(Vector3IntVariable variable)","parameters":[{"description":"The variable to reference.","id":"variable","type":"Zigurous.Architecture.Vector3IntVariable"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.Vector3IntReference.#ctor(Zigurous.Architecture.Vector3IntVariable)"},{"children":null,"id":"op_Implicit(Zigurous.Architecture.Vector3IntReference)~Vector3Int","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Implicit(Vector3IntReference to Vector3Int)","nameWithType":"Vector3IntReference.Implicit(Vector3IntReference to Vector3Int)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector3IntReference","remarks":null,"summary":"\nImplicitly converts the reference to a Vector3Int.\n","syntax":{"content":"public static implicit operator Vector3Int(Vector3IntReference reference)","parameters":[{"description":"The reference to convert.","id":"reference","type":"Zigurous.Architecture.Vector3IntReference"}],"return":{"description":"The Vector3Int value.","type":"Global.Vector3Int"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.Vector3IntReference.op_Implicit(Zigurous.Architecture.Vector3IntReference)~Vector3Int"}]},{"items":[{"children":["Zigurous.Architecture.Vector3IntVariable.value"],"id":"Vector3IntVariable","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ScriptableVariable{Vector3Int}"],"inheritedMembers":null,"name":"Vector3IntVariable","nameWithType":"Vector3IntVariable","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA Vector3Int variable saved as a ScriptableObject.\n","syntax":{"content":"public class Vector3IntVariable : ScriptableVariable<Vector3Int>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.Vector3IntVariable"},{"children":null,"id":"value","implements":null,"inheritance":null,"inheritedMembers":null,"name":"value","nameWithType":"Vector3IntVariable.value","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector3IntVariable","remarks":null,"summary":"\nThe value of the variable.\n","syntax":{"content":"public override Vector3Int value { get; set; }","parameters":[],"return":{"description":null,"type":"Global.Vector3Int"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Vector3IntVariable.value"}]},{"items":[{"children":["Zigurous.Architecture.Vector3Range.#ctor(Vector3,Vector3)","Zigurous.Architecture.Vector3Range.Clamp(Vector3)","Zigurous.Architecture.Vector3Range.delta","Zigurous.Architecture.Vector3Range.Includes(Vector3)","Zigurous.Architecture.Vector3Range.Includes(Vector3,System.Boolean,System.Boolean)","Zigurous.Architecture.Vector3Range.InverseLerp(Vector3)","Zigurous.Architecture.Vector3Range.Lerp(System.Single)","Zigurous.Architecture.Vector3Range.max","Zigurous.Architecture.Vector3Range.median","Zigurous.Architecture.Vector3Range.min","Zigurous.Architecture.Vector3Range.Random"],"id":"Vector3Range","implements":["Zigurous.Architecture.INumberRange{Vector3}","Zigurous.Architecture.IRange{Vector3}"],"inheritance":null,"inheritedMembers":null,"name":"Vector3Range","nameWithType":"Vector3Range","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA range of Vector3 values.\n","syntax":{"content":"[Serializable]\npublic struct Vector3Range : INumberRange<Vector3>, IRange<Vector3>","parameters":null,"return":null,"typeParameters":null},"type":"Struct","uid":"Zigurous.Architecture.Vector3Range"},{"children":null,"id":"min","implements":["Zigurous.Architecture.IRange{Vector3}.min"],"inheritance":null,"inheritedMembers":null,"name":"min","nameWithType":"Vector3Range.min","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector3Range","remarks":null,"summary":"\nThe lower bound of the range.\n","syntax":{"content":"public Vector3 min { get; set; }","parameters":[],"return":{"description":null,"type":"Global.Vector3"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Vector3Range.min"},{"children":null,"id":"max","implements":["Zigurous.Architecture.IRange{Vector3}.max"],"inheritance":null,"inheritedMembers":null,"name":"max","nameWithType":"Vector3Range.max","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector3Range","remarks":null,"summary":"\nThe upper bound of the range.\n","syntax":{"content":"public Vector3 max { get; set; }","parameters":[],"return":{"description":null,"type":"Global.Vector3"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Vector3Range.max"},{"children":null,"id":"delta","implements":["Zigurous.Architecture.INumberRange{Vector3}.delta"],"inheritance":null,"inheritedMembers":null,"name":"delta","nameWithType":"Vector3Range.delta","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector3Range","remarks":null,"summary":"\nThe difference between the maximum and minimum values (Read only).\n","syntax":{"content":"public readonly Vector3 delta { get; }","parameters":[],"return":{"description":null,"type":"Global.Vector3"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Vector3Range.delta"},{"children":null,"id":"median","implements":["Zigurous.Architecture.INumberRange{Vector3}.median"],"inheritance":null,"inheritedMembers":null,"name":"median","nameWithType":"Vector3Range.median","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector3Range","remarks":null,"summary":"\nThe median value of the range (Read only).\n","syntax":{"content":"public readonly Vector3 median { get; }","parameters":[],"return":{"description":null,"type":"Global.Vector3"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Vector3Range.median"},{"children":null,"id":"#ctor(Vector3,Vector3)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Vector3Range(Vector3, Vector3)","nameWithType":"Vector3Range.Vector3Range(Vector3, Vector3)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector3Range","remarks":null,"summary":"\nCreates a new range with the specified values.\n","syntax":{"content":"public Vector3Range(Vector3 min, Vector3 max)","parameters":[{"description":"The lower bound of the range.","id":"min","type":"Global.Vector3"},{"description":"The upper bound of the range.","id":"max","type":"Global.Vector3"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.Vector3Range.#ctor(Vector3,Vector3)"},{"children":null,"id":"Random","implements":["Zigurous.Architecture.INumberRange{Vector3}.Random"],"inheritance":null,"inheritedMembers":null,"name":"Random()","nameWithType":"Vector3Range.Random()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector3Range","remarks":null,"summary":"\nReturns a random value in the range.\n","syntax":{"content":"public Vector3 Random()","parameters":null,"return":{"description":"A random value in the range.","type":"Global.Vector3"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector3Range.Random"},{"children":null,"id":"Includes(Vector3)","implements":["Zigurous.Architecture.IRange{Vector3}.Includes(Vector3)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Vector3)","nameWithType":"Vector3Range.Includes(Vector3)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector3Range","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(Vector3 value)","parameters":[{"description":"The value to check.","id":"value","type":"Global.Vector3"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector3Range.Includes(Vector3)"},{"children":null,"id":"Includes(Vector3,System.Boolean,System.Boolean)","implements":["Zigurous.Architecture.IRange{Vector3}.Includes(Vector3,System.Boolean,System.Boolean)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Vector3, Boolean, Boolean)","nameWithType":"Vector3Range.Includes(Vector3, Boolean, Boolean)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector3Range","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(Vector3 value, bool includeMin, bool includeMax)","parameters":[{"description":"The value to check.","id":"value","type":"Global.Vector3"},{"description":"The minimum value is inclusive if true, exclusive if false.","id":"includeMin","type":"System.Boolean"},{"description":"The maximum value is inclusive if true, exclusive if false.","id":"includeMax","type":"System.Boolean"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector3Range.Includes(Vector3,System.Boolean,System.Boolean)"},{"children":null,"id":"Clamp(Vector3)","implements":["Zigurous.Architecture.INumberRange{Vector3}.Clamp(Vector3)"],"inheritance":null,"inheritedMembers":null,"name":"Clamp(Vector3)","nameWithType":"Vector3Range.Clamp(Vector3)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector3Range","remarks":null,"summary":"\nClamps a value to the range.\n","syntax":{"content":"public Vector3 Clamp(Vector3 value)","parameters":[{"description":"The value to clamp.","id":"value","type":"Global.Vector3"}],"return":{"description":"The clamped value.","type":"Global.Vector3"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector3Range.Clamp(Vector3)"},{"children":null,"id":"Lerp(System.Single)","implements":["Zigurous.Architecture.INumberRange{Vector3}.Lerp(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"Lerp(Single)","nameWithType":"Vector3Range.Lerp(Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector3Range","remarks":null,"summary":"\nLinearly interpolates between the range by <code data-dev-comment-type=\"paramref\" class=\"paramref\">t</code>.\n","syntax":{"content":"public Vector3 Lerp(float t)","parameters":[{"description":"The interpolant value between [0..1].","id":"t","type":"System.Single"}],"return":{"description":"The interpolated value.","type":"Global.Vector3"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector3Range.Lerp(System.Single)"},{"children":null,"id":"InverseLerp(Vector3)","implements":["Zigurous.Architecture.INumberRange{Vector3}.InverseLerp(Vector3)"],"inheritance":null,"inheritedMembers":null,"name":"InverseLerp(Vector3)","nameWithType":"Vector3Range.InverseLerp(Vector3)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector3Range","remarks":null,"summary":"\nCalculates the linear parameter t that produces the interpolant\nvalue within the range.\n","syntax":{"content":"public float InverseLerp(Vector3 value)","parameters":[{"description":"The value within the range you want to calculate.","id":"value","type":"Global.Vector3"}],"return":{"description":"The interpolant value between [0..1].","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector3Range.InverseLerp(Vector3)"}]},{"items":[{"children":["Zigurous.Architecture.Vector3Reference.#ctor","Zigurous.Architecture.Vector3Reference.#ctor(Vector3)","Zigurous.Architecture.Vector3Reference.#ctor(Zigurous.Architecture.Vector3Variable)","Zigurous.Architecture.Vector3Reference.op_Implicit(Zigurous.Architecture.Vector3Reference)~Vector3"],"id":"Vector3Reference","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ValueReference{Vector3,Zigurous.Architecture.Vector3Variable}"],"inheritedMembers":["Zigurous.Architecture.ValueReference{Vector3,Zigurous.Architecture.Vector3Variable}.useConstant","Zigurous.Architecture.ValueReference{Vector3,Zigurous.Architecture.Vector3Variable}.constantValue","Zigurous.Architecture.ValueReference{Vector3,Zigurous.Architecture.Vector3Variable}.variable","Zigurous.Architecture.ValueReference{Vector3,Zigurous.Architecture.Vector3Variable}.value"],"name":"Vector3Reference","nameWithType":"Vector3Reference","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA reference to a Vector3 value, either a constant or <xref href=\"Zigurous.Architecture.Vector3Variable\" data-throw-if-not-resolved=\"false\"></xref>.\n","syntax":{"content":"[Serializable]\npublic class Vector3Reference : ValueReference<Vector3, Vector3Variable>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.Vector3Reference"},{"children":null,"id":"#ctor","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Vector3Reference()","nameWithType":"Vector3Reference.Vector3Reference()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector3Reference","remarks":null,"summary":"\nCreates a new Vector3 reference.\n","syntax":{"content":"public Vector3Reference()","parameters":null,"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.Vector3Reference.#ctor"},{"children":null,"id":"#ctor(Vector3)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Vector3Reference(Vector3)","nameWithType":"Vector3Reference.Vector3Reference(Vector3)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector3Reference","remarks":null,"summary":"\nCreates a new Vector3 reference with the constant value.\n","syntax":{"content":"public Vector3Reference(Vector3 value)","parameters":[{"description":"The constant value to set.","id":"value","type":"Global.Vector3"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.Vector3Reference.#ctor(Vector3)"},{"children":null,"id":"#ctor(Zigurous.Architecture.Vector3Variable)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Vector3Reference(Vector3Variable)","nameWithType":"Vector3Reference.Vector3Reference(Vector3Variable)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector3Reference","remarks":null,"summary":"\nCreates a new Vector3 reference to the variable value.\n","syntax":{"content":"public Vector3Reference(Vector3Variable variable)","parameters":[{"description":"The variable to reference.","id":"variable","type":"Zigurous.Architecture.Vector3Variable"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.Vector3Reference.#ctor(Zigurous.Architecture.Vector3Variable)"},{"children":null,"id":"op_Implicit(Zigurous.Architecture.Vector3Reference)~Vector3","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Implicit(Vector3Reference to Vector3)","nameWithType":"Vector3Reference.Implicit(Vector3Reference to Vector3)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector3Reference","remarks":null,"summary":"\nImplicitly converts the reference to a Vector3.\n","syntax":{"content":"public static implicit operator Vector3(Vector3Reference reference)","parameters":[{"description":"The reference to convert.","id":"reference","type":"Zigurous.Architecture.Vector3Reference"}],"return":{"description":"The Vector3 value.","type":"Global.Vector3"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.Vector3Reference.op_Implicit(Zigurous.Architecture.Vector3Reference)~Vector3"}]},{"items":[{"children":["Zigurous.Architecture.Vector4Accumulator.Add(Vector4)","Zigurous.Architecture.Vector4Accumulator.defaultValue","Zigurous.Architecture.Vector4Accumulator.Subtract(Vector4)"],"id":"Vector4Accumulator","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ValueAccumulator{Vector4}"],"inheritedMembers":["Zigurous.Architecture.ValueAccumulator{Vector4}.values","Zigurous.Architecture.ValueAccumulator{Vector4}.total","Zigurous.Architecture.ValueAccumulator{Vector4}.count","Zigurous.Architecture.ValueAccumulator{Vector4}.GetValue(System.Int32)","Zigurous.Architecture.ValueAccumulator{Vector4}.SetValue(System.Int32,Vector4)","Zigurous.Architecture.ValueAccumulator{Vector4}.RemoveValue(System.Int32)","Zigurous.Architecture.ValueAccumulator{Vector4}.Clear"],"name":"Vector4Accumulator","nameWithType":"Vector4Accumulator","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nAccumulates Vector4 values into a single total value.\n","syntax":{"content":"public sealed class Vector4Accumulator : ValueAccumulator<Vector4>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.Vector4Accumulator"},{"children":null,"id":"defaultValue","implements":null,"inheritance":null,"inheritedMembers":null,"name":"defaultValue","nameWithType":"Vector4Accumulator.defaultValue","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector4Accumulator","remarks":null,"summary":"\nThe default value of <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code>.\n","syntax":{"content":"protected override Vector4 defaultValue { get; }","parameters":[],"return":{"description":null,"type":"Global.Vector4"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Vector4Accumulator.defaultValue"},{"children":null,"id":"Add(Vector4)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Add(Vector4)","nameWithType":"Vector4Accumulator.Add(Vector4)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector4Accumulator","remarks":null,"summary":"\nIncreases the accumulated total by a given value.\n","syntax":{"content":"protected override Vector4 Add(Vector4 value)","parameters":[{"description":"The value to add to the total.","id":"value","type":"Global.Vector4"}],"return":{"description":"The new total value.","type":"Global.Vector4"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector4Accumulator.Add(Vector4)"},{"children":null,"id":"Subtract(Vector4)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Subtract(Vector4)","nameWithType":"Vector4Accumulator.Subtract(Vector4)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector4Accumulator","remarks":null,"summary":"\nDecreases the accumulated total by a given value.\n","syntax":{"content":"protected override Vector4 Subtract(Vector4 value)","parameters":[{"description":"The value to subtract from the total.","id":"value","type":"Global.Vector4"}],"return":{"description":"The new total value.","type":"Global.Vector4"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector4Accumulator.Subtract(Vector4)"}]},{"items":[{"children":["Zigurous.Architecture.Vector3Variable.value"],"id":"Vector3Variable","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ScriptableVariable{Vector3}"],"inheritedMembers":null,"name":"Vector3Variable","nameWithType":"Vector3Variable","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA Vector3 variable saved as a ScriptableObject.\n","syntax":{"content":"public class Vector3Variable : ScriptableVariable<Vector3>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.Vector3Variable"},{"children":null,"id":"value","implements":null,"inheritance":null,"inheritedMembers":null,"name":"value","nameWithType":"Vector3Variable.value","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector3Variable","remarks":null,"summary":"\nThe value of the variable.\n","syntax":{"content":"public override Vector3 value { get; set; }","parameters":[],"return":{"description":null,"type":"Global.Vector3"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Vector3Variable.value"}]},{"items":[{"children":["Zigurous.Architecture.Vector4Range.#ctor(Vector4,Vector4)","Zigurous.Architecture.Vector4Range.Clamp(Vector4)","Zigurous.Architecture.Vector4Range.delta","Zigurous.Architecture.Vector4Range.Includes(Vector4)","Zigurous.Architecture.Vector4Range.Includes(Vector4,System.Boolean,System.Boolean)","Zigurous.Architecture.Vector4Range.InverseLerp(Vector4)","Zigurous.Architecture.Vector4Range.Lerp(System.Single)","Zigurous.Architecture.Vector4Range.max","Zigurous.Architecture.Vector4Range.median","Zigurous.Architecture.Vector4Range.min","Zigurous.Architecture.Vector4Range.Random"],"id":"Vector4Range","implements":["Zigurous.Architecture.INumberRange{Vector4}","Zigurous.Architecture.IRange{Vector4}"],"inheritance":null,"inheritedMembers":null,"name":"Vector4Range","nameWithType":"Vector4Range","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA range of Vector4 values.\n","syntax":{"content":"[Serializable]\npublic struct Vector4Range : INumberRange<Vector4>, IRange<Vector4>","parameters":null,"return":null,"typeParameters":null},"type":"Struct","uid":"Zigurous.Architecture.Vector4Range"},{"children":null,"id":"min","implements":["Zigurous.Architecture.IRange{Vector4}.min"],"inheritance":null,"inheritedMembers":null,"name":"min","nameWithType":"Vector4Range.min","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector4Range","remarks":null,"summary":"\nThe lower bound of the range.\n","syntax":{"content":"public Vector4 min { get; set; }","parameters":[],"return":{"description":null,"type":"Global.Vector4"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Vector4Range.min"},{"children":null,"id":"max","implements":["Zigurous.Architecture.IRange{Vector4}.max"],"inheritance":null,"inheritedMembers":null,"name":"max","nameWithType":"Vector4Range.max","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector4Range","remarks":null,"summary":"\nThe upper bound of the range.\n","syntax":{"content":"public Vector4 max { get; set; }","parameters":[],"return":{"description":null,"type":"Global.Vector4"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Vector4Range.max"},{"children":null,"id":"delta","implements":["Zigurous.Architecture.INumberRange{Vector4}.delta"],"inheritance":null,"inheritedMembers":null,"name":"delta","nameWithType":"Vector4Range.delta","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector4Range","remarks":null,"summary":"\nThe difference between the maximum and minimum values (Read only).\n","syntax":{"content":"public readonly Vector4 delta { get; }","parameters":[],"return":{"description":null,"type":"Global.Vector4"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Vector4Range.delta"},{"children":null,"id":"median","implements":["Zigurous.Architecture.INumberRange{Vector4}.median"],"inheritance":null,"inheritedMembers":null,"name":"median","nameWithType":"Vector4Range.median","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector4Range","remarks":null,"summary":"\nThe median value of the range (Read only).\n","syntax":{"content":"public readonly Vector4 median { get; }","parameters":[],"return":{"description":null,"type":"Global.Vector4"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Vector4Range.median"},{"children":null,"id":"#ctor(Vector4,Vector4)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Vector4Range(Vector4, Vector4)","nameWithType":"Vector4Range.Vector4Range(Vector4, Vector4)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector4Range","remarks":null,"summary":"\nCreates a new range with the specified values.\n","syntax":{"content":"public Vector4Range(Vector4 min, Vector4 max)","parameters":[{"description":"The lower bound of the range.","id":"min","type":"Global.Vector4"},{"description":"The upper bound of the range.","id":"max","type":"Global.Vector4"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.Vector4Range.#ctor(Vector4,Vector4)"},{"children":null,"id":"Random","implements":["Zigurous.Architecture.INumberRange{Vector4}.Random"],"inheritance":null,"inheritedMembers":null,"name":"Random()","nameWithType":"Vector4Range.Random()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector4Range","remarks":null,"summary":"\nReturns a random value in the range.\n","syntax":{"content":"public Vector4 Random()","parameters":null,"return":{"description":"A random value in the range.","type":"Global.Vector4"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector4Range.Random"},{"children":null,"id":"Includes(Vector4)","implements":["Zigurous.Architecture.IRange{Vector4}.Includes(Vector4)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Vector4)","nameWithType":"Vector4Range.Includes(Vector4)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector4Range","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(Vector4 value)","parameters":[{"description":"The value to check.","id":"value","type":"Global.Vector4"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector4Range.Includes(Vector4)"},{"children":null,"id":"Includes(Vector4,System.Boolean,System.Boolean)","implements":["Zigurous.Architecture.IRange{Vector4}.Includes(Vector4,System.Boolean,System.Boolean)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Vector4, Boolean, Boolean)","nameWithType":"Vector4Range.Includes(Vector4, Boolean, Boolean)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector4Range","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(Vector4 value, bool includeMin, bool includeMax)","parameters":[{"description":"The value to check.","id":"value","type":"Global.Vector4"},{"description":"The minimum value is inclusive if true, exclusive if false.","id":"includeMin","type":"System.Boolean"},{"description":"The maximum value is inclusive if true, exclusive if false.","id":"includeMax","type":"System.Boolean"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector4Range.Includes(Vector4,System.Boolean,System.Boolean)"},{"children":null,"id":"Clamp(Vector4)","implements":["Zigurous.Architecture.INumberRange{Vector4}.Clamp(Vector4)"],"inheritance":null,"inheritedMembers":null,"name":"Clamp(Vector4)","nameWithType":"Vector4Range.Clamp(Vector4)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector4Range","remarks":null,"summary":"\nClamps a value to the range.\n","syntax":{"content":"public Vector4 Clamp(Vector4 value)","parameters":[{"description":"The value to clamp.","id":"value","type":"Global.Vector4"}],"return":{"description":"The clamped value.","type":"Global.Vector4"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector4Range.Clamp(Vector4)"},{"children":null,"id":"Lerp(System.Single)","implements":["Zigurous.Architecture.INumberRange{Vector4}.Lerp(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"Lerp(Single)","nameWithType":"Vector4Range.Lerp(Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector4Range","remarks":null,"summary":"\nLinearly interpolates between the range by <code data-dev-comment-type=\"paramref\" class=\"paramref\">t</code>.\n","syntax":{"content":"public Vector4 Lerp(float t)","parameters":[{"description":"The interpolant value between [0..1].","id":"t","type":"System.Single"}],"return":{"description":"The interpolated value.","type":"Global.Vector4"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector4Range.Lerp(System.Single)"},{"children":null,"id":"InverseLerp(Vector4)","implements":["Zigurous.Architecture.INumberRange{Vector4}.InverseLerp(Vector4)"],"inheritance":null,"inheritedMembers":null,"name":"InverseLerp(Vector4)","nameWithType":"Vector4Range.InverseLerp(Vector4)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector4Range","remarks":null,"summary":"\nCalculates the linear parameter t that produces the interpolant\nvalue within the range.\n","syntax":{"content":"public float InverseLerp(Vector4 value)","parameters":[{"description":"The value within the range you want to calculate.","id":"value","type":"Global.Vector4"}],"return":{"description":"The interpolant value between [0..1].","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Vector4Range.InverseLerp(Vector4)"}]},{"items":[{"children":["Zigurous.Architecture.Vector4Reference.#ctor","Zigurous.Architecture.Vector4Reference.#ctor(Vector4)","Zigurous.Architecture.Vector4Reference.#ctor(Zigurous.Architecture.Vector4Variable)","Zigurous.Architecture.Vector4Reference.op_Implicit(Zigurous.Architecture.Vector4Reference)~Vector4"],"id":"Vector4Reference","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ValueReference{Vector4,Zigurous.Architecture.Vector4Variable}"],"inheritedMembers":["Zigurous.Architecture.ValueReference{Vector4,Zigurous.Architecture.Vector4Variable}.useConstant","Zigurous.Architecture.ValueReference{Vector4,Zigurous.Architecture.Vector4Variable}.constantValue","Zigurous.Architecture.ValueReference{Vector4,Zigurous.Architecture.Vector4Variable}.variable","Zigurous.Architecture.ValueReference{Vector4,Zigurous.Architecture.Vector4Variable}.value"],"name":"Vector4Reference","nameWithType":"Vector4Reference","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA reference to a Vector4 value, either a constant or <xref href=\"Zigurous.Architecture.Vector4Variable\" data-throw-if-not-resolved=\"false\"></xref>.\n","syntax":{"content":"[Serializable]\npublic class Vector4Reference : ValueReference<Vector4, Vector4Variable>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.Vector4Reference"},{"children":null,"id":"#ctor","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Vector4Reference()","nameWithType":"Vector4Reference.Vector4Reference()","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector4Reference","remarks":null,"summary":"\nCreates a new Vector4 reference.\n","syntax":{"content":"public Vector4Reference()","parameters":null,"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.Vector4Reference.#ctor"},{"children":null,"id":"#ctor(Vector4)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Vector4Reference(Vector4)","nameWithType":"Vector4Reference.Vector4Reference(Vector4)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector4Reference","remarks":null,"summary":"\nCreates a new Vector4 reference with the constant value.\n","syntax":{"content":"public Vector4Reference(Vector4 value)","parameters":[{"description":"The constant value to set.","id":"value","type":"Global.Vector4"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.Vector4Reference.#ctor(Vector4)"},{"children":null,"id":"#ctor(Zigurous.Architecture.Vector4Variable)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Vector4Reference(Vector4Variable)","nameWithType":"Vector4Reference.Vector4Reference(Vector4Variable)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector4Reference","remarks":null,"summary":"\nCreates a new Vector4 reference to the variable value.\n","syntax":{"content":"public Vector4Reference(Vector4Variable variable)","parameters":[{"description":"The variable to reference.","id":"variable","type":"Zigurous.Architecture.Vector4Variable"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.Architecture.Vector4Reference.#ctor(Zigurous.Architecture.Vector4Variable)"},{"children":null,"id":"op_Implicit(Zigurous.Architecture.Vector4Reference)~Vector4","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Implicit(Vector4Reference to Vector4)","nameWithType":"Vector4Reference.Implicit(Vector4Reference to Vector4)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector4Reference","remarks":null,"summary":"\nImplicitly converts the reference to a Vector4.\n","syntax":{"content":"public static implicit operator Vector4(Vector4Reference reference)","parameters":[{"description":"The reference to convert.","id":"reference","type":"Zigurous.Architecture.Vector4Reference"}],"return":{"description":"The Vector4 value.","type":"Global.Vector4"},"typeParameters":null},"type":"Operator","uid":"Zigurous.Architecture.Vector4Reference.op_Implicit(Zigurous.Architecture.Vector4Reference)~Vector4"}]},{"items":[{"children":["Zigurous.Architecture.Vector4Variable.value"],"id":"Vector4Variable","implements":null,"inheritance":["System.Object","Zigurous.Architecture.ScriptableVariable{Vector4}"],"inheritedMembers":null,"name":"Vector4Variable","nameWithType":"Vector4Variable","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nA Vector4 variable saved as a ScriptableObject.\n","syntax":{"content":"public class Vector4Variable : ScriptableVariable<Vector4>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.Vector4Variable"},{"children":null,"id":"value","implements":null,"inheritance":null,"inheritedMembers":null,"name":"value","nameWithType":"Vector4Variable.value","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Vector4Variable","remarks":null,"summary":"\nThe value of the variable.\n","syntax":{"content":"public override Vector4 value { get; set; }","parameters":[],"return":{"description":null,"type":"Global.Vector4"},"typeParameters":null},"type":"Property","uid":"Zigurous.Architecture.Vector4Variable.value"}]},{"items":[{"children":["Zigurous.Architecture.Yield.EndOfFrame","Zigurous.Architecture.Yield.FixedUpdate","Zigurous.Architecture.Yield.initialCapacity","Zigurous.Architecture.Yield.Wait(System.Single)","Zigurous.Architecture.Yield.WaitRealtime(System.Single)","Zigurous.Architecture.Yield.WaitUntil(System.Func{System.Boolean},System.Int32)","Zigurous.Architecture.Yield.WaitWhile(System.Func{System.Boolean},System.Int32)"],"id":"Yield","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"Yield","nameWithType":"Yield","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nCaches yield statements to minimize garbage collection.\n","syntax":{"content":"public static class Yield","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.Yield"},{"children":null,"id":"initialCapacity","implements":null,"inheritance":null,"inheritedMembers":null,"name":"initialCapacity","nameWithType":"Yield.initialCapacity","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Yield","remarks":null,"summary":"\nThe initial capacity of the yield cache.\n","syntax":{"content":"public static int initialCapacity","parameters":null,"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.Yield.initialCapacity"},{"children":null,"id":"EndOfFrame","implements":null,"inheritance":null,"inheritedMembers":null,"name":"EndOfFrame","nameWithType":"Yield.EndOfFrame","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Yield","remarks":null,"summary":"\nWaits until the end of the frame, just before displaying the frame\non screen.\n","syntax":{"content":"public static readonly WaitForEndOfFrame EndOfFrame","parameters":null,"return":{"description":null,"type":"Global.WaitForEndOfFrame"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.Yield.EndOfFrame"},{"children":null,"id":"FixedUpdate","implements":null,"inheritance":null,"inheritedMembers":null,"name":"FixedUpdate","nameWithType":"Yield.FixedUpdate","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Yield","remarks":null,"summary":"\nWaits until the next fixed frame rate update function.\n","syntax":{"content":"public static readonly WaitForFixedUpdate FixedUpdate","parameters":null,"return":{"description":null,"type":"Global.WaitForFixedUpdate"},"typeParameters":null},"type":"Field","uid":"Zigurous.Architecture.Yield.FixedUpdate"},{"children":null,"id":"Wait(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Wait(Single)","nameWithType":"Yield.Wait(Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Yield","remarks":null,"summary":"\nSuspends the coroutine execution for the given amount of seconds\nusing scaled time. The amount of seconds is cached as an integer in\nmilliseconds to create more cache hits, but this results in a small\nprecision loss in certain situations.\n","syntax":{"content":"public static WaitForSeconds Wait(float seconds)","parameters":[{"description":"The number of seconds to wait.","id":"seconds","type":"System.Single"}],"return":{"description":"The yield statement.","type":"Global.WaitForSeconds"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Yield.Wait(System.Single)"},{"children":null,"id":"WaitRealtime(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"WaitRealtime(Single)","nameWithType":"Yield.WaitRealtime(Single)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Yield","remarks":null,"summary":"\nSuspends the coroutine execution for the given amount of seconds\nusing unscaled time. The amount of seconds is cached as an integer\nin milliseconds to create more cache hits, but this results in a\nsmall precision loss in certain situations.\n","syntax":{"content":"public static WaitForSecondsRealtime WaitRealtime(float seconds)","parameters":[{"description":"The number of seconds to wait.","id":"seconds","type":"System.Single"}],"return":{"description":"The yield statement.","type":"Global.WaitForSecondsRealtime"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Yield.WaitRealtime(System.Single)"},{"children":null,"id":"WaitUntil(System.Func{System.Boolean},System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"WaitUntil(Func<Boolean>, Int32)","nameWithType":"Yield.WaitUntil(Func<Boolean>, Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Yield","remarks":null,"summary":"\nSuspends the coroutine execution until the supplied delegate\nevaluates to true.\n","syntax":{"content":"public static WaitUntil WaitUntil(Func<bool> predicate, int id)","parameters":[{"description":"The delegate to evaluate.","id":"predicate","type":"System.Func{System.Boolean}"},{"description":"The id to cache the yield statement with.","id":"id","type":"System.Int32"}],"return":{"description":"The yield statement.","type":"Global.WaitUntil"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Yield.WaitUntil(System.Func{System.Boolean},System.Int32)"},{"children":null,"id":"WaitWhile(System.Func{System.Boolean},System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"WaitWhile(Func<Boolean>, Int32)","nameWithType":"Yield.WaitWhile(Func<Boolean>, Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.Yield","remarks":null,"summary":"\nSuspends the coroutine execution until the supplied delegate\nevaluates to false.\n","syntax":{"content":"public static WaitWhile WaitWhile(Func<bool> predicate, int id)","parameters":[{"description":"The delegate to evaluate.","id":"predicate","type":"System.Func{System.Boolean}"},{"description":"The id to cache the yield statement with.","id":"id","type":"System.Int32"}],"return":{"description":"The yield statement.","type":"Global.WaitWhile"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.Yield.WaitWhile(System.Func{System.Boolean},System.Int32)"}]},{"items":[{"children":["Zigurous.Architecture.ArrayExtensions","Zigurous.Architecture.ArrayExtensions.Reducer`2","Zigurous.Architecture.BehaviourExtensions","Zigurous.Architecture.Bitmask","Zigurous.Architecture.Bool3","Zigurous.Architecture.BoolReference","Zigurous.Architecture.BoolVariable","Zigurous.Architecture.BoundsReference","Zigurous.Architecture.BoundsVariable","Zigurous.Architecture.ClampedRange","Zigurous.Architecture.ColorRange","Zigurous.Architecture.ComparableExtensions","Zigurous.Architecture.ConditionalAttribute","Zigurous.Architecture.ConditionalAttribute.PropertyDrawer","Zigurous.Architecture.ConditionalHideAttribute","Zigurous.Architecture.ConditionalShowAttribute","Zigurous.Architecture.CursorLockState","Zigurous.Architecture.CursorVisibility","Zigurous.Architecture.DictionaryExtensions","Zigurous.Architecture.DoubleAccumulator","Zigurous.Architecture.DoubleRange","Zigurous.Architecture.DoubleReference","Zigurous.Architecture.DoubleVariable","Zigurous.Architecture.EulerRange","Zigurous.Architecture.EventReference","Zigurous.Architecture.FixedUpdateStrategy","Zigurous.Architecture.FloatAccumulator","Zigurous.Architecture.FloatRange","Zigurous.Architecture.FloatReference","Zigurous.Architecture.FloatVariable","Zigurous.Architecture.GameEvent","Zigurous.Architecture.GameEventListener","Zigurous.Architecture.GameObjectExtensions","Zigurous.Architecture.GridSize","Zigurous.Architecture.HashCode","Zigurous.Architecture.HashSetExtensions","Zigurous.Architecture.Identifier","Zigurous.Architecture.IntAccumulator","Zigurous.Architecture.IntRange","Zigurous.Architecture.IntReference","Zigurous.Architecture.IntVariable","Zigurous.Architecture.INumberRange`1","Zigurous.Architecture.IRange`1","Zigurous.Architecture.IScriptableObjectResettable","Zigurous.Architecture.LateUpdateStrategy","Zigurous.Architecture.ListExtensions","Zigurous.Architecture.ListExtensions.Reducer`2","Zigurous.Architecture.LoadScene","Zigurous.Architecture.LongReference","Zigurous.Architecture.LongVariable","Zigurous.Architecture.MonoBehaviourExtensions","Zigurous.Architecture.NormalUpdateStrategy","Zigurous.Architecture.ObjectExtensions","Zigurous.Architecture.PathEscaper","Zigurous.Architecture.Quantity`1","Zigurous.Architecture.QuaternionAccumulator","Zigurous.Architecture.QuaternionReference","Zigurous.Architecture.QuaternionVariable","Zigurous.Architecture.Range`1","Zigurous.Architecture.ReadOnlyAttribute","Zigurous.Architecture.RectReference","Zigurous.Architecture.RectVariable","Zigurous.Architecture.Registry`1","Zigurous.Architecture.RenameAttribute","Zigurous.Architecture.RuntimeSet`1","Zigurous.Architecture.ScriptableVariable`1","Zigurous.Architecture.ShortReference","Zigurous.Architecture.ShortVariable","Zigurous.Architecture.Singleton`1","Zigurous.Architecture.SingletonPersistent`1","Zigurous.Architecture.Size","Zigurous.Architecture.SortedSetExtensions","Zigurous.Architecture.StringExtensions","Zigurous.Architecture.StringReference","Zigurous.Architecture.StringVariable","Zigurous.Architecture.TargetFrameRate","Zigurous.Architecture.TimerBehaviour","Zigurous.Architecture.TimerEvents","Zigurous.Architecture.TimerSettings","Zigurous.Architecture.TimerStats","Zigurous.Architecture.TransformExtensions","Zigurous.Architecture.UIntRange","Zigurous.Architecture.UIntReference","Zigurous.Architecture.UIntVariable","Zigurous.Architecture.UnitIntervalRange","Zigurous.Architecture.UpdateBehaviour","Zigurous.Architecture.UpdateMode","Zigurous.Architecture.UpdateStrategy","Zigurous.Architecture.UpdateStrategy.UpdateAction","Zigurous.Architecture.ValueAccumulator`1","Zigurous.Architecture.ValueReference`2","Zigurous.Architecture.Vector2Accumulator","Zigurous.Architecture.Vector2IntAccumulator","Zigurous.Architecture.Vector2IntRange","Zigurous.Architecture.Vector2IntReference","Zigurous.Architecture.Vector2IntVariable","Zigurous.Architecture.Vector2Range","Zigurous.Architecture.Vector2Reference","Zigurous.Architecture.Vector2Variable","Zigurous.Architecture.Vector3Accumulator","Zigurous.Architecture.Vector3IntAccumulator","Zigurous.Architecture.Vector3IntRange","Zigurous.Architecture.Vector3IntReference","Zigurous.Architecture.Vector3IntVariable","Zigurous.Architecture.Vector3Range","Zigurous.Architecture.Vector3Reference","Zigurous.Architecture.Vector3Variable","Zigurous.Architecture.Vector4Accumulator","Zigurous.Architecture.Vector4Range","Zigurous.Architecture.Vector4Reference","Zigurous.Architecture.Vector4Variable","Zigurous.Architecture.Yield"],"id":"Zigurous.Architecture","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Zigurous.Architecture","nameWithType":"Zigurous.Architecture","namespace":null,"parent":null,"remarks":null,"summary":null,"syntax":null,"type":"Namespace","uid":"Zigurous.Architecture"}]},{"items":[{"children":["Zigurous.Architecture.ArrayExtensions.Append``1(``0[],``0)","Zigurous.Architecture.ArrayExtensions.Concat``1(``0[],``0[])","Zigurous.Architecture.ArrayExtensions.Contains``1(``0[],``0)","Zigurous.Architecture.ArrayExtensions.ElementAt``1(``0[],System.Int32)","Zigurous.Architecture.ArrayExtensions.Filter``1(``0[],System.Predicate{``0})","Zigurous.Architecture.ArrayExtensions.First``1(``0[])","Zigurous.Architecture.ArrayExtensions.First``1(``0[],System.Predicate{``0})","Zigurous.Architecture.ArrayExtensions.FirstNonNull``1(``0[])","Zigurous.Architecture.ArrayExtensions.Flatten``1(``0[0:,0:,0:])","Zigurous.Architecture.ArrayExtensions.Flatten``1(``0[0:,0:])","Zigurous.Architecture.ArrayExtensions.For``1(``0[],System.Action{System.ValueTuple{``0,System.Int32}})","Zigurous.Architecture.ArrayExtensions.ForEach``1(``0[],System.Action{``0})","Zigurous.Architecture.ArrayExtensions.IndexOf``1(``0[],``0)","Zigurous.Architecture.ArrayExtensions.IsAny``1(``0[],System.Predicate{``0})","Zigurous.Architecture.ArrayExtensions.IsEach``1(``0[],System.Predicate{``0})","Zigurous.Architecture.ArrayExtensions.IsEmpty(System.Array)","Zigurous.Architecture.ArrayExtensions.IsInBounds(System.Array,System.Int32)","Zigurous.Architecture.ArrayExtensions.IsNotEmpty(System.Array)","Zigurous.Architecture.ArrayExtensions.IsNotInBounds(System.Array,System.Int32)","Zigurous.Architecture.ArrayExtensions.Join``1(``0[],System.String,System.Int32,System.Int32)","Zigurous.Architecture.ArrayExtensions.Last``1(``0[])","Zigurous.Architecture.ArrayExtensions.Last``1(``0[],System.Predicate{``0})","Zigurous.Architecture.ArrayExtensions.LastNonNull``1(``0[])","Zigurous.Architecture.ArrayExtensions.Map``2(``0[],System.Converter{``0,``1})","Zigurous.Architecture.ArrayExtensions.NonNull``1(``0[])","Zigurous.Architecture.ArrayExtensions.Random``1(``0[])","Zigurous.Architecture.ArrayExtensions.Reduce``2(``0[],``1,Zigurous.Architecture.ArrayExtensions.Reducer{``1,``0})","Zigurous.Architecture.ArrayExtensions.RemoveAt``1(``0[],System.Int32)","Zigurous.Architecture.ArrayExtensions.Reverse``1(``0[])","Zigurous.Architecture.ArrayExtensions.Reversed``1(``0[])","Zigurous.Architecture.ArrayExtensions.Shuffle``1(``0[])","Zigurous.Architecture.ArrayExtensions.Shuffle``1(``0[],System.Random)","Zigurous.Architecture.ArrayExtensions.Slice``1(``0[],System.Int32)","Zigurous.Architecture.ArrayExtensions.Sort``1(``0[],System.Comparison{``0})","Zigurous.Architecture.ArrayExtensions.Where``1(``0[],System.Predicate{``0})","Zigurous.Architecture.ArrayExtensions.WrapIndex(System.Array,System.Int32)"],"id":"ArrayExtensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"ArrayExtensions","nameWithType":"ArrayExtensions","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nExtension methods for arrays.\n","syntax":{"content":"public static class ArrayExtensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.ArrayExtensions"},{"children":null,"id":"Append``1(``0[],``0)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Append<T>(T[], T)","nameWithType":"ArrayExtensions.Append<T>(T[], T)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ArrayExtensions","remarks":null,"summary":"\nAppends an element to the end of the array.\n","syntax":{"content":"public static T[] Append<T>(this T[] array, T element)","parameters":[{"description":"The array to add the element to.","id":"array","type":"{T}[]"},{"description":"The element to add.","id":"element","type":"{T}"}],"return":{"description":"A new array with the added element.","type":"{T}[]"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ArrayExtensions.Append``1(``0[],``0)"},{"children":null,"id":"Concat``1(``0[],``0[])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Concat<T>(T[], T[])","nameWithType":"ArrayExtensions.Concat<T>(T[], T[])","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ArrayExtensions","remarks":null,"summary":"\nConcats an array of elements to the end of the array.\n","syntax":{"content":"public static T[] Concat<T>(this T[] array, T[] elements)","parameters":[{"description":"The array to add the elements to.","id":"array","type":"{T}[]"},{"description":"The elements to add.","id":"elements","type":"{T}[]"}],"return":{"description":"A new array with the added elements.","type":"{T}[]"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ArrayExtensions.Concat``1(``0[],``0[])"},{"children":null,"id":"Contains``1(``0[],``0)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Contains<T>(T[], T)","nameWithType":"ArrayExtensions.Contains<T>(T[], T)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ArrayExtensions","remarks":null,"summary":"\nChecks if the array contains the given element.\n","syntax":{"content":"public static bool Contains<T>(this T[] array, T element)\n    where T : IEquatable<T>","parameters":[{"description":"The array to search in.","id":"array","type":"{T}[]"},{"description":"The element to search for.","id":"element","type":"{T}"}],"return":{"description":"True if the array contains the element, false otherwise.","type":"System.Boolean"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ArrayExtensions.Contains``1(``0[],``0)"},{"children":null,"id":"ElementAt``1(``0[],System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ElementAt<T>(T[], Int32)","nameWithType":"ArrayExtensions.ElementAt<T>(T[], Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ArrayExtensions","remarks":null,"summary":"\nReturns the element at the specified index.\n","syntax":{"content":"public static T ElementAt<T>(this T[] array, int index)","parameters":[{"description":"The array to search in.","id":"array","type":"{T}[]"},{"description":"The index of the element to return.","id":"index","type":"System.Int32"}],"return":{"description":"The element at the specified index, or <code>default(T)</code> if the array is empty.","type":"{T}"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ArrayExtensions.ElementAt``1(``0[],System.Int32)"},{"children":null,"id":"Filter``1(``0[],System.Predicate{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Filter<T>(T[], Predicate<T>)","nameWithType":"ArrayExtensions.Filter<T>(T[], Predicate<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ArrayExtensions","remarks":null,"summary":"\nFilters the array to only contain elements that satisfy a predicate.\n","syntax":{"content":"public static T[] Filter<T>(this T[] array, Predicate<T> predicate)","parameters":[{"description":"The array to filter.","id":"array","type":"{T}[]"},{"description":"The predicate to use.","id":"predicate","type":"System.Predicate{{T}}"}],"return":{"description":"A new array with the filtered elements removed.","type":"{T}[]"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ArrayExtensions.Filter``1(``0[],System.Predicate{``0})"},{"children":null,"id":"First``1(``0[])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"First<T>(T[])","nameWithType":"ArrayExtensions.First<T>(T[])","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ArrayExtensions","remarks":null,"summary":"\nReturns the first element in the array.\n","syntax":{"content":"public static T First<T>(this T[] array)","parameters":[{"description":"The array to get the element from.","id":"array","type":"{T}[]"}],"return":{"description":"The first element in the array, or <code>default(T)</code> if the array is empty.","type":"{T}"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ArrayExtensions.First``1(``0[])"},{"children":null,"id":"First``1(``0[],System.Predicate{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"First<T>(T[], Predicate<T>)","nameWithType":"ArrayExtensions.First<T>(T[], Predicate<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ArrayExtensions","remarks":null,"summary":"\nReturns the first element in the array that satisfies a predicate.\n","syntax":{"content":"public static T First<T>(this T[] array, Predicate<T> predicate)","parameters":[{"description":"The array to get the element from.","id":"array","type":"{T}[]"},{"description":"The predicate to use.","id":"predicate","type":"System.Predicate{{T}}"}],"return":{"description":"The first element in the array that satisfies the predicate, or <code>default(T)</code> if no element satisfies the predicate.","type":"{T}"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ArrayExtensions.First``1(``0[],System.Predicate{``0})"},{"children":null,"id":"FirstNonNull``1(``0[])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"FirstNonNull<T>(T[])","nameWithType":"ArrayExtensions.FirstNonNull<T>(T[])","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ArrayExtensions","remarks":null,"summary":"\nReturns the first non-null element in the array.\n","syntax":{"content":"public static T FirstNonNull<T>(this T[] array)\n    where T : class","parameters":[{"description":"The array to get the element from.","id":"array","type":"{T}[]"}],"return":{"description":"The first non-null element in the array, or <code>default(T)</code> if all elements are null.","type":"{T}"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ArrayExtensions.FirstNonNull``1(``0[])"},{"children":null,"id":"Flatten``1(``0[0:,0:])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Flatten<T>(T[,])","nameWithType":"ArrayExtensions.Flatten<T>(T[,])","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ArrayExtensions","remarks":null,"summary":"\nFlattens a two-dimensional array into a new one-dimensional array.\n","syntax":{"content":"public static T[] Flatten<T>(this T[, ] array)","parameters":[{"description":"The two-dimensional array to flatten.","id":"array","type":"{T}[,]"}],"return":{"description":"A new array with the flattened elements.","type":"{T}[]"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ArrayExtensions.Flatten``1(``0[0:,0:])"},{"children":null,"id":"Flatten``1(``0[0:,0:,0:])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Flatten<T>(T[,,])","nameWithType":"ArrayExtensions.Flatten<T>(T[,,])","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ArrayExtensions","remarks":null,"summary":"\nFlattens a three-dimensional array into a new one-dimensional array.\n","syntax":{"content":"public static T[] Flatten<T>(this T[,, ] array)","parameters":[{"description":"The three-dimensional array to flatten.","id":"array","type":"{T}[,,]"}],"return":{"description":"A new array with the flattened elements.","type":"{T}[]"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ArrayExtensions.Flatten``1(``0[0:,0:,0:])"},{"children":null,"id":"For``1(``0[],System.Action{System.ValueTuple{``0,System.Int32}})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"For<T>(T[], Action<(T element, Int32 index)>)","nameWithType":"ArrayExtensions.For<T>(T[], Action<(T element, Int32 index)>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ArrayExtensions","remarks":null,"summary":"\nInvokes an action for each element in the array. The element and\nindex are passed as parameters.\n","syntax":{"content":"public static void For<T>(this T[] array, Action<(T element, int index)> action)","parameters":[{"description":"The array to iterate over.","id":"array","type":"{T}[]"},{"description":"The action to invoke.","id":"action","type":"System.Action{System.ValueTuple{{T},System.Int32}}"}],"return":null,"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ArrayExtensions.For``1(``0[],System.Action{System.ValueTuple{``0,System.Int32}})"},{"children":null,"id":"ForEach``1(``0[],System.Action{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ForEach<T>(T[], Action<T>)","nameWithType":"ArrayExtensions.ForEach<T>(T[], Action<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ArrayExtensions","remarks":null,"summary":"\nInvokes an action for each element in the array. The element is\npassed as a parameter.\n","syntax":{"content":"public static void ForEach<T>(this T[] array, Action<T> action)","parameters":[{"description":"The array to iterate over.","id":"array","type":"{T}[]"},{"description":"The action to invoke.","id":"action","type":"System.Action{{T}}"}],"return":null,"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ArrayExtensions.ForEach``1(``0[],System.Action{``0})"},{"children":null,"id":"IndexOf``1(``0[],``0)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IndexOf<T>(T[], T)","nameWithType":"ArrayExtensions.IndexOf<T>(T[], T)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ArrayExtensions","remarks":null,"summary":"\nReturns the index of the given element in the array.\n","syntax":{"content":"public static int IndexOf<T>(this T[] array, T element)\n    where T : IEquatable<T>","parameters":[{"description":"The array to search in.","id":"array","type":"{T}[]"},{"description":"The element to search for.","id":"element","type":"{T}"}],"return":{"description":"The index of the element in the array.","type":"System.Int32"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ArrayExtensions.IndexOf``1(``0[],``0)"},{"children":null,"id":"IsAny``1(``0[],System.Predicate{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsAny<T>(T[], Predicate<T>)","nameWithType":"ArrayExtensions.IsAny<T>(T[], Predicate<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ArrayExtensions","remarks":null,"summary":"\nChecks if any element in the array satisfies a predicate.\n","syntax":{"content":"public static bool IsAny<T>(this T[] array, Predicate<T> predicate)","parameters":[{"description":"The array to search in.","id":"array","type":"{T}[]"},{"description":"The predicate to use.","id":"predicate","type":"System.Predicate{{T}}"}],"return":{"description":"True if any element satisfies the predicate.","type":"System.Boolean"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ArrayExtensions.IsAny``1(``0[],System.Predicate{``0})"},{"children":null,"id":"IsEach``1(``0[],System.Predicate{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsEach<T>(T[], Predicate<T>)","nameWithType":"ArrayExtensions.IsEach<T>(T[], Predicate<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ArrayExtensions","remarks":null,"summary":"\nChecks if each element in the array satisfies a predicate.\n","syntax":{"content":"public static bool IsEach<T>(this T[] array, Predicate<T> predicate)","parameters":[{"description":"The array to search in.","id":"array","type":"{T}[]"},{"description":"The predicate to use.","id":"predicate","type":"System.Predicate{{T}}"}],"return":{"description":"True if all elements satisfy the predicate.","type":"System.Boolean"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ArrayExtensions.IsEach``1(``0[],System.Predicate{``0})"},{"children":null,"id":"IsEmpty(System.Array)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsEmpty(Array)","nameWithType":"ArrayExtensions.IsEmpty(Array)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ArrayExtensions","remarks":null,"summary":"\nChecks if the array is empty.\n","syntax":{"content":"public static bool IsEmpty(this Array array)","parameters":[{"description":"The array to check.","id":"array","type":"System.Array"}],"return":{"description":"True if the array is empty.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.ArrayExtensions.IsEmpty(System.Array)"},{"children":null,"id":"IsNotEmpty(System.Array)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsNotEmpty(Array)","nameWithType":"ArrayExtensions.IsNotEmpty(Array)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ArrayExtensions","remarks":null,"summary":"\nChecks if the array is not empty.\n","syntax":{"content":"public static bool IsNotEmpty(this Array array)","parameters":[{"description":"The array to check.","id":"array","type":"System.Array"}],"return":{"description":"True if the array is not empty.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.ArrayExtensions.IsNotEmpty(System.Array)"},{"children":null,"id":"IsInBounds(System.Array,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsInBounds(Array, Int32)","nameWithType":"ArrayExtensions.IsInBounds(Array, Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ArrayExtensions","remarks":null,"summary":"\nChecks if the specified index is within the bounds of the array.\n","syntax":{"content":"public static bool IsInBounds(this Array array, int index)","parameters":[{"description":"The array to check.","id":"array","type":"System.Array"},{"description":"The index to check.","id":"index","type":"System.Int32"}],"return":{"description":"True if the index is within the bounds of the array.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.ArrayExtensions.IsInBounds(System.Array,System.Int32)"},{"children":null,"id":"IsNotInBounds(System.Array,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsNotInBounds(Array, Int32)","nameWithType":"ArrayExtensions.IsNotInBounds(Array, Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ArrayExtensions","remarks":null,"summary":"\nChecks if the specified index is out of bounds of the array.\n","syntax":{"content":"public static bool IsNotInBounds(this Array array, int index)","parameters":[{"description":"The array to check.","id":"array","type":"System.Array"},{"description":"The index to check.","id":"index","type":"System.Int32"}],"return":{"description":"True if the index is out of bounds of the array.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.ArrayExtensions.IsNotInBounds(System.Array,System.Int32)"},{"children":null,"id":"Join``1(``0[],System.String,System.Int32,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Join<T>(T[], String, Int32, Int32)","nameWithType":"ArrayExtensions.Join<T>(T[], String, Int32, Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ArrayExtensions","remarks":null,"summary":"\nJoins the elements of the array into a string with a delimiter.\n","syntax":{"content":"public static string Join<T>(this T[] array, string delimiter, int startIndex = 0, int endIndex = 2147483647)","parameters":[{"description":"The array to join.","id":"array","type":"{T}[]"},{"description":"The delimiter to use.","id":"delimiter","type":"System.String"},{"description":"The index to start at.","id":"startIndex","type":"System.Int32"},{"description":"The index to end at.","id":"endIndex","type":"System.Int32"}],"return":{"description":"The joined string.","type":"System.String"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ArrayExtensions.Join``1(``0[],System.String,System.Int32,System.Int32)"},{"children":null,"id":"Last``1(``0[])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Last<T>(T[])","nameWithType":"ArrayExtensions.Last<T>(T[])","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ArrayExtensions","remarks":null,"summary":"\nReturns the last element in the array.\n","syntax":{"content":"public static T Last<T>(this T[] array)","parameters":[{"description":"The array to get the element from.","id":"array","type":"{T}[]"}],"return":{"description":"The last element in the array, or <code>default(T)</code> if the array is empty.","type":"{T}"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ArrayExtensions.Last``1(``0[])"},{"children":null,"id":"Last``1(``0[],System.Predicate{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Last<T>(T[], Predicate<T>)","nameWithType":"ArrayExtensions.Last<T>(T[], Predicate<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ArrayExtensions","remarks":null,"summary":"\nReturns the last element in the array that satisfies a predicate.\n","syntax":{"content":"public static T Last<T>(this T[] array, Predicate<T> predicate)","parameters":[{"description":"The array to get the element from.","id":"array","type":"{T}[]"},{"description":"The predicate to use.","id":"predicate","type":"System.Predicate{{T}}"}],"return":{"description":"The last element in the array that satisfies the predicate, or <code>default(T)</code> if no element satisfies the predicate.","type":"{T}"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ArrayExtensions.Last``1(``0[],System.Predicate{``0})"},{"children":null,"id":"LastNonNull``1(``0[])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"LastNonNull<T>(T[])","nameWithType":"ArrayExtensions.LastNonNull<T>(T[])","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ArrayExtensions","remarks":null,"summary":"\nReturns the last non-null element in the array.\n","syntax":{"content":"public static T LastNonNull<T>(this T[] array)\n    where T : class","parameters":[{"description":"The array to get the element from.","id":"array","type":"{T}[]"}],"return":{"description":"The last non-null element in the array, or <code>default(T)</code> if all elements are null.","type":"{T}"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ArrayExtensions.LastNonNull``1(``0[])"},{"children":null,"id":"Map``2(``0[],System.Converter{``0,``1})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Map<TInput, TOutput>(TInput[], Converter<TInput, TOutput>)","nameWithType":"ArrayExtensions.Map<TInput, TOutput>(TInput[], Converter<TInput, TOutput>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ArrayExtensions","remarks":null,"summary":"\nMaps the elements of the array to a new array using a converter\nfunction.\n","syntax":{"content":"public static TOutput[] Map<TInput, TOutput>(this TInput[] array, Converter<TInput, TOutput> converter)","parameters":[{"description":"The array to map.","id":"array","type":"{TInput}[]"},{"description":"The converter to use.","id":"converter","type":"System.Converter{{TInput},{TOutput}}"}],"return":{"description":"A new array with the converted elements.","type":"{TOutput}[]"},"typeParameters":[{"description":"The type of the input array.","id":"TInput"},{"description":"The type of the output array.","id":"TOutput"}]},"type":"Method","uid":"Zigurous.Architecture.ArrayExtensions.Map``2(``0[],System.Converter{``0,``1})"},{"children":null,"id":"NonNull``1(``0[])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"NonNull<T>(T[])","nameWithType":"ArrayExtensions.NonNull<T>(T[])","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ArrayExtensions","remarks":null,"summary":"\nFilters out all null elements from the array.\n","syntax":{"content":"public static T[] NonNull<T>(this T[] array)\n    where T : class","parameters":[{"description":"The array to filter.","id":"array","type":"{T}[]"}],"return":{"description":"A new array with all null elements removed.","type":"{T}[]"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ArrayExtensions.NonNull``1(``0[])"},{"children":null,"id":"Random``1(``0[])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Random<T>(T[])","nameWithType":"ArrayExtensions.Random<T>(T[])","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ArrayExtensions","remarks":null,"summary":"\nReturns a random element from the array.\n","syntax":{"content":"public static T Random<T>(this T[] array)","parameters":[{"description":"The array to get the random element from.","id":"array","type":"{T}[]"}],"return":{"description":"A random element from the array, or <code>default(T)</code> if the array is empty.","type":"{T}"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ArrayExtensions.Random``1(``0[])"},{"children":null,"id":"Reduce``2(``0[],``1,Zigurous.Architecture.ArrayExtensions.Reducer{``1,``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Reduce<TElement, TSum>(TElement[], TSum, ArrayExtensions.Reducer<TSum, TElement>)","nameWithType":"ArrayExtensions.Reduce<TElement, TSum>(TElement[], TSum, ArrayExtensions.Reducer<TSum, TElement>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ArrayExtensions","remarks":null,"summary":"\nReduces the elements of the array to a single value.\n","syntax":{"content":"public static TSum Reduce<TElement, TSum>(this TElement[] array, TSum initialValue, ArrayExtensions.Reducer<TSum, TElement> reducer)","parameters":[{"description":"The array to reduce.","id":"array","type":"{TElement}[]"},{"description":"The initial value to use.","id":"initialValue","type":"{TSum}"},{"description":"The reducer to use.","id":"reducer","type":"Zigurous.Architecture.ArrayExtensions.Reducer{{TSum},{TElement}}"}],"return":{"description":"The reduced value.","type":"{TSum}"},"typeParameters":[{"description":"The type of elements in the array.","id":"TElement"},{"description":"The type of the reduced value.","id":"TSum"}]},"type":"Method","uid":"Zigurous.Architecture.ArrayExtensions.Reduce``2(``0[],``1,Zigurous.Architecture.ArrayExtensions.Reducer{``1,``0})"},{"children":null,"id":"RemoveAt``1(``0[],System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"RemoveAt<T>(T[], Int32)","nameWithType":"ArrayExtensions.RemoveAt<T>(T[], Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ArrayExtensions","remarks":null,"summary":"\nRemoves the element at the specified index from the array.\n","syntax":{"content":"public static T[] RemoveAt<T>(this T[] array, int index)","parameters":[{"description":"The array to remove the element from.","id":"array","type":"{T}[]"},{"description":"The index of the element to remove.","id":"index","type":"System.Int32"}],"return":{"description":"A new array with the element removed.","type":"{T}[]"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ArrayExtensions.RemoveAt``1(``0[],System.Int32)"},{"children":null,"id":"Reverse``1(``0[])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Reverse<T>(T[])","nameWithType":"ArrayExtensions.Reverse<T>(T[])","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ArrayExtensions","remarks":null,"summary":"\nReverses the order of the elements in the array.\n","syntax":{"content":"public static void Reverse<T>(this T[] array)","parameters":[{"description":"The array to reverse.","id":"array","type":"{T}[]"}],"return":null,"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ArrayExtensions.Reverse``1(``0[])"},{"children":null,"id":"Reversed``1(``0[])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Reversed<T>(T[])","nameWithType":"ArrayExtensions.Reversed<T>(T[])","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ArrayExtensions","remarks":null,"summary":"\nReverses the order of the elements in the array.\n","syntax":{"content":"public static T[] Reversed<T>(this T[] array)","parameters":[{"description":"The array to reverse.","id":"array","type":"{T}[]"}],"return":{"description":"A new array with the order of the elements reversed.","type":"{T}[]"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ArrayExtensions.Reversed``1(``0[])"},{"children":null,"id":"Shuffle``1(``0[])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Shuffle<T>(T[])","nameWithType":"ArrayExtensions.Shuffle<T>(T[])","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ArrayExtensions","remarks":"The shuffle is done using the Fisher-Yates algorithm.","summary":"\nShuffles the array in place.\n","syntax":{"content":"public static void Shuffle<T>(this T[] array)","parameters":[{"description":"The array to shuffle.","id":"array","type":"{T}[]"}],"return":null,"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ArrayExtensions.Shuffle``1(``0[])"},{"children":null,"id":"Shuffle``1(``0[],System.Random)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Shuffle<T>(T[], Random)","nameWithType":"ArrayExtensions.Shuffle<T>(T[], Random)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ArrayExtensions","remarks":"The shuffle is done using the Fisher-Yates algorithm.","summary":"\nShuffles the array in place using the given random number generator.\n","syntax":{"content":"public static void Shuffle<T>(this T[] array, Random rng)","parameters":[{"description":"The array to shuffle.","id":"array","type":"{T}[]"},{"description":"The random number generator to use.","id":"rng","type":"System.Random"}],"return":null,"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ArrayExtensions.Shuffle``1(``0[],System.Random)"},{"children":null,"id":"Slice``1(``0[],System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Slice<T>(T[], Int32)","nameWithType":"ArrayExtensions.Slice<T>(T[], Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ArrayExtensions","remarks":null,"summary":"\nReturns a portion of the array containing a specified amount of\nelements.\n","syntax":{"content":"public static T[] Slice<T>(this T[] array, int amount)","parameters":[{"description":"The array to slice.","id":"array","type":"{T}[]"},{"description":"The amount of elements to slice.","id":"amount","type":"System.Int32"}],"return":{"description":"A new array containing only the sliced elements.","type":"{T}[]"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ArrayExtensions.Slice``1(``0[],System.Int32)"},{"children":null,"id":"Sort``1(``0[],System.Comparison{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Sort<T>(T[], Comparison<T>)","nameWithType":"ArrayExtensions.Sort<T>(T[], Comparison<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ArrayExtensions","remarks":null,"summary":"\nSorts the elements of the array.\n","syntax":{"content":"public static void Sort<T>(this T[] array, Comparison<T> comparison)","parameters":[{"description":"The array to sort.","id":"array","type":"{T}[]"},{"description":"The comparison to use.","id":"comparison","type":"System.Comparison{{T}}"}],"return":null,"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ArrayExtensions.Sort``1(``0[],System.Comparison{``0})"},{"children":null,"id":"Where``1(``0[],System.Predicate{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Where<T>(T[], Predicate<T>)","nameWithType":"ArrayExtensions.Where<T>(T[], Predicate<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ArrayExtensions","remarks":null,"summary":"\nFilters the array to only contain elements that satisfy a predicate.\n","syntax":{"content":"public static T[] Where<T>(this T[] array, Predicate<T> predicate)","parameters":[{"description":"The array to filter.","id":"array","type":"{T}[]"},{"description":"The predicate to use.","id":"predicate","type":"System.Predicate{{T}}"}],"return":{"description":"A new array with the filtered elements removed.","type":"{T}[]"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ArrayExtensions.Where``1(``0[],System.Predicate{``0})"},{"children":null,"id":"WrapIndex(System.Array,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"WrapIndex(Array, Int32)","nameWithType":"ArrayExtensions.WrapIndex(Array, Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ArrayExtensions","remarks":null,"summary":"\nWraps an index to either end of the array if it is out of bounds.\n","syntax":{"content":"public static int WrapIndex(this Array array, int index)","parameters":[{"description":"The array to wrap.","id":"array","type":"System.Array"},{"description":"The index to wrap.","id":"index","type":"System.Int32"}],"return":{"description":"The wrapped index.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.Architecture.ArrayExtensions.WrapIndex(System.Array,System.Int32)"}]},{"items":[{"children":["Zigurous.Architecture.ListExtensions.Add``1(List{``0},``0,System.Int32)","Zigurous.Architecture.ListExtensions.CombinedWith``1(List{``0},List{``0})","Zigurous.Architecture.ListExtensions.Filter``1(List{``0},System.Predicate{``0})","Zigurous.Architecture.ListExtensions.First``1(List{``0})","Zigurous.Architecture.ListExtensions.First``1(List{``0},System.Predicate{``0})","Zigurous.Architecture.ListExtensions.FirstNonNull``1(List{``0})","Zigurous.Architecture.ListExtensions.For``1(List{``0},System.Action{System.ValueTuple{``0,System.Int32}})","Zigurous.Architecture.ListExtensions.IsAny``1(List{``0},System.Predicate{``0})","Zigurous.Architecture.ListExtensions.IsEach``1(List{``0},System.Predicate{``0})","Zigurous.Architecture.ListExtensions.IsEmpty``1(List{``0})","Zigurous.Architecture.ListExtensions.IsInBounds``1(List{``0},System.Int32)","Zigurous.Architecture.ListExtensions.IsNotEmpty``1(List{``0})","Zigurous.Architecture.ListExtensions.IsNotInBounds``1(List{``0},System.Int32)","Zigurous.Architecture.ListExtensions.ItemAt``1(List{``0},System.Int32)","Zigurous.Architecture.ListExtensions.Join``1(List{``0},System.String,System.Int32,System.Int32)","Zigurous.Architecture.ListExtensions.Last``1(List{``0})","Zigurous.Architecture.ListExtensions.Last``1(List{``0},System.Predicate{``0})","Zigurous.Architecture.ListExtensions.LastNonNull``1(List{``0})","Zigurous.Architecture.ListExtensions.Map``2(List{``0},System.Converter{``0,``1})","Zigurous.Architecture.ListExtensions.NonNull``1(List{``0})","Zigurous.Architecture.ListExtensions.Random``1(List{``0})","Zigurous.Architecture.ListExtensions.Reduce``2(List{``0},``1,Zigurous.Architecture.ListExtensions.Reducer{``1,``0})","Zigurous.Architecture.ListExtensions.RemoveFirst``1(List{``0})","Zigurous.Architecture.ListExtensions.RemoveLast``1(List{``0})","Zigurous.Architecture.ListExtensions.Reversed``1(List{``0})","Zigurous.Architecture.ListExtensions.Shuffle``1(List{``0})","Zigurous.Architecture.ListExtensions.Shuffle``1(List{``0},System.Random)","Zigurous.Architecture.ListExtensions.Where``1(List{``0},System.Predicate{``0})","Zigurous.Architecture.ListExtensions.WrapIndex``1(List{``0},System.Int32)"],"id":"ListExtensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"ListExtensions","nameWithType":"ListExtensions","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture","remarks":null,"summary":"\nExtension methods for lists.\n","syntax":{"content":"public static class ListExtensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.Architecture.ListExtensions"},{"children":null,"id":"Add``1(List{``0},``0,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Add<T>(List<T>, T, Int32)","nameWithType":"ListExtensions.Add<T>(List<T>, T, Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ListExtensions","remarks":null,"summary":"\nAdds a specified amount of a given value to the list.\n","syntax":{"content":"public static void Add<T>(this List<T> list, T value, int amount)","parameters":[{"description":"The list to add to.","id":"list","type":"Global.List{{T}}"},{"description":"The value to add.","id":"value","type":"{T}"},{"description":"The number of times to add the value.","id":"amount","type":"System.Int32"}],"return":null,"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ListExtensions.Add``1(List{``0},``0,System.Int32)"},{"children":null,"id":"CombinedWith``1(List{``0},List{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"CombinedWith<T>(List<T>, List<T>)","nameWithType":"ListExtensions.CombinedWith<T>(List<T>, List<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ListExtensions","remarks":null,"summary":"\nCombines the list with another.\n","syntax":{"content":"public static List<T> CombinedWith<T>(this List<T> list, List<T> other)","parameters":[{"description":"The first list.","id":"list","type":"Global.List{{T}}"},{"description":"The second list.","id":"other","type":"Global.List{{T}}"}],"return":{"description":"A new list containing the items of both lists.","type":"Global.List{{T}}"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ListExtensions.CombinedWith``1(List{``0},List{``0})"},{"children":null,"id":"ItemAt``1(List{``0},System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ItemAt<T>(List<T>, Int32)","nameWithType":"ListExtensions.ItemAt<T>(List<T>, Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ListExtensions","remarks":null,"summary":"\nReturns the item at the specified index.\n","syntax":{"content":"public static T ItemAt<T>(this List<T> list, int index)","parameters":[{"description":"The list to get the item from.","id":"list","type":"Global.List{{T}}"},{"description":"The index of the item to get.","id":"index","type":"System.Int32"}],"return":{"description":"The item at the index, or <code>default(T)</code> if the list is empty.","type":"{T}"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ListExtensions.ItemAt``1(List{``0},System.Int32)"},{"children":null,"id":"Filter``1(List{``0},System.Predicate{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Filter<T>(List<T>, Predicate<T>)","nameWithType":"ListExtensions.Filter<T>(List<T>, Predicate<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ListExtensions","remarks":null,"summary":"\nFilters the list to only contain items that satisfy a predicate.\n","syntax":{"content":"public static List<T> Filter<T>(this List<T> list, Predicate<T> predicate)","parameters":[{"description":"The list to filter.","id":"list","type":"Global.List{{T}}"},{"description":"The predicate to use.","id":"predicate","type":"System.Predicate{{T}}"}],"return":{"description":"A new list with the filtered items removed.","type":"Global.List{{T}}"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ListExtensions.Filter``1(List{``0},System.Predicate{``0})"},{"children":null,"id":"First``1(List{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"First<T>(List<T>)","nameWithType":"ListExtensions.First<T>(List<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ListExtensions","remarks":null,"summary":"\nReturns the first item in the list.\n","syntax":{"content":"public static T First<T>(this List<T> list)","parameters":[{"description":"The list to get the item from.","id":"list","type":"Global.List{{T}}"}],"return":{"description":"The first item in the list, or <code>default(T)</code> if the list is empty.","type":"{T}"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ListExtensions.First``1(List{``0})"},{"children":null,"id":"First``1(List{``0},System.Predicate{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"First<T>(List<T>, Predicate<T>)","nameWithType":"ListExtensions.First<T>(List<T>, Predicate<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ListExtensions","remarks":null,"summary":"\nReturns the first item in the list that satisfies a predicate.\n","syntax":{"content":"public static T First<T>(this List<T> list, Predicate<T> predicate)","parameters":[{"description":"The list to get the item from.","id":"list","type":"Global.List{{T}}"},{"description":"The predicate to use.","id":"predicate","type":"System.Predicate{{T}}"}],"return":{"description":"The first item in the list that satisfies the predicate, or <code>default(T)</code> if no item satisfies the predicate.","type":"{T}"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ListExtensions.First``1(List{``0},System.Predicate{``0})"},{"children":null,"id":"FirstNonNull``1(List{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"FirstNonNull<T>(List<T>)","nameWithType":"ListExtensions.FirstNonNull<T>(List<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ListExtensions","remarks":null,"summary":"\nReturns the first non-null item in the list.\n","syntax":{"content":"public static T FirstNonNull<T>(this List<T> list)\n    where T : class","parameters":[{"description":"The list to get the item from.","id":"list","type":"Global.List{{T}}"}],"return":{"description":"The first non-null item in the list, or <code>default(T)</code> if all items are null.","type":"{T}"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ListExtensions.FirstNonNull``1(List{``0})"},{"children":null,"id":"For``1(List{``0},System.Action{System.ValueTuple{``0,System.Int32}})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"For<T>(List<T>, Action<(T item, Int32 index)>)","nameWithType":"ListExtensions.For<T>(List<T>, Action<(T item, Int32 index)>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ListExtensions","remarks":null,"summary":"\nInvokes an action for each item in the list. The item and index are\npassed as parameters.\n","syntax":{"content":"public static void For<T>(this List<T> list, Action<(T item, int index)> action)","parameters":[{"description":"The list to iterate over.","id":"list","type":"Global.List{{T}}"},{"description":"The action to invoke.","id":"action","type":"System.Action{System.ValueTuple{{T},System.Int32}}"}],"return":null,"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ListExtensions.For``1(List{``0},System.Action{System.ValueTuple{``0,System.Int32}})"},{"children":null,"id":"IsAny``1(List{``0},System.Predicate{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsAny<T>(List<T>, Predicate<T>)","nameWithType":"ListExtensions.IsAny<T>(List<T>, Predicate<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ListExtensions","remarks":null,"summary":"\nChecks if any item in the list satisfies a predicate.\n","syntax":{"content":"public static bool IsAny<T>(this List<T> list, Predicate<T> predicate)","parameters":[{"description":"The list to search in.","id":"list","type":"Global.List{{T}}"},{"description":"The predicate to use.","id":"predicate","type":"System.Predicate{{T}}"}],"return":{"description":"True if any item satisfies the predicate.","type":"System.Boolean"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ListExtensions.IsAny``1(List{``0},System.Predicate{``0})"},{"children":null,"id":"IsEach``1(List{``0},System.Predicate{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsEach<T>(List<T>, Predicate<T>)","nameWithType":"ListExtensions.IsEach<T>(List<T>, Predicate<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ListExtensions","remarks":null,"summary":"\nChecks if each item in the list satisfies a predicate.\n","syntax":{"content":"public static bool IsEach<T>(this List<T> list, Predicate<T> predicate)","parameters":[{"description":"The list to search in.","id":"list","type":"Global.List{{T}}"},{"description":"The predicate to use.","id":"predicate","type":"System.Predicate{{T}}"}],"return":{"description":"True if all items satisfy the predicate.","type":"System.Boolean"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ListExtensions.IsEach``1(List{``0},System.Predicate{``0})"},{"children":null,"id":"IsEmpty``1(List{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsEmpty<T>(List<T>)","nameWithType":"ListExtensions.IsEmpty<T>(List<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ListExtensions","remarks":null,"summary":"\nChecks if the list is empty.\n","syntax":{"content":"public static bool IsEmpty<T>(this List<T> list)","parameters":[{"description":"The list to check.","id":"list","type":"Global.List{{T}}"}],"return":{"description":"True if the list is empty.","type":"System.Boolean"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ListExtensions.IsEmpty``1(List{``0})"},{"children":null,"id":"IsNotEmpty``1(List{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsNotEmpty<T>(List<T>)","nameWithType":"ListExtensions.IsNotEmpty<T>(List<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ListExtensions","remarks":null,"summary":"\nChecks if the list is not empty.\n","syntax":{"content":"public static bool IsNotEmpty<T>(this List<T> list)","parameters":[{"description":"The list to check.","id":"list","type":"Global.List{{T}}"}],"return":{"description":"True if the list is not empty.","type":"System.Boolean"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ListExtensions.IsNotEmpty``1(List{``0})"},{"children":null,"id":"IsInBounds``1(List{``0},System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsInBounds<T>(List<T>, Int32)","nameWithType":"ListExtensions.IsInBounds<T>(List<T>, Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ListExtensions","remarks":null,"summary":"\nChecks if the specified index is within the bounds of the list.\n","syntax":{"content":"public static bool IsInBounds<T>(this List<T> list, int index)","parameters":[{"description":"The list to check.","id":"list","type":"Global.List{{T}}"},{"description":"The index to check.","id":"index","type":"System.Int32"}],"return":{"description":"True if the index is within the bounds of the list.","type":"System.Boolean"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ListExtensions.IsInBounds``1(List{``0},System.Int32)"},{"children":null,"id":"IsNotInBounds``1(List{``0},System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsNotInBounds<T>(List<T>, Int32)","nameWithType":"ListExtensions.IsNotInBounds<T>(List<T>, Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ListExtensions","remarks":null,"summary":"\nChecks if the specified index is out of bounds of the list.\n","syntax":{"content":"public static bool IsNotInBounds<T>(this List<T> list, int index)","parameters":[{"description":"The list to check.","id":"list","type":"Global.List{{T}}"},{"description":"The index to check.","id":"index","type":"System.Int32"}],"return":{"description":"True if the index is out of bounds of the list.","type":"System.Boolean"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ListExtensions.IsNotInBounds``1(List{``0},System.Int32)"},{"children":null,"id":"Join``1(List{``0},System.String,System.Int32,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Join<T>(List<T>, String, Int32, Int32)","nameWithType":"ListExtensions.Join<T>(List<T>, String, Int32, Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ListExtensions","remarks":null,"summary":"\nJoins the items of the list into a string with a delimiter.\n","syntax":{"content":"public static string Join<T>(this List<T> list, string delimiter, int startIndex = 0, int endIndex = 2147483647)","parameters":[{"description":null,"id":"list","type":"Global.List{{T}}"},{"description":"The delimiter to use.","id":"delimiter","type":"System.String"},{"description":"The index to start at.","id":"startIndex","type":"System.Int32"},{"description":"The index to end at.","id":"endIndex","type":"System.Int32"}],"return":{"description":"The joined string.","type":"System.String"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ListExtensions.Join``1(List{``0},System.String,System.Int32,System.Int32)"},{"children":null,"id":"Last``1(List{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Last<T>(List<T>)","nameWithType":"ListExtensions.Last<T>(List<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ListExtensions","remarks":null,"summary":"\nReturns the last item in the list.\n","syntax":{"content":"public static T Last<T>(this List<T> list)","parameters":[{"description":"The list to get the item from.","id":"list","type":"Global.List{{T}}"}],"return":{"description":"The last item in the list, or <code>default(T)</code> if the list is empty.","type":"{T}"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ListExtensions.Last``1(List{``0})"},{"children":null,"id":"Last``1(List{``0},System.Predicate{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Last<T>(List<T>, Predicate<T>)","nameWithType":"ListExtensions.Last<T>(List<T>, Predicate<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ListExtensions","remarks":null,"summary":"\nReturns the last item in the list that satisfies a predicate.\n","syntax":{"content":"public static T Last<T>(this List<T> list, Predicate<T> predicate)","parameters":[{"description":"The list to get the item from.","id":"list","type":"Global.List{{T}}"},{"description":"The predicate to use.","id":"predicate","type":"System.Predicate{{T}}"}],"return":{"description":"The last item in the list that satisfies the predicate, or <code>default(T)</code> if no item satisfies the predicate.","type":"{T}"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ListExtensions.Last``1(List{``0},System.Predicate{``0})"},{"children":null,"id":"LastNonNull``1(List{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"LastNonNull<T>(List<T>)","nameWithType":"ListExtensions.LastNonNull<T>(List<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ListExtensions","remarks":null,"summary":"\nReturns the last non-null item in the list.\n","syntax":{"content":"public static T LastNonNull<T>(this List<T> list)\n    where T : class","parameters":[{"description":"The list to get the item from.","id":"list","type":"Global.List{{T}}"}],"return":{"description":"The last non-null item in the list, or <code>default(T)</code> if all items are null.","type":"{T}"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ListExtensions.LastNonNull``1(List{``0})"},{"children":null,"id":"Map``2(List{``0},System.Converter{``0,``1})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Map<TInput, TOutput>(List<TInput>, Converter<TInput, TOutput>)","nameWithType":"ListExtensions.Map<TInput, TOutput>(List<TInput>, Converter<TInput, TOutput>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ListExtensions","remarks":null,"summary":"\nMaps the items of the list to a new list using a converter function.\n","syntax":{"content":"public static List<TOutput> Map<TInput, TOutput>(this List<TInput> list, Converter<TInput, TOutput> converter)","parameters":[{"description":"The list to map.","id":"list","type":"Global.List{{TInput}}"},{"description":"The converter to use.","id":"converter","type":"System.Converter{{TInput},{TOutput}}"}],"return":{"description":"A new list with the converted items.","type":"Global.List{{TOutput}}"},"typeParameters":[{"description":"The type of the input list.","id":"TInput"},{"description":"The type of the output list.","id":"TOutput"}]},"type":"Method","uid":"Zigurous.Architecture.ListExtensions.Map``2(List{``0},System.Converter{``0,``1})"},{"children":null,"id":"NonNull``1(List{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"NonNull<T>(List<T>)","nameWithType":"ListExtensions.NonNull<T>(List<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ListExtensions","remarks":null,"summary":"\nFilters out all null items from the list.\n","syntax":{"content":"public static List<T> NonNull<T>(this List<T> list)\n    where T : class","parameters":[{"description":"The list to filter.","id":"list","type":"Global.List{{T}}"}],"return":{"description":"A new list with all null items removed.","type":"Global.List{{T}}"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ListExtensions.NonNull``1(List{``0})"},{"children":null,"id":"Random``1(List{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Random<T>(List<T>)","nameWithType":"ListExtensions.Random<T>(List<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ListExtensions","remarks":null,"summary":"\nReturns a random item from the list.\n","syntax":{"content":"public static T Random<T>(this List<T> list)","parameters":[{"description":"The list to get the random item from.","id":"list","type":"Global.List{{T}}"}],"return":{"description":"A random item from the list, or <code>default(T)</code> if the list is empty.","type":"{T}"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ListExtensions.Random``1(List{``0})"},{"children":null,"id":"Reduce``2(List{``0},``1,Zigurous.Architecture.ListExtensions.Reducer{``1,``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Reduce<TItem, TSum>(List<TItem>, TSum, ListExtensions.Reducer<TSum, TItem>)","nameWithType":"ListExtensions.Reduce<TItem, TSum>(List<TItem>, TSum, ListExtensions.Reducer<TSum, TItem>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ListExtensions","remarks":null,"summary":"\nReduces the items of the list to a single value.\n","syntax":{"content":"public static TSum Reduce<TItem, TSum>(this List<TItem> list, TSum initialValue, ListExtensions.Reducer<TSum, TItem> reducer)","parameters":[{"description":"The list to reduce.","id":"list","type":"Global.List{{TItem}}"},{"description":"The initial value to use.","id":"initialValue","type":"{TSum}"},{"description":"The reducer to use.","id":"reducer","type":"Zigurous.Architecture.ListExtensions.Reducer{{TSum},{TItem}}"}],"return":{"description":"The reduced value.","type":"{TSum}"},"typeParameters":[{"description":"The type of items in the list.","id":"TItem"},{"description":"The type of the reduced value.","id":"TSum"}]},"type":"Method","uid":"Zigurous.Architecture.ListExtensions.Reduce``2(List{``0},``1,Zigurous.Architecture.ListExtensions.Reducer{``1,``0})"},{"children":null,"id":"RemoveFirst``1(List{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"RemoveFirst<T>(List<T>)","nameWithType":"ListExtensions.RemoveFirst<T>(List<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ListExtensions","remarks":null,"summary":"\nRemoves the first item in the list.\n","syntax":{"content":"public static void RemoveFirst<T>(this List<T> list)","parameters":[{"description":"The list to remove from.","id":"list","type":"Global.List{{T}}"}],"return":null,"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ListExtensions.RemoveFirst``1(List{``0})"},{"children":null,"id":"RemoveLast``1(List{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"RemoveLast<T>(List<T>)","nameWithType":"ListExtensions.RemoveLast<T>(List<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ListExtensions","remarks":null,"summary":"\nRemoves the last item in the list.\n","syntax":{"content":"public static void RemoveLast<T>(this List<T> list)","parameters":[{"description":"The list to remove from.","id":"list","type":"Global.List{{T}}"}],"return":null,"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ListExtensions.RemoveLast``1(List{``0})"},{"children":null,"id":"Reversed``1(List{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Reversed<T>(List<T>)","nameWithType":"ListExtensions.Reversed<T>(List<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ListExtensions","remarks":null,"summary":"\nReverses the order of the items in the list.\n","syntax":{"content":"public static List<T> Reversed<T>(this List<T> list)","parameters":[{"description":"The list to reverse.","id":"list","type":"Global.List{{T}}"}],"return":{"description":"A new list with the order of the items reversed.","type":"Global.List{{T}}"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ListExtensions.Reversed``1(List{``0})"},{"children":null,"id":"Shuffle``1(List{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Shuffle<T>(List<T>)","nameWithType":"ListExtensions.Shuffle<T>(List<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ListExtensions","remarks":"The shuffle is done using the Fisher-Yates algorithm.","summary":"\nShuffles the list in place.\n","syntax":{"content":"public static void Shuffle<T>(this List<T> list)","parameters":[{"description":"The list to shuffle.","id":"list","type":"Global.List{{T}}"}],"return":null,"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ListExtensions.Shuffle``1(List{``0})"},{"children":null,"id":"Shuffle``1(List{``0},System.Random)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Shuffle<T>(List<T>, Random)","nameWithType":"ListExtensions.Shuffle<T>(List<T>, Random)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ListExtensions","remarks":"The shuffle is done using the Fisher-Yates algorithm.","summary":"\nShuffles the list in place using the given random number generator.\n","syntax":{"content":"public static void Shuffle<T>(this List<T> list, Random rng)","parameters":[{"description":"The list to shuffle.","id":"list","type":"Global.List{{T}}"},{"description":"The random number generator to use.","id":"rng","type":"System.Random"}],"return":null,"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ListExtensions.Shuffle``1(List{``0},System.Random)"},{"children":null,"id":"Where``1(List{``0},System.Predicate{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Where<T>(List<T>, Predicate<T>)","nameWithType":"ListExtensions.Where<T>(List<T>, Predicate<T>)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ListExtensions","remarks":null,"summary":"\nFilters the list to only contain items that satisfy a predicate.\n","syntax":{"content":"public static List<T> Where<T>(this List<T> list, Predicate<T> predicate)","parameters":[{"description":"The list to filter.","id":"list","type":"Global.List{{T}}"},{"description":"The predicate to use.","id":"predicate","type":"System.Predicate{{T}}"}],"return":{"description":"A new list with the filtered items removed.","type":"Global.List{{T}}"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ListExtensions.Where``1(List{``0},System.Predicate{``0})"},{"children":null,"id":"WrapIndex``1(List{``0},System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"WrapIndex<T>(List<T>, Int32)","nameWithType":"ListExtensions.WrapIndex<T>(List<T>, Int32)","namespace":"Zigurous.Architecture","parent":"Zigurous.Architecture.ListExtensions","remarks":null,"summary":"\nWraps an index to either end of the list if it is out of bounds.\n","syntax":{"content":"public static int WrapIndex<T>(this List<T> list, int index)","parameters":[{"description":"The list to wrap.","id":"list","type":"Global.List{{T}}"},{"description":"The index to wrap.","id":"index","type":"System.Int32"}],"return":{"description":"The wrapped index.","type":"System.Int32"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.Architecture.ListExtensions.WrapIndex``1(List{``0},System.Int32)"}]}]}}}