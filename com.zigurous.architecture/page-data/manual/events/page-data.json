{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-js","path":"/manual/events","result":{"data":{"markdownRemark":{"html":"<h1>Events</h1>\n<p>Events are powerful tool provided by Unity. The <strong>Architecture Toolkit</strong> extends this system by allowing events to be saved as ScriptableObjects. This means the same event can be referenced and listened to by multiple systems throughout the project.</p>\n<br/>\n<h3>Game Event</h3>\n<p>An event can be created through the Asset menu, <code>Zigurous > Events > Game Event</code>. There are no properties on an event, but they can be extended further with subclasses if needed. See the <a href=\"/com.zigurous.architecture/api/Zigurous.Architecture/GameEvent\">GameEvent</a> Scripting API.</p>\n<hr/>\n<h3>Game Event Listener</h3>\n<p>A <a href=\"/com.zigurous.architecture/api/Zigurous.Architecture/GameEventListener\">GameEventListener</a> component can be added to any game object that needs to listen for an event. This is a class that derives from <code>MonoBehaviour</code> and will register and unregister itself as a listener for the specified event. The listener also declares a standard <code>UnityEvent</code> response property that is invoked when the event is raised.</p>\n<hr/>\n<h3>Event Reference</h3>\n<p>The <a href=\"/com.zigurous.architecture/api/Zigurous.Architecture/EventReference\">EventReference</a> class allows a <code>UnityEvent</code> or <code>GameEvent</code> to be referenced. The option to switch between the two choices is available in the editor. Anywhere you might declare a variable as a <code>UnityEvent</code> or a <code>GameEvent</code> consider declaring it as an <code>EventReference</code> for more flexibility.</p>","frontmatter":{"slug":"/manual/events","class":null,"title":""}}},"pageContext":{"id":"67c6ca6a-bcc5-5c0d-ac72-793eab98aaae","frontmatter__slug":"/manual/events","__params":{"frontmatter__slug":"manual"}}},"staticQueryHashes":["1654257956","2011016986","3218290725"]}