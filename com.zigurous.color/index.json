{
  "api/Zigurous.ColorPro.Accessibility.html": {
    "href": "api/Zigurous.ColorPro.Accessibility.html",
    "title": "Class Accessibility | Color Pro",
    "keywords": "Class Accessibility Functions for testing color accessibility requirements. Inheritance System.Object Accessibility Namespace : Zigurous.ColorPro public static class Accessibility Methods IsCompliant(Color, Color, Accessibility.Requirement) Determines if the contrast between the foreground color and a background color is compliant to a given accessibility requirement. public static bool IsCompliant(this Color foreground, Color background, Accessibility.Requirement requirement) Parameter Description foreground The foreground color. background The background color. requirement The requirement to check. IsCompliant(Accessibility.Requirement, Color, Color) Determines if the contrast between a foreground color and a background color is compliant to the accessibility requirement. public static bool IsCompliant(this Accessibility.Requirement requirement, Color foreground, Color background) Parameter Description requirement The requirement to check. foreground The foreground color. background The background color. MinimumContrastRatio(Accessibility.Requirement) Returns the minimum contrast ratio needed to pass compliance of a given accessibility requirement. public static float MinimumContrastRatio(this Accessibility.Requirement requirement) Parameter Description requirement The requirement to check."
  },
  "api/Zigurous.ColorPro.Accessibility.Requirement.html": {
    "href": "api/Zigurous.ColorPro.Accessibility.Requirement.html",
    "title": "Enum Accessibility.Requirement | Color Pro",
    "keywords": "Enum Accessibility.Requirement A requirement defining how the visual presentation of text achieves a minimum contrast ratio to pass the accessibility specification - https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast Namespace : Zigurous.ColorPro public enum Requirement Fields Name Description Enhanced The visual presentation of text has a contrast ratio of at least 7:1 (Level AAA) - https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-visual-audio-contrast7 EnhancedLargeText The visual presentation of large text has a contrast ratio of at least 4.5:1 (Level AAA) - https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-visual-audio-contrast7 Minimum The visual presentation of text has a contrast ratio of at least 4.5:1 (Level AA) - https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-visual-audio-contrast-contrast MinimumLargeText The visual presentation of large text has a contrast ratio of at least 3:1 (Level AA) - https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-visual-audio-contrast-contrast"
  },
  "api/Zigurous.ColorPro.Adjustment.html": {
    "href": "api/Zigurous.ColorPro.Adjustment.html",
    "title": "Class Adjustment | Color Pro",
    "keywords": "Class Adjustment Functions for adjusting color values, e.g., hue, saturation, lightness, etc. Inheritance System.Object Adjustment Namespace : Zigurous.ColorPro public static class Adjustment Methods Complement(Color) Returns the complement of the color by shifting the hue 180Â°. public static Color Complement(this Color color) Parameter Description color The color to get the complement of. Darken(ref Color, Single) Decreases the lightness of the color by the given amount. public static void Darken(this ref Color color, float decrease = 0.1F) Parameter Description color The color to adjust. decrease The amount to decrease the lightness. Darker(Color, Int32) Generates a given amount of darker colors from the base color. public static Color[] Darker(this Color baseColor, int amount) Parameter Description baseColor The base color to generate new colors from. amount The amount of darker colors to generate. Darker(Color, Single) Returns a new instance of the color with decreased lightness. public static Color Darker(this Color color, float decrease = 0.1F) Parameter Description color The color to adjust. decrease The amount to decrease the lightness. DarkerNonAlloc(Color, Color[]) Fills an existing array with darker colors of the base color to prevent heap allocations. The amount of colors generated is determined by the size of the array. public static void DarkerNonAlloc(this Color baseColor, Color[] output) Parameter Description baseColor The base color to generate new colors from. output The array to store the generated colors in. Desaturate(ref Color, Single) Decreases the saturation of the color by the given amount. public static void Desaturate(this ref Color color, float decrease = 0.1F) Parameter Description color The color to adjust. decrease The amount to decrease the saturation. Desaturated(Color, Int32) Generates a given amount of desaturated colors from the base color. public static Color[] Desaturated(this Color baseColor, int amount) Parameter Description baseColor The base color to generate new colors from. amount The amount of desaturated colors to generate. Desaturated(Color, Single) Returns a new instance of the color with decreased saturation. public static Color Desaturated(this Color color, float decrease = 0.1F) Parameter Description color The color to adjust. decrease The amount to decrease the saturation. DesaturatedNonAlloc(Color, Color[]) Fills an existing array with desaturated colors of the base color to prevent heap allocations. The amount of colors generated is determined by the size of the array. public static void DesaturatedNonAlloc(this Color baseColor, Color[] output) Parameter Description baseColor The base color to generate new colors from. output The array to store the generated colors in. Grayscale(ref Color) Sets the saturation of the color to zero. public static void Grayscale(this ref Color color) Parameter Description color The color to adjust. Grayscaled(Color) Returns a new instance of the color with zero saturation. public static Color Grayscaled(this Color color) Parameter Description color The color to adjust. Hues(Color, Int32, Single) Generates a given amount of hues from the base color. public static Color[] Hues(this Color baseColor, int amount, float offset = 0F) Parameter Description baseColor The base color to generate new colors from. amount The amount of hues to generate. offset The optional hue offset in degrees. Hues(Color, Single, Single) Generates hues of the base color with a given increment of degrees. For example, an increment of 30 will generate 12 different hues (360/30 = 12). public static Color[] Hues(this Color baseColor, float degrees = 30F, float offset = 0F) Parameter Description baseColor The base color to generate new colors from. degrees The hue increment in degrees (default=30). offset The optional hue offset in degrees. HueShift(ref Color, Single) Shifts the hue of the color by the given amount of degrees. public static void HueShift(this ref Color color, float degrees) Parameter Description color The color to adjust. degrees The amount of degrees to shift the hue. HueShifted(Color, Single) Returns a new instance of the color by shifting its hue by a given amount of degrees. public static Color HueShifted(this Color color, float degrees) Parameter Description color The color to adjust. degrees The amount of degrees to shift the hue. HuesNonAlloc(Color, Color[], Single) Fills an existing array with the hues of the base color to prevent heap allocations. The amount of hues generated is determined by the size of the array. public static void HuesNonAlloc(this Color baseColor, Color[] output, float offset = 0F) Parameter Description baseColor The base color to generate new colors from. output The array to store the generated hues in. offset The optional hue offset in degrees. Invert(ref Color) Inverts the color by subtracting the RGB components from 1. public static void Invert(this ref Color color) Parameter Description color The color to invert. Inverted(Color) Returns the inverse of the color by subtracting the RGB components from 1. public static Color Inverted(this Color color) Parameter Description color The color to get the inverse of. Lighten(ref Color, Single) Increases the lightness of the color by the given amount. public static void Lighten(this ref Color color, float increase = 0.1F) Parameter Description color The color to adjust. increase The amount to increase the lightness. Lighter(Color, Int32) Generates a given amount of lighter colors from the base color. public static Color[] Lighter(this Color baseColor, int amount) Parameter Description baseColor The base color to generate new colors from. amount The amount of lighter colors to generate. Lighter(Color, Single) Returns a new instance of the color with increased lightness. public static Color Lighter(this Color color, float increase = 0.1F) Parameter Description color The color to adjust. increase The amount to increase the lightness. LighterNonAlloc(Color, Color[]) Fills an existing array with lighter colors of the base color to prevent heap allocations. The amount of colors generated is determined by the size of the array. public static void LighterNonAlloc(this Color baseColor, Color[] output) Parameter Description baseColor The base color to generate new colors from. output The array to store the generated colors in. Saturate(ref Color, Single) Increases the saturation of the color by the given amount. public static void Saturate(this ref Color color, float increase = 0.1F) Parameter Description color The color to adjust. increase The amount to increase the saturation. Saturated(Color, Int32) Generates a given amount of saturated colors from the base color. public static Color[] Saturated(this Color baseColor, int amount) Parameter Description baseColor The base color to generate new colors from. amount The amount of saturated colors to generate. Saturated(Color, Single) Returns a new instance of the color with increased saturation. public static Color Saturated(this Color color, float increase = 0.1F) Parameter Description color The color to adjust. increase The amount to increase the saturation. SaturatedNonAlloc(Color, Color[]) Fills an existing array with saturated colors of the base color to prevent heap allocations. The amount of colors generated is determined by the size of the array. public static void SaturatedNonAlloc(this Color baseColor, Color[] output) Parameter Description baseColor The base color to generate new colors from. output The array to store the generated colors in. WebSafe(Color) Returns the nearest websafe color to the current color. public static Color WebSafe(this Color color) Parameter Description color The color to get the closet websafe color of."
  },
  "api/Zigurous.ColorPro.ARGB.html": {
    "href": "api/Zigurous.ColorPro.ARGB.html",
    "title": "Struct ARGB | Color Pro",
    "keywords": "Struct ARGB The ARGB (alpha, red, green, blue) components of a color in the range [0..1]. Implements IEquatable < ARGB > Namespace : Zigurous.ColorPro [Serializable] public struct ARGB : IEquatable<ARGB> Constructors ARGB(Color) Creates new ARGB components from the given color. public ARGB(Color color) Parameter Description color The color to extract the components from. ARGB(Single, Single, Single, Single) Creates new ARGB components from the given values. public ARGB(float alpha, float red, float green, float blue) Parameter Description alpha The alpha component of the color in the range [0..1]. red The red component of the color in the range [0..1]. green The green component of the color in the range [0..1]. blue The blue component of the color in the range [0..1]. Fields alpha The alpha component of the color in the range [0..1]. public float alpha blue The blue component of the color in the range [0..1]. public float blue green The green component of the color in the range [0..1]. public float green red The red component of the color in the range [0..1]. public float red Methods Convert(Color, out Single, out Single, out Single, out Single) Converts a color to ARGB (alpha, red, green, blue) components. public static void Convert(Color color, out float a, out float r, out float g, out float b) Parameter Description color The color to extract the components from. a The alpha component output in the range [0..1]. r The red component output in the range [0..1]. g The green component output in the range [0..1]. b The blue component output in the range [0..1]. Equals(Object) Determines if the components are equal to other . public override bool Equals(object other) Parameter Description other The other object to compare to. Overrides System.ValueType.Equals(System.Object) Equals(ARGB) Determines if the components are equal to other . public bool Equals(ARGB other) Parameter Description other The other components to compare to. GetHashCode() Returns the hash code of the components. public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components to a color. public Color ToColor() ToColor(Single, Single, Single, Single) Converts ARGB (alpha, red, green, blue) components to a color. public static Color ToColor(float a, float r, float g, float b) Parameter Description a The alpha component of the color in the range [0..1]. r The red component of the color in the range [0..1]. g The green component of the color in the range [0..1]. b The blue component of the color in the range [0..1]. ToString() Converts the components to a string. public override string ToString() Overrides System.ValueType.ToString() Operators Equality(ARGB, ARGB) public static bool operator ==(ARGB lhs, ARGB rhs) Parameter Description lhs rhs Explicit(Color to ARGB) public static explicit operator ARGB(Color color) Parameter Description color Explicit(ARGB to Color) public static explicit operator Color(ARGB argb) Parameter Description argb Implicit(ARGB to RGB) public static implicit operator RGB(ARGB argb) Parameter Description argb Implicit(ARGB to RGBA) public static implicit operator RGBA(ARGB argb) Parameter Description argb Inequality(ARGB, ARGB) public static bool operator !=(ARGB lhs, ARGB rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorPro.ARGB255.html": {
    "href": "api/Zigurous.ColorPro.ARGB255.html",
    "title": "Struct ARGB255 | Color Pro",
    "keywords": "Struct ARGB255 The ARGB (alpha, red, green, blue) components of a color in the range [0..255]. Implements IEquatable < ARGB255 > Namespace : Zigurous.ColorPro [Serializable] public struct ARGB255 : IEquatable<ARGB255> Constructors ARGB255(Color) Creates new ARGB255 components from the given color. public ARGB255(Color color) Parameter Description color The color to extract the components from. ARGB255(Int32, Int32, Int32, Int32) Creates new ARGB255 components from the given values. public ARGB255(int alpha, int red, int green, int blue) Parameter Description alpha The alpha component of the color in the range [0..255]. red The red component of the color in the range [0..255]. green The green component of the color in the range [0..255]. blue The blue component of the color in the range [0..255]. Fields alpha The alpha component of the color in the range [0..255]. public int alpha blue The blue component of the color in the range [0..255]. public int blue green The green component of the color in the range [0..255]. public int green red The red component of the color in the range [0..255]. public int red Methods Convert(Color, out Int32, out Int32, out Int32, out Int32) Converts a color to ARGB (alpha, red, green, blue) components. public static void Convert(Color color, out int a, out int r, out int g, out int b) Parameter Description color The color to extract the components from. a The alpha component output in the range [0..255]. r The red component output in the range [0..255]. g The green component output in the range [0..255]. b The blue component output in the range [0..255]. Equals(Object) Determines if the components are equal to other . public override bool Equals(object other) Parameter Description other The other object to compare to. Overrides System.ValueType.Equals(System.Object) Equals(ARGB255) Determines if the components are equal to other . public bool Equals(ARGB255 other) Parameter Description other The other components to compare to. GetHashCode() Returns the hash code of the components. public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components to a color. public Color ToColor() ToColor(Int32, Int32, Int32, Int32) Converts ARGB (alpha, red, green, blue) components to a color. public static Color ToColor(int a, int r, int g, int b) Parameter Description a The alpha component of the color in the range [0..255]. r The red component of the color in the range [0..255]. g The green component of the color in the range [0..255]. b The blue component of the color in the range [0..255]. ToString() Converts the components to a string. public override string ToString() Overrides System.ValueType.ToString() Operators Equality(ARGB255, ARGB255) public static bool operator ==(ARGB255 lhs, ARGB255 rhs) Parameter Description lhs rhs Explicit(Color to ARGB255) public static explicit operator ARGB255(Color color) Parameter Description color Explicit(ARGB255 to Color) public static explicit operator Color(ARGB255 argb) Parameter Description argb Implicit(ARGB255 to RGB255) public static implicit operator RGB255(ARGB255 argb) Parameter Description argb Implicit(ARGB255 to RGBA255) public static implicit operator RGBA255(ARGB255 argb) Parameter Description argb Inequality(ARGB255, ARGB255) public static bool operator !=(ARGB255 lhs, ARGB255 rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorPro.Arithmetic.html": {
    "href": "api/Zigurous.ColorPro.Arithmetic.html",
    "title": "Class Arithmetic | Color Pro",
    "keywords": "Class Arithmetic Functions for adding, subtracting, multiplying, and dividing colors. Inheritance System.Object Arithmetic Namespace : Zigurous.ColorPro public static class Arithmetic Methods Add(ref Color, Color, Boolean) Adds the components of other to color . Clamps the values in the range [0..1]. public static void Add(this ref Color color, Color other, bool addAlpha = true) Parameter Description color The color being added to. other The color to add. addAlpha True to add the alpha components, otherwise it is left unmodified. Adding(Color, Color, Boolean) Returns the result of adding the components of other to color . Clamps the values in the range [0..1]. public static Color Adding(this Color color, Color other, bool addAlpha = true) Parameter Description color The color being added to. other The color to add. addAlpha True to add the alpha components, otherwise it is left unmodified. Divide(ref Color, Color, Boolean) Divides the components of color with other . Clamps the values in the range [0..1]. public static void Divide(this ref Color color, Color other, bool divideAlpha = true) Parameter Description color The color being divided. other The color to divide by. divideAlpha True to divide the alpha components, otherwise it is left unmodified. Divide(ref Color, Single, Boolean) Divides the components of color by the divisor . Clamps the values in the range [0..1]. public static void Divide(this ref Color color, float divisor, bool divideAlpha = true) Parameter Description color The color being divided. divisor The amount to divide the color by. divideAlpha True to divide the alpha component, otherwise it is left unmodified. DividedBy(Color, Color, Boolean) Returns the result of dividing the components of color with other . Clamps the values in the range [0..1]. public static Color DividedBy(this Color color, Color other, bool divideAlpha = true) Parameter Description color The color being divided. other The color to divide by. divideAlpha True to divide the alpha components, otherwise it is left unmodified. DividedBy(Color, Single, Boolean) Returns the result of dividing the components of color by the divisor . Clamps the values in the range [0..1]. public static Color DividedBy(this Color color, float divisor, bool divideAlpha = true) Parameter Description color The color being divided. divisor The amount to divide the color by. divideAlpha True to divide the alpha component, otherwise it is left unmodified. MultipliedBy(Color, Color, Boolean) Returns the result of multiplying the components of color with other . Clamps the values in the range [0..1]. public static Color MultipliedBy(this Color color, Color other, bool multiplyAlpha = true) Parameter Description color The color being multiplied. other The color to multiply by. multiplyAlpha True to multiply the alpha components, otherwise it is left unmodified. MultipliedBy(Color, Single, Boolean) Returns the result of multiplying the components of color by the multiplier . Clamps the values in the range [0..1]. public static Color MultipliedBy(this Color color, float multiplier, bool multiplyAlpha = true) Parameter Description color The color being multiplied. multiplier The amount to multiply the color by. multiplyAlpha True to multiply the alpha component, otherwise it is left unmodified. Multiply(ref Color, Color, Boolean) Multiplies the components of color with other . Clamps the values in the range [0..1]. public static void Multiply(this ref Color color, Color other, bool multiplyAlpha = true) Parameter Description color The color being multiplied. other The color to multiply by. multiplyAlpha True to multiply the alpha components, otherwise it is left unmodified. Multiply(ref Color, Single, Boolean) Multiplies the components of color by the multiplier . Clamps the values in the range [0..1]. public static void Multiply(this ref Color color, float multiplier, bool multiplyAlpha = true) Parameter Description color The color being multiplied. multiplier The amount to multiply the color by. multiplyAlpha True to multiply the alpha component, otherwise it is left unmodified. Subtract(ref Color, Color, Boolean) Subtracts the components of other from color . Clamps the values in the range [0..1]. public static void Subtract(this ref Color color, Color other, bool subtractAlpha = true) Parameter Description color The color being subtracted from. other The color to subtract. subtractAlpha True to subtract the alpha components, otherwise it is left unmodified. Subtracting(Color, Color, Boolean) Returns the result of subtracting the components of other from color . Clamps the values in the range [0..1]. public static Color Subtracting(this Color color, Color other, bool subtractAlpha = true) Parameter Description color The color being subtracted from. other The color to subtract. subtractAlpha True to subtract the alpha components, otherwise it is left unmodified."
  },
  "api/Zigurous.ColorPro.Averaging.html": {
    "href": "api/Zigurous.ColorPro.Averaging.html",
    "title": "Class Averaging | Color Pro",
    "keywords": "Class Averaging Functions for averaging colors together. Inheritance System.Object Averaging Namespace : Zigurous.ColorPro public static class Averaging Methods Average(Color, Color, Boolean) Returns the result of averaging the RGBA component values of the color with another color. public static Color Average(this Color color, Color other, bool averageAlpha = true) Parameter Description color The color to average. other The color to average with. averageAlpha True to average the alpha components, otherwise the main color's alpha is used. Average(Color[]) Returns the result of averaging the RGBA component values of the color with other colors. public static Color Average(this Color[] colors) Parameter Description colors The colors to average with. AverageColor(Texture2D) Returns the result of averaging the RGBA component values of every pixel in the texture. public static Color AverageColor(this Texture2D texture) Parameter Description texture The texture to get the average color of."
  },
  "api/Zigurous.ColorPro.ChannelMixer.html": {
    "href": "api/Zigurous.ColorPro.ChannelMixer.html",
    "title": "Class ChannelMixer | Color Pro",
    "keywords": "Class ChannelMixer Multiplies the RGB channels of a color by a matrix. Inheritance System.Object ChannelMixer Namespace : Zigurous.ColorPro public static class ChannelMixer Fields Identity A 3x3 identity matrix. public static readonly float[] Identity Methods ChannelMatrix(ColorVision) Returns the 3x3 channel matrix for the given color vision. public static float[] ChannelMatrix(this ColorVision colorVision) Parameter Description colorVision The color vision to get the matrix for. ChannelMix(Color, Single[]) Applies a 3x3 matrix to the RGB channels of the color. Values are clamped to [0..1]. public static Color ChannelMix(this Color color, float[] m) Parameter Description color The color to apply the matrix to. m The 3x3 matrix to apply to the color. ChannelMix(Color, ColorVision) Applies the channel mixer of a given color vision to the RGB channels of the color. Values are clamped to [0..1]. public static Color ChannelMix(this Color color, ColorVision colorVision) Parameter Description color The color to apply the color vision matrix to. colorVision The type of color vision to apply. ChannelMix(Color[], Single[]) Applies a 3x3 matrix to the RGB channels of the provided colors. Values are clamped to [0..1]. public static Color[] ChannelMix(this Color[] colors, float[] m) Parameter Description colors The colors to apply the matrix to. m The 3x3 matrix to apply to the colors. ChannelMix(Color[], ColorVision) Applies the channel mixer of a given color vision to the RGB channels of the provided colors. Values are clamped to [0..1]. public static Color[] ChannelMix(this Color[] colors, ColorVision colorVision) Parameter Description colors The colors to apply the color vision matrix to. colorVision The type of color vision to apply."
  },
  "api/Zigurous.ColorPro.CIELAB.html": {
    "href": "api/Zigurous.ColorPro.CIELAB.html",
    "title": "Struct CIELAB | Color Pro",
    "keywords": "Struct CIELAB The CIE LAB components of a color - lightness (L) and chromaticity (a,b). Implements IEquatable < CIELAB > Namespace : Zigurous.ColorPro [Serializable] public struct CIELAB : IEquatable<CIELAB> Constructors CIELAB(Color) Creates new CIE LAB components from the given color. public CIELAB(Color color) Parameter Description color The color to extract the components from. CIELAB(Color, Illuminant, StandardObserver) Creates new CIE LAB components from the given color, illuminant, and standard observer. public CIELAB(Color color, Illuminant illuminant, StandardObserver observer) Parameter Description color The color to extract the components from. illuminant The illuminant to use. observer The standard observer to use. CIELAB(Color, Tristimulus) Creates new CIE LAB components from the given color and white point. public CIELAB(Color color, Tristimulus whitePoint) Parameter Description color The color to extract the components from. whitePoint The white point to use. CIELAB(Single, Single, Single) Creates new CIE LAB components from the given values. public CIELAB(float L, float a, float b) Parameter Description L The lightness component of the color in the range [0..100]. a The green-red chromaticity component of the color in the range [-128..128]. b The blue-yellow chromaticity component of the color in the range [-128..128]. Fields a The green-red chromaticity component of the color in the range [-128..128]. public float a b The blue-yellow chromaticity component of the color in the range [-128..128]. public float b L The lightness component of the color in the range [0..100]. public float L Methods Convert(Color, out Single, out Single, out Single) Converts a color to CIE LAB components. public static void Convert(Color color, out float L, out float a, out float b) Parameter Description color The color to extract the components from. L The lightness component output in the range [0..100]. a The green-red chromaticity component output in the range [-128..128]. b The blue-yellow chromaticity component output in the range [-128..128]. Convert(Color, Illuminant, StandardObserver, out Single, out Single, out Single) Converts a color to CIE LAB components using the given illuminant and standard observer. public static void Convert(Color color, Illuminant illuminant, StandardObserver observer, out float L, out float a, out float b) Parameter Description color The color to extract the components from. illuminant The illuminant to use. observer The standard observer to use. L The lightness component output in the range [0..100]. a The green-red chromaticity component output in the range [-128..128]. b The blue-yellow chromaticity component output in the range [-128..128]. Convert(Color, Tristimulus, out Single, out Single, out Single) Converts a color to CIE LAB components using the given white point. public static void Convert(Color color, Tristimulus whitePoint, out float L, out float a, out float b) Parameter Description color The color to extract the components from. whitePoint The white point to use. L The lightness component output in the range [0..100]. a The green-red chromaticity component output in the range [-128..128]. b The blue-yellow chromaticity component output in the range [-128..128]. Equals(Object) Determines if the components are equal to other . public override bool Equals(object other) Parameter Description other The other object to compare to. Overrides System.ValueType.Equals(System.Object) Equals(CIELAB) Determines if the components are equal to other . public bool Equals(CIELAB other) Parameter Description other The other components to compare to. GetHashCode() Returns the hash code of the components. public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components to a color. public Color ToColor() ToColor(Single, Single, Single) Converts CIE LAB components to a color. public static Color ToColor(float L, float a, float b) Parameter Description L The lightness component of the color in the range [0..100]. a The green-red chromaticity component of the color in the range [-128..128]. b The blue-yellow chromaticity component of the color in the range [-128..128]. ToColor(Illuminant, StandardObserver) Converts the components to a color using the given illuminant and standard observer. public Color ToColor(Illuminant illuminant, StandardObserver observer) Parameter Description illuminant The illuminant to use. observer The standard observer to use. ToColor(Illuminant, StandardObserver, Single, Single, Single) Converts CIE LAB components to a color using the given illuminant and standard observer. public static Color ToColor(Illuminant illuminant, StandardObserver observer, float L, float a, float b) Parameter Description illuminant The illuminant to use. observer The standard observer to use. L The lightness component of the color in the range [0..100]. a The green-red chromaticity component of the color in the range [-128..128]. b The blue-yellow chromaticity component of the color in the range [-128..128]. ToColor(Tristimulus) Converts the components to a color using the given white point. public Color ToColor(Tristimulus whitePoint) Parameter Description whitePoint The white point to use. ToColor(Tristimulus, Single, Single, Single) Converts CIE LAB components to a color using the given white point. public static Color ToColor(Tristimulus whitePoint, float L, float a, float b) Parameter Description whitePoint The white point to use. L The lightness component of the color in the range [0..100]. a The green-red chromaticity component of the color in the range [-128..128]. b The blue-yellow chromaticity component of the color in the range [-128..128]. ToString() Converts the components to a string. public override string ToString() Overrides System.ValueType.ToString() Operators Equality(CIELAB, CIELAB) public static bool operator ==(CIELAB lhs, CIELAB rhs) Parameter Description lhs rhs Explicit(Color to CIELAB) public static explicit operator CIELAB(Color color) Parameter Description color Explicit(CIELAB to Color) public static explicit operator Color(CIELAB components) Parameter Description components Inequality(CIELAB, CIELAB) public static bool operator !=(CIELAB lhs, CIELAB rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorPro.CIELCh_ab.html": {
    "href": "api/Zigurous.ColorPro.CIELCh_ab.html",
    "title": "Struct CIELCh_ab | Color Pro",
    "keywords": "Struct CIELCh_ab The CIE LCh(ab) components of a color - lightness (L), chroma (C), and hue (h). Implements IEquatable < CIELCh_ab > Namespace : Zigurous.ColorPro [Serializable] public struct CIELCh_ab : IEquatable<CIELCh_ab> Constructors CIELCh_ab(Color) Creates new CIE LCh(ab) components from the given color. public CIELCh_ab(Color color) Parameter Description color The color to extract the components from. CIELCh_ab(Color, Illuminant, StandardObserver) Creates new CIE LCh(ab) components from the given color, illuminant, and standard observer. public CIELCh_ab(Color color, Illuminant illuminant, StandardObserver observer) Parameter Description color The color to extract the components from. illuminant The illuminant to use. observer The standard observer to use. CIELCh_ab(Color, Tristimulus) Creates new CIE LCh(ab) components from the given color and white point. public CIELCh_ab(Color color, Tristimulus whitePoint) Parameter Description color The color to extract the components from. whitePoint The white point to use. CIELCh_ab(Single, Single, Single) Creates new CIE LCh(ab) components from the given values. public CIELCh_ab(float L, float C, float h) Parameter Description L The lightness component of the color in the range [0..100]. C The chroma component of the color. h The hue component of the color in the range [0..360Â°]. Fields C The chroma component of the color. public float C h The hue component of the color in the range [0..360Â°]. public float h L The lightness component of the color in the range [0..100]. public float L Methods Convert(Color, out Single, out Single, out Single) Converts a color to CIE LCh(ab) components. public static void Convert(Color color, out float L, out float C, out float h) Parameter Description color The color to extract the components from. L The lightness component output in the range [0..100]. C The chroma component output. h The hue component output in the range [0..360Â°]. Convert(Color, Illuminant, StandardObserver, out Single, out Single, out Single) Converts a color to CIE LCh(ab) components using the given illuminant and standard observer. public static void Convert(Color color, Illuminant illuminant, StandardObserver observer, out float L, out float C, out float h) Parameter Description color The color to extract the components from. illuminant The illuminant to use. observer The standard observer to use. L The lightness component output in the range [0..100]. C The chroma component output. h The hue component output in the range [0..360Â°]. Convert(Color, Tristimulus, out Single, out Single, out Single) Converts a color to CIE LCh(ab) components using the given white point. public static void Convert(Color color, Tristimulus whitePoint, out float L, out float C, out float h) Parameter Description color The color to extract the components from. whitePoint The white point to use. L The lightness component output in the range [0..100]. C The chroma component output. h The hue component output in the range [0..360Â°]. Equals(Object) Determines if the components are equal to other . public override bool Equals(object other) Parameter Description other The other object to compare to. Overrides System.ValueType.Equals(System.Object) Equals(CIELCh_ab) Determines if the components are equal to other . public bool Equals(CIELCh_ab other) Parameter Description other The other components to compare to. GetHashCode() Returns the hash code of the components. public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components to a color. public Color ToColor() ToColor(Single, Single, Single) Converts CIE LCh(ab) components to a color. public static Color ToColor(float L, float C, float h) Parameter Description L The lightness component of the color in the range [0..100]. C The chroma component of the color. h The hue component of the color in the range [0..360Â°]. ToColor(Illuminant, StandardObserver) Converts the components to a color using the given illuminant and standard observer. public Color ToColor(Illuminant illuminant, StandardObserver observer) Parameter Description illuminant The illuminant to use. observer The standard observer to use. ToColor(Illuminant, StandardObserver, Single, Single, Single) Converts CIE LCh(ab) components to a color using the given illuminant and standard observer. public static Color ToColor(Illuminant illuminant, StandardObserver observer, float L, float C, float h) Parameter Description illuminant The illuminant to use. observer The standard observer to use. L The lightness component of the color in the range [0..100]. C The chroma component of the color. h The hue component of the color in the range [0..360Â°]. ToColor(Tristimulus) Converts the components to a color using the given white point. public Color ToColor(Tristimulus whitePoint) Parameter Description whitePoint The white point to use. ToColor(Tristimulus, Single, Single, Single) Converts CIE LCh(ab) components to a color using the given white point. public static Color ToColor(Tristimulus whitePoint, float L, float C, float h) Parameter Description whitePoint The white point to use. L The lightness component of the color in the range [0..100]. C The chroma component of the color. h The hue component of the color in the range [0..360Â°]. ToString() Converts the components to a string. public override string ToString() Overrides System.ValueType.ToString() Operators Equality(CIELCh_ab, CIELCh_ab) public static bool operator ==(CIELCh_ab lhs, CIELCh_ab rhs) Parameter Description lhs rhs Explicit(Color to CIELCh_ab) public static explicit operator CIELCh_ab(Color color) Parameter Description color Explicit(CIELCh_ab to Color) public static explicit operator Color(CIELCh_ab components) Parameter Description components Inequality(CIELCh_ab, CIELCh_ab) public static bool operator !=(CIELCh_ab lhs, CIELCh_ab rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorPro.CIELCh_uv.html": {
    "href": "api/Zigurous.ColorPro.CIELCh_uv.html",
    "title": "Struct CIELCh_uv | Color Pro",
    "keywords": "Struct CIELCh_uv The CIE LCh(uv) components of a color - lightness (L), chroma (C), and hue (h). Implements IEquatable < CIELCh_uv > Namespace : Zigurous.ColorPro [Serializable] public struct CIELCh_uv : IEquatable<CIELCh_uv> Constructors CIELCh_uv(Color) Creates new CIE LCh(uv) components from the given color. public CIELCh_uv(Color color) Parameter Description color The color to extract the components from. CIELCh_uv(Color, Illuminant, StandardObserver) Creates new CIE LCh(uv) components from the given color, illuminant, and standard observer. public CIELCh_uv(Color color, Illuminant illuminant, StandardObserver observer) Parameter Description color The color to extract the components from. illuminant The illuminant to use. observer The standard observer to use. CIELCh_uv(Color, Tristimulus) Creates new CIE LCh(uv) components from the given color and white point. public CIELCh_uv(Color color, Tristimulus whitePoint) Parameter Description color The color to extract the components from. whitePoint The white point to use. CIELCh_uv(Single, Single, Single) Creates new CIE LCh(uv) components from the given values. public CIELCh_uv(float L, float C, float h) Parameter Description L The lightness component of the color in the range [0..100]. C The chroma component of the color. h The hue component of the color in the range [0..360Â°]. Fields C The chroma component of the color. public float C h The hue component of the color in the range [0..360Â°]. public float h L The lightness component of the color in the range [0..100]. public float L Methods Convert(Color, out Single, out Single, out Single) Converts a color to CIE LCh(uv) components. public static void Convert(Color color, out float L, out float C, out float h) Parameter Description color The color to extract the components from. L The lightness component output in the range [0..100]. C The chroma component output. h The hue component output in the range [0..360Â°]. Convert(Color, Illuminant, StandardObserver, out Single, out Single, out Single) Converts a color to CIE LCh(uv) components using the given illuminant and standard observer. public static void Convert(Color color, Illuminant illuminant, StandardObserver observer, out float L, out float C, out float h) Parameter Description color The color to extract the components from. illuminant The illuminant to use. observer The standard observer to use. L The lightness component output in the range [0..100]. C The chroma component output. h The hue component output in the range [0..360Â°]. Convert(Color, Tristimulus, out Single, out Single, out Single) Converts a color to CIE LCh(uv) components using the given white point. public static void Convert(Color color, Tristimulus whitePoint, out float L, out float C, out float h) Parameter Description color The color to extract the components from. whitePoint The white point to use. L The lightness component output in the range [0..100]. C The chroma component output. h The hue component output in the range [0..360Â°]. Equals(Object) Determines if the components are equal to other . public override bool Equals(object other) Parameter Description other The other object to compare to. Overrides System.ValueType.Equals(System.Object) Equals(CIELCh_uv) Determines if the components are equal to other . public bool Equals(CIELCh_uv other) Parameter Description other The other components to compare to. GetHashCode() Returns the hash code of the components. public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components to a color. public Color ToColor() ToColor(Single, Single, Single) Converts CIE LCh(uv) components to a color. public static Color ToColor(float L, float C, float h) Parameter Description L The lightness component of the color in the range [0..100]. C The chroma component of the color. h The hue component of the color in the range [0..360Â°]. ToColor(Illuminant, StandardObserver) Converts the components to a color using the given illuminant and standard observer. public Color ToColor(Illuminant illuminant, StandardObserver observer) Parameter Description illuminant The illuminant to use. observer The standard observer to use. ToColor(Illuminant, StandardObserver, Single, Single, Single) Converts CIE LCh(uv) components to a color using the given illuminant and standard observer. public static Color ToColor(Illuminant illuminant, StandardObserver observer, float L, float C, float h) Parameter Description illuminant The illuminant to use. observer The standard observer to use. L The lightness component of the color in the range [0..100]. C The chroma component of the color. h The hue component of the color in the range [0..360Â°]. ToColor(Tristimulus) Converts the components to a color using the given white point. public Color ToColor(Tristimulus whitePoint) Parameter Description whitePoint The white point to use. ToColor(Tristimulus, Single, Single, Single) Converts CIE LCh(uv) components to a color using the given white point. public static Color ToColor(Tristimulus whitePoint, float L, float C, float h) Parameter Description whitePoint The white point to use. L The lightness component of the color in the range [0..100]. C The chroma component of the color. h The hue component of the color in the range [0..360Â°]. ToString() Converts the components to a string. public override string ToString() Overrides System.ValueType.ToString() Operators Equality(CIELCh_uv, CIELCh_uv) public static bool operator ==(CIELCh_uv lhs, CIELCh_uv rhs) Parameter Description lhs rhs Explicit(Color to CIELCh_uv) public static explicit operator CIELCh_uv(Color color) Parameter Description color Explicit(CIELCh_uv to Color) public static explicit operator Color(CIELCh_uv components) Parameter Description components Inequality(CIELCh_uv, CIELCh_uv) public static bool operator !=(CIELCh_uv lhs, CIELCh_uv rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorPro.CIELUV.html": {
    "href": "api/Zigurous.ColorPro.CIELUV.html",
    "title": "Struct CIELUV | Color Pro",
    "keywords": "Struct CIELUV The CIE LUV components of a color - lightness (L) and chromaticity (u,v). Implements IEquatable < CIELUV > Namespace : Zigurous.ColorPro [Serializable] public struct CIELUV : IEquatable<CIELUV> Constructors CIELUV(Color) Creates new CIE LUV components from the given color. public CIELUV(Color color) Parameter Description color The color to extract the components from. CIELUV(Color, Illuminant, StandardObserver) Creates new CIE LUV components from the given color, illuminant, and standard observer. public CIELUV(Color color, Illuminant illuminant, StandardObserver observer) Parameter Description color The color to extract the components from. illuminant The illuminant to use. observer The standard observer to use. CIELUV(Color, Tristimulus) Creates new CIE LUV components from the given color and white point. public CIELUV(Color color, Tristimulus whitePoint) Parameter Description color The color to extract the components from. whitePoint The white point to use. CIELUV(Single, Single, Single) Creates new CIE LUV components from the given values. public CIELUV(float L, float u, float v) Parameter Description L The lightness component of the color in the range [0..100]. u The green-red chromaticity component of the color in the range [-100..100]. v The blue-yellow chromaticity component of the color in the range [-100..100]. Fields L The lightness component of the color in the range [0..100]. public float L u The green-red chromaticity component of the color in the range [-100..100]. public float u v The blue-yellow chromaticity component of the color in the range [-100..100]. public float v Methods Convert(Color, out Single, out Single, out Single) Converts a color to CIE LUV components. public static void Convert(Color color, out float L, out float u, out float v) Parameter Description color The color to extract the components from. L The lightness component output in the range [0..100]. u The green-red chromaticity component output in the range [-100..100]. v The blue-yellow chromaticity component output in the range [-100..100]. Convert(Color, Illuminant, StandardObserver, out Single, out Single, out Single) Converts a color to CIE LUV components using the given illuminant and standard observer. public static void Convert(Color color, Illuminant illuminant, StandardObserver observer, out float L, out float u, out float v) Parameter Description color The color to extract the components from. illuminant The illuminant to use. observer The standard observer to use. L The lightness component output in the range [0..100]. u The green-red chromaticity component output in the range [-100..100]. v The blue-yellow chromaticity component output in the range [-100..100]. Convert(Color, Tristimulus, out Single, out Single, out Single) Converts a color to CIE LUV components using the given white point. public static void Convert(Color color, Tristimulus whitePoint, out float L, out float u, out float v) Parameter Description color The color to extract the components from. whitePoint The white point to use. L The lightness component output in the range [0..100]. u The green-red chromaticity component output in the range [-100..100]. v The blue-yellow chromaticity component output in the range [-100..100]. Equals(Object) Determines if the components are equal to other . public override bool Equals(object other) Parameter Description other The other object to compare to. Overrides System.ValueType.Equals(System.Object) Equals(CIELUV) Determines if the components are equal to other . public bool Equals(CIELUV other) Parameter Description other The other components to compare to. GetHashCode() Returns the hash code of the components. public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components to a color. public Color ToColor() ToColor(Single, Single, Single) Converts CIE LUV components to a color. public static Color ToColor(float L, float u, float v) Parameter Description L The lightness component of the color in the range [0..100]. u The green-red chromaticity component of the color in the range [-100..100]. v The blue-yellow chromaticity component of the color in the range [-100..100]. ToColor(Illuminant, StandardObserver) Converts the components to a color using the given illuminant and standard observer. public Color ToColor(Illuminant illuminant, StandardObserver observer) Parameter Description illuminant The illuminant to use. observer The standard observer to use. ToColor(Illuminant, StandardObserver, Single, Single, Single) Converts CIE LUV components to a color using the given illuminant and standard observer. public static Color ToColor(Illuminant illuminant, StandardObserver observer, float L, float u, float v) Parameter Description illuminant The illuminant to use. observer The standard observer to use. L The lightness component of the color in the range [0..100]. u The green-red chromaticity component of the color in the range [-100..100]. v The blue-yellow chromaticity component of the color in the range [-100..100]. ToColor(Tristimulus) Converts the components to a color using the given white point. public Color ToColor(Tristimulus whitePoint) Parameter Description whitePoint The white point to use. ToColor(Tristimulus, Single, Single, Single) Converts CIE LUV components to a color using the given white point. public static Color ToColor(Tristimulus whitePoint, float L, float u, float v) Parameter Description whitePoint The white point to use. L The lightness component of the color in the range [0..100]. u The green-red chromaticity component of the color in the range [-100..100]. v The blue-yellow chromaticity component of the color in the range [-100..100]. ToString() Converts the components to a string. public override string ToString() Overrides System.ValueType.ToString() Operators Equality(CIELUV, CIELUV) public static bool operator ==(CIELUV lhs, CIELUV rhs) Parameter Description lhs rhs Explicit(Color to CIELUV) public static explicit operator CIELUV(Color color) Parameter Description color Explicit(CIELUV to Color) public static explicit operator Color(CIELUV components) Parameter Description components Inequality(CIELUV, CIELUV) public static bool operator !=(CIELUV lhs, CIELUV rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorPro.CIEUCS.html": {
    "href": "api/Zigurous.ColorPro.CIEUCS.html",
    "title": "Struct CIEUCS | Color Pro",
    "keywords": "Struct CIEUCS The CIE UCS components of a color - (u,v) chromaticity coordinates. Implements IEquatable < CIEUCS > Namespace : Zigurous.ColorPro [Serializable] public struct CIEUCS : IEquatable<CIEUCS> Constructors CIEUCS(Color) Creates new CIE UCS components from the given color. public CIEUCS(Color color) Parameter Description color The color to extract the components from. CIEUCS(Single, Single) Creates new CIE UCS components from the given values. public CIEUCS(float u, float v) Parameter Description u The u-axis chromaticity coordinate of the color in the range [0..1]. v The v-axis chromaticity coordinate of the color in the range [0..1]. Fields u The u-axis chromaticity coordinate of the color in the range [0..1]. public float u v The v-axis chromaticity coordinate of the color in the range [0..1]. public float v Methods Convert(Color, out Single, out Single) Converts a color to CIE UCS components. public static void Convert(Color color, out float u, out float v) Parameter Description color The color to extract the components from. u The u-axis chromaticity coordinate output in the range [0..1]. v The v-axis chromaticity coordinate output in the range [0..1]. Equals(Object) Determines if the components are equal to other . public override bool Equals(object other) Parameter Description other The other object to compare to. Overrides System.ValueType.Equals(System.Object) Equals(CIEUCS) Determines if the components are equal to other . public bool Equals(CIEUCS other) Parameter Description other The other components to compare to. GetHashCode() Returns the hash code of the components. public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components to a color. public Color ToColor() ToColor(Single) Converts the components to a color using the given luminance value. public Color ToColor(float luminance) Parameter Description luminance The luminance value of the color. ToColor(Single, Single) Converts CIE UCS components to a color. public static Color ToColor(float u, float v) Parameter Description u The u-axis chromaticity coordinate of the color in the range [0..1]. v The v-axis chromaticity coordinate of the color in the range [0..1]. ToColor(Single, Single, Single) Converts CIE UCS components to a color using the given luminance value. public static Color ToColor(float u, float v, float luminance) Parameter Description u The u-axis chromaticity coordinate of the color in the range [0..1]. v The v-axis chromaticity coordinate of the color in the range [0..1]. luminance The luminance value of the color. ToString() Converts the components to a string. public override string ToString() Overrides System.ValueType.ToString() Operators Equality(CIEUCS, CIEUCS) public static bool operator ==(CIEUCS lhs, CIEUCS rhs) Parameter Description lhs rhs Explicit(Color to CIEUCS) public static explicit operator CIEUCS(Color color) Parameter Description color Explicit(CIEUCS to Color) public static explicit operator Color(CIEUCS components) Parameter Description components Inequality(CIEUCS, CIEUCS) public static bool operator !=(CIEUCS lhs, CIEUCS rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorPro.CIEUVW.html": {
    "href": "api/Zigurous.ColorPro.CIEUVW.html",
    "title": "Struct CIEUVW | Color Pro",
    "keywords": "Struct CIEUVW The CIE UVW components of a color - chromaticity (U,V) and lightness (W). Implements IEquatable < CIEUVW > Namespace : Zigurous.ColorPro [Serializable] public struct CIEUVW : IEquatable<CIEUVW> Constructors CIEUVW(Color) Creates new CIE UVW components from the given color. public CIEUVW(Color color) Parameter Description color The color to extract the components from. CIEUVW(Color, Illuminant, StandardObserver) Creates new CIE UVW components from the given color, illuminant and standard observer. public CIEUVW(Color color, Illuminant illuminant, StandardObserver observer) Parameter Description color The color to extract the components from. illuminant The illuminant to use. observer The standard observer to use. CIEUVW(Color, Tristimulus) Creates new CIE UVW components from the given color and white point. public CIEUVW(Color color, Tristimulus whitePoint) Parameter Description color The color to extract the components from. whitePoint The white point to use. CIEUVW(Single, Single, Single) Creates new CIE UVW components from the given values. public CIEUVW(float U, float V, float W) Parameter Description U The U chromaticity component of the color in the range [-100..100]. V The V chromaticity component of the color in the range [-100..100]. W The lightness component of the color in the range [0..100]. Fields U The U chromaticity component of the color in the range [-100..100]. public float U V The V chromaticity component of the color in the range [-100..100]. public float V W The lightness component of the color in the range [0..100]. public float W Methods Convert(Color, out Single, out Single, out Single) Converts a color to CIE UVW components. public static void Convert(Color color, out float U, out float V, out float W) Parameter Description color The color to extract the components from. U The U chromaticity component output in the range [-100..100]. V The V chromaticity component output in the range [-100..100]. W The W lightness component output in the range [0..100]. Convert(Color, Illuminant, StandardObserver, out Single, out Single, out Single) Converts a color to CIE UVW components using the given illuminant and standard observer. public static void Convert(Color color, Illuminant illuminant, StandardObserver observer, out float U, out float V, out float W) Parameter Description color The color to extract the components from. illuminant The illuminant to use. observer The standard observer to use. U The U chromaticity component output in the range [-100..100]. V The V chromaticity component output in the range [-100..100]. W The W lightness component output in the range [0..100]. Convert(Color, Tristimulus, out Single, out Single, out Single) Converts a color to CIE UVW components using the given white point. public static void Convert(Color color, Tristimulus whitePoint, out float U, out float V, out float W) Parameter Description color The color to extract the components from. whitePoint The white point to use. U The U chromaticity component output in the range [-100..100]. V The V chromaticity component output in the range [-100..100]. W The W lightness component output in the range [0..100]. Equals(Object) Determines if the components are equal to other . public override bool Equals(object other) Parameter Description other The other object to compare to. Overrides System.ValueType.Equals(System.Object) Equals(CIEUVW) Determines if the components are equal to other . public bool Equals(CIEUVW other) Parameter Description other The other components to compare to. GetHashCode() Returns the hash code of the components. public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components to a color. public Color ToColor() ToColor(Single, Single, Single) Converts CIE UVW components to a color. public static Color ToColor(float U, float V, float W) Parameter Description U The U chromaticity component of the color in the range [-100..100]. V The V chromaticity component of the color in the range [-100..100]. W The W lightness component of the color in the range [0..100]. ToColor(Illuminant, StandardObserver) Converts the components to a color using the given illuminant and standard observer. public Color ToColor(Illuminant illuminant, StandardObserver observer) Parameter Description illuminant The illuminant to use. observer The standard observer to use. ToColor(Illuminant, StandardObserver, Single, Single, Single) Converts CIE UVW components to a color using the given illuminant and standard observer. public static Color ToColor(Illuminant illuminant, StandardObserver observer, float U, float V, float W) Parameter Description illuminant The illuminant to use. observer The standard observer to use. U The U chromaticity component of the color in the range [-100..100]. V The V chromaticity component of the color in the range [-100..100]. W The W lightness component of the color in the range [0..100]. ToColor(Tristimulus) Converts the components to a color using the given white point. public Color ToColor(Tristimulus whitePoint) Parameter Description whitePoint The white point to use. ToColor(Tristimulus, Single, Single, Single) Converts CIE UVW components to a color using the given white point. public static Color ToColor(Tristimulus whitePoint, float U, float V, float W) Parameter Description whitePoint The white point to use. U The U chromaticity component of the color in the range [-100..100]. V The V chromaticity component of the color in the range [-100..100]. W The W lightness component of the color in the range [0..100]. ToString() Converts the components to a string. public override string ToString() Overrides System.ValueType.ToString() Operators Equality(CIEUVW, CIEUVW) public static bool operator ==(CIEUVW lhs, CIEUVW rhs) Parameter Description lhs rhs Explicit(Color to CIEUVW) public static explicit operator CIEUVW(Color color) Parameter Description color Explicit(CIEUVW to Color) public static explicit operator Color(CIEUVW components) Parameter Description components Inequality(CIEUVW, CIEUVW) public static bool operator !=(CIEUVW lhs, CIEUVW rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorPro.CIExyY.html": {
    "href": "api/Zigurous.ColorPro.CIExyY.html",
    "title": "Struct CIExyY | Color Pro",
    "keywords": "Struct CIExyY The CIE xyY components of a color - chromaticity (x,y) and luminance (Y). Implements IEquatable < CIExyY > Namespace : Zigurous.ColorPro [Serializable] public struct CIExyY : IEquatable<CIExyY> Constructors CIExyY(Color) Creates new CIE xyY components from the given color. public CIExyY(Color color) Parameter Description color The color to extract the components from. CIExyY(Single, Single, Single) Creates new CIE xyY components from the given values. public CIExyY(float x, float y, float Y) Parameter Description x The x-axis chromaticity coordinate of the color in the range [0..1]. y The y-axis chromaticity coordinate of the color in the range [0..1]. Y The luminance component of the color in the range [0..100]. Fields x The x-axis chromaticity coordinate of the color in the range [0..1]. public float x y The y-axis chromaticity coordinate of the color in the range [0..1]. public float y Y The luminance component of the color in the range [0..100]. public float Y Methods Convert(Color, out Single, out Single, out Single) Converts a color to CIE xyY components. public static void Convert(Color color, out float x, out float y, out float Y) Parameter Description color The color to extract the components from. x The x-axis chromaticity coordinate output in the range [0..1]. y The y-axis chromaticity coordinate output in the range [0..1]. Y The luminance component output in the range [0..100]. Equals(Object) Determines if the components are equal to other . public override bool Equals(object other) Parameter Description other The other object to compare to. Overrides System.ValueType.Equals(System.Object) Equals(CIExyY) Determines if the components are equal to other . public bool Equals(CIExyY other) Parameter Description other The other components to compare to. GetHashCode() Returns the hash code of the components. public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToCCT() Converts the components to a CCT temperature in Kelvin. public float ToCCT() ToCCT(Single, Single) Converts CIE xyY components to a CCT temperature in Kelvin. public static float ToCCT(float x, float y) Parameter Description x The x-axis chromaticity coordinate of the color in the range [0..1]. y The y-axis chromaticity coordinate of the color in the range [0..1]. ToCIEXYZ() Converts the components to CIE XYZ components. public CIEXYZ ToCIEXYZ() ToCIEXYZ(Single, Single, Single) Converts CIE xyY components to CIE XYZ components. public static CIEXYZ ToCIEXYZ(float x, float y, float Y) Parameter Description x The x-axis chromaticity coordinate of the color in the range [0..1]. y The y-axis chromaticity coordinate of the color in the range [0..1]. Y The luminance component of the color in the range [0..100]. ToCIEXYZ(ref Single, in Single, in Single, out Single, out Single) Converts CIE xyY components to CIE XYZ components. public static void ToCIEXYZ(ref float Y, in float x, in float y, out float X, out float Z) Parameter Description Y The luminance component of the color in the range [0..100]. x The x-axis chromaticity coordinate input in the range [0..1]. y The y-axis chromaticity coordinate input in the range [0..1]. X The X component output of the CIE XYZ color. Z The Z component output of the CIE XYZ color. ToColor() Converts the components to a color. public Color ToColor() ToColor(Single, Single, Single) Converts CIE xyY components to a color. public static Color ToColor(float x, float y, float Y) Parameter Description x The x-axis chromaticity coordinate of the color in the range [0..1]. y The y-axis chromaticity coordinate of the color in the range [0..1]. Y The luminance component of the color in the range [0..100]. ToString() Converts the components to a string. public override string ToString() Overrides System.ValueType.ToString() Operators Equality(CIExyY, CIExyY) public static bool operator ==(CIExyY lhs, CIExyY rhs) Parameter Description lhs rhs Explicit(Color to CIExyY) public static explicit operator CIExyY(Color color) Parameter Description color Explicit(CIExyY to Color) public static explicit operator Color(CIExyY components) Parameter Description components Explicit(CIExyY to CIEXYZ) public static explicit operator CIEXYZ(CIExyY components) Parameter Description components Inequality(CIExyY, CIExyY) public static bool operator !=(CIExyY lhs, CIExyY rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorPro.CIEXYZ.html": {
    "href": "api/Zigurous.ColorPro.CIEXYZ.html",
    "title": "Struct CIEXYZ | Color Pro",
    "keywords": "Struct CIEXYZ The CIE XYZ components of a color - chromaticity (X,Z) and luminance (Y). Implements IEquatable < CIEXYZ > Namespace : Zigurous.ColorPro [Serializable] public struct CIEXYZ : IEquatable<CIEXYZ> Constructors CIEXYZ(Color) Creates new CIE XYZ components from the given color. public CIEXYZ(Color color) Parameter Description color The color to extract the components from. CIEXYZ(Single, Single, Single) Creates new CIE XYZ components from the given values. public CIEXYZ(float X, float Y, float Z) Parameter Description X A mix of cone response curves chosen to be orthogonal to luminance and non-negative in the range [0..95.047]. Y The luminance component of the color in the range [0..100]. Z Somewhat equal to blue, or the \"S\" cone response in the range [0..108.883]. CIEXYZ(Tristimulus) Creates new CIE XYZ components from the given tristimulus values. public CIEXYZ(Tristimulus tristimulus) Parameter Description tristimulus The XYZ tristimulus values. Fields X A mix of cone response curves chosen to be orthogonal to luminance and non-negative in the range [0..95.047]. public float X Y The luminance component of the color in the range [0..100]. public float Y Z Somewhat equal to blue, or the \"S\" cone response in the range [0..108.883]. public float Z Methods Convert(Color, out Single, out Single, out Single) Converts a color to CIE XYZ components. public static void Convert(Color color, out float X, out float Y, out float Z) Parameter Description color The color to extract the components from. X A mix of cone response curves chosen to be orthogonal to luminance and non-negative in the range [0..95.047]. Y The luminance component of the color in the range [0..100]. Z Somewhat equal to blue, or the \"S\" cone response in the range [0..108.883]. Equals(Object) Determines if the components are equal to other . public override bool Equals(object other) Parameter Description other The other object to compare to. Overrides System.ValueType.Equals(System.Object) Equals(CIEXYZ) Determines if the components are equal to other . public bool Equals(CIEXYZ other) Parameter Description other The other components to compare to. GetHashCode() Returns the hash code of the components. public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToCIExyY() Converts the components to CIE xyY components. public CIExyY ToCIExyY() ToCIExyY(Single, Single, Single) Converts CIE XYZ components to CIE xyY components. public static CIExyY ToCIExyY(float X, float Y, float Z) Parameter Description X A mix of cone response curves chosen to be orthogonal to luminance and non-negative in the range [0..95.047]. Y The luminance component of the color in the range [0..100]. Z Somewhat equal to blue, or the \"S\" cone response in the range [0..108.883]. ToCIExyY(ref Single, in Single, in Single, out Single, out Single) Converts CIE XYZ components to CIE xyY components. public static void ToCIExyY(ref float Y, in float X, in float Z, out float x, out float y) Parameter Description Y The luminance component of the color in the range [0..100]. X A mix of cone response curves chosen to be orthogonal to luminance and non-negative in the range [0..95.047]. Z Somewhat equal to blue, or the \"S\" cone response in the range [0..108.883]. x The x component output of the CIE xyY color. y The y component output of the CIE xyY color. ToColor() Converts the components to a color. public Color ToColor() ToColor(Single, Single, Single) Converts CIE XYZ components to a color. public static Color ToColor(float X, float Y, float Z) Parameter Description X A mix of cone response curves chosen to be orthogonal to luminance and non-negative in the range [0..95.047]. Y The luminance component of the color in the range [0..100]. Z Somewhat equal to blue, or the \"S\" cone response in the range [0..108.883]. ToString() Converts the components to a string. public override string ToString() Overrides System.ValueType.ToString() Operators Equality(CIEXYZ, CIEXYZ) public static bool operator ==(CIEXYZ lhs, CIEXYZ rhs) Parameter Description lhs rhs Explicit(Color to CIEXYZ) public static explicit operator CIEXYZ(Color color) Parameter Description color Explicit(CIEXYZ to Color) public static explicit operator Color(CIEXYZ components) Parameter Description components Explicit(CIEXYZ to CIExyY) public static explicit operator CIExyY(CIEXYZ components) Parameter Description components Implicit(CIEXYZ to Tristimulus) public static implicit operator Tristimulus(CIEXYZ components) Parameter Description components Implicit(Tristimulus to CIEXYZ) public static implicit operator CIEXYZ(Tristimulus tristimulus) Parameter Description tristimulus Inequality(CIEXYZ, CIEXYZ) public static bool operator !=(CIEXYZ lhs, CIEXYZ rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorPro.CMYK.html": {
    "href": "api/Zigurous.ColorPro.CMYK.html",
    "title": "Struct CMYK | Color Pro",
    "keywords": "Struct CMYK The CMYK (cyan, magenta, yellow, black) components of a color in the range [0..1]. Implements IEquatable < CMYK > Namespace : Zigurous.ColorPro [Serializable] public struct CMYK : IEquatable<CMYK> Constructors CMYK(Color) Creates new CMYK components from the given color. public CMYK(Color color) Parameter Description color The color to extract the components from. CMYK(Single, Single, Single, Single) Creates new CMYK components from the given values. public CMYK(float cyan, float magenta, float yellow, float black) Parameter Description cyan The cyan component of the color in the range [0..1]. magenta The magenta component of the color in the range [0..1]. yellow The yellow component of the color in the range [0..1]. black The black component of the color in the range [0..1]. Fields black The black component of the color in the range [0..1]. public float black cyan The cyan component of the color in the range [0..1]. public float cyan magenta The magenta component of the color in the range [0..1]. public float magenta yellow The yellow component of the color in the range [0..1]. public float yellow Methods Convert(Color, out Single, out Single, out Single, out Single) Converts a color to CMYK (cyan, magenta, yellow, black) components. public static void Convert(Color color, out float c, out float m, out float y, out float k) Parameter Description color The color to extract the components from. c The cyan component output in the range [0..1]. m The magenta component output in the range [0..1]. y The yellow component output in the range [0..1]. k The black component output in the range [0..1]. Equals(Object) Determines if the components are equal to other . public override bool Equals(object other) Parameter Description other The other object to compare to. Overrides System.ValueType.Equals(System.Object) Equals(CMYK) Determines if the components are equal to other . public bool Equals(CMYK other) Parameter Description other The other components to compare to. GetHashCode() Returns the hash code of the components. public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components to a color. public Color ToColor() ToColor(Single, Single, Single, Single) Converts CMYK (cyan, magenta, yellow, black) components to a color. public static Color ToColor(float c, float m, float y, float k) Parameter Description c The cyan component of the color in the range [0..1]. m The magenta component of the color in the range [0..1]. y The yellow component of the color in the range [0..1]. k The black component of the color in the range [0..1]. ToString() Converts the components to a string. public override string ToString() Overrides System.ValueType.ToString() Operators Equality(CMYK, CMYK) public static bool operator ==(CMYK lhs, CMYK rhs) Parameter Description lhs rhs Explicit(Color to CMYK) public static explicit operator CMYK(Color color) Parameter Description color Explicit(CMYK to Color) public static explicit operator Color(CMYK cmyk) Parameter Description cmyk Inequality(CMYK, CMYK) public static bool operator !=(CMYK lhs, CMYK rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorPro.ColorBlindness.html": {
    "href": "api/Zigurous.ColorPro.ColorBlindness.html",
    "title": "Class ColorBlindness | Color Pro",
    "keywords": "Class ColorBlindness Functions for simulating types of color blindness. Inheritance System.Object ColorBlindness Namespace : Zigurous.ColorPro public static class ColorBlindness Fields achromatomaly The channel mixer matrix for achromatomaly color blindness. public static readonly float[] achromatomaly achromatopsia The channel mixer matrix for achromatopsia color blindness. public static readonly float[] achromatopsia deuteranomaly The channel mixer matrix for deuteranomaly color blindness. public static readonly float[] deuteranomaly deuteranopia The channel mixer matrix for deuteranopia color blindness. public static readonly float[] deuteranopia protanomaly The channel mixer matrix for protanomaly color blindness. public static readonly float[] protanomaly protanopia The channel mixer matrix for protanopia color blindness. public static readonly float[] protanopia tritanomaly The channel mixer matrix for tritanomaly color blindness. public static readonly float[] tritanomaly tritanopia The channel mixer matrix for tritanopia color blindness. public static readonly float[] tritanopia Methods Achromatomaly(Color) Simulates achromatomaly color blindness. public static Color Achromatomaly(this Color color) Parameter Description color The color to simulate. Achromatomaly(Color[]) Simulates achromatomaly color blindness. public static Color[] Achromatomaly(this Color[] colors) Parameter Description colors The colors to simulate. Achromatopsia(Color) Simulates achromatopsia color blindness. public static Color Achromatopsia(this Color color) Parameter Description color The color to simulate. Achromatopsia(Color[]) Simulates achromatopsia color blindness. public static Color[] Achromatopsia(this Color[] colors) Parameter Description colors The colors to simulate. Deuteranomaly(Color) Simulates deuteranomaly color blindness. public static Color Deuteranomaly(this Color color) Parameter Description color The color to simulate. Deuteranomaly(Color[]) Simulates deuteranomaly color blindness. public static Color[] Deuteranomaly(this Color[] colors) Parameter Description colors The colors to simulate. Deuteranopia(Color) Simulates deuteranopia color blindness. public static Color Deuteranopia(this Color color) Parameter Description color The color to simulate. Deuteranopia(Color[]) Simulates deuteranopia color blindness. public static Color[] Deuteranopia(this Color[] colors) Parameter Description colors The colors to simulate. Protanomaly(Color) Simulates protanomaly color blindness. public static Color Protanomaly(this Color color) Parameter Description color The color to simulate. Protanomaly(Color[]) Simulates protanomaly color blindness. public static Color[] Protanomaly(this Color[] colors) Parameter Description colors The colors to simulate. Protanopia(Color) Simulates protanopia color blindness. public static Color Protanopia(this Color color) Parameter Description color The color to simulate. Protanopia(Color[]) Simulates protanopia color blindness. public static Color[] Protanopia(this Color[] colors) Parameter Description colors The colors to simulate. Tritanomaly(Color) Simulates tritanomaly color blindness. public static Color Tritanomaly(this Color color) Parameter Description color The color to simulate. Tritanomaly(Color[]) Simulates tritanomaly color blindness. public static Color[] Tritanomaly(this Color[] colors) Parameter Description colors The colors to simulate. Tritanopia(Color) Simulates tritanopia color blindness. public static Color Tritanopia(this Color color) Parameter Description color The color to simulate. Tritanopia(Color[]) Simulates tritanopia color blindness. public static Color[] Tritanopia(this Color[] colors) Parameter Description colors The colors to simulate."
  },
  "api/Zigurous.ColorPro.ColorModel.html": {
    "href": "api/Zigurous.ColorPro.ColorModel.html",
    "title": "Enum ColorModel | Color Pro",
    "keywords": "Enum ColorModel A color model is an abstract mathematical model describing the ways colors can be represented as tuples of numbers, typically as three or four values or color components. Namespace : Zigurous.ColorPro public enum ColorModel Fields Name Description CIE The CIE color spaces were the first defined quantitative links between distributions of wavelengths in the electromagnetic visible spectrum, and physiologically perceived colors in human color vision. The mathematical relationships that define these color spaces are essential tools for color management. CMYK The CMYK (cyan, magenta, yellow, black) color model, a subtractive color mixing model used in color printing. Hex A representation of the RGB color model using hexadecimal numbers, i.e., #0080ff . HSB The HSB (hue, saturation, brightness) color model is an alternative representation to the RGB color model designed to more closely align with the way human vision perceives color-making attributes. HSB is the same as HSV. The HSB representation models the way paints of different colors mix together, with the saturation dimension resembling various shades of brightly colored paint, and the brightness dimension resembling the mixture of those paints with varying amounts of black or white paint HSI The HSI (hue, saturation, intensity) color model is an alternative representation to the RGB color model designed to more closely align with the way human vision perceives color-making attributes. The HSI model commonly used for computer vision, which takes H as a hue dimension and the component average I (\"intensity\") as a lightness dimension, does not attempt to \"fill\" a cylinder by its definition of saturation. Instead of presenting color choice or modification interfaces to end users, the goal of HSI is to facilitate separation of shapes in an image. HSL The HSL (hue, saturation, lightness) color model is an alternative representation to the RGB color model designed to more closely align with the way human vision perceives color-making attributes. The HSL model attempts to resemble more perceptual color models such as the natural color system (NCS) or Munsell color system, placing fully saturated colors around a circle at a lightness value of âÂ½, where a lightness value of 0 or 1 is fully black or white, respectively. HSV The HSV (hue, saturation, value) color model is an alternative representation to the RGB color model designed to more closely align with the way human vision perceives color-making attributes. HSV is the same as HSB. The HSV representation models the way paints of different colors mix together, with the saturation dimension resembling various shades of brightly colored paint, and the value dimension resembling the mixture of those paints with varying amounts of black or white paint RGB The RGB (red, green, blue) color model, an additive color mixing, device-dependent model used mainly for the representation and display of images in digital formats. RYB The RYB (red, yellow, blue) color model, a traditional model used in a standard artist's color wheel, particularly in painting. YCbCr The YCbCr color model used as a part of the color image pipeline in video and digital photography systems. Y is the luminance (luma) component and Cb and Cr are the blue-difference and red-difference chrominance (chroma) components, respectively. YIQ YIQ is the color model used by the NTSC color TV system, intended to take advantage of human color-response characteristics. The chroma component I stands for in-phase , while chroma component Q stands for quadrature , referring to the used in quadrature amplitude modulation. YPbPr YPbPr is the analog version of the YCbCr color space; the two are numerically equivalent but YPbPr is designed for use in analog systems while YCbCr is intended for digital video. YUV YUV is a color encoding system typically used as part of a color image pipeline. It encodes a color image or video taking human perception into account, allowing reduced bandwidth for chroma components, thereby typically enabling transmission errors or compression artifacts to be more efficiently masked by human perception than using a \"direct\" RGB-representation."
  },
  "api/Zigurous.ColorPro.ColorPalette.html": {
    "href": "api/Zigurous.ColorPro.ColorPalette.html",
    "title": "Class ColorPalette | Color Pro",
    "keywords": "Class ColorPalette Represents a palette of colors that can be saved as a Unity asset. Inheritance System.Object ColorPalette Namespace : Zigurous.ColorPro public sealed class ColorPalette : ScriptableObject Fields colors The colors that define the palette. public Color[] colors Properties Item[Int32] Gets or sets the color at the specified index. public Color this[int index] { get; set; } Parameter Description index The index of the color to get or set. Methods Add(Color) Adds a new color to the palette. public void Add(Color color) Parameter Description color The color to add. Convert(Material) Converts the color palette to a material palette by instantiating a new material for each color. public MaterialPalette Convert(Material baseMaterial) Parameter Description baseMaterial The material to clone when creating new materials. Returns Description MaterialPalette A new material palette. Random() Returns a random color from the palette. public Color Random()"
  },
  "api/Zigurous.ColorPro.ColorSpace.html": {
    "href": "api/Zigurous.ColorPro.ColorSpace.html",
    "title": "Enum ColorSpace | Color Pro",
    "keywords": "Enum ColorSpace A color space is a specific organization of colors. In combination with physical device profiling, it allows for reproducible representations of color, in both analog and digital representations. Adding a specific mapping function between a color model and a reference color space establishes a definite \"footprint\", known as a gamut, and for a given color model this defines a color space. Namespace : Zigurous.ColorPro public enum ColorSpace Fields Name Description CIELAB CIE 1976 L*a*b* is a color space in which L is lightness and a and b are chromaticity components, with the difference that the color values are far more than the human gamut. It was designed to be perceptually uniform with respect to human color vision, meaning that the same amount of numerical change in these values corresponds to about the same amount of visually perceived change. CIELCh The CIELChÂ° color space is a cylindrical representation of the CIELAB or CIELUV cube color space, where C* is the chroma and hÂ° is the hue. The L* lightness value remains unchanged. The LCh color space is not the same as the HSV, HSL or HSB color models, although their values can also be interpreted as a base color, saturation and lightness of a color. The HSL values are a polar coordinate transformation of what is technically defined RGB cube color space. LCh is still perceptually uniform. CIELUV The CIE 1976 L*u*v* color space is a simple-to-compute transformation of the CIE 1931 XYZ color space, but which attempted perceptual uniformity. It is extensively used for applications such as computer graphics which deal with colored lights. CIERGB In the 1920s, W. David Wright and John Guild independently conducted a series of experiments on human sight, from which they tried to determine the colors in human vision, and give it a mathematical basis. The results of these experiments defined the CIE 1931 RGB color space which became the basis for the trichromatic CIE 1931 XYZ color specification. CIEUCS The CIE 1960 UCS color space is another name for the (u, v) chromaticity space devised by David MacAdam. The CIE 1960 UCS does not define a luminance or lightness component. Today, the CIE 1960 UCS is mostly used to calculate correlated color temperature, where the isothermal lines are perpendicular to the Planckian locus. CIEUVW The CIE 1964 U*V*W* color space is based on the CIE 1960 UCS. Wyszecki invented the UVW color space in order to be able to calculate color differences without having to hold the luminance constant. He defined a lightness index W* by simplifying expressions suggested earlier. The chromaticity components U* and V* are defined such that the white point maps to the origin. This arrangement has the benefit of being able to express the loci of chromaticities with constant saturation. CIExyY In CIE xyY, Y is the luminance and x and y represents the chromaticity values derived from the tristimulus values X, Y and Z in the CIE 1931 XYZ color space. CIE xyY is just another way to represent CIE 1931 XYZ. CIEXYZ In 1931, based on the results of the CIE RGB version of the human eye, CIE mathematically determined a theoretical color space called the CIE 1931 XYZ color space to map out all of the colors perceived by the human eye. It is considered to be one of the most accurate color spaces; thus, it is commonly used for color management and conversions. X, Y and Z are extrapolations of RGB created mathematically to avoid negative numbers and are called Tristimulus values. Y means luminance, Z is somewhat equal to blue, and X is a mix of cone response curves chosen to be orthogonal to luminance and non-negative. HunterLab The Hunter Lab color space, defined in 1948 by Richard S. Hunter, is another color space sometimes referred to as \"Lab\". Like CIELAB, it was also designed to be computed via simple formulas from the CIE 1931 XYZ space but to be more perceptually uniform than CIE 1931 XYZ. Hunter named his coordinates L, a, and b; the CIELAB space, defined years later in 1976, named its coordinates L*, a*, and b* to distinguish them from Hunter's coordinates. LMS LMS (long, medium, short), is a color space which represents the response of the three types of cones of the human eye, named for their responsivity (sensitivity) peaks at long, medium, and short wavelengths. The numerical range is generally not specified, except that the lower end is generally bounded by zero. It is common to use the LMS color space when performing chromatic adaptation (estimating the appearance of a sample under a different illuminant). It's also useful in the study of color blindness, when one or more cone types are defective. sRGB sRGB (standard Red Green Blue) is an RGB color space that HP and Microsoft created cooperatively in 1996 to use on monitors, printers, and the Internet. It is often the \"default\" color space for images that contain no color space information, especially if the images' pixels are stored in 8-bit integers per color channel."
  },
  "api/Zigurous.ColorPro.ColorVision.html": {
    "href": "api/Zigurous.ColorPro.ColorVision.html",
    "title": "Enum ColorVision | Color Pro",
    "keywords": "Enum ColorVision A type of color vision. Namespace : Zigurous.ColorPro public enum ColorVision Fields Name Description Achromatomaly Achromatomaly is a condition characterized by a partial absense of color vision. Achromatopsia Achromatopsia is a condition characterized by a total absense of color vision. Deuteranomaly Deuteranomaly is a reduced sensitivity to green, a result of functionally limited green cones. Deuteranopia Deuteranopia is a blindness to green, a state in which the green cones are absent. Normal Normal color vision. Protanomaly Protanomaly is a reduced sensitivity to red, a result of functionally limited red cones. Protanopia Protanopia is a blindness to red, a state in which the red cones are absent. Tritanomaly Tritanomaly is a reduced sensitivity to blue, a result of functionally limited blue cones. Tritanopia Tritanopia is a blindness to blue, a state in which the blue cones are absent."
  },
  "api/Zigurous.ColorPro.ColorWheelDivision.html": {
    "href": "api/Zigurous.ColorPro.ColorWheelDivision.html",
    "title": "Enum ColorWheelDivision | Color Pro",
    "keywords": "Enum ColorWheelDivision A representation of the division of colors on the color wheel. Namespace : Zigurous.ColorPro public enum ColorWheelDivision Fields Name Description Full All colors of the color wheel. Primary The primary colors of the color wheel. Secondary The secondary colors of the color wheel. Tertiary The tertiary colors of the color wheel."
  },
  "api/Zigurous.ColorPro.Components.html": {
    "href": "api/Zigurous.ColorPro.Components.html",
    "title": "Class Components | Color Pro",
    "keywords": "Class Components Functions for getting and setting color component values. Inheritance System.Object Components Namespace : Zigurous.ColorPro public static class Components Methods Copy(Color, Boolean) Returns a copy of the color. public static Color Copy(this Color color, bool copyAlpha = true) Parameter Description color The color to copy. copyAlpha Whether to copy the alpha component. Copy(ref Color, Color, Boolean) Sets the components of the color to match another color. public static void Copy(this ref Color color, Color other, bool copyAlpha = true) Parameter Description color The color to set the components of. other The color to copy the components from. copyAlpha Whether to copy the alpha component. GetAlpha(Color) Returns the alpha component of the color. public static float GetAlpha(this Color color) Parameter Description color The color to get the component from. GetBlue(Color) Returns the blue component of the color. public static float GetBlue(this Color color) Parameter Description color The color to get the component from. GetBrightness(Color) Returns the brightness component of the color using the HSB color model. public static float GetBrightness(this Color color) Parameter Description color The color to get the component from. GetGreen(Color) Returns the green component of the color. public static float GetGreen(this Color color) Parameter Description color The color to get the component from. GetHue(Color) Returns the hue component of the color. public static float GetHue(this Color color) Parameter Description color The color to get the component from. GetLightness(Color) Returns the lightness component of the color using the HSL color model. public static float GetLightness(this Color color) Parameter Description color The color to get the component from. GetRed(Color) Returns the red component of the color. public static float GetRed(this Color color) Parameter Description color The color to get the component from. GetSaturationL(Color) Returns the saturation component of the color using the HSL color model. public static float GetSaturationL(this Color color) Parameter Description color The color to get the component from. GetSaturationV(Color) Returns the saturation component of the color using the HSV color model. public static float GetSaturationV(this Color color) Parameter Description color The color to get the component from. GetValue(Color) Returns the \"value\" component of the color using the HSV color model. public static float GetValue(this Color color) Parameter Description color The color to get the component from. SetAlpha(ref Color, Single) Sets the alpha component of the color to the given value. public static void SetAlpha(this ref Color color, float alpha) Parameter Description color The color to set the component on. alpha The value to set the component to. SetBlue(ref Color, Single) Sets the blue component of the color to the given value. public static void SetBlue(this ref Color color, float blue) Parameter Description color The color to set the component on. blue The value to set the component to. SetBrightness(ref Color, Single) Sets the brightness component of the color to the given value using the HSB color model. public static void SetBrightness(this ref Color color, float brightness) Parameter Description color The color to set the component on. brightness The value to set the component to. SetGreen(ref Color, Single) Sets the green component of the color to the given value. public static void SetGreen(this ref Color color, float green) Parameter Description color The color to set the component on. green The value to set the component to. SetHue(ref Color, Single) Sets the hue component of the color to the given value. public static void SetHue(this ref Color color, float hue) Parameter Description color The color to set the component on. hue The value to set the component to. SetLightness(ref Color, Single) Sets the lightness component of the color to the given value using the HSL color model. public static void SetLightness(this ref Color color, float lightness) Parameter Description color The color to set the component on. lightness The value to set the component to. SetRed(ref Color, Single) Sets the red component of the color to the given value. public static void SetRed(this ref Color color, float red) Parameter Description color The color to set the component on. red The value to set the component to. SetSaturationL(ref Color, Single) Sets the saturation component of the color to the given value using the HSL color model. public static void SetSaturationL(this ref Color color, float saturation) Parameter Description color The color to set the component on. saturation The value to set the component to. SetSaturationV(ref Color, Single) Sets the saturation component of the color to the given value using the HSV color model. public static void SetSaturationV(this ref Color color, float saturation) Parameter Description color The color to set the component on. saturation The value to set the component to. SetValue(ref Color, Single) Sets the \"value\" component of the color to the given value using the HSV color model. public static void SetValue(this ref Color color, float value) Parameter Description color The color to set the component on. value The value to set the component to. WithAlpha(Color, Single) Returns a copy of the color with a new alpha component value. public static Color WithAlpha(this Color color, float alpha) Parameter Description color The color to copy. alpha The new component value. WithBlue(Color, Single) Returns a copy of the color with a new blue component value. public static Color WithBlue(this Color color, float blue) Parameter Description color The color to copy. blue The new component value. WithBrightness(Color, Single) Returns a copy of the color with a new brightness component value using the HSB color model. public static Color WithBrightness(this Color color, float brightness) Parameter Description color The color to copy. brightness The new component value. WithGreen(Color, Single) Returns a copy of the color with a new green component value. public static Color WithGreen(this Color color, float green) Parameter Description color The color to copy. green The new component value. WithHue(Color, Single) Returns a copy of the color with a new hue component value. public static Color WithHue(this Color color, float hue) Parameter Description color The color to copy. hue The new component value. WithLightness(Color, Single) Returns a copy of the color with a new lightness component value using the HSL color model. public static Color WithLightness(this Color color, float lightness) Parameter Description color The color to copy. lightness The new component value. WithRed(Color, Single) Returns a copy of the color with a new red component value. public static Color WithRed(this Color color, float red) Parameter Description color The color to copy. red The new component value. WithSaturationL(Color, Single) Returns a copy of the color with a new saturation component value using the HSL color model. public static Color WithSaturationL(this Color color, float saturation) Parameter Description color The color to copy. saturation The new component value. WithSaturationV(Color, Single) Returns a copy of the color with a new saturation component value using the HSV color model. public static Color WithSaturationV(this Color color, float saturation) Parameter Description color The color to copy. saturation The new component value. WithValue(Color, Single) Returns a copy of the color with a new \"value\" component value using the HSV color model. public static Color WithValue(this Color color, float value) Parameter Description color The color to copy. value The new component value."
  },
  "api/Zigurous.ColorPro.Contrast.html": {
    "href": "api/Zigurous.ColorPro.Contrast.html",
    "title": "Class Contrast | Color Pro",
    "keywords": "Class Contrast Functions for calculating contrast between colors. Inheritance System.Object Contrast Namespace : Zigurous.ColorPro public static class Contrast Methods ContrastRatio(Color, Color) Returns the contrast ratio of the color to another color. public static float ContrastRatio(this Color color, Color other) Parameter Description color The first color to compare. other The second color to compare. HigherContrastingColor(Color, Color, Color) Returns the color that has the higher contrast ratio to the current color. public static Color HigherContrastingColor(this Color color, Color a, Color b) Parameter Description color The color to compare to. a The first color to test. b The second color to test. HighestContrastingColor(Color, Color[]) Returns the color that has the highest contrast ratio to the current color. public static Color HighestContrastingColor(this Color color, params Color[] colors) Parameter Description color The color to compare to. colors The colors to test. LowerContrastingColor(Color, Color, Color) Returns the color that has the lower contrast ratio to the current color. public static Color LowerContrastingColor(this Color color, Color a, Color b) Parameter Description color The color to compare to. a The first color to test. b The second color to test. LowestContrastingColor(Color, Color[]) Returns the color that has the lowest contrast ratio to the current color. public static Color LowestContrastingColor(this Color color, params Color[] colors) Parameter Description color The color to compare to. colors The colors to test."
  },
  "api/Zigurous.ColorPro.Conversion.html": {
    "href": "api/Zigurous.ColorPro.Conversion.html",
    "title": "Class Conversion | Color Pro",
    "keywords": "Class Conversion Functions for converting between color spaces and models. Inheritance System.Object Conversion Namespace : Zigurous.ColorPro public static class Conversion Methods ToARGB(Color) Converts the color into ARGB (alpha, red, green, blue) components in the range [0..1]. public static ARGB ToARGB(this Color color) Parameter Description color The color to convert. ToARGB(Color, out Single, out Single, out Single, out Single) Converts the color into ARGB (alpha, red, green, blue) components in the range [0..1]. public static void ToARGB(this Color color, out float a, out float r, out float g, out float b) Parameter Description color The color to convert. a The alpha component output. r The red component output. g The green component output. b The blue component output. ToARGB255(Color) Converts the color into ARGB (alpha, red, green, blue) components in the range [0..255]. public static ARGB255 ToARGB255(this Color color) Parameter Description color The color to convert. ToARGB255(Color, out Int32, out Int32, out Int32, out Int32) Converts the color into ARGB (alpha, red, green, blue) components in the range [0..1]. public static void ToARGB255(this Color color, out int a, out int r, out int g, out int b) Parameter Description color The color to convert. a The alpha component output. r The red component output. g The green component output. b The blue component output. ToCIELAB(Color) Converts the color into CIE LAB components. public static CIELAB ToCIELAB(this Color color) Parameter Description color The color to convert. ToCIELAB(Color, out Single, out Single, out Single) Converts the color into CIE LAB components. public static void ToCIELAB(this Color color, out float L, out float a, out float b) Parameter Description color The color to convert. L The L component output. a The a component output. b The b component output. ToCIELAB(Color, Illuminant, StandardObserver) Converts the color into CIE LAB components using the given illuminant and standard observer. public static CIELAB ToCIELAB(this Color color, Illuminant illuminant, StandardObserver observer) Parameter Description color The color to convert. illuminant The illuminant to use. observer The standard observer to use. ToCIELAB(Color, Illuminant, StandardObserver, out Single, out Single, out Single) Converts the color into CIE LAB components using the given illuminant and standard observer. public static void ToCIELAB(this Color color, Illuminant illuminant, StandardObserver observer, out float L, out float a, out float b) Parameter Description color The color to convert. illuminant The illuminant to use. observer The standard observer to use. L The L component output. a The a component output. b The b component output. ToCIELAB(Color, Tristimulus) Converts the color into CIE LAB components using the given white point. public static CIELAB ToCIELAB(this Color color, Tristimulus whitePoint) Parameter Description color The color to convert. whitePoint The white point to use. ToCIELAB(Color, Tristimulus, out Single, out Single, out Single) Converts the color into CIE LAB components using the given white point. public static void ToCIELAB(this Color color, Tristimulus whitePoint, out float L, out float a, out float b) Parameter Description color The color to convert. whitePoint The white point to use. L The L component output. a The a component output. b The b component output. ToCIELCh_ab(Color) Converts the color into CIE LCh(ab) components. public static CIELCh_ab ToCIELCh_ab(this Color color) Parameter Description color The color to convert. ToCIELCh_ab(Color, out Single, out Single, out Single) Converts the color into CIE LCh(ab) components. public static void ToCIELCh_ab(this Color color, out float L, out float C, out float h) Parameter Description color The color to convert. L The L component output. C The C component output. h The h component output. ToCIELCh_ab(Color, Illuminant, StandardObserver) Converts the color into CIE LCh(ab) components using the given illuminant and standard observer. public static CIELCh_ab ToCIELCh_ab(this Color color, Illuminant illuminant, StandardObserver observer) Parameter Description color The color to convert. illuminant The illuminant to use. observer The standard observer to use. ToCIELCh_ab(Color, Illuminant, StandardObserver, out Single, out Single, out Single) Converts the color into CIE LCh(ab) components using the given illuminant and standard observer. public static void ToCIELCh_ab(this Color color, Illuminant illuminant, StandardObserver observer, out float L, out float C, out float h) Parameter Description color The color to convert. illuminant The illuminant to use. observer The standard observer to use. L The L component output. C The C component output. h The h component output. ToCIELCh_ab(Color, Tristimulus) Converts the color into CIE LCh(ab) components using the given white point. public static CIELCh_ab ToCIELCh_ab(this Color color, Tristimulus whitePoint) Parameter Description color The color to convert. whitePoint The white point to use. ToCIELCh_ab(Color, Tristimulus, out Single, out Single, out Single) Converts the color into CIE LCh(ab) components using the given white point. public static void ToCIELCh_ab(this Color color, Tristimulus whitePoint, out float L, out float C, out float h) Parameter Description color The color to convert. whitePoint The white point to use. L The L component output. C The C component output. h The h component output. ToCIELCh_uv(Color) Converts the color into CIE LCh(uv) components. public static CIELCh_uv ToCIELCh_uv(this Color color) Parameter Description color The color to convert. ToCIELCh_uv(Color, out Single, out Single, out Single) Converts the color into CIE LCh(uv) components. public static void ToCIELCh_uv(this Color color, out float L, out float C, out float h) Parameter Description color The color to convert. L The L component output. C The C component output. h The h component output. ToCIELCh_uv(Color, Illuminant, StandardObserver) Converts the color into CIE LCh(uv) components using the given illuminant and standard observer. public static CIELCh_uv ToCIELCh_uv(this Color color, Illuminant illuminant, StandardObserver observer) Parameter Description color The color to convert. illuminant The illuminant to use. observer The standard observer to use. ToCIELCh_uv(Color, Illuminant, StandardObserver, out Single, out Single, out Single) Converts the color into CIE LCh(uv) components using the given illuminant and standard observer. public static void ToCIELCh_uv(this Color color, Illuminant illuminant, StandardObserver observer, out float L, out float C, out float h) Parameter Description color The color to convert. illuminant The illuminant to use. observer The standard observer to use. L The L component output. C The C component output. h The h component output. ToCIELCh_uv(Color, Tristimulus) Converts the color into CIE LCh(uv) components using the given white point. public static CIELCh_uv ToCIELCh_uv(this Color color, Tristimulus whitePoint) Parameter Description color The color to convert. whitePoint The white point to use. ToCIELCh_uv(Color, Tristimulus, out Single, out Single, out Single) Converts the color into CIE LCh(uv) components using the given white point. public static void ToCIELCh_uv(this Color color, Tristimulus whitePoint, out float L, out float C, out float h) Parameter Description color The color to convert. whitePoint The white point to use. L The L component output. C The C component output. h The h component output. ToCIELUV(Color) Converts the color into CIE LUV components. public static CIELUV ToCIELUV(this Color color) Parameter Description color The color to convert. ToCIELUV(Color, out Single, out Single, out Single) Converts the color into CIE LUV components. public static void ToCIELUV(this Color color, out float L, out float u, out float v) Parameter Description color The color to convert. L The L component output. u The u component output. v The v component output. ToCIELUV(Color, Illuminant, StandardObserver) Converts the color into CIE LUV components using the given illuminant and standard observer. public static CIELUV ToCIELUV(this Color color, Illuminant illuminant, StandardObserver observer) Parameter Description color The color to convert. illuminant The illuminant to use. observer The standard observer to use. ToCIELUV(Color, Illuminant, StandardObserver, out Single, out Single, out Single) Converts the color into CIE LUV components using the given illuminant and standard observer. public static void ToCIELUV(this Color color, Illuminant illuminant, StandardObserver observer, out float L, out float u, out float v) Parameter Description color The color to convert. illuminant The illuminant to use. observer The standard observer to use. L The L component output. u The u component output. v The v component output. ToCIELUV(Color, Tristimulus) Converts the color into CIE LUV components using the given white point. public static CIELUV ToCIELUV(this Color color, Tristimulus whitePoint) Parameter Description color The color to convert. whitePoint The white point to use. ToCIELUV(Color, Tristimulus, out Single, out Single, out Single) Converts the color into CIE LUV components using the given white point. public static void ToCIELUV(this Color color, Tristimulus whitePoint, out float L, out float u, out float v) Parameter Description color The color to convert. whitePoint The white point to use. L The L component output. u The u component output. v The v component output. ToCIEUCS(Color) Converts the color into CIE UCS components. public static CIEUCS ToCIEUCS(this Color color) Parameter Description color The color to convert. ToCIEUCS(Color, out Single, out Single) Converts the color into CIE UCS components. public static void ToCIEUCS(this Color color, out float u, out float v) Parameter Description color The color to convert. u The u component output. v The v component output. ToCIEUVW(Color) Converts the color into CIE UVW components. public static CIEUVW ToCIEUVW(this Color color) Parameter Description color The color to convert. ToCIEUVW(Color, out Single, out Single, out Single) Converts the color into CIE UVW components. public static void ToCIEUVW(this Color color, out float U, out float V, out float W) Parameter Description color The color to convert. U The U component output. V The V component output. W The W component output. ToCIEUVW(Color, Illuminant, StandardObserver) Converts the color into CIE UVW components using the given illuminant and standard observer. public static CIEUVW ToCIEUVW(this Color color, Illuminant illuminant, StandardObserver observer) Parameter Description color The color to convert. illuminant The illuminant to use. observer The standard observer to use. ToCIEUVW(Color, Illuminant, StandardObserver, out Single, out Single, out Single) Converts the color into CIE UVW components using the given illuminant and standard observer. public static void ToCIEUVW(this Color color, Illuminant illuminant, StandardObserver observer, out float U, out float V, out float W) Parameter Description color The color to convert. illuminant The illuminant to use. observer The standard observer to use. U The U component output. V The V component output. W The W component output. ToCIEUVW(Color, Tristimulus) Converts the color into CIE UVW components using the given white point. public static CIEUVW ToCIEUVW(this Color color, Tristimulus whitePoint) Parameter Description color The color to convert. whitePoint The white point to use. ToCIEUVW(Color, Tristimulus, out Single, out Single, out Single) Converts the color into CIE UVW components using the given white point. public static void ToCIEUVW(this Color color, Tristimulus whitePoint, out float U, out float V, out float W) Parameter Description color The color to convert. whitePoint The white point to use. U The U component output. V The V component output. W The W component output. ToCIExyY(Color) Converts the color into CIE xyY components. public static CIExyY ToCIExyY(this Color color) Parameter Description color The color to convert. ToCIExyY(Color, out Single, out Single, out Single) Converts the color into CIE xyY components. public static void ToCIExyY(this Color color, out float x, out float y, out float Y) Parameter Description color The color to convert. x The x component output. y The y component output. Y The Y component output. ToCIEXYZ(Color) Converts the color into CIE XYZ components. public static CIEXYZ ToCIEXYZ(this Color color) Parameter Description color The color to convert. ToCIEXYZ(Color, out Single, out Single, out Single) Converts the color into CIE XYZ components. public static void ToCIEXYZ(this Color color, out float X, out float Y, out float Z) Parameter Description color The color to convert. X The X component output. Y The Y component output. Z The Z component output. ToCMYK(Color) Converts the color into CMYK (cyan, magenta, yellow, black) components in the range [0..1]. public static CMYK ToCMYK(this Color color) Parameter Description color The color to convert. ToCMYK(Color, out Single, out Single, out Single, out Single) Converts the color into CMYK (cyan, magenta, yellow, black) components in the range [0..1]. public static void ToCMYK(this Color color, out float c, out float m, out float y, out float k) Parameter Description color The color to convert. c The cyan component output. m The magenta component output. y The yellow component output. k The black component output. ToHSB(Color) Converts the color into HSB (hue, saturation, brightness) components in the range [0..1]. public static HSB ToHSB(this Color color) Parameter Description color The color to convert. ToHSB(Color, out Single, out Single, out Single) Converts the color into HSB (hue, saturation, brightness) components in the range [0..1]. public static void ToHSB(this Color color, out float h, out float s, out float b) Parameter Description color The color to convert. h The hue component output. s The saturation component output. b The brightness component output. ToHSI(Color) Converts the color into HSI (hue, saturation, intensity) components in the range [0..1]. public static HSI ToHSI(this Color color) Parameter Description color The color to convert. ToHSI(Color, out Single, out Single, out Single) Converts the color into HSI (hue, saturation, intensity) components in the range [0..1]. public static void ToHSI(this Color color, out float h, out float s, out float i) Parameter Description color The color to convert. h The hue component output. s The saturation component output. i The intensity component output. ToHSL(Color) Converts the color into HSL (hue, saturation, lightness) components in the range [0..1]. public static HSL ToHSL(this Color color) Parameter Description color The color to convert. ToHSL(Color, out Single, out Single, out Single) Converts the color into HSL (hue, saturation, lightness) components in the range [0..1]. public static void ToHSL(this Color color, out float h, out float s, out float l) Parameter Description color The color to convert. h The hue component output. s The saturation component output. l The lightness component output. ToHSV(Color) Converts the color into HSV (hue, saturation, value) components in the range [0..1]. public static HSV ToHSV(this Color color) Parameter Description color The color to convert. ToHSV(Color, out Single, out Single, out Single) Converts the color into HSV (hue, saturation, value) components in the range [0..1]. public static void ToHSV(this Color color, out float h, out float s, out float v) Parameter Description color The color to convert. h The hue component output. s The saturation component output. v The value component output. ToHunterLab(Color) Converts the color into Hunter Lab components. public static HunterLab ToHunterLab(this Color color) Parameter Description color The color to convert. ToHunterLab(Color, out Single, out Single, out Single) Converts the color into Hunter Lab components. public static void ToHunterLab(this Color color, out float L, out float a, out float b) Parameter Description color The color to convert. L The L component output. a The a component output. b The b component output. ToHunterLab(Color, Illuminant, StandardObserver) Converts the color into Hunter Lab components using the given illuminant and standard observer. public static HunterLab ToHunterLab(this Color color, Illuminant illuminant, StandardObserver observer) Parameter Description color The color to convert. illuminant The illuminant to use. observer The standard observer to use. ToHunterLab(Color, Illuminant, StandardObserver, out Single, out Single, out Single) Converts the color into Hunter Lab components using the given illuminant and standard observer. public static void ToHunterLab(this Color color, Illuminant illuminant, StandardObserver observer, out float L, out float a, out float b) Parameter Description color The color to convert. illuminant The illuminant to use. observer The standard observer to use. L The L component output. a The a component output. b The b component output. ToHunterLab(Color, Tristimulus) Converts the color into Hunter Lab components using the given white point. public static HunterLab ToHunterLab(this Color color, Tristimulus whitePoint) Parameter Description color The color to convert. whitePoint The white point to use. ToHunterLab(Color, Tristimulus, out Single, out Single, out Single) Converts the color into Hunter Lab components using the given white point. public static void ToHunterLab(this Color color, Tristimulus whitePoint, out float L, out float a, out float b) Parameter Description color The color to convert. whitePoint The white point to use. L The L component output. a The a component output. b The b component output. ToLMS(Color) Converts the color into LMS components. public static LMS ToLMS(this Color color) Parameter Description color The color to convert. ToLMS(Color, out Single, out Single, out Single) Converts the color into LMS components. public static void ToLMS(this Color color, out float L, out float M, out float S) Parameter Description color The color to convert. L The L component output. M The M component output. S The S component output. ToRGB(Color) Converts the color into RGB (red, green, blue) components in the range [0..1]. public static RGB ToRGB(this Color color) Parameter Description color The color to convert. ToRGB(Color, out Single, out Single, out Single) Converts the color into RGB (red, green, blue) components in the range [0..1]. public static void ToRGB(this Color color, out float r, out float g, out float b) Parameter Description color The color to convert. r The red component output. g The green component output. b The blue component output. ToRGB255(Color) Converts the color into RGB (red, green, blue) components in the range [0..255]. public static RGB255 ToRGB255(this Color color) Parameter Description color The color to convert. ToRGB255(Color, out Int32, out Int32, out Int32) Converts the color into RGB (red, green, blue) components in the range [0..1]. public static void ToRGB255(this Color color, out int r, out int g, out int b) Parameter Description color The color to convert. r The red component output. g The green component output. b The blue component output. ToRGBA(Color) Converts the color into RGBA (red, green, blue, alpha) components in the range [0..1]. public static RGBA ToRGBA(this Color color) Parameter Description color The color to convert. ToRGBA(Color, out Single, out Single, out Single, out Single) Converts the color into RGBA (red, green, blue, alpha) components in the range [0..1]. public static void ToRGBA(this Color color, out float r, out float g, out float b, out float a) Parameter Description color The color to convert. r The red component output. g The green component output. b The blue component output. a The alpha component output. ToRGBA255(Color) Converts the color into RGBA (red, green, blue, alpha) components in the range [0..255]. public static RGBA255 ToRGBA255(this Color color) Parameter Description color The color to convert. ToRGBA255(Color, out Int32, out Int32, out Int32, out Int32) Converts the color into RGBA (red, green, blue, alpha) components in the range [0..1]. public static void ToRGBA255(this Color color, out int r, out int g, out int b, out int a) Parameter Description color The color to convert. r The red component output. g The green component output. b The blue component output. a The alpha component output. ToYCbCr(Color) Converts the color into Yâ²CbCr components. public static YCbCr ToYCbCr(this Color color) Parameter Description color The color to convert. ToYCbCr(Color, out Single, out Single, out Single) Converts the color into Yâ²CbCr components. public static void ToYCbCr(this Color color, out float Y, out float Cb, out float Cr) Parameter Description color The color to convert. Y The Y component output. Cb The Cb component output. Cr The Cr component output. ToYCbCr(Color, SignalEncoding) Converts the color into Yâ²CbCr components using the given signal encoding. public static YCbCr ToYCbCr(this Color color, SignalEncoding encoding) Parameter Description color The color to convert. encoding The signal encoding to use. ToYCbCr(Color, SignalEncoding, out Single, out Single, out Single) Converts the color into Yâ²CbCr components using the given signal encoding. public static void ToYCbCr(this Color color, SignalEncoding encoding, out float Y, out float Cb, out float Cr) Parameter Description color The color to convert. encoding The signal encoding to use. Y The Y component output. Cb The Cb component output. Cr The Cr component output. ToYIQ(Color) Converts the color into Yâ²IQ components. public static YIQ ToYIQ(this Color color) Parameter Description color The color to convert. ToYIQ(Color, out Single, out Single, out Single) Converts the color into Yâ²IQ components. public static void ToYIQ(this Color color, out float Y, out float I, out float Q) Parameter Description color The color to convert. Y The Y component output. I The I component output. Q The Q component output. ToYIQ(Color, SignalEncoding) Converts the color into Yâ²IQ components using the given signal encoding. public static YIQ ToYIQ(this Color color, SignalEncoding encoding) Parameter Description color The color to convert. encoding The signal encoding to use. ToYIQ(Color, SignalEncoding, out Single, out Single, out Single) Converts the color into Yâ²IQ components using the given signal encoding. public static void ToYIQ(this Color color, SignalEncoding encoding, out float Y, out float I, out float Q) Parameter Description color The color to convert. encoding The signal encoding to use. Y The Y component output. I The I component output. Q The Q component output. ToYPbPr(Color) Converts the color into Yâ²PbPr components. public static YPbPr ToYPbPr(this Color color) Parameter Description color The color to convert. ToYPbPr(Color, out Single, out Single, out Single) Converts the color into Yâ²PbPr components. public static void ToYPbPr(this Color color, out float Y, out float Pb, out float Pr) Parameter Description color The color to convert. Y The Y component output. Pb The Pb component output. Pr The Pr component output. ToYPbPr(Color, SignalEncoding) Converts the color into Yâ²PbPr components using the given signal encoding. public static YPbPr ToYPbPr(this Color color, SignalEncoding encoding) Parameter Description color The color to convert. encoding The signal encoding to use. ToYPbPr(Color, SignalEncoding, out Single, out Single, out Single) Converts the color into Yâ²PbPr components using the given signal encoding. public static void ToYPbPr(this Color color, SignalEncoding encoding, out float Y, out float Pb, out float Pr) Parameter Description color The color to convert. encoding The signal encoding to use. Y The Y component output. Pb The Pb component output. Pr The Pr component output. ToYUV(Color) Converts the color into Yâ²UV components. public static YUV ToYUV(this Color color) Parameter Description color The color to convert. ToYUV(Color, out Single, out Single, out Single) Converts the color into Yâ²UV components. public static void ToYUV(this Color color, out float Y, out float U, out float V) Parameter Description color The color to convert. Y The Y component output. U The U component output. V The V component output. ToYUV(Color, SignalEncoding) Converts the color into Yâ²UV components using the given signal encoding. public static YUV ToYUV(this Color color, SignalEncoding encoding) Parameter Description color The color to convert. encoding The signal encoding to use. ToYUV(Color, SignalEncoding, out Single, out Single, out Single) Converts the color into Yâ²UV components using the given signal encoding. public static void ToYUV(this Color color, SignalEncoding encoding, out float Y, out float U, out float V) Parameter Description color The color to convert. encoding The signal encoding to use. Y The Y component output. U The U component output. V The V component output."
  },
  "api/Zigurous.ColorPro.Equality.html": {
    "href": "api/Zigurous.ColorPro.Equality.html",
    "title": "Class Equality | Color Pro",
    "keywords": "Class Equality Functions for testing the equality of colors. Inheritance System.Object Equality Namespace : Zigurous.ColorPro public static class Equality Methods Equals(Color, Color, Single, Boolean) Determines if two colors are equal by comparing their component values after being rounded by a given amount. public static bool Equals(this Color lhs, Color rhs, float rounding, bool compareAlpha = true) Parameter Description lhs The first color to compare. rhs The second color to compare. rounding The amount to round the component values by. compareAlpha Whether to compare the alpha values as well. EqualsHex(Color, Color) Determines if two colors are equal by comparing their hexadecimal representations. public static bool EqualsHex(this Color lhs, Color rhs) Parameter Description lhs The first color to compare. rhs The second color to compare."
  },
  "api/Zigurous.ColorPro.Gradients.html": {
    "href": "api/Zigurous.ColorPro.Gradients.html",
    "title": "Class Gradients | Color Pro",
    "keywords": "Class Gradients Functions for creating and working with color gradients. Inheritance System.Object Gradients Namespace : Zigurous.ColorPro public static class Gradients Methods Create(Color, Color) Creates a new gradient with a given start color and end color. public static Gradient Create(Color start, Color end) Parameter Description start The start color of the gradient. end The end color of the gradient. Create(Color, Color, Int32) Creates a new gradient that interpolates a linear amount of stops between a start color and end color. public static Gradient Create(Color start, Color end, int stops) Parameter Description start The start color of the gradient. end The end color of the gradient. stops Create(Color, Color, Single[]) Creates a new gradient that distributes a predefined array of stops between a start color and end color. public static Gradient Create(Color start, Color end, float[] stops) Parameter Description start The start color of the gradient. end The end color of the gradient. stops The array of stops to distribute between the start and end color. Create(GradientColorKey[], GradientAlphaKey[]) Creates a new gradient and sets the given color keys and alpha keys. public static Gradient Create(GradientColorKey[] colors, GradientAlphaKey[] alpha) Parameter Description colors The color keys to set on the gradient. alpha The alpha keys to set on the gradient. Create(GradientColorKey[], Single) Creates a new gradient and sets the given color keys with a constant alpha value for the entire gradient. public static Gradient Create(GradientColorKey[] colors, float alpha = 1F) Parameter Description colors The color keys to set on the gradient. alpha The constant alpha value to set on the gradient. ToColors(Gradient) Returns the colors of the gradient, including the evaluated alpha values. public static Color[] ToColors(this Gradient gradient) Parameter Description gradient The gradient to get the colors from. ToColors(Gradient, Int32) Returns the colors of the gradient by interpolating a linear amount of stops within. public static Color[] ToColors(this Gradient gradient, int stops) Parameter Description gradient The gradient to interpolate. stops The number of stops to interpolate in the gradient."
  },
  "api/Zigurous.ColorPro.Harmonies.html": {
    "href": "api/Zigurous.ColorPro.Harmonies.html",
    "title": "Class Harmonies | Color Pro",
    "keywords": "Class Harmonies Functions for generating color harmonies. Inheritance System.Object Harmonies Namespace : Zigurous.ColorPro public static class Harmonies Methods Analogous(Color, Int32, Single) Creates an analogous harmony of the color, a set of colors located next to each other on the color wheel. public static Color[] Analogous(this Color baseColor, int amount = 3, float hueShift = 30F) Parameter Description baseColor The base color to create the harmony from. amount The number of colors to create. hueShift The amount of degrees to shift each hue. AnalogousNonAlloc(Color, Color[], Single) Creates an analogous harmony of the color, a set of colors located next to each other on the color wheel. The colors are stored in an existing array to prevent heap allocations. The amount of colors generated is determined by the size of the array. public static void AnalogousNonAlloc(this Color baseColor, Color[] output, float hueShift = 30F) Parameter Description baseColor The base color to create the harmony from. output The output array to store the colors in. hueShift The amount of degrees to shift each hue. Complementary(Color) Creates a complementary harmony of the color, two colors located opposite to each other on the color wheel. public static Color[] Complementary(this Color baseColor) Parameter Description baseColor The base color to create the harmony from. ComplementaryNonAlloc(Color, Color[]) Creates a complementary harmony of the color, two colors located opposite to each other on the color wheel. The colors are stored in an existing array to prevent heap allocations. The array requires a size of at least 2. public static void ComplementaryNonAlloc(this Color baseColor, Color[] output) Parameter Description baseColor The base color to create the harmony from. output The output array to store the colors in. DoubleSplitComplementary(Color) Creates a double split complementary harmony of the color, two pairs of complementary colors on either side of the base color. public static Color[] DoubleSplitComplementary(this Color baseColor) Parameter Description baseColor The base color to create the harmony from. DoubleSplitComplementaryNonAlloc(Color, Color[]) Creates a double split complementary harmony of the color, two pairs of complementary colors on either side of the base color. The colors are stored in an existing array to prevent heap allocations. The array requires a size of at least 4. public static void DoubleSplitComplementaryNonAlloc(this Color baseColor, Color[] output) Parameter Description baseColor The base color to create the harmony from. output The output array to store the colors in. Monochromatic(Color, Int32, Single) Creates a monochromatic harmony of the color, a set of tints and shades formed from the base color. public static Color[] Monochromatic(this Color baseColor, int amount = 5, float difference = 0.25F) Parameter Description baseColor The base color to create the harmony from. amount The number of colors to create. difference The amount of change in each color. MonochromaticNonAlloc(Color, Color[], Single) Creates a monochromatic harmony of the color, a set of tints and shades formed from the base color. The colors are stored in an existing array to prevent heap allocations. The amount of colors generated is determined by the size of the array. public static void MonochromaticNonAlloc(this Color baseColor, Color[] output, float difference = 0.25F) Parameter Description baseColor The base color to create the harmony from. output The output array to store the colors in. difference The amount of change in each color. SplitComplementary(Color) Creates a split complementary harmony of the color, the base color with two colors adjacent to the directly opposing color on the color wheel. public static Color[] SplitComplementary(this Color baseColor) Parameter Description baseColor The base color to create the harmony from. SplitComplementaryNonAlloc(Color, Color[]) Creates a split complementary harmony of the color, the base color with two colors adjacent to the directly opposing color on the color wheel. The colors are stored in an existing array to prevent heap allocations. The array requires a size of at least 3. public static void SplitComplementaryNonAlloc(this Color baseColor, Color[] output) Parameter Description baseColor The base color to create the harmony from. output The output array to store the colors in. Square(Color) Creates a tetradic (square) harmony of the color, four colors evenly spaced around the color wheel to form a square (90Â° hue shifts). public static Color[] Square(this Color baseColor) Parameter Description baseColor The base color to create the harmony from. SquareNonAlloc(Color, Color[]) Creates a tetradic (square) harmony of the color, four colors evenly spaced around the color wheel to form a square (90Â° hue shifts). The colors are stored in an existing array to prevent heap allocations. The array requires a size of at least 4. public static void SquareNonAlloc(this Color baseColor, Color[] output) Parameter Description baseColor The base color to create the harmony from. output The output array to store the colors in. Triadic(Color) Creates a triadic harmony of the color, three colors evenly spaced around the color wheel to form a triangle (120Â° hue shifts). public static Color[] Triadic(this Color baseColor) Parameter Description baseColor The base color to create the harmony from. TriadicNonAlloc(Color, Color[]) Creates a triadic harmony of the color, three colors evenly spaced around the color wheel to form a triangle (120Â° hue shifts). The colors are stored in an existing array to prevent heap allocations. The array requires a size of at least 3. public static void TriadicNonAlloc(this Color baseColor, Color[] output) Parameter Description baseColor The base color to create the harmony from. output The output array to store the colors in."
  },
  "api/Zigurous.ColorPro.Hex.html": {
    "href": "api/Zigurous.ColorPro.Hex.html",
    "title": "Class Hex | Color Pro",
    "keywords": "Class Hex Functions for converting between hexadecimal and RGB color values. Inheritance System.Object Hex Namespace : Zigurous.ColorPro public static class Hex Methods ToARGBColor(Int32) Creates a color from a hexadecimal integer in the ARGB format (AARRGGBB), e.g., 0x80ffff00. public static Color ToARGBColor(int hex) Parameter Description hex The hexadecimal integer to convert. ToARGBColor(String) Creates a color from a hexadecimal string in the ARGB format (AARRGGBB), e.g., \"#80ffff00\". public static Color ToARGBColor(string hex) Parameter Description hex The hexadecimal string to convert. ToHex(Color) Converts the color to a hexadecimal integer in the RGB format (RRGGBB), e.g., 0xffff00. public static int ToHex(this Color color) Parameter Description color The color to convert. ToHexARGB(Color) Converts the color to a hexadecimal integer in the ARGB format (AARRGGBB), e.g., 0x80ffff00. public static int ToHexARGB(this Color color) Parameter Description color The color to convert. ToHexRGBA(Color) Converts the color to a hexadecimal integer in the RGBA format (RRGGBBAA), e.g., 0xffff0080. public static int ToHexRGBA(this Color color) Parameter Description color The color to convert. ToHexString(Color) Converts the color to a hexadecimal string in the RGB format (RRGGBB), e.g., \"#ffff00\". public static string ToHexString(this Color color) Parameter Description color The color to convert. ToHexStringARGB(Color) Converts the color to a hexadecimal string in the ARGB format (AARRGGBB), e.g., \"#80ffff00\". public static string ToHexStringARGB(this Color color) Parameter Description color The color to convert. ToHexStringRGBA(Color) Converts the color to a hexadecimal string in the RGBA format (RRGGBBAA), e.g., \"#ffff0080\". public static string ToHexStringRGBA(this Color color) Parameter Description color The color to convert. ToInt(String) Converts a hex string to a 32-bit integer in base 16. public static int ToInt(string hex) Parameter Description hex The hexadecimal string to convert. ToRGBAColor(Int32) Creates a color from a hexadecimal integer in the RGBA format (RRGGBBAA), e.g., 0xffff0080. public static Color ToRGBAColor(int hex) Parameter Description hex The hexadecimal integer to convert. ToRGBAColor(String) Creates a color from a hexadecimal string in the ARGB format (RRGGBBAA), e.g., \"#ffff0080\". public static Color ToRGBAColor(string hex) Parameter Description hex The hexadecimal string to convert. ToRGBColor(Int32, Single) Creates a color from a hexadecimal integer in the RGB format (RRGGBB), e.g., 0xffff00. public static Color ToRGBColor(int hex, float alpha = 1F) Parameter Description hex The hexadecimal integer to convert. alpha The alpha component of the new color. ToRGBColor(String, Single) Creates a color from a hexadecimal string in the RGB format (RRGGBB), e.g., \"#ffff00\". public static Color ToRGBColor(string hex, float alpha = 1F) Parameter Description hex The hexadecimal string to convert. alpha The alpha component of the new color."
  },
  "api/Zigurous.ColorPro.HSB.html": {
    "href": "api/Zigurous.ColorPro.HSB.html",
    "title": "Struct HSB | Color Pro",
    "keywords": "Struct HSB The HSB (hue, saturation, brightness) components of a color in the range [0..1]. Implements IEquatable < HSB > Namespace : Zigurous.ColorPro [Serializable] public struct HSB : IEquatable<HSB> Constructors HSB(Color) Creates new HSB components from the given color. public HSB(Color color) Parameter Description color The color to extract the components from. HSB(Single, Single, Single) Creates new HSB components from the given values. public HSB(float hue, float saturation, float brightness) Parameter Description hue The hue component of the color in the range [0..1]. saturation The saturation component of the color in the range [0..1]. brightness The brightness component of the color in the range [0..1]. Fields brightness The brightness component of the color in the range [0..1]. public float brightness hue The hue component of the color in the range [0..1]. public float hue saturation The saturation component of the color in the range [0..1]. public float saturation Methods Convert(Color, out Single, out Single, out Single) Converts a color to HSB (hue, saturation, brightness) components. public static void Convert(Color color, out float h, out float s, out float b) Parameter Description color The color to extract the components from. h The hue component output in the range [0..1]. s The saturation component output in the range [0..1]. b The brightness component output in the range [0..1]. Equals(Object) Determines if the components are equal to other . public override bool Equals(object other) Parameter Description other The other object to compare to. Overrides System.ValueType.Equals(System.Object) Equals(HSB) Determines if the components are equal to other . public bool Equals(HSB other) Parameter Description other The other components to compare to. GetHashCode() Returns the hash code of the components. public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components to a color. public Color ToColor() ToColor(Single, Single, Single) Converts HSB (hue, saturation, brightness) components to a color. public static Color ToColor(float h, float s, float b) Parameter Description h The hue component of the color in the range [0..1]. s The saturation component of the color in the range [0..1]. b The brightness component of the color in the range [0..1]. ToString() Converts the components to a string. public override string ToString() Overrides System.ValueType.ToString() Operators Equality(HSB, HSB) public static bool operator ==(HSB lhs, HSB rhs) Parameter Description lhs rhs Explicit(Color to HSB) public static explicit operator HSB(Color color) Parameter Description color Explicit(HSB to Color) public static explicit operator Color(HSB hsb) Parameter Description hsb Implicit(HSB to HSV) public static implicit operator HSV(HSB hsb) Parameter Description hsb Inequality(HSB, HSB) public static bool operator !=(HSB lhs, HSB rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorPro.HSI.html": {
    "href": "api/Zigurous.ColorPro.HSI.html",
    "title": "Struct HSI | Color Pro",
    "keywords": "Struct HSI The HSI (hue, saturation, intensity) components of a color in the range [0..1]. Implements IEquatable < HSI > Namespace : Zigurous.ColorPro [Serializable] public struct HSI : IEquatable<HSI> Constructors HSI(Color) Creates new HSI components from the given color. public HSI(Color color) Parameter Description color The color to extract the components from. HSI(Single, Single, Single) Creates new HSI components from the given values. public HSI(float hue, float saturation, float intensity) Parameter Description hue The hue component of the color in the range [0..1]. saturation The saturation component of the color in the range [0..1]. intensity The intensity component of the color in the range [0..1]. Fields hue The hue component of the color in the range [0..1]. public float hue intensity The intensity component of the color in the range [0..1]. public float intensity saturation The saturation component of the color in the range [0..1]. public float saturation Methods Convert(Color, out Single, out Single, out Single) Converts a color to HSI (hue, saturation, intensity) components. public static void Convert(Color color, out float h, out float s, out float i) Parameter Description color The color to extract the components from. h The hue component output in the range [0..1]. s The saturation component output in the range [0..1]. i The intensity component output in the range [0..1]. Equals(Object) Determines if the components are equal to other . public override bool Equals(object other) Parameter Description other The other object to compare to. Overrides System.ValueType.Equals(System.Object) Equals(HSI) Determines if the components are equal to other . public bool Equals(HSI other) Parameter Description other The other components to compare to. GetHashCode() Returns the hash code of the components. public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components to a color. public Color ToColor() ToColor(Single, Single, Single) Converts HSI (hue, saturation, intensity) components to a color. public static Color ToColor(float h, float s, float i) Parameter Description h The hue component of the color in the range [0..1]. s The saturation component of the color in the range [0..1]. i The intensity component of the color in the range [0..1]. ToString() Converts the components to a string. public override string ToString() Overrides System.ValueType.ToString() Operators Equality(HSI, HSI) public static bool operator ==(HSI lhs, HSI rhs) Parameter Description lhs rhs Explicit(Color to HSI) public static explicit operator HSI(Color color) Parameter Description color Explicit(HSI to Color) public static explicit operator Color(HSI hsi) Parameter Description hsi Inequality(HSI, HSI) public static bool operator !=(HSI lhs, HSI rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorPro.HSL.html": {
    "href": "api/Zigurous.ColorPro.HSL.html",
    "title": "Struct HSL | Color Pro",
    "keywords": "Struct HSL The HSL (hue, saturation, lightness) components of a color in the range [0..1]. Implements IEquatable < HSL > Namespace : Zigurous.ColorPro [Serializable] public struct HSL : IEquatable<HSL> Constructors HSL(Color) Creates new HSL components from the given color. public HSL(Color color) Parameter Description color The color to extract the components from. HSL(Single, Single, Single) Creates new HSL components from the given values. public HSL(float hue, float saturation, float lightness) Parameter Description hue The hue component of the color in the range [0..1]. saturation The saturation component of the color in the range [0..1]. lightness The lightness component of the color in the range [0..1]. Fields hue The hue component of the color in the range [0..1]. public float hue lightness The lightness component of the color in the range [0..1]. public float lightness saturation The saturation component of the color in the range [0..1]. public float saturation Methods Convert(Color, out Single, out Single, out Single) Converts a color to HSL (hue, saturation, lightness) components. public static void Convert(Color color, out float h, out float s, out float l) Parameter Description color The color to extract the components from. h The hue component output in the range [0..1]. s The saturation component output in the range [0..1]. l The lightness component output in the range [0..1]. Equals(Object) Determines if the components are equal to other . public override bool Equals(object other) Parameter Description other The other object to compare to. Overrides System.ValueType.Equals(System.Object) Equals(HSL) Determines if the components are equal to other . public bool Equals(HSL other) Parameter Description other The other components to compare to. GetHashCode() Returns the hash code of the components. public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components to a color. public Color ToColor() ToColor(Single, Single, Single) Converts HSL (hue, saturation, lightness) components to a color. public static Color ToColor(float h, float s, float l) Parameter Description h The hue component of the color in the range [0..1]. s The saturation component of the color in the range [0..1]. l The lightness component of the color in the range [0..1]. ToHSV() Converts the components to HSV (hue, saturation, value) components. public HSV ToHSV() ToHSV(Single, Single, Single) Converts HSL (hue, saturation, lightness) components to HSV (hue, saturation, value) components. public static HSV ToHSV(float h, float s, float l) Parameter Description h The hue component of the color in the range [0..1]. s The saturation component of the color in the range [0..1]. l The lightness component of the color in the range [0..1]. ToHSV(in Single, ref Single, in Single, out Single) Converts HSL (hue, saturation, lightness) components to HSV (hue, saturation, value) components. public static void ToHSV(in float h, ref float s, in float l, out float v) Parameter Description h The hue component of the color in the range [0..1]. s The saturation component of the color in the range [0..1]. l The lightness component of the color in the range [0..1]. v The value component of the color in the range [0..1]. ToString() Converts the components to a string. public override string ToString() Overrides System.ValueType.ToString() Operators Equality(HSL, HSL) public static bool operator ==(HSL lhs, HSL rhs) Parameter Description lhs rhs Explicit(Color to HSL) public static explicit operator HSL(Color color) Parameter Description color Explicit(HSL to Color) public static explicit operator Color(HSL hsl) Parameter Description hsl Explicit(HSL to HSV) public static explicit operator HSV(HSL hsl) Parameter Description hsl Inequality(HSL, HSL) public static bool operator !=(HSL lhs, HSL rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorPro.HSV.html": {
    "href": "api/Zigurous.ColorPro.HSV.html",
    "title": "Struct HSV | Color Pro",
    "keywords": "Struct HSV The HSV (hue, saturation, value) components of a color in the range [0..1]. Implements IEquatable < HSV > Namespace : Zigurous.ColorPro [Serializable] public struct HSV : IEquatable<HSV> Constructors HSV(Color) Creates new HSV components from the given color. public HSV(Color color) Parameter Description color The color to extract the components from. HSV(Single, Single, Single) Creates new HSV components from the given values. public HSV(float hue, float saturation, float value) Parameter Description hue The hue component of the color in the range [0..1]. saturation The saturation component of the color in the range [0..1]. value The value component of the color in the range [0..1]. Fields hue The hue component of the color in the range [0..1]. public float hue saturation The saturation component of the color in the range [0..1]. public float saturation value The value component of the color in the range [0..1]. public float value Methods Convert(Color, out Single, out Single, out Single) Converts a color to HSV (hue, saturation, value) components. public static void Convert(Color color, out float h, out float s, out float v) Parameter Description color The color to extract the components from. h The hue component output in the range [0..1]. s The saturation component output in the range [0..1]. v The value component output in the range [0..1]. Equals(Object) Determines if the components are equal to other . public override bool Equals(object other) Parameter Description other The other object to compare to. Overrides System.ValueType.Equals(System.Object) Equals(HSV) Determines if the components are equal to other . public bool Equals(HSV other) Parameter Description other The other components to compare to. GetHashCode() Returns the hash code of the components. public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components to a color. public Color ToColor() ToColor(Single, Single, Single) Converts HSV (hue, saturation, value) components to a color. public static Color ToColor(float h, float s, float v) Parameter Description h The hue component of the color in the range [0..1]. s The saturation component of the color in the range [0..1]. v The value component of the color in the range [0..1]. ToString() Converts the components to a string. public override string ToString() Overrides System.ValueType.ToString() Operators Equality(HSV, HSV) public static bool operator ==(HSV lhs, HSV rhs) Parameter Description lhs rhs Explicit(Color to HSV) public static explicit operator HSV(Color color) Parameter Description color Explicit(HSV to Color) public static explicit operator Color(HSV hsv) Parameter Description hsv Implicit(HSV to HSB) public static implicit operator HSB(HSV hsv) Parameter Description hsv Inequality(HSV, HSV) public static bool operator !=(HSV lhs, HSV rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorPro.html": {
    "href": "api/Zigurous.ColorPro.html",
    "title": "Namespace Zigurous.ColorPro | Color Pro",
    "keywords": "Namespace Zigurous.ColorPro Classes Accessibility Functions for testing color accessibility requirements. Adjustment Functions for adjusting color values, e.g., hue, saturation, lightness, etc. Arithmetic Functions for adding, subtracting, multiplying, and dividing colors. Averaging Functions for averaging colors together. ChannelMixer Multiplies the RGB channels of a color by a matrix. ColorBlindness Functions for simulating types of color blindness. ColorPalette Represents a palette of colors that can be saved as a Unity asset. Components Functions for getting and setting color component values. Contrast Functions for calculating contrast between colors. Conversion Functions for converting between color spaces and models. Equality Functions for testing the equality of colors. Gradients Functions for creating and working with color gradients. Harmonies Functions for generating color harmonies. Hex Functions for converting between hexadecimal and RGB color values. IlluminantExtensions Extensions methods for Illuminant . Luminance Functions for calculating color luminance. MaterialPalette Represents a palette of materials that can be saved as a Unity asset. Mixing Functions for mixing colors together, including tints, shades, and tones. MixingModelExtensions Extensions methods for MixingModel . Random Functions for generating random colors. SignalEncodingExtensions Extension methods for SignalEncoding Temperature Functions for calculating and testing color temperature. Structs ARGB The ARGB (alpha, red, green, blue) components of a color in the range [0..1]. ARGB255 The ARGB (alpha, red, green, blue) components of a color in the range [0..255]. CIELAB The CIE LAB components of a color - lightness (L) and chromaticity (a,b). CIELCh_ab The CIE LCh(ab) components of a color - lightness (L), chroma (C), and hue (h). CIELCh_uv The CIE LCh(uv) components of a color - lightness (L), chroma (C), and hue (h). CIELUV The CIE LUV components of a color - lightness (L) and chromaticity (u,v). CIEUCS The CIE UCS components of a color - (u,v) chromaticity coordinates. CIEUVW The CIE UVW components of a color - chromaticity (U,V) and lightness (W). CIExyY The CIE xyY components of a color - chromaticity (x,y) and luminance (Y). CIEXYZ The CIE XYZ components of a color - chromaticity (X,Z) and luminance (Y). CMYK The CMYK (cyan, magenta, yellow, black) components of a color in the range [0..1]. HSB The HSB (hue, saturation, brightness) components of a color in the range [0..1]. HSI The HSI (hue, saturation, intensity) components of a color in the range [0..1]. HSL The HSL (hue, saturation, lightness) components of a color in the range [0..1]. HSV The HSV (hue, saturation, value) components of a color in the range [0..1]. HunterLab The Hunter Lab components of a color - lightness (L) and chromaticity (a,b). LMS The LMS (long, medium, short) components of a color. LumaCoefficients A tuple of luma coefficients that are used to calculate the luma of a color under different signal encodings. RGB The RGB (red, green, blue) components of a color in the range [0..1]. RGB255 The RGB (red, green, blue) components of a color in the range [0..255]. RGBA The RGBA (red, green, blue, alpha) components of a color in the range [0..1]. RGBA255 The RGBA (red, green, blue, alpha) components of a color in the range [0..255]. Tristimulus Tristimulus system, a system for visually matching a color under standardized conditions against the three primary colors â red, green, and blue; the three results are expressed as X, Y, and Z, respectively, and are called tristimulus values. YCbCr The Yâ²CbCr components of a color - luma (Yâ²) and chroma (Cb,Cr). YIQ The Yâ²IQ components of a color - luma (Yâ²) and chroma (I,Q). YPbPr The Yâ²PbPr components of a color - luma (Yâ²) and chroma (Pb,Pr). YUV The Yâ²UV components of a color - luma (Yâ²) and chroma (U,V). Enums Accessibility.Requirement A requirement defining how the visual presentation of text achieves a minimum contrast ratio to pass the accessibility specification - https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast ColorModel A color model is an abstract mathematical model describing the ways colors can be represented as tuples of numbers, typically as three or four values or color components. ColorSpace A color space is a specific organization of colors. In combination with physical device profiling, it allows for reproducible representations of color, in both analog and digital representations. Adding a specific mapping function between a color model and a reference color space establishes a definite \"footprint\", known as a gamut, and for a given color model this defines a color space. ColorVision A type of color vision. ColorWheelDivision A representation of the division of colors on the color wheel. Illuminant A standard illuminant defined by the International Commission on Illumination (CIE) which provides a basis for comparing images or colors recorded under different lighting. MixingModel A model that describes how colors are mixed together to form all other colors. SignalEncoding A standard ITU-R Recommendation signal encoding. ITU-R Recommendations are the names given to the set of international technical standards developed by the Radiocommunication Sector of the International Telecommunication Union (ITU). StandardObserver A CIE color-mapping function called the standard observer which represents an average human's chromatic response while observing an object under an illuminant."
  },
  "api/Zigurous.ColorPro.HunterLab.html": {
    "href": "api/Zigurous.ColorPro.HunterLab.html",
    "title": "Struct HunterLab | Color Pro",
    "keywords": "Struct HunterLab The Hunter Lab components of a color - lightness (L) and chromaticity (a,b). Implements IEquatable < HunterLab > Namespace : Zigurous.ColorPro [Serializable] public struct HunterLab : IEquatable<HunterLab> Constructors HunterLab(Color) Creates new Hunter Lab components from the given color. public HunterLab(Color color) Parameter Description color The color to extract the components from. HunterLab(Color, Illuminant, StandardObserver) Creates new Hunter Lab components from the given color, illuminant, and standard observer. public HunterLab(Color color, Illuminant illuminant, StandardObserver observer) Parameter Description color The color to extract the components from. illuminant The illuminant to use. observer The standard observer to use. HunterLab(Color, Tristimulus) Creates new Hunter Lab components from the given color and white point. public HunterLab(Color color, Tristimulus whitePoint) Parameter Description color The color to extract the components from. whitePoint The white point to use. HunterLab(Single, Single, Single) Creates new Hunter Lab components from the given values. public HunterLab(float L, float a, float b) Parameter Description L The lightness component of the color in the range [0..100]. a The green-red chromaticity component of the color. b The blue-yellow chromaticity component of the color. Fields a The green-red chromaticity component of the color. public float a b The blue-yellow chromaticity component of the color. public float b L The lightness component of the color in the range [0..100]. public float L Methods Convert(Color, out Single, out Single, out Single) Converts a color to Hunter Lab components. public static void Convert(Color color, out float L, out float a, out float b) Parameter Description color The color to extract the components from. L The lightness component output in the range [0..100]. a The green-red chromaticity component output. b The blue-yellow chromaticity component output. Convert(Color, Illuminant, StandardObserver, out Single, out Single, out Single) Converts a color to Hunter Lab components using the given illuminant and standard observer. public static void Convert(Color color, Illuminant illuminant, StandardObserver observer, out float L, out float a, out float b) Parameter Description color The color to extract the components from. illuminant The illuminant to use. observer The standard observer to use. L The lightness component output in the range [0..100]. a The green-red chromaticity component output. b The blue-yellow chromaticity component output. Convert(Color, Tristimulus, out Single, out Single, out Single) Converts a color to Hunter Lab components using the given white point. public static void Convert(Color color, Tristimulus whitePoint, out float L, out float a, out float b) Parameter Description color The color to extract the components from. whitePoint The white point to use. L The lightness component output in the range [0..100]. a The green-red chromaticity component output. b The blue-yellow chromaticity component output. Equals(Object) Determines if the components are equal to other . public override bool Equals(object other) Parameter Description other The other object to compare to. Overrides System.ValueType.Equals(System.Object) Equals(HunterLab) Determines if the components are equal to other . public bool Equals(HunterLab other) Parameter Description other The other components to compare to. GetHashCode() Returns the hash code of the components. public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components to a color. public Color ToColor() ToColor(Single, Single, Single) Converts Hunter Lab components to a color. public static Color ToColor(float L, float a, float b) Parameter Description L The lightness component of the color in the range [0..100]. a The green-red chromaticity component of the color. b The blue-yellow chromaticity component of the color. ToColor(Illuminant, StandardObserver) Converts the components to a color using the given illuminant and standard observer. public Color ToColor(Illuminant illuminant, StandardObserver observer) Parameter Description illuminant The illuminant to use. observer The standard observer to use. ToColor(Illuminant, StandardObserver, Single, Single, Single) Converts Hunter Lab components to a color using the given illuminant and standard observer. public static Color ToColor(Illuminant illuminant, StandardObserver observer, float L, float a, float b) Parameter Description illuminant The illuminant to use. observer The standard observer to use. L The lightness component of the color in the range [0..100]. a The green-red chromaticity component of the color. b The blue-yellow chromaticity component of the color. ToColor(Tristimulus) Converts the components to a color using the given white point. public Color ToColor(Tristimulus whitePoint) Parameter Description whitePoint The white point to use. ToColor(Tristimulus, Single, Single, Single) Converts Hunter Lab components to a color using the given white point. public static Color ToColor(Tristimulus whitePoint, float L, float a, float b) Parameter Description whitePoint The white point to use. L The lightness component of the color in the range [0..100]. a The green-red chromaticity component of the color. b The blue-yellow chromaticity component of the color. ToString() Converts the components to a string. public override string ToString() Overrides System.ValueType.ToString() Operators Equality(HunterLab, HunterLab) public static bool operator ==(HunterLab lhs, HunterLab rhs) Parameter Description lhs rhs Explicit(Color to HunterLab) public static explicit operator HunterLab(Color color) Parameter Description color Explicit(HunterLab to Color) public static explicit operator Color(HunterLab components) Parameter Description components Inequality(HunterLab, HunterLab) public static bool operator !=(HunterLab lhs, HunterLab rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorPro.Illuminant.html": {
    "href": "api/Zigurous.ColorPro.Illuminant.html",
    "title": "Enum Illuminant | Color Pro",
    "keywords": "Enum Illuminant A standard illuminant defined by the International Commission on Illumination (CIE) which provides a basis for comparing images or colors recorded under different lighting. Namespace : Zigurous.ColorPro public enum Illuminant Fields Name Description a Incandescent/Tungsten b Old Direct Sunlight at Noon c Old Daylight d50 ICC Profile PCS d55 Mid-morning Daylight d65 Daylight, sRGB, Adobe-RGB d75 North Sky Daylight e Equal Energy f1 Daylight Fluorescent f10 Ultralume 50, Philips TL85 f11 Ultralume 40, Philips TL84 f12 Ultralume 30, Philips TL83 f2 Cool Fluorescent f3 White Fluorescent f4 Warm White Fluorescent f5 Daylight Fluorescent f6 Lite White Fluorescent f7 Daylight Fluorescent, D65 Simulator f8 Sylvania F40, D50 Simulator f9 Cool White Fluorescent"
  },
  "api/Zigurous.ColorPro.IlluminantExtensions.html": {
    "href": "api/Zigurous.ColorPro.IlluminantExtensions.html",
    "title": "Class IlluminantExtensions | Color Pro",
    "keywords": "Class IlluminantExtensions Extensions methods for Illuminant . Inheritance System.Object IlluminantExtensions Namespace : Zigurous.ColorPro public static class IlluminantExtensions Methods GetWhitePoint(Illuminant, StandardObserver, Single) Returns the white point tristimulus values of the illuminant while observed under a given standard observer. Values are usually scaled between 0 and 100. public static Tristimulus GetWhitePoint(this Illuminant illuminant, StandardObserver observer = StandardObserver.Two, float scale = 100F) Parameter Description illuminant The illuminant to get the white point of. observer The standard observer to use. scale The scale to use for the output values."
  },
  "api/Zigurous.ColorPro.LMS.html": {
    "href": "api/Zigurous.ColorPro.LMS.html",
    "title": "Struct LMS | Color Pro",
    "keywords": "Struct LMS The LMS (long, medium, short) components of a color. Implements IEquatable < LMS > Namespace : Zigurous.ColorPro [Serializable] public struct LMS : IEquatable<LMS> Constructors LMS(Color) Creates new LMS components from the given color. public LMS(Color color) Parameter Description color The color to extract the components from. LMS(Single, Single, Single) Creates new LMS components from the given values. public LMS(float L, float M, float S) Parameter Description L The long cone cell of the human eye. M The medium cone cell of the human eye. S The short cone cell of the human eye. Fields L The long cone cell of the human eye. public float L M The medium cone cell of the human eye. public float M S The short cone cell of the human eye. public float S Methods Convert(Color, out Single, out Single, out Single) Converts a color to LMS components. public static void Convert(Color color, out float L, out float M, out float S) Parameter Description color The color to extract the components from. L The L component output. M The M component output. S The S component output. Equals(Object) Determines if the components are equal to other . public override bool Equals(object other) Parameter Description other The other object to compare to. Overrides System.ValueType.Equals(System.Object) Equals(LMS) Determines if the components are equal to other . public bool Equals(LMS other) Parameter Description other The other components to compare to. GetHashCode() Returns the hash code of the components. public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components to a color. public Color ToColor() ToColor(Single, Single, Single) Converts LMS components to a color. public static Color ToColor(float L, float M, float S) Parameter Description L The L component of the color. M The M component of the color. S The S component of the color. ToString() Converts the components to a string. public override string ToString() Overrides System.ValueType.ToString() Operators Equality(LMS, LMS) public static bool operator ==(LMS lhs, LMS rhs) Parameter Description lhs rhs Explicit(Color to LMS) public static explicit operator LMS(Color color) Parameter Description color Explicit(LMS to Color) public static explicit operator Color(LMS components) Parameter Description components Inequality(LMS, LMS) public static bool operator !=(LMS lhs, LMS rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorPro.LumaCoefficients.html": {
    "href": "api/Zigurous.ColorPro.LumaCoefficients.html",
    "title": "Struct LumaCoefficients | Color Pro",
    "keywords": "Struct LumaCoefficients A tuple of luma coefficients that are used to calculate the luma of a color under different signal encodings. Implements IEquatable < LumaCoefficients > Namespace : Zigurous.ColorPro [Serializable] public struct LumaCoefficients : IEquatable<LumaCoefficients> Constructors LumaCoefficients(Single, Single, Single) Creates new luma coefficients with the given values. public LumaCoefficients(float r, float g, float b) Parameter Description r The luma coefficient for the red channel. g The luma coefficient for the green channel. b The luma coefficient for the blue channel. Fields b The luma coefficient for the blue channel. public float b g The luma coefficient for the green channel. public float g r The luma coefficient for the red channel. public float r Properties Item[Int32] Gets or sets the coefficient at the given index . public float this[int index] { get; set; } Parameter Description index The index of the coefficient to get or set. Methods Equals(Object) Determines if the luma coefficients are equal to other . public override bool Equals(object other) Parameter Description other The object to compare to. Overrides System.ValueType.Equals(System.Object) Equals(LumaCoefficients) Determines if the luma coefficients are equal to other . public bool Equals(LumaCoefficients other) Parameter Description other The other luma coefficients to compare to. GetHashCode() Returns the hash code of the luma coefficients. public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToString() Converts the luma coefficients to a string. public override string ToString() Overrides System.ValueType.ToString() Operators Equality(LumaCoefficients, LumaCoefficients) public static bool operator ==(LumaCoefficients lhs, LumaCoefficients rhs) Parameter Description lhs rhs Inequality(LumaCoefficients, LumaCoefficients) public static bool operator !=(LumaCoefficients lhs, LumaCoefficients rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorPro.Luminance.html": {
    "href": "api/Zigurous.ColorPro.Luminance.html",
    "title": "Class Luminance | Color Pro",
    "keywords": "Class Luminance Functions for calculating color luminance. Inheritance System.Object Luminance Namespace : Zigurous.ColorPro public static class Luminance Methods IsDark(Color) Determines if the color is perceived darker than it is lighter. public static bool IsDark(this Color color) Parameter Description color The color to test. IsLight(Color) Determines if the color is perceived lighter than it is darker. public static bool IsLight(this Color color) Parameter Description color The color to test. PerceivedBrightness(Color, SignalEncoding) Calculates the perceived brightness of the color, measured according to the HSP color model - http://alienryderflex.com/hsp.html . public static float PerceivedBrightness(this Color color, SignalEncoding encoding = SignalEncoding.Rec601) Parameter Description color The color to calculate the brightness of. encoding The signal encoding to use when calculating the brightness (default=Rec601). RelativeLuminance(Color, SignalEncoding) Calculates the relative luminance of the color, measured according to the HSL color model. public static float RelativeLuminance(this Color color, SignalEncoding encoding = SignalEncoding.Rec709) Parameter Description color The color to calculate the luminance of. encoding The signal encoding to use when calculating the luminance (default=Rec709)."
  },
  "api/Zigurous.ColorPro.MaterialPalette.html": {
    "href": "api/Zigurous.ColorPro.MaterialPalette.html",
    "title": "Class MaterialPalette | Color Pro",
    "keywords": "Class MaterialPalette Represents a palette of materials that can be saved as a Unity asset. Inheritance System.Object MaterialPalette Namespace : Zigurous.ColorPro public sealed class MaterialPalette : ScriptableObject Fields materials The materials that define the palette. public Material[] materials Properties Item[Int32] Gets or sets the material at the specified index. public Material this[int index] { get; set; } Parameter Description index The index of the material to get or set. Methods Add(Material) Adds a new material to the palette. public void Add(Material material) Parameter Description material The material to add. Convert() Converts the material palette to a color palette using each material's main color. public ColorPalette Convert() Returns Description ColorPalette A new color palette. Random() Returns a random material from the palette. public Material Random()"
  },
  "api/Zigurous.ColorPro.Mixing.html": {
    "href": "api/Zigurous.ColorPro.Mixing.html",
    "title": "Class Mixing | Color Pro",
    "keywords": "Class Mixing Functions for mixing colors together, including tints, shades, and tones. Inheritance System.Object Mixing Namespace : Zigurous.ColorPro public static class Mixing Methods Mix(Color, Color, Single, Boolean) Returns the result of mixing the current color with another color using a given weight between [0..1]. A weight of 0 results in the first color, and a weight of 1 results in the second color. public static Color Mix(this Color color, Color other, float weight = 0.5F, bool mixAlpha = true) Parameter Description color The first color to mix. other The second color to mix. weight The weight of the second color to mix with the first. mixAlpha True to mix the alpha components, otherwise the first color's alpha is used. Shade(Color, Single) Returns a shade of the color by mixing it with a percentage of black. public static Color Shade(this Color baseColor, float percentage = 0.1F) Parameter Description baseColor The color to shade. percentage The percentage of black to mix with. Shades(Color, Int32) Generates a given amount of shades from the base color. public static Color[] Shades(this Color baseColor, int amount) Parameter Description baseColor The base color to generate new colors from. amount The amount of shades to generate. ShadesNonAlloc(Color, Color[]) Fills an existing array with shades of the base color to prevent heap allocations. The amount of colors generated is determined by the size of the array. public static void ShadesNonAlloc(this Color baseColor, Color[] output) Parameter Description baseColor The base color to generate new colors from. output The array to store the generated colors in. Tint(Color, Single) Returns a tint of the color by mixing it with a percentage of white. public static Color Tint(this Color baseColor, float percentage = 0.1F) Parameter Description baseColor The color to tint. percentage The percentage of white to mix with. Tints(Color, Int32) Generates a given amount of tints from the base color. public static Color[] Tints(this Color baseColor, int amount) Parameter Description baseColor The base color to generate new colors from. amount The amount of tints to generate. TintsNonAlloc(Color, Color[]) Fills an existing array with tints of the base color to prevent heap allocations. The amount of colors generated is determined by the size of the array. public static void TintsNonAlloc(this Color baseColor, Color[] output) Parameter Description baseColor The base color to generate new colors from. output The array to store the generated colors in. Tone(Color, Single) Returns a tone of the color by mixing it with a percentage of gray. public static Color Tone(this Color baseColor, float percentage = 0.1F) Parameter Description baseColor The color to tone. percentage The percentage of gray to mix with. Tones(Color, Int32) Generates a given amount of tones from the base color. public static Color[] Tones(this Color baseColor, int amount) Parameter Description baseColor The base color to generate new colors from. amount The amount of tones to generate. TonesNonAlloc(Color, Color[]) Fills an existing array with tones of the base color to prevent heap allocations. The amount of colors generated is determined by the size of the array. public static void TonesNonAlloc(this Color baseColor, Color[] output) Parameter Description baseColor The base color to generate new colors from. output The array to store the generated colors in."
  },
  "api/Zigurous.ColorPro.MixingModel.html": {
    "href": "api/Zigurous.ColorPro.MixingModel.html",
    "title": "Enum MixingModel | Color Pro",
    "keywords": "Enum MixingModel A model that describes how colors are mixed together to form all other colors. Namespace : Zigurous.ColorPro public enum MixingModel Fields Name Description Additive A mixing model that leads to the RGB color model with primary colors of red, green, and blue. The absence of color is black, and the presence of all three primary colors is white. Colors are added together to form white. Additive color mixing simulates light. Subtractive A mixing model that leads to the CMYK color model with primary colors of cyan, magenta, and yellow. The absence of color is white, and the presence of all three primary colors is black. Colors are subtracted to form black. Subtractive color mixing simulates print. Traditional A mixing model that leads to the RYB color model with primary colors of red, yellow, and blue. The absence of color is white, and the presence of all three primary colors is black. Traditional color mixing simulates paint."
  },
  "api/Zigurous.ColorPro.MixingModelExtensions.html": {
    "href": "api/Zigurous.ColorPro.MixingModelExtensions.html",
    "title": "Class MixingModelExtensions | Color Pro",
    "keywords": "Class MixingModelExtensions Extensions methods for MixingModel . Inheritance System.Object MixingModelExtensions Namespace : Zigurous.ColorPro public static class MixingModelExtensions Methods ColorWheel(MixingModel) Returns the primary, secondary, and tertiary colors of the mixing model. public static Color[] ColorWheel(this MixingModel model) Parameter Description model The mixing model to get the colors of. ColorWheelNonAlloc(MixingModel, Color[]) Fills an existing array with the primary, secondary, and tertiary colors of the mixing model to prevent heap allocations. The output array requires a size of at least 12. public static void ColorWheelNonAlloc(this MixingModel model, Color[] output) Parameter Description model The mixing model to get the colors of. output The array to populate with the colors. PrimaryColors(MixingModel) Returns the primary colors of the mixing model. public static Color[] PrimaryColors(this MixingModel model) Parameter Description model The mixing model to get the colors of. PrimaryColorsNonAlloc(MixingModel, Color[]) Fills an existing array with the primary colors of the mixing model to prevent heap allocations. The output array requires a size of at least 3. public static void PrimaryColorsNonAlloc(this MixingModel model, Color[] output) Parameter Description model The mixing model to get the colors of. output The array to populate with the colors. SecondaryColors(MixingModel) Returns the secondary colors of the mixing model. public static Color[] SecondaryColors(this MixingModel model) Parameter Description model The mixing model to get the colors of. SecondaryColorsNonAlloc(MixingModel, Color[]) Fills an existing array with the secondary colors of the mixing model to prevent heap allocations. The output array requires a size of at least 3. public static void SecondaryColorsNonAlloc(this MixingModel model, Color[] output) Parameter Description model The mixing model to get the colors of. output The array to populate with the colors. TertiaryColors(MixingModel) Returns the tertiary colors of the mixing model. public static Color[] TertiaryColors(this MixingModel model) Parameter Description model The mixing model to get the colors of. TertiaryColorsNonAlloc(MixingModel, Color[]) Fills an existing array with the tertiary colors of the mixing model to prevent heap allocations. The output array requires a size of at least 6. public static void TertiaryColorsNonAlloc(this MixingModel model, Color[] output) Parameter Description model The mixing model to get the colors of. output The array to populate with the colors."
  },
  "api/Zigurous.ColorPro.Random.html": {
    "href": "api/Zigurous.ColorPro.Random.html",
    "title": "Class Random | Color Pro",
    "keywords": "Class Random Functions for generating random colors. Inheritance System.Object Random Namespace : Zigurous.ColorPro public static class Random Methods Color(Boolean) Returns a random color. public static Color Color(bool randomizeAlpha = false) Parameter Description randomizeAlpha Randomizes the alpha value as well, otherwise uses a value of 1. Colors(Int32, Boolean) Returns a random array of colors. public static Color[] Colors(int amount, bool randomizeAlpha = false) Parameter Description amount The number of colors to return. randomizeAlpha Randomizes the alpha values as well, otherwise uses a value of 1. ColorsNonAlloc(Color[], Boolean) Fills an existing array with random colors to prevent heap allocations. The amount of colors generated is determined by the size of the array. public static void ColorsNonAlloc(Color[] output, bool randomizeAlpha = false) Parameter Description output The array to populate with random colors. randomizeAlpha Randomizes the alpha values as well, otherwise uses a value of 1. RandomDarker(Color, Int32, Single, Single) Generates a given amount of random darker colors from the base color. The amount of change in darkness can be constrained between a minimum and maximum range if desired. public static Color[] RandomDarker(this Color baseColor, int amount, float min = 0F, float max = 1F) Parameter Description baseColor The base color to generate new colors from. amount The amount of random colors to generate. min The minimum amount of change in darkness. max The maximum amount of change in darkness. RandomDarkerNonAlloc(Color, Color[], Single, Single) Fills an existing array with random darker colors of the base color to prevent heap allocations. The amount of colors generated is determined by the size of the array. public static void RandomDarkerNonAlloc(this Color baseColor, Color[] output, float min = 0F, float max = 1F) Parameter Description baseColor The base color to generate new colors from. output The array to populate with random colors. min The minimum amount of change in the tones. max The maximum amount of change in the tones. RandomDesaturated(Color, Int32, Single, Single) Generates a given amount of random desaturated colors from the base color. The amount of change in desaturation can be constrained between a minimum and maximum range if desired. public static Color[] RandomDesaturated(this Color baseColor, int amount, float min = 0F, float max = 1F) Parameter Description baseColor The base color to generate new colors from. amount The amount of random colors to generate. min The minimum amount of change in desaturation. max The maximum amount of change in desaturation. RandomDesaturatedNonAlloc(Color, Color[], Single, Single) Fills an existing array with random desaturated colors of the base color to prevent heap allocations. The amount of colors generated is determined by the size of the array. public static void RandomDesaturatedNonAlloc(this Color baseColor, Color[] output, float min = 0F, float max = 1F) Parameter Description baseColor The base color to generate new colors from. output The array to populate with random colors. min The minimum amount of change in the tones. max The maximum amount of change in the tones. RandomHues(Color, Int32, Single, Single) Generates a given amount of random hues of the base color. public static Color[] RandomHues(this Color baseColor, int amount, float min = 0F, float max = 360F) Parameter Description baseColor The base color to generate new colors from. amount The amount of random hues to generate. min The minimum hue value (default=0). max The maximum hue value (default=360). RandomHuesNonAlloc(Color, Color[], Single, Single) Fills an existing array with random hues of the base color to prevent heap allocations. The amount of colors generated is determined by the size of the array. public static void RandomHuesNonAlloc(this Color baseColor, Color[] output, float min = 0F, float max = 360F) Parameter Description baseColor The base color to generate new colors from. output The array to populate with random colors. min The minimum hue value (default=0). max The maximum hue value (default=360). RandomLighter(Color, Int32, Single, Single) Generates a given amount of random lighter colors from the base color. The amount of change in lightness can be constrained between a minimum and maximum range if desired. public static Color[] RandomLighter(this Color baseColor, int amount, float min = 0F, float max = 1F) Parameter Description baseColor The base color to generate new colors from. amount The amount of random colors to generate. min The minimum amount of change in lightness. max The maximum amount of change in lightness. RandomLighterNonAlloc(Color, Color[], Single, Single) Fills an existing array with random lighter colors of the base color to prevent heap allocations. The amount of colors generated is determined by the size of the array. public static void RandomLighterNonAlloc(this Color baseColor, Color[] output, float min = 0F, float max = 1F) Parameter Description baseColor The base color to generate new colors from. output The array to populate with random colors. min The minimum amount of change in the tones. max The maximum amount of change in the tones. RandomSaturated(Color, Int32, Single, Single) Generates a given amount of random saturated colors from the base color. The amount of change in saturation can be constrained between a minimum and maximum range if desired. public static Color[] RandomSaturated(this Color baseColor, int amount, float min = 0F, float max = 1F) Parameter Description baseColor The base color to generate new colors from. amount The amount of random colors to generate. min The minimum amount of change in saturation. max The maximum amount of change in saturation. RandomSaturatedNonAlloc(Color, Color[], Single, Single) Fills an existing array with random saturated colors of the base color to prevent heap allocations. The amount of colors generated is determined by the size of the array. public static void RandomSaturatedNonAlloc(this Color baseColor, Color[] output, float min = 0F, float max = 1F) Parameter Description baseColor The base color to generate new colors from. output The array to populate with random colors. min The minimum amount of change in the tones. max The maximum amount of change in the tones. RandomShades(Color, Int32, Single, Single) Generates a given amount of random shades from the base color. The amount of change in the shades can be constrained between a minimum and maximum range if desired. public static Color[] RandomShades(this Color baseColor, int amount, float min = 0F, float max = 1F) Parameter Description baseColor The base color to generate new colors from. amount The amount of random shades to generate. min The minimum amount of change in the shades. max The maximum amount of change in the shades. RandomShadesNonAlloc(Color, Color[], Single, Single) Fills an existing array with random shades of the base color to prevent heap allocations. The amount of colors generated is determined by the size of the array. public static void RandomShadesNonAlloc(this Color baseColor, Color[] output, float min = 0F, float max = 1F) Parameter Description baseColor The base color to generate new colors from. output The array to populate with random colors. min The minimum amount of change in the shades. max The maximum amount of change in the shades. RandomTints(Color, Int32, Single, Single) Generates a given amount of random tints from the base color. The amount of change in the tints can be constrained between a minimum and maximum range if desired. public static Color[] RandomTints(this Color baseColor, int amount, float min = 0F, float max = 1F) Parameter Description baseColor The base color to generate new colors from. amount The amount of random tints to generate. min The minimum amount of change in the tints. max The maximum amount of change in the tints. RandomTintsNonAlloc(Color, Color[], Single, Single) Fills an existing array with random tints of the base color to prevent heap allocations. The amount of colors generated is determined by the size of the array. public static void RandomTintsNonAlloc(this Color baseColor, Color[] output, float min = 0F, float max = 1F) Parameter Description baseColor The base color to generate new colors from. output The array to populate with random colors. min The minimum amount of change in the tints. max The maximum amount of change in the tints. RandomTones(Color, Int32, Single, Single) Generates a given amount of random tones from the base color. The amount of change in the tones can be constrained between a minimum and maximum range if desired. public static Color[] RandomTones(this Color baseColor, int amount, float min = 0F, float max = 1F) Parameter Description baseColor The base color to generate new colors from. amount The amount of random tones to generate. min The minimum amount of change in the tones. max The maximum amount of change in the tones. RandomTonesNonAlloc(Color, Color[], Single, Single) Fills an existing array with random tones of the base color to prevent heap allocations. The amount of colors generated is determined by the size of the array. public static void RandomTonesNonAlloc(this Color baseColor, Color[] output, float min = 0F, float max = 1F) Parameter Description baseColor The base color to generate new colors from. output The array to populate with random colors. min The minimum amount of change in the tones. max The maximum amount of change in the tones."
  },
  "api/Zigurous.ColorPro.RGB.html": {
    "href": "api/Zigurous.ColorPro.RGB.html",
    "title": "Struct RGB | Color Pro",
    "keywords": "Struct RGB The RGB (red, green, blue) components of a color in the range [0..1]. Implements IEquatable < RGB > Namespace : Zigurous.ColorPro [Serializable] public struct RGB : IEquatable<RGB> Constructors RGB(Color) Creates new RGB components from the given color. public RGB(Color color) Parameter Description color The color to extract the components from. RGB(Single, Single, Single) Creates new RGB components from the given values. public RGB(float red, float green, float blue) Parameter Description red The red component of the color in the range [0..1]. green The green component of the color in the range [0..1]. blue The blue component of the color in the range [0..1]. Fields blue The blue component of the color in the range [0..1]. public float blue green The green component of the color in the range [0..1]. public float green red The red component of the color in the range [0..1]. public float red Methods Convert(Color, out Single, out Single, out Single) Converts a color to RGB (red, green, blue) components. public static void Convert(Color color, out float r, out float g, out float b) Parameter Description color The color to extract the components from. r The red component output in the range [0..1]. g The green component output in the range [0..1]. b The blue component output in the range [0..1]. Equals(Object) Determines if the components are equal to other . public override bool Equals(object other) Parameter Description other The other object to compare to. Overrides System.ValueType.Equals(System.Object) Equals(RGB) Determines if the components are equal to other . public bool Equals(RGB other) Parameter Description other The other components to compare to. GetHashCode() Returns the hash code of the components. public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components to a color. public Color ToColor() ToColor(Single, Single, Single) Converts RGB (red, green, blue) components to a color. public static Color ToColor(float r, float g, float b) Parameter Description r The red component of the color in the range [0..1]. g The green component of the color in the range [0..1]. b The blue component of the color in the range [0..1]. ToString() Converts the components to a string. public override string ToString() Overrides System.ValueType.ToString() Operators Equality(RGB, RGB) public static bool operator ==(RGB lhs, RGB rhs) Parameter Description lhs rhs Explicit(Color to RGB) public static explicit operator RGB(Color color) Parameter Description color Explicit(RGB to Color) public static explicit operator Color(RGB rgb) Parameter Description rgb Implicit(RGB to ARGB) public static implicit operator ARGB(RGB rgb) Parameter Description rgb Implicit(RGB to RGBA) public static implicit operator RGBA(RGB rgb) Parameter Description rgb Inequality(RGB, RGB) public static bool operator !=(RGB lhs, RGB rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorPro.RGB255.html": {
    "href": "api/Zigurous.ColorPro.RGB255.html",
    "title": "Struct RGB255 | Color Pro",
    "keywords": "Struct RGB255 The RGB (red, green, blue) components of a color in the range [0..255]. Implements IEquatable < RGB255 > Namespace : Zigurous.ColorPro [Serializable] public struct RGB255 : IEquatable<RGB255> Constructors RGB255(Color) Creates new RGB255 components from the given color. public RGB255(Color color) Parameter Description color The color to extract the components from. RGB255(Int32, Int32, Int32) Creates new RGB255 components from the given values. public RGB255(int red, int green, int blue) Parameter Description red The red component of the color in the range [0..255]. green The green component of the color in the range [0..255]. blue The blue component of the color in the range [0..255]. Fields blue The blue component of the color in the range [0..255]. public int blue green The green component of the color in the range [0..255]. public int green red The red component of the color in the range [0..255]. public int red Methods Convert(Color, out Int32, out Int32, out Int32) Converts a color to RGB (red, green, blue) components. public static void Convert(Color color, out int r, out int g, out int b) Parameter Description color The color to extract the components from. r The red component output in the range [0..255]. g The green component output in the range [0..255]. b The blue component output in the range [0..255]. Equals(Object) Determines if the components are equal to other . public override bool Equals(object other) Parameter Description other The other object to compare to. Overrides System.ValueType.Equals(System.Object) Equals(RGB255) Determines if the components are equal to other . public bool Equals(RGB255 other) Parameter Description other The other components to compare to. GetHashCode() Returns the hash code of the components. public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components to a color. public Color ToColor() ToColor(Int32, Int32, Int32) Converts RGB (red, green, blue) components to a color. public static Color ToColor(int r, int g, int b) Parameter Description r The red component of the color in the range [0..255]. g The green component of the color in the range [0..255]. b The blue component of the color in the range [0..255]. ToString() Converts the components to a string. public override string ToString() Overrides System.ValueType.ToString() Operators Equality(RGB255, RGB255) public static bool operator ==(RGB255 lhs, RGB255 rhs) Parameter Description lhs rhs Explicit(Color to RGB255) public static explicit operator RGB255(Color color) Parameter Description color Explicit(RGB255 to Color) public static explicit operator Color(RGB255 rgb) Parameter Description rgb Implicit(RGB255 to ARGB255) public static implicit operator ARGB255(RGB255 rgb) Parameter Description rgb Implicit(RGB255 to RGBA255) public static implicit operator RGBA255(RGB255 rgb) Parameter Description rgb Inequality(RGB255, RGB255) public static bool operator !=(RGB255 lhs, RGB255 rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorPro.RGBA.html": {
    "href": "api/Zigurous.ColorPro.RGBA.html",
    "title": "Struct RGBA | Color Pro",
    "keywords": "Struct RGBA The RGBA (red, green, blue, alpha) components of a color in the range [0..1]. Implements IEquatable < RGBA > Namespace : Zigurous.ColorPro [Serializable] public struct RGBA : IEquatable<RGBA> Constructors RGBA(Color) Creates new RGBA components from the given color. public RGBA(Color color) Parameter Description color The color to extract the components from. RGBA(Single, Single, Single, Single) Creates new RGBA components from the given values. public RGBA(float red, float green, float blue, float alpha) Parameter Description red The red component of the color in the range [0..1]. green The green component of the color in the range [0..1]. blue The blue component of the color in the range [0..1]. alpha The alpha component of the color in the range [0..1]. Fields alpha The alpha component of the color in the range [0..1]. public float alpha blue The blue component of the color in the range [0..1]. public float blue green The green component of the color in the range [0..1]. public float green red The red component of the color in the range [0..1]. public float red Methods Convert(Color, out Single, out Single, out Single, out Single) Converts a color to RGBA (red, green, blue, alpha) components. public static void Convert(Color color, out float r, out float g, out float b, out float a) Parameter Description color The color to extract the components from. r The red component output in the range [0..1]. g The green component output in the range [0..1]. b The blue component output in the range [0..1]. a The alpha component output in the range [0..1]. Equals(Object) Determines if the components are equal to other . public override bool Equals(object other) Parameter Description other The other object to compare to. Overrides System.ValueType.Equals(System.Object) Equals(RGBA) Determines if the components are equal to other . public bool Equals(RGBA other) Parameter Description other The other components to compare to. GetHashCode() Returns the hash code of the components. public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components to a color. public Color ToColor() ToColor(Single, Single, Single, Single) Converts RGBA (red, green, blue, alpha) components to a color. public static Color ToColor(float r, float g, float b, float a) Parameter Description r The red component of the color in the range [0..1]. g The green component of the color in the range [0..1]. b The blue component of the color in the range [0..1]. a The alpha component of the color in the range [0..1]. ToString() Converts the components to a string. public override string ToString() Overrides System.ValueType.ToString() Operators Equality(RGBA, RGBA) public static bool operator ==(RGBA lhs, RGBA rhs) Parameter Description lhs rhs Explicit(Color to RGBA) public static explicit operator RGBA(Color color) Parameter Description color Explicit(RGBA to Color) public static explicit operator Color(RGBA rgba) Parameter Description rgba Implicit(RGBA to ARGB) public static implicit operator ARGB(RGBA rgba) Parameter Description rgba Implicit(RGBA to RGB) public static implicit operator RGB(RGBA rgba) Parameter Description rgba Inequality(RGBA, RGBA) public static bool operator !=(RGBA lhs, RGBA rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorPro.RGBA255.html": {
    "href": "api/Zigurous.ColorPro.RGBA255.html",
    "title": "Struct RGBA255 | Color Pro",
    "keywords": "Struct RGBA255 The RGBA (red, green, blue, alpha) components of a color in the range [0..255]. Implements IEquatable < RGBA255 > Namespace : Zigurous.ColorPro [Serializable] public struct RGBA255 : IEquatable<RGBA255> Constructors RGBA255(Color) Creates new RGBA255 components from the given color. public RGBA255(Color color) Parameter Description color The color to extract the components from. RGBA255(Int32, Int32, Int32, Int32) Creates new RGBA255 components from the given values. public RGBA255(int red, int green, int blue, int alpha) Parameter Description red The red component of the color in the range [0..255]. green The green component of the color in the range [0..255]. blue The blue component of the color in the range [0..255]. alpha The alpha component of the color in the range [0..255]. Fields alpha The alpha component of the color in the range [0..255]. public int alpha blue The blue component of the color in the range [0..255]. public int blue green The green component of the color in the range [0..255]. public int green red The red component of the color in the range [0..255]. public int red Methods Convert(Color, out Int32, out Int32, out Int32, out Int32) Converts a color to RGBA (red, green, blue, alpha) components. public static void Convert(Color color, out int r, out int g, out int b, out int a) Parameter Description color The color to extract the components from. r The red component output in the range [0..255]. g The green component output in the range [0..255]. b The blue component output in the range [0..255]. a The alpha component output in the range [0..255]. Equals(Object) Determines if the components are equal to other . public override bool Equals(object other) Parameter Description other The other object to compare to. Overrides System.ValueType.Equals(System.Object) Equals(RGBA255) Determines if the components are equal to other . public bool Equals(RGBA255 other) Parameter Description other The other components to compare to. GetHashCode() Returns the hash code of the components. public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components to a color. public Color ToColor() ToColor(Int32, Int32, Int32, Int32) Converts RGBA (red, green, blue, alpha) components to a color. public static Color ToColor(int r, int g, int b, int a) Parameter Description r The red component of the color in the range [0..255]. g The green component of the color in the range [0..255]. b The blue component of the color in the range [0..255]. a The alpha component of the color in the range [0..255]. ToString() Converts the components to a string. public override string ToString() Overrides System.ValueType.ToString() Operators Equality(RGBA255, RGBA255) public static bool operator ==(RGBA255 lhs, RGBA255 rhs) Parameter Description lhs rhs Explicit(Color to RGBA255) public static explicit operator RGBA255(Color color) Parameter Description color Explicit(RGBA255 to Color) public static explicit operator Color(RGBA255 rgba) Parameter Description rgba Implicit(RGBA255 to ARGB255) public static implicit operator ARGB255(RGBA255 rgba) Parameter Description rgba Implicit(RGBA255 to RGB255) public static implicit operator RGB255(RGBA255 rgba) Parameter Description rgba Inequality(RGBA255, RGBA255) public static bool operator !=(RGBA255 lhs, RGBA255 rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorPro.SignalEncoding.html": {
    "href": "api/Zigurous.ColorPro.SignalEncoding.html",
    "title": "Enum SignalEncoding | Color Pro",
    "keywords": "Enum SignalEncoding A standard ITU-R Recommendation signal encoding. ITU-R Recommendations are the names given to the set of international technical standards developed by the Radiocommunication Sector of the International Telecommunication Union (ITU). Namespace : Zigurous.ColorPro public enum SignalEncoding Fields Name Description Rec2020 ITU-R BT.2020 (UHDTV) Rec2100 ITU-R BT.2100 (HDR-TV) Rec601 ITU-R BT.601 (SDTV) Rec709 ITU-R BT.709 (HDTV)"
  },
  "api/Zigurous.ColorPro.SignalEncodingExtensions.html": {
    "href": "api/Zigurous.ColorPro.SignalEncodingExtensions.html",
    "title": "Class SignalEncodingExtensions | Color Pro",
    "keywords": "Class SignalEncodingExtensions Extension methods for SignalEncoding Inheritance System.Object SignalEncodingExtensions Namespace : Zigurous.ColorPro public static class SignalEncodingExtensions Methods GetCoefficients(SignalEncoding) Returns the luma coefficients of the signal encoding. public static LumaCoefficients GetCoefficients(this SignalEncoding encoding) Parameter Description encoding The encoding to get the coefficients of."
  },
  "api/Zigurous.ColorPro.StandardObserver.html": {
    "href": "api/Zigurous.ColorPro.StandardObserver.html",
    "title": "Enum StandardObserver | Color Pro",
    "keywords": "Enum StandardObserver A CIE color-mapping function called the standard observer which represents an average human's chromatic response while observing an object under an illuminant. Namespace : Zigurous.ColorPro public enum StandardObserver Fields Name Description Ten CIE 1964 10Â° Standard Observer Two CIE 1931 2Â° Standard Observer"
  },
  "api/Zigurous.ColorPro.Temperature.html": {
    "href": "api/Zigurous.ColorPro.Temperature.html",
    "title": "Class Temperature | Color Pro",
    "keywords": "Class Temperature Functions for calculating and testing color temperature. Inheritance System.Object Temperature Namespace : Zigurous.ColorPro public static class Temperature Methods CCT(Color) Returns the CCT temperature of the color in Kelvin. public static float CCT(this Color color) Parameter Description color The color to get the CCT temperature of. CCT(Illuminant, StandardObserver) Returns the CCT temperature of the illuminant in Kelvin. public static float CCT(this Illuminant illuminant, StandardObserver observer = StandardObserver.Two) Parameter Description illuminant The illuminant to get the CCT temperature of. observer The standard observer to use. CCTString(Color) Returns the CCT temperature of the color in Kelvin as a string. public static string CCTString(this Color color) Parameter Description color The color to get the CCT temperature of. CCTString(Illuminant, StandardObserver) Returns the CCT temperature of the illuminant in Kelvin as a string. public static string CCTString(this Illuminant illuminant, StandardObserver observer = StandardObserver.Two) Parameter Description illuminant The illuminant to get the CCT temperature of. observer The standard observer to use. IsCool(Color) Determines if the color falls within a cool temperature range. public static bool IsCool(this Color color) Parameter Description color The color to test. IsWarm(Color) Determines if the color falls within a warm temperature range. public static bool IsWarm(this Color color) Parameter Description color The color to test."
  },
  "api/Zigurous.ColorPro.Tristimulus.html": {
    "href": "api/Zigurous.ColorPro.Tristimulus.html",
    "title": "Struct Tristimulus | Color Pro",
    "keywords": "Struct Tristimulus Tristimulus system, a system for visually matching a color under standardized conditions against the three primary colors â red, green, and blue; the three results are expressed as X, Y, and Z, respectively, and are called tristimulus values. Implements IEquatable < Tristimulus > Namespace : Zigurous.ColorPro [Serializable] public struct Tristimulus : IEquatable<Tristimulus> Constructors Tristimulus(Single, Single, Single) Creates a new tristimulus tuple with the given values. public Tristimulus(float X, float Y, float Z) Parameter Description X The X tristimulus value. Y The Y tristimulus value. Z The Z tristimulus value. Fields X The X tristimulus value. public float X Y The Y tristimulus value. public float Y Z The Z tristimulus value. public float Z Properties Item[Int32] Gets or sets the component at the given index . public float this[int index] { get; set; } Parameter Description index The index of the component to get or set. Methods Equals(Object) Determines if the tristimulus values are equal to other . public override bool Equals(object other) Parameter Description other The object to compare to. Overrides System.ValueType.Equals(System.Object) Equals(Tristimulus) Determines if the tristimulus values are equal to other . public bool Equals(Tristimulus other) Parameter Description other The other tristimulus values to compare to. GetHashCode() Returns the hash code of the tristimulus values. public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the tristimulus values to a color. public Color ToColor() ToString() Converts the tristimulus values to a string. public override string ToString() Overrides System.ValueType.ToString() Operators Equality(Tristimulus, Tristimulus) public static bool operator ==(Tristimulus lhs, Tristimulus rhs) Parameter Description lhs rhs Inequality(Tristimulus, Tristimulus) public static bool operator !=(Tristimulus lhs, Tristimulus rhs) Parameter Description lhs rhs Multiply(Color, Tristimulus) public static Tristimulus operator *(Color lhs, Tristimulus rhs) Parameter Description lhs rhs Multiply(Single, Tristimulus) public static Tristimulus operator *(float lhs, Tristimulus rhs) Parameter Description lhs rhs Multiply(Tristimulus, Color) public static Tristimulus operator *(Tristimulus lhs, Color rhs) Parameter Description lhs rhs Multiply(Tristimulus, Single) public static Tristimulus operator *(Tristimulus lhs, float rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorPro.YCbCr.html": {
    "href": "api/Zigurous.ColorPro.YCbCr.html",
    "title": "Struct YCbCr | Color Pro",
    "keywords": "Struct YCbCr The Yâ²CbCr components of a color - luma (Yâ²) and chroma (Cb,Cr). Implements IEquatable < YCbCr > Namespace : Zigurous.ColorPro [Serializable] public struct YCbCr : IEquatable<YCbCr> Constructors YCbCr(Color) Creates new Yâ²CbCr components from the given color. public YCbCr(Color color) Parameter Description color The color to extract the components from. YCbCr(Color, SignalEncoding) Creates new Yâ²CbCr components from the given color and signal encoding. public YCbCr(Color color, SignalEncoding encoding) Parameter Description color The color to extract the components from. encoding The signal encoding to use. YCbCr(Single, Single, Single) Creates new Yâ²CbCr components from the given values. public YCbCr(float Y, float Cb, float Cr) Parameter Description Y The luma component of the color in the full range [0..255]. Cb The blue-difference chroma component of the color in the full range [0..255]. Cr The red-difference chroma component of the color in the full range [0..255]. Fields Cb The blue-difference chroma component of the color in the full range [0..255]. public float Cb Cr The red-difference chroma component of the color in the full range [0..255]. public float Cr Y The luma component of the color in the full range [0..255]. public float Y Methods Convert(Color, out Single, out Single, out Single) Converts a color to Yâ²CbCr components. public static void Convert(Color color, out float Y, out float Cb, out float Cr) Parameter Description color The color to extract the components from. Y The luma component output in the full range [0..255]. Cb The blue-difference chroma component output in the full range [0..255]. Cr The red-difference chroma component output in the full range [0..255]. Convert(Color, SignalEncoding, out Single, out Single, out Single) Converts a color to Yâ²CbCr components using the given signal encoding. public static void Convert(Color color, SignalEncoding encoding, out float Y, out float Cb, out float Cr) Parameter Description color The color to extract the components from. encoding The signal encoding to use. Y The luma component output in the full range [0..255]. Cb The blue-difference chroma component output in the full range [0..255]. Cr The red-difference chroma component output in the full range [0..255]. Equals(Object) Determines if the components are equal to other . public override bool Equals(object other) Parameter Description other The other object to compare to. Overrides System.ValueType.Equals(System.Object) Equals(YCbCr) Determines if the components are equal to other . public bool Equals(YCbCr other) Parameter Description other The other components to compare to. GetHashCode() Returns the hash code of the components. public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components to a color. public Color ToColor() ToColor(Single, Single, Single) Converts Yâ²CbCr components to a color. public static Color ToColor(float Y, float Cb, float Cr) Parameter Description Y The luma component of the color in the full range [0..255]. Cb The blue-difference chroma component of the color in the full range [0..255]. Cr The red-difference chroma component of the color in the full range [0..255]. ToColor(SignalEncoding) Converts the components to a color using the given signal encoding. public Color ToColor(SignalEncoding encoding) Parameter Description encoding The signal encoding to use. ToColor(SignalEncoding, Single, Single, Single) Converts Yâ²CbCr components to a color using the given signal encoding. public static Color ToColor(SignalEncoding encoding, float Y, float Cb, float Cr) Parameter Description encoding The signal encoding to use. Y The luma component of the color in the full range [0..255]. Cb The blue-difference chroma component of the color in the full range [0..255]. Cr The red-difference chroma component of the color in the full range [0..255]. ToString() Converts the components to a string. public override string ToString() Overrides System.ValueType.ToString() ToYPbPr() Converts the components to Yâ²PbPr components. public YPbPr ToYPbPr() ToYPbPr(Single, Single, Single) Converts Yâ²CbCr components to Yâ²PbPr components. public static YPbPr ToYPbPr(float Y, float Cb, float Cr) Parameter Description Y The luma component of the color in the full range [0..255]. Cb The blue-difference chroma component of the color in the full range [0..255]. Cr The red-difference chroma component of the color in the full range [0..255]. ToYPbPr(ref Single, in Single, in Single, out Single, out Single) Converts Yâ²CbCr components to Yâ²PbPr components. public static void ToYPbPr(ref float Y, in float Cb, in float Cr, out float Pb, out float Pr) Parameter Description Y The luma component of the color in the full range [0..255]. Cb The blue-difference chroma component input in the full range [0..255]. Cr The red-difference chroma component input in the full range [0..255]. Pb The blue-difference chroma component output in the range [-0.5..0.5]. Pr The red-difference chroma component output in the range [-0.5..0.5]. Operators Equality(YCbCr, YCbCr) public static bool operator ==(YCbCr lhs, YCbCr rhs) Parameter Description lhs rhs Explicit(Color to YCbCr) public static explicit operator YCbCr(Color color) Parameter Description color Explicit(YCbCr to Color) public static explicit operator Color(YCbCr yCbCr) Parameter Description yCbCr Explicit(YCbCr to YPbPr) public static explicit operator YPbPr(YCbCr yCbCr) Parameter Description yCbCr Inequality(YCbCr, YCbCr) public static bool operator !=(YCbCr lhs, YCbCr rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorPro.YIQ.html": {
    "href": "api/Zigurous.ColorPro.YIQ.html",
    "title": "Struct YIQ | Color Pro",
    "keywords": "Struct YIQ The Yâ²IQ components of a color - luma (Yâ²) and chroma (I,Q). Implements IEquatable < YIQ > Namespace : Zigurous.ColorPro [Serializable] public struct YIQ : IEquatable<YIQ> Constructors YIQ(Color) Creates new Yâ²IQ components from the given color. public YIQ(Color color) Parameter Description color The color to extract the components from. YIQ(Color, SignalEncoding) Creates new Yâ²IQ components from the given color and signal encoding. public YIQ(Color color, SignalEncoding encoding) Parameter Description color The color to extract the components from. encoding The signal encoding to use. YIQ(Single, Single, Single) Creates new Yâ²IQ components from the given values. public YIQ(float Y, float I, float Q) Parameter Description Y The luma component of the color in the range [0..1]. I The orange-blue chroma component of the color in the range [-0.596..0.596]. Q The purple-green chroma component of the color in the range [-0.523..0.523]. Fields I The orange-blue chroma component of the color in the range [-0.596..0.596]. public float I Q The purple-green chroma component of the color in the range [-0.523..0.523]. public float Q Y The luma component of the color in the range [0..1]. public float Y Methods Convert(Color, out Single, out Single, out Single) Converts a color to Yâ²IQ components. public static void Convert(Color color, out float Y, out float I, out float Q) Parameter Description color The color to extract the components from. Y The luma component output in the range [0..1]. I The orange-blue chroma component output in the range [-0.596..0.596]. Q The purple-green chroma component output in the range [-0.523..0.523]. Convert(Color, SignalEncoding, out Single, out Single, out Single) Converts a color to Yâ²IQ components using the given signal encoding. public static void Convert(Color color, SignalEncoding encoding, out float Y, out float I, out float Q) Parameter Description color The color to extract the components from. encoding The signal encoding to use. Y The luma component output in the range [0..1]. I The orange-blue chroma component output in the range [-0.596..0.596]. Q The purple-green chroma component output in the range [-0.523..0.523]. Equals(Object) Determines if the components are equal to other . public override bool Equals(object other) Parameter Description other The other object to compare to. Overrides System.ValueType.Equals(System.Object) Equals(YIQ) Determines if the components are equal to other . public bool Equals(YIQ other) Parameter Description other The other components to compare to. GetHashCode() Returns the hash code of the components. public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components to a color. public Color ToColor() ToColor(Single, Single, Single) Converts Yâ²IQ components to a color. public static Color ToColor(float Y, float I, float Q) Parameter Description Y The luma component of the color in the range [0..1]. I The orange-blue chroma component of the color in the range [-0.596..0.596]. Q The purple-green chroma component of the color in the range [-0.523..0.523]. ToColor(SignalEncoding) Converts the components to a color using the given signal encoding. public Color ToColor(SignalEncoding encoding) Parameter Description encoding The signal encoding to use. ToColor(SignalEncoding, Single, Single, Single) Converts Yâ²IQ components to a color using the given signal encoding. public static Color ToColor(SignalEncoding encoding, float Y, float I, float Q) Parameter Description encoding The signal encoding to use. Y The luma component of the color in the range [0..1]. I The orange-blue chroma component of the color in the range [-0.596..0.596]. Q The purple-green chroma component of the color in the range [-0.523..0.523]. ToString() Converts the components to a string. public override string ToString() Overrides System.ValueType.ToString() Operators Equality(YIQ, YIQ) public static bool operator ==(YIQ lhs, YIQ rhs) Parameter Description lhs rhs Explicit(Color to YIQ) public static explicit operator YIQ(Color color) Parameter Description color Explicit(YIQ to Color) public static explicit operator Color(YIQ yiq) Parameter Description yiq Inequality(YIQ, YIQ) public static bool operator !=(YIQ lhs, YIQ rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorPro.YPbPr.html": {
    "href": "api/Zigurous.ColorPro.YPbPr.html",
    "title": "Struct YPbPr | Color Pro",
    "keywords": "Struct YPbPr The Yâ²PbPr components of a color - luma (Yâ²) and chroma (Pb,Pr). Implements IEquatable < YPbPr > Namespace : Zigurous.ColorPro [Serializable] public struct YPbPr : IEquatable<YPbPr> Constructors YPbPr(Color) Creates new Yâ²PbPr components from the given color. public YPbPr(Color color) Parameter Description color The color to extract the components from. YPbPr(Color, SignalEncoding) Creates new Yâ²PbPr components from the given color and signal encoding. public YPbPr(Color color, SignalEncoding encoding) Parameter Description color The color to extract the components from. encoding The signal encoding to use. YPbPr(Single, Single, Single) Creates new Yâ²PbPr components from the given values. public YPbPr(float Y, float Pb, float Pr) Parameter Description Y The luma component of the color in the range [0..1]. Pb The blue-difference chroma component of the color in the range [-0.5..0.5]. Pr The red-difference chroma component of the color in the range [-0.5..0.5]. Fields Pb The blue-difference chroma component of the color in the range [-0.5..0.5]. public float Pb Pr The red-difference chroma component of the color in the range [-0.5..0.5]. public float Pr Y The luma component of the color in the range [0..1]. public float Y Methods Convert(Color, out Single, out Single, out Single) Converts a color to Yâ²PbPr components. public static void Convert(Color color, out float Y, out float Pb, out float Pr) Parameter Description color The color to extract the components from. Y The luma component output in the range [0..1]. Pb The blue-difference chroma component output in the range [-0.5..0.5]. Pr The red-difference chroma component output in the range [-0.5..0.5]. Convert(Color, SignalEncoding, out Single, out Single, out Single) Converts a color to Yâ²PbPr components using the given signal encoding. public static void Convert(Color color, SignalEncoding encoding, out float Y, out float Pb, out float Pr) Parameter Description color The color to extract the components from. encoding The signal encoding to use. Y The luma component output in the range [0..1]. Pb The blue-difference chroma component output in the range [-0.5..0.5]. Pr The red-difference chroma component output in the range [-0.5..0.5]. Equals(Object) Determines if the components are equal to other . public override bool Equals(object other) Parameter Description other The other object to compare to. Overrides System.ValueType.Equals(System.Object) Equals(YPbPr) Determines if the components are equal to other . public bool Equals(YPbPr other) Parameter Description other The other components to compare to. GetHashCode() Returns the hash code of the components. public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components to a color. public Color ToColor() ToColor(Single, Single, Single) Converts Yâ²PbPr components to a color. public static Color ToColor(float Y, float Pb, float Pr) Parameter Description Y The luma component of the color in the range [0..1]. Pb The blue-difference chroma component of the color in the range [-0.5..0.5]. Pr The red-difference chroma component of the color in the range [-0.5..0.5]. ToColor(SignalEncoding) Converts the components to a color using the given signal encoding. public Color ToColor(SignalEncoding encoding) Parameter Description encoding The signal encoding to use. ToColor(SignalEncoding, Single, Single, Single) Converts Yâ²PbPr components to a color using the given signal encoding. public static Color ToColor(SignalEncoding encoding, float Y, float Pb, float Pr) Parameter Description encoding The signal encoding to use. Y The luma component of the color in the range [0..1]. Pb The blue-difference chroma component of the color in the range [-0.5..0.5]. Pr The red-difference chroma component of the color in the range [-0.5..0.5]. ToString() Converts the components to a string. public override string ToString() Overrides System.ValueType.ToString() ToYCbCr() Converts the components to Yâ²CbCr components. public YCbCr ToYCbCr() ToYCbCr(Single, Single, Single) Converts Yâ²PbPr components to Yâ²CbCr components. public static YCbCr ToYCbCr(float Y, float Pb, float Pr) Parameter Description Y The luma component of the color in the range [0..1]. Pb The blue-difference chroma component of the color in the range [-0.5..0.5]. Pr The red-difference chroma component of the color in the range [-0.5..0.5]. ToYCbCr(ref Single, in Single, in Single, out Single, out Single) Converts Yâ²PbPr components to Yâ²CbCr components. public static void ToYCbCr(ref float Y, in float Pb, in float Pr, out float Cb, out float Cr) Parameter Description Y The luma component of the color in the range [0..1]. Pb The blue-difference chroma component input in the range [-0.5..0.5]. Pr The red-difference chroma component input in the range [-0.5..0.5]. Cb The blue-difference chroma component output in the full range [0..255]. Cr The red-difference chroma component output in the full range [0..255]. Operators Equality(YPbPr, YPbPr) public static bool operator ==(YPbPr lhs, YPbPr rhs) Parameter Description lhs rhs Explicit(Color to YPbPr) public static explicit operator YPbPr(Color color) Parameter Description color Explicit(YPbPr to Color) public static explicit operator Color(YPbPr yPbPr) Parameter Description yPbPr Explicit(YPbPr to YCbCr) public static explicit operator YCbCr(YPbPr yPbPr) Parameter Description yPbPr Inequality(YPbPr, YPbPr) public static bool operator !=(YPbPr lhs, YPbPr rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorPro.YUV.html": {
    "href": "api/Zigurous.ColorPro.YUV.html",
    "title": "Struct YUV | Color Pro",
    "keywords": "Struct YUV The Yâ²UV components of a color - luma (Yâ²) and chroma (U,V). Implements IEquatable < YUV > Namespace : Zigurous.ColorPro [Serializable] public struct YUV : IEquatable<YUV> Constructors YUV(Color) Creates new Yâ²UV components from the given color. public YUV(Color color) Parameter Description color The color to extract the components from. YUV(Color, SignalEncoding) Creates new Yâ²UV components from the given color and signal encoding. public YUV(Color color, SignalEncoding encoding) Parameter Description color The color to extract the components from. encoding The signal encoding to use. YUV(Single, Single, Single) Creates new Yâ²UV components from the given values. public YUV(float Y, float U, float V) Parameter Description Y The luma component of the color in the range [0..1]. U The blue-difference chroma component of the color in the range [-0.436..0.436]. V The red-difference chroma component of the color in the range [-0.615..0.615]. Fields U The blue-difference chroma component of the color in the range [-0.436..0.436]. public float U V The red-difference chroma component of the color in the range [-0.615..0.615]. public float V Y The luma component of the color in the range [0..1]. public float Y Methods Convert(Color, out Single, out Single, out Single) Converts a color to Yâ²UV components. public static void Convert(Color color, out float Y, out float U, out float V) Parameter Description color The color to extract the components from. Y The luma component output in the range [0..1]. U The blue-difference chroma component output in the range [-0.436..0.436]. V The red-difference chroma component output in the range [-0.615..0.615]. Convert(Color, SignalEncoding, out Single, out Single, out Single) Converts a color to Yâ²UV components using the given signal encoding. public static void Convert(Color color, SignalEncoding encoding, out float Y, out float U, out float V) Parameter Description color The color to extract the components from. encoding The signal encoding to use. Y The luma component output in the range [0..1]. U The blue-difference chroma component output in the range [-0.436..0.436]. V The red-difference chroma component output in the range [-0.615..0.615]. Equals(Object) Determines if the components are equal to other . public override bool Equals(object other) Parameter Description other The other object to compare to. Overrides System.ValueType.Equals(System.Object) Equals(YUV) Determines if the components are equal to other . public bool Equals(YUV other) Parameter Description other The other components to compare to. GetHashCode() Returns the hash code of the components. public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components to a color. public Color ToColor() ToColor(Single, Single, Single) Converts Yâ²UV components to a color. public static Color ToColor(float Y, float U, float V) Parameter Description Y The luma component of the color in the range [0..1]. U The blue-difference chroma component of the color in the range [-0.436..0.436]. V The red-difference chroma component of the color in the range [-0.615..0.615]. ToColor(SignalEncoding) Converts the components to a color using the given signal encoding. public Color ToColor(SignalEncoding encoding) Parameter Description encoding The signal encoding to use. ToColor(SignalEncoding, Single, Single, Single) Converts Yâ²UV components to a color using the given signal encoding. public static Color ToColor(SignalEncoding encoding, float Y, float U, float V) Parameter Description encoding The signal encoding to use. Y The luma component of the color in the range [0..1]. U The blue-difference chroma component of the color in the range [-0.436..0.436]. V The red-difference chroma component of the color in the range [-0.615..0.615]. ToString() Converts the components to a string. public override string ToString() Overrides System.ValueType.ToString() Operators Equality(YUV, YUV) public static bool operator ==(YUV lhs, YUV rhs) Parameter Description lhs rhs Explicit(Color to YUV) public static explicit operator YUV(Color color) Parameter Description color Explicit(YUV to Color) public static explicit operator Color(YUV yuv) Parameter Description yuv Inequality(YUV, YUV) public static bool operator !=(YUV lhs, YUV rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "Changelog | Color Pro",
    "keywords": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning ."
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "License | Color Pro",
    "keywords": "License Copyright (c) 2021 Zigurous. All Rights Reserved."
  },
  "manual/accessibility.html": {
    "href": "manual/accessibility.html",
    "title": "Accessibility | Color Pro",
    "keywords": "Accessibility The Color Pro package includes a few functions for testing accessibility requirements. The requirements themselves are defined by WCAG guidelines. Enhanced : The visual presentation of text has a contrast ratio of at least 7:1 (Level AAA) Enhanced Large Text : The visual presentation of large text has a contrast ratio of at least 4.5:1 (Level AAA) Minimum : The visual presentation of text has a contrast ratio of at least 4.5:1 (Level AA) Minimum Large Text : The visual presentation of large text has a contrast ratio of at least 3:1 (Level AA) Testing Compliance The functions are defined as extension methods in the static class Accessibility and utilize the enum Accessibility.Requirement . Compliance is determined by the contrast ratio between a foreground color and a background color. See the Contrast manual for more information on calculating contrast. Accessibility.Requirement requirement = Accessibility.Requirement.Enhanced; // Requirement extension methods float contrast = requirement.MinimumContrastRatio(); bool compliant = requirement.IsCompliant(foregroundColor, backgroundColor); // Color extension methods bool compliant = foregroundColor.IsCompliant(backgroundColor, requirement);"
  },
  "manual/adjustment.html": {
    "href": "manual/adjustment.html",
    "title": "Adjustment | Color Pro",
    "keywords": "Adjustment Adjusting color values is one of the most commonly used features included in the Color Pro package. Functions for adjusting colors are defined as extension methods in the static class Adjustment . To change the values of individual components, see the Components manual. Hue Shift Color shift = color.HueShifted(30.0f); // 30Â° shift color.HueShift(30.0f); // change existing color Color[] hues = color.Hues(30.0f); // 30Â° shift = 12 colors (360/30=12) Color[] hues = color.Hues(12); // 12 colors = 30Â° shift (360/12=30) color.HuesNonAlloc(array); // prevent heap allocations Saturate Color saturated = color.Saturated(0.1f); // 10% increase color.Saturate(0.1f); // change existing color Color[] saturated = color.Saturated(10); // generate 10 saturated colors color.SaturatedNonAlloc(array); // prevent heap allocations Desaturate Color desaturated = color.Desaturated(0.1f); // 10% decrease color.Desaturate(0.1f); // change existing color Color[] desaturated = color.Desaturated(10); // generate 10 desaturated colors color.DesaturatedNonAlloc(array); // prevent heap allocations Grayscale Color grayscaled = color.Grayscaled(); color.Grayscale(); // change existing color Lighter Color lighter = color.Lighter(0.1f); // 10% increase color.Lighten(0.1f); // change existing color Color[] lighter = color.Lighter(10); // generate 10 lighter colors color.LighterNonAlloc(array); // prevent heap allocations Darker Color darker = color.Darker(0.1f); // 10% decrease color.Darken(0.1f); // change existing color Color[] darker = color.Darker(10); // generate 10 darker colors color.DarkerNonAlloc(array); // prevent heap allocations Invert Color inverted = color.Inverted(); color.Invert(); // change existing color Complement Color complement = color.Complement(); Websafe Color websafe = color.WebSafe();"
  },
  "manual/arithmetic.html": {
    "href": "manual/arithmetic.html",
    "title": "Arithmetic | Color Pro",
    "keywords": "Arithmetic The Color Pro package includes basic arithmetic functions for adding, subtracting, multiplying, and dividing colors with one another. These functions are available as extension methods in the static class Arithmetic . Addition Color result = color.Adding(otherColor); color.Add(otherColor); // change existing color Subtraction Color result = color.Subtracting(otherColor); color.Subtract(otherColor); // change existing color Multiplication Color result = color.MultipliedBy(otherColor); color.Multiply(otherColor); // change existing color Color result = color.MultipliedBy(2.0f); color.Multiply(2.0f); // change existing color Division Color result = color.DividedBy(otherColor); color.Divide(otherColor); // change existing color Color result = color.DividedBy(2.0f); color.Divide(2.0f); // change existing color"
  },
  "manual/averaging.html": {
    "href": "manual/averaging.html",
    "title": "Averaging | Color Pro",
    "keywords": "Averaging The Color Pro package includes functions for averaging colors together. These functions are declared as extension methods in the static class Averaging . // Average between two colors Color average = color1.Average(color2); // Average between an array of colors Color average = colors.Average(); // Average color of the pixels of a Texture2D Color average = texture2D.AverageColor(); Averaging vs Mixing If you are looking to combine colors then you usually get better results by mixing them instead of averaging them due to how they are calculated. See the Mixing manual for more information. Averaging can be useful, for example, if you want to understand the most dominant color of an entire image. Averaging is usually better suited for large amounts of data whereas mixing is better suited when you only have a few colors."
  },
  "manual/color-blindness.html": {
    "href": "manual/color-blindness.html",
    "title": "Color Blindness | Color Pro",
    "keywords": "Color Blindness For accessibility purposes it is useful to simulate color blindness when picking colors to ensure your palettes are favorable for as many people as possible. The Color Pro package includes functions to return a simulated color blindness for a given color. These extension methods are declared in the static class Color Blindess and utilize the Channel Mixer for simulating the colors. The Color Pro package also includes a post-processing filter for each supported color blindness type. These can be useful for testing color blindness while playing your game to ensure it is accessible for colorblind people. Protanopia Protanopia is a blindness to red, a state in which the red cones are absent. Color protanopia = color.Protanopia(); Color[] protanopia = colors.Protanopia(); Protanomaly Protanomaly is a reduced sensitivity to red, a result of functionally limited red cones. Color protanomaly = color.Protanomaly(); Color[] protanomaly = colors.Protanomaly(); Deuteranopia Deuteranopia is a blindness to green, a state in which the green cones are absent. Color deuteranopia = color.Deuteranopia(); Color[] deuteranopia = colors.Deuteranopia(); Deuteranomaly Deuteranomaly is a reduced sensitivity to green, a result of functionally limited green cones. Color deuteranomaly = color.Deuteranomaly(); Color[] deuteranomaly = colors.Deuteranomaly(); Tritanopia Tritanopia is a blindness to blue, a state in which the blue cones are absent. Color tritanopia = color.Tritanopia(); Color[] tritanopia = colors.Tritanopia(); Tritanomaly Tritanomaly is a reduced sensitivity to blue, a result of functionally limited blue cones. Color tritanomaly = color.Tritanomaly(); Color[] tritanomaly = colors.Tritanomaly(); Achromatopsia Achromatopsia is a condition characterized by a total absense of color vision. Color achromatopsia = color.Achromatopsia(); Color[] achromatopsia = colors.Achromatopsia(); Achromatomaly Achromatomaly is a condition characterized by a partial absense of color vision. Color achromatomaly = color.Achromatomaly(); Color[] achromatomaly = colors.Achromatomaly();"
  },
  "manual/components.html": {
    "href": "manual/components.html",
    "title": "Components | Color Pro",
    "keywords": "Components The Color Pro package includes numerous extension methods for getting and setting components values on colors. These functions are declared in the static class Components . Getting Components Returns the component values of a color. HSV float hue = color.GetHue(); float saturation = color.GetSaturationV(); float value = color.GetValue(); HSB float hue = color.GetHue(); float saturation = color.GetSaturationV(); float brightness = color.GetBrightness(); HSL float hue = color.GetHue(); float saturation = color.GetSaturationL(); float lightness = color.GetLightness(); RGBA float red = color.GetRed(); float green = color.GetGreen(); float blue = color.GetBlue(); float alpha = color.GetAlpha(); Setting Components Sets the component values of a color. HSV color.SetHue(hue); color.SetSaturationV(saturation); color.SetValue(value); HSB color.SetHue(hue); color.SetSaturationV(saturation); color.SetBrightness(brightness); HSL color.SetHue(hue); color.SetSaturationL(saturation); color.SetLightness(lightness); RGBA color.SetRed(red); color.SetGreen(green); color.SetBlue(blue); color.SetAlpha(alpha); Copying Colors Returns a copy of the color with a new component value. HSV Color newColor; newColor = color.WithHue(hue); newColor = color.WithSaturationV(saturation); newColor = color.WithValue(value); HSB Color newColor; newColor = color.WithHue(hue); newColor = color.WithSaturationV(saturation); newColor = color.WithBrightness(brightness); HSL Color newColor; newColor = color.WithHue(hue); newColor = color.WithSaturationL(saturation); newColor = color.WithLightness(lightness); RGBA Color newColor; newColor = color.WithRed(red); newColor = color.WithGreen(green); newColor = color.WithBlue(blue); newColor = color.WithAlpha(alpha);"
  },
  "manual/contrast.html": {
    "href": "manual/contrast.html",
    "title": "Contrast | Color Pro",
    "keywords": "Contrast The Color Pro package includes several functions for getting the contrast ratio between colors. This is primarily used when determining accessibility requirements , but it can also be used for other purposes. Calculating Contrast Contrast functions are declared as extension methods in the static class Contrast . Color foreground = Color.white; Color background = Color.black; float contrast = foreground.ContrastRatio(background); The calculation itself is as follows: public static float ContrastRatio(this Color color, Color other) { float luminanceA = color.RelativeLuminance(); float luminanceB = other.RelativeLuminance(); float darker = Mathf.Min(luminanceA, luminanceB); float lighter = Mathf.Max(luminanceA, luminanceB); return (lighter + 0.05f) / (darker + 0.05f); } Higher / Lower Sometimes it is useful to find the color that has the highest or lowest contrast ratio to many other colors. For example, if your text color is white, maybe you want to test different background colors to see which one has the best contrast ratio. Color foreground = Color.white; Color highest = foreground.HigherContrastingColor(Color.red, Color.blue); Color lowest = foreground.LowerContrastingColor(Color.red, Color.blue);"
  },
  "manual/conversion.html": {
    "href": "manual/conversion.html",
    "title": "Conversion | Color Pro",
    "keywords": "Conversion The Color Pro package supports converting colors to and from 20+ color models / spaces. Every supported type has its own data structure (except Hex) and several ways to convert between, whether through extension methods, static methods, or instance methods. ARGB The ARGB (alpha, red, green, blue) components of a color in the range [0..1]. // Extension methods color.ToARGB(out a, out r, out g, out b); ARGB components = color.ToARGB(); // Static methods ARGB.Convert(color, out a, out r, out g, out b); Color color = ARGB.ToColor(a, r, g, b); // Instance methods ARGB components = new ARGB(color); Color color = components.ToColor(); ARGB255 The ARGB (alpha, red, green, blue) components of a color in the range [0..255]. // Extension methods color.ToARGB255(out a, out r, out g, out b); ARGB255 components = color.ToARGB255(); // Static methods ARGB255.Convert(color, out a, out r, out g, out b); Color color = ARGB255.ToColor(a, r, g, b); // Instance methods ARGB255 components = new ARGB255(color); Color color = components.ToColor(); CIE LAB The CIE LAB components of a color - lightness (L) and chromaticity (a,b). // Extension methods color.ToCIELAB(out L, out a, out b); CIELAB components = color.ToCIELAB(); // Static methods CIELAB.Convert(color, out L, out a, out b); Color color = CIELAB.ToColor(L, a, b); // Instance methods CIELAB components = new CIELAB(color); Color color = components.ToColor(); CIE LUV The CIE LUV components of a color - lightness (L) and chromaticity (u,v). // Extension methods color.ToCIELUV(out L, out u, out v); CIELUV components = color.ToCIELUV(); // Static methods CIELUV.Convert(color, out L, out u, out v); Color color = CIELUV.ToColor(L, u, v); // Instance methods CIELUV components = new CIELUV(color); Color color = components.ToColor(); CIE LCh(ab) The CIE LCh(ab) components of a color - lightness (L), chroma (C), and hue (h). // Extension methods color.ToCIELCh_ab(out L, out C, out h); CIELCh_ab components = color.ToCIELCh_ab(); // Static methods CIELCh_ab.Convert(color, out L, out C, out h); Color color = CIELCh_ab.ToColor(L, C, h); // Instance methods CIELCh_ab components = new CIELCh_ab(color); Color color = components.ToColor(); CIE LCh(uv) The CIE LCh(uv) components of a color - lightness (L), chroma (C), and hue (h). // Extension methods color.ToCIELCh_uv(out L, out C, out h); CIELCh_uv components = color.ToCIELCh_uv(); // Static methods CIELCh_uv.Convert(color, out L, out C, out h); Color color = CIELCh_uv.ToColor(L, C, h); // Instance methods CIELCh_uv components = new CIELCh_uv(color); Color color = components.ToColor(); CIE UCS The CIE UCS components of a color - (u,v) chromaticity coordinates. // Extension methods color.ToCIEUCS(out u, out v); CIEUCS components = color.ToCIEUCS(); // Static methods CIEUCS.Convert(color, out u, out v); Color color = CIEUCS.ToColor(u, v); // Instance methods CIEUCS components = new CIEUCS(color); Color color = components.ToColor(); CIE UVW The CIE UVW components of a color - chromaticity (U,V) and lightness (W). // Extension methods color.ToCIEUVW(out U, out V, out W); CIEUVW components = color.ToCIEUVW(); // Static methods CIEUVW.Convert(color, out U, out V, out W); Color color = CIEUVW.ToColor(U, V, W); // Instance methods CIEUVW components = new CIEUVW(color); Color color = components.ToColor(); CIE xyY The CIE xyY components of a color - chromaticity (x,y) and luminance (Y). // Extension methods color.ToCIExyY(out x, out y, out Y); CIExyY components = color.ToCIExyY(); // Static methods CIExyY.Convert(color, out x, out y, out Y); Color color = CIExyY.ToColor(x, y, Y); // Instance methods CIExyY components = new CIExyY(color); Color color = components.ToColor(); CIE XYZ The CIE XYZ components of a color - chromaticity (X,Z) and luminance (Y). // Extension methods color.ToCIEXYZ(out X, out Y, out Z); CIEXYZ components = color.ToCIEXYZ(); // Static methods CIEXYZ.Convert(color, out X, out Y, out Z); Color color = CIEXYZ.ToColor(X, Y, Z); // Instance methods CIEXYZ components = new CIEXYZ(color); Color color = components.ToColor(); CMYK The CMYK (cyan, magenta, yellow, black) components of a color in the range [0..1]. // Extension methods color.ToCMYK(out c, out m, out y, out k); CMYK components = color.ToCMYK(); // Static methods CMYK.Convert(color, out c, out m, out y, out k); Color color = CMYK.ToColor(c, m, y, k); // Instance methods CMYK components = new CMYK(color); Color color = components.ToColor(); Hex Hexadecimal colors are represented as strings \"#ff0000\" or integers 0xff0000. Colors can be converted to and from using RGB, RGBA, and ARGB formats which determine the order of the bits. int hex = color.ToHex(); int hex_rgba = color.ToHexRGBA(); int hex_argb = color.ToHexARGB(); string hex = color.ToHexString(); string hex_rgba = color.ToHexStringRGBA(); string hex_argb = color.ToHexStringARGB(); Color color = Hex.ToRGBColor(hex); Color color = Hex.ToRGBAColor(hex_rgba); Color color = Hex.ToARGBColor(hex_argb); HSB The HSB (hue, saturation, brightness) components of a color in the range [0..1]. // Extension methods color.ToHSB(out h, out s, out b); HSB components = color.ToHSB(); // Static methods HSB.Convert(color, out h, out s, out b); Color color = HSB.ToColor(h, s, b); // Instance methods HSB components = new HSB(color); Color color = components.ToColor(); HSI The HSI (hue, saturation, intensity) components of a color in the range [0..1]. // Extension methods color.ToHSI(out h, out s, out b); HSI components = color.ToHSI(); // Static methods HSI.Convert(color, out h, out s, out b); Color color = HSI.ToColor(h, s, b); // Instance methods HSI components = new HSI(color); Color color = components.ToColor(); HSL The HSL (hue, saturation, lightness) components of a color in the range [0..1]. // Extension methods color.ToHSL(out h, out s, out b); HSL components = color.ToHSL(); // Static methods HSL.Convert(color, out h, out s, out b); Color color = HSL.ToColor(h, s, b); // Instance methods HSL components = new HSL(color); Color color = components.ToColor(); HSV The HSV (hue, saturation, value) components of a color in the range [0..1]. // Extension methods color.ToHSV(out h, out s, out b); HSV components = color.ToHSV(); // Static methods HSV.Convert(color, out h, out s, out b); Color color = HSV.ToColor(h, s, b); // Instance methods HSV components = new HSV(color); Color color = components.ToColor(); Hunter Lab The Hunter Lab components of a color - lightness (L) and chromaticity (a,b). // Extension methods color.ToHunterLab(out L, out a, out b); HunterLab components = color.ToHunterLab(); // Static methods HunterLab.Convert(color, out L, out a, out b); Color color = HunterLab.ToColor(L, a, b); // Instance methods HunterLab components = new HunterLab(color); Color color = components.ToColor(); LMS The LMS (long, medium, short) components of a color. // Extension methods color.ToLMS(out L, out M, out S); LMS components = color.ToLMS(); // Static methods LMS.Convert(color, out L, out M, out S); Color color = LMS.ToColor(L, M, S); // Instance methods LMS components = new LMS(color); Color color = components.ToColor(); RGB The RGB (red, green, blue) components of a color in the range [0..1]. // Extension methods color.ToRGB(out r, out g, out b); RGB components = color.ToRGB(); // Static methods RGB.Convert(color, out r, out g, out b); Color color = RGB.ToColor(r, g, b); // Instance methods RGB components = new RGB(color); Color color = components.ToColor(); RGB255 The RGB (red, green, blue) components of a color in the range [0..255]. // Extension methods color.ToRGB255(out r, out g, out b); RGB255 components = color.ToRGB255(); // Static methods RGB255.Convert(color, out r, out g, out b); Color color = RGB255.ToColor(r, g, b); // Instance methods RGB255 components = new RGB255(color); Color color = components.ToColor(); RGBA The RGBA (red, green, blue, alpha) components of a color in the range [0..1]. // Extension methods color.ToRGBA(out r, out g, out b, out a); RGBA components = color.ToRGBA(); // Static methods RGBA.Convert(color, out r, out g, out b, out a); Color color = RGBA.ToColor(r, g, b, a); // Instance methods RGBA components = new RGBA(color); Color color = components.ToColor(); RGBA255 The RGBA (red, green, blue, alpha) components of a color in the range [0..255]. // Extension methods color.ToRGBA255(out r, out g, out b, out a); RGBA255 components = color.ToRGBA255(); // Static methods RGBA255.Convert(color, out r, out g, out b, out a); Color color = RGBA255.ToColor(r, g, b, a); // Instance methods RGBA255 components = new RGBA255(color); Color color = components.ToColor(); YCbCr The Yâ²CbCr components of a color - luma (Yâ²) and chroma (Cb,Cr). // Extension methods color.ToYCbCr(out Y, out Cb, out Cr); YCbCr components = color.ToYCbCr(); // Static methods YCbCr.Convert(color, out Y, out Cb, out Cr); Color color = YCbCr.ToColor(Y, Cb, Cr); // Instance methods YCbCr components = new YCbCr(color); Color color = components.ToColor(); YPbPr The Yâ²PbPr components of a color - luma (Yâ²) and chroma (Pb,Pr). // Extension methods color.ToYPbPr(out Y, out Pb, out Pr); YPbPr components = color.ToYPbPr(); // Static methods YPbPr.Convert(color, out Y, out Pb, out Pr); Color color = YPbPr.ToColor(Y, Pb, Pr); // Instance methods YPbPr components = new YPbPr(color); Color color = components.ToColor(); YIQ The Yâ²IQ components of a color - luma (Yâ²) and chroma (I,Q). // Extension methods color.ToYIQ(out Y, out I, out Q); YIQ components = color.ToYIQ(); // Static methods YIQ.Convert(color, out Y, out I, out Q); Color color = YIQ.ToColor(Y, I, Q); // Instance methods YIQ components = new YIQ(color); Color color = components.ToColor(); YUV The Yâ²UV components of a color - luma (Yâ²) and chroma (U,V). // Extension methods color.ToYUV(out Y, out U, out V); YUV components = color.ToYUV(); // Static methods YUV.Convert(color, out Y, out U, out V); Color color = YUV.ToColor(Y, U, V); // Instance methods YUV components = new YUV(color); Color color = components.ToColor();"
  },
  "manual/editors.html": {
    "href": "manual/editors.html",
    "title": "Custom Editors | Color Pro",
    "keywords": "Custom Editors Material Palette Generator The Color Pro package includes 3 custom Editor windows for generating materials from colors. These windows can be accessed from Window > Material Palette Generator > ... Colors Converts a predefined array of colors to materials. Each material is cloned from a base material and the main color is set on the material. Gradient Interpolates a linear amount of stops of a gradient converted into materials. Each material is cloned from a base material and the main color is set on the material. Monochromatic Generates tints, shades, or tones of color converted into materials. Each material is cloned from a base material and the main color is set on the material."
  },
  "manual/equality.html": {
    "href": "manual/equality.html",
    "title": "Equality | Color Pro",
    "keywords": "Equality Sometimes when comparing colors you would expect them to be equal but they aren't. This can happen when two colors have the same hexadecimal value, but the floating point values might be slightly different. The Color Pro package provides two other ways to determine color equality through the static class Equality . Rounded Comparison To avoid floating point precision errors, you can round the component values before comparing: // Rounded to the nearest thousand bool equals = color1.Equals(color2, 1000); // Ignoring alpha components bool equals = color1.Equals(color2, 1000, false); Comparing Hex To compare the hexadecimal representation of two colors: bool equals = color1.EqualsHex(color2);"
  },
  "manual/gradients.html": {
    "href": "manual/gradients.html",
    "title": "Gradients | Color Pro",
    "keywords": "Gradients Creating gradients in Unity via code is often unintuitive and cumbersome. The Color Pro packages includes a few helper methods in the static class Gradients to make working with gradients easier. Creating Gradients // Create a gradient between two colors Gradient gradient = Gradients.Create(Color.white, Color.black); // Interpolate a linear amount of stops between two colors Gradient gradient = Gradients.Create(Color.white, Color.black, 5); // Distribute a predefined array of stops between two colors int[] stops = new int[] { 0.0f, 0.1f, 0.3f, 0.6f, 1.0f }; Gradient gradient = Gradients.Create(Color.white, Color.black, stops); // This only exists because there's no constructor for it but still cumbersome to use GradientColorKey[] colors = new GradientColorKey[] { ... }; GradientAlphaKey[] alpha = new GradientAlphaKey[] { ... }; Gradient gradient = Gradients.Create(colors, alpha); // Variation of the above with a constant alpha GradientColorKey[] colors = new GradientColorKey[] { ... }; Gradient gradient = Gradients.Create(Colors, 1.0f); Extracting Colors // Get the colors of the gradient (including the evaluated alpha values) Color[] colors = gradient.ToColors(); // Interpolate a linear amount of stops within the gradient Color[] colors = gradient.ToColors(5);"
  },
  "manual/harmonies.html": {
    "href": "manual/harmonies.html",
    "title": "Harmonies | Color Pro",
    "keywords": "Harmonies Color harmonies are combinations of colors that create aesthetically pleasing contrasts and consonances that are said to be harmonious. The Color Pro package includes several extension methods declared in the static class Harmonies for generating common color harmonies. Monochromatic A set of tints and shades formed from a base color. Color[] harmony = baseColor.Monochromatic(10, 0.1f); // 10 colors with 10% difference each baseColor.MonochromaticNonAlloc(array, 0.1f); // prevent heap allocations Analogous A set of colors located next to each other on the color wheel. Color[] harmony = baseColor.Analogous(3, 30); // 3 colors with 30Â° hue shift each baseColor.AnalogousNonAlloc(array, 30); // prevent heap allocations Complementary Two colors located opposite to each other on the color wheel. Color[] harmony = baseColor.Complementary(); baseColor.ComplementaryNonAlloc(array); // prevent heap allocations Split Complementary A base color with two colors adjacent to the directly opposing color on the color wheel. Color[] harmony = baseColor.SplitComplementary(); baseColor.SplitComplementaryNonAlloc(array); // prevent heap allocations Double Split Complementary Two pairs of complementary colors on either side of a base color. Color[] harmony = baseColor.DoubleSplitComplementary(); baseColor.DoubleSplitComplementaryNonAlloc(array); // prevent heap allocations Triadic Three colors evenly spaced around the color wheel to form a triangle (120Â° hue shifts). Color[] harmony = baseColor.Triadic(); baseColor.TriadicNonAlloc(array); // prevent heap allocations Square Four colors evenly spaced around the color wheel to form a square (90Â° hue shifts). Color[] harmony = baseColor.Square(); baseColor.SquareNonAlloc(array); // prevent heap allocations"
  },
  "manual/illuminants.html": {
    "href": "manual/illuminants.html",
    "title": "Illuminants | Color Pro",
    "keywords": "Illuminants The Color Pro package defines 20 common illuminants in the Illuminant enum. Illuminants provide a basis for comparing images or colors recorded under different lighting. a : Incandescent/Tungsten b : Old Direct Sunlight at Noon c : Old Daylight d50 : ICC Profile PCS d55 : Mid-morning Daylight d65 : Daylight, sRGB, Adobe-RGB d75 : North Sky Daylight e : Equal Energy f1 : Daylight Fluorescent f2 : Cool Fluorescent f3 : White Fluorescent f4 : Warm White Fluorescent f5 : Daylight Fluorescent f6 : Lite White Fluorescent f7 : Daylight Fluorescent, D65 Simulator f8 : Sylvania F40, D50 Simulator f9 : Cool White Fluorescent f10 : Ultralume 50, Philips TL85 f11 : Ultralume 40, Philips TL84 f12 : Ultralume 30, Philips TL83 Standard Observers A CIE color-mapping function called the standard observer which represents an average human's chromatic response while observing an object under the illuminant. Two standard observers are defined in the StandardObserver enum. Two : CIE 1931 2Â° Standard Observer Ten : CIE 1964 10Â° Standard Observer White Points A white point (often referred to as reference white or target white in technical documents) is a set of tristimulus values or chromaticity coordinates that serve to define the color \"white\" in image capture, encoding, or reproduction. White points are usually scaled by 100 and are represented as Tristimulus values. Illuminant illuminant = Illuminant.d65; StandardObserver observer = StandardObserver.Two; Tristimulus whitePoint = illuminant.GetWhitePoint(observer, 100.0f); Color Models Many of the color models supported in the Color Pro package can be created or converted using a given illuminant and standard observer. See the Conversion manual for more information. The following types can be created using illuminants and standard observers: CIE LAB CIE LUV CIE LCh(ab) CIE LCh(uv) CIE UVW Hunter Lab"
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "Color Pro | Color Pro",
    "keywords": "Color Pro The Color Pro package is a robust utility library for working with colors in Unity projects. The package includes hundreds of functions to support the use of color, including color mixing, conversion, accessibility, harmonies, colorimetry, and much more. Reference Accessibility Adjustment Arithmetic Averaging Color Blindness Components Contrast Conversion Custom Editors Equality Gradients Harmonies Illuminants Luminance Mixing Mixing Models Palettes Random Signal Encoding Temperature"
  },
  "manual/installation.html": {
    "href": "manual/installation.html",
    "title": "Installation | Color Pro",
    "keywords": "Installation Use the Unity Package Manager to install the Color Pro package. Open the Package Manager in Window > Package Manager Click the add ( + ) button in the status bar Select Add package from git URL from the add menu Enter the following Git URL in the text box and click Add: https://github.com/zigurous/unity-color-pro.git For more information on the Package Manager and installing packages, see the following pages: Unity's Package Manager Installing from a Git URL Importing Import the package namespace in each script or file you want to use it. Note : You may need to regenerate project files/assemblies first. using Zigurous.ColorPro;"
  },
  "manual/luminance.html": {
    "href": "manual/luminance.html",
    "title": "Luminance | Color Pro",
    "keywords": "Luminance The Color Pro package includes a few functions for calculating and testing color luminance and perceived brightness. These are defined as extension methods in the static class Luminance . Relative Luminance Relative luminance is calculated according to the HSL color model and is most often used when calculating the contrast between colors. float luminance = color.RelativeLuminance(); As an example, here's how contrast is calculated between colors using relative luminance: public static float ContrastRatio(this Color color, Color other) { float luminanceA = color.RelativeLuminance(); float luminanceB = other.RelativeLuminance(); float darker = Mathf.Min(luminanceA, luminanceB); float lighter = Mathf.Max(luminanceA, luminanceB); return (lighter + 0.05f) / (darker + 0.05f); } Perceived Brightness Perceived brightness is measured according to the HSP color model and can be used to get a more accurate perception of when a color is considered \"light\" or \"dark\". float brightness = color.PerceivedBrightness(); bool light = color.IsLight(); // perceived brightness >= 0.5 bool dark = color.IsDark(); // perceived brightness <= 0.5"
  },
  "manual/mixing.html": {
    "href": "manual/mixing.html",
    "title": "Mixing | Color Pro",
    "keywords": "Mixing Mixing colors together is very common when producing color palettes. The most notable examples of this are creating tints (mixing with white), shades (mixing with black), and tones (mixing with gray), although any two colors can be mixed together. These functions are declared as extension methods in the static class Mixing . Color red = Color.red; Color yellow = Color.yellow; Color orange = red.Mix(yellow); // 50% red, 50% yellow Color redOrange = red.Mix(yellow, 0.25f); // 75% red, 25% yellow Color amber = red.Mix(yellow, 0.75f); // 25% red, 75% yellow Note: Colors are mixed using their RGB values (additive mixing model). See the Mixing Models manual for more information on the differences. Tints Tints are produced by mixing a color with white (increases lightness). Color tint = color.Tint(0.1f); // 10% white Color same = color.Tint(0.0f); // no change Color white = color.Tint(1.0f); // pure white Color[] tints = color.Tints(10); // 10 tints color.TintsNonAlloc(array); // prevent heap allocations Shades Tints are produced by mixing a color with black (decreases lightness). Color shade = color.Shade(0.1f); // 10% black Color same = color.Shade(0.0f); // no change Color black = color.Shade(1.0f); // pure black Color[] shades = color.Shades(10); // 10 shades color.ShadesNonAlloc(array); // prevent heap allocations Tones Tints are produced by mixing a color with gray (decreases saturation). Color tone = color.Tone(0.1f); // 10% gray Color same = color.Tone(0.0f); // no change Color gray = color.Tone(1.0f); // pure gray (50% black / 50% white) Color[] tones = color.Tones(10); // 10 tones color.TonesNonAlloc(array); // prevent heap allocations"
  },
  "manual/mixing-models.html": {
    "href": "manual/mixing-models.html",
    "title": "Mixing Models | Color Pro",
    "keywords": "Mixing Models Mixing models describe how colors are mixed together to form all other colors. The enum MixingModel includes the models outlined below as well as extension methods for getting the colors of the color wheel for the respective mixing model. MixingModel model; Color[] primary = model.PrimaryColors(); Color[] secondary = model.SecondaryColors(); Color[] tertiary = model.TertiaryColors(); Color[] colorWheel = model.ColorWheel(); // Fill an existing array of colors to prevent heap allocations model.PrimaryColorsNonAlloc(array); // 3 colors model.SecondaryColorsNonAlloc(array); // 3 colors model.TertiaryColorsNonAlloc(array); // 6 colors model.ColorWheelNonAlloc(array); // 12 colors Additive A mixing model that leads to the RGB color model with primary colors of red, green, and blue. The absence of color is black, and the presence of all three primary colors is white. Colors are added together to form white. Additive color mixing simulates light. Subtractive A mixing model that leads to the CMYK color model with primary colors of cyan, magenta, and yellow. The absence of color is white, and the presence of all three primary colors is black. Colors are subtracted to form black. Subtractive color mixing simulates print. Traditional A mixing model that leads to the RYB color model with primary colors of red, yellow, and blue. The absence of color is white, and the presence of all three primary colors is black. Traditional color mixing simulates paint."
  },
  "manual/palettes.html": {
    "href": "manual/palettes.html",
    "title": "Palettes | Color Pro",
    "keywords": "Palettes The Color Pro package includes two ScriptableObject types for representing color and material palettes. Either palette type can be created from Unity's asset menu Assets > Create > Zigurous > ... Color Palette Stores an array of colors. The palette can be converted to a material palette if desired. The Color Pro package also includes predefined color palette assets containing the colors of every mixing model . ColorPalette palette; // Set or add colors palette[index] = color; palette.Add(color); // Get colors from the palette Color color = palette[index]; Color random = palette.Random(); // Convert to material palette MaterialPalette materialPalette = palette.Convert(baseMaterial); Material Palette Stores an array of materials. The palette can be converted to a color palette if desired. Related, see the Material Generators manual for more information on generating sets of materials from colors. MaterialPalette palette; // Set or add materials palette[index] = material; palette.Add(material); // Get materials from the palette Material material = palette[index]; Material random = palette.Random(); // Convert to color palette ColorPalette colorPalette = palette.Convert();"
  },
  "manual/random.html": {
    "href": "manual/random.html",
    "title": "Random | Color Pro",
    "keywords": "Random Sometimes it is useful to generate a random color or set of colors. The Color Pro package includes a few functions in the static class Random for doing just that. Single Color Color color = Random.Color(); Multiple Colors Color[] colors = Random.Colors(10); // 10 random colors Random.ColorsNonAlloc(array); // prevent heap allocations Palettes // Generate a given amount of random colors Color[] tints = color.RandomTints(10); Color[] shades = color.RandomShades(10); Color[] tones = color.RandomTones(10); Color[] lighter = color.RandomLighter(10); Color[] darker = color.RandomDarker(10); Color[] saturated = color.RandomSaturated(10); Color[] desaturated = color.RandomDesaturated(10); Color[] hues = color.RandomHues(10); // Fill an existing array of colors to prevent heap allocations color.RandomTintsNonAlloc(array); color.RandomShadesNonAlloc(array); color.RandomTonesNonAlloc(array); color.RandomLighterNonAlloc(array); color.RandomDarkerNonAlloc(array); color.RandomSaturatedNonAlloc(array); color.RandomDesaturatedNonAlloc(array); color.RandomHuesNonAlloc(array);"
  },
  "manual/signal-encoding.html": {
    "href": "manual/signal-encoding.html",
    "title": "Signal Encoding | Color Pro",
    "keywords": "Signal Encoding Signal encoding is the process of encoding interlaced analog video/image signals into digital video/image form. The Color Pro package defines 3 signal encodings in the SignalEncoding enum. Rec601 : ITU-R BT.601 (SDTV) Rec709 : ITU-R BT.709 (HDTV) Rec2020 : ITU-R BT.2020 (UHDTV) Rec2100 : ITU-R BT.2100 (HDR-TV) Luma Coefficients Luma coefficients are a tuple of RGB values that are used to calculate the luma of a color under different signal encodings. The coefficients are also used in calculations of relative luminance, perceived brightness, and more. Luma coefficients are represented with the LumaCoefficients data structure. SignalEncoding encoding = SignalEncoding.Rec709; LumaCoefficients coefficients = encoding.GetCoefficients(); Color Models Certain color models are created and represented with a given signal encoding. See the Conversion manual for more information. The following color models all support signal encodings: YCbCr YPbPr YIQ YUV"
  },
  "manual/temperature.html": {
    "href": "manual/temperature.html",
    "title": "Temperature | Color Pro",
    "keywords": "Temperature The Color Pro package includes a few functions for calculating and testing color temperature. These are defined as extension methods in the static class Temperature . CCT Calculates the CCT temperature of the color in Kelvin. // Color temperature float temperature = color.CCT(); string temperature = color.CCTString(); // Illuminant temperature Illuminant illuminant = Illuminant.d65; float temperature = illuminant.CCT(); string temperature = illuminant.CCTString(); Warm/Cool Determines if the color is considered \"warm\" or \"cool\" based on color hue. bool warm = color.IsWarm(); // 0Â° to 90Â°, 270Â° to 360Â° bool cool = color.IsCool(); // 90Â° to 270Â°"
  }
}