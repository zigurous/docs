{
  "api/Zigurous.ColorUtils.Accessibility.html": {
    "href": "api/Zigurous.ColorUtils.Accessibility.html",
    "title": "Class Accessibility | Color Utils",
    "keywords": "Class Accessibility Functions for testing color accessibility requirements. Inheritance System.Object Accessibility Namespace : Zigurous.ColorUtils public static class Accessibility Methods IsCompliant(Color, Color, Accessibility.Requirement) Determines if the contrast between the color and a background color is compliant to a given accessibility requirement. public static bool IsCompliant(this Color foreground, Color background, Accessibility.Requirement requirement) Parameter Description foreground The foreground color. background The background color. requirement The requirement to check. IsCompliant(Accessibility.Requirement, Color, Color) Determines if the contrast between a foreground color and a background color is compliant to a given accessibility requirement. public static bool IsCompliant(Accessibility.Requirement requirement, Color foreground, Color background) Parameter Description requirement The requirement to check. foreground The foreground color. background The background color. MinimumContrastRatio(Accessibility.Requirement) Returns the minimum contrast ratio needed to pass compliance of a given accessibility requirement. public static float MinimumContrastRatio(this Accessibility.Requirement requirement) Parameter Description requirement The requirement to check."
  },
  "api/Zigurous.ColorUtils.Accessibility.Requirement.html": {
    "href": "api/Zigurous.ColorUtils.Accessibility.Requirement.html",
    "title": "Enum Accessibility.Requirement | Color Utils",
    "keywords": "Enum Accessibility.Requirement A requirement defining how the visual presentation of text achieves a minimum contrast ratio to pass the accessibility specification - https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast Namespace : Zigurous.ColorUtils public enum Requirement Fields Name Description Enhanced The visual presentation of text has a contrast ratio of at least 7:1 (Level AAA) - https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-visual-audio-contrast7 EnhancedLargeText The visual presentation of large text has a contrast ratio of at least 4.5:1 (Level AAA) - https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-visual-audio-contrast7 Minimum The visual presentation of text has a contrast ratio of at least 4.5:1 (Level AA) - https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-visual-audio-contrast-contrast MinimumLargeText The visual presentation of large text has a contrast ratio of at least 3:1 (Level AA) - https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-visual-audio-contrast-contrast"
  },
  "api/Zigurous.ColorUtils.Adjustment.html": {
    "href": "api/Zigurous.ColorUtils.Adjustment.html",
    "title": "Class Adjustment | Color Utils",
    "keywords": "Class Adjustment Functions for adjusting color values, e.g., hue, saturation, brightness, lightness, etc. Inheritance System.Object Adjustment Namespace : Zigurous.ColorUtils public static class Adjustment Methods Complement(Color) Returns the complement of the color by shifting the hue 180Â°. public static Color Complement(this Color color) Parameter Description color The color to get the complement of. Darken(ref Color, Single) Decreases the lightness of the color by the given amount. public static void Darken(this ref Color color, float decrease = 0.1F) Parameter Description color The color to adjust. decrease The amount to decrease the lightness. Darker(Color, Single) Returns a new instance of the color with decreased lightness. public static Color Darker(this Color color, float decrease = 0.1F) Parameter Description color The color to adjust. decrease The amount to decrease the lightness. Desaturate(ref Color, Single) Decreases the saturation of the color by the given amount. public static void Desaturate(this ref Color color, float amount = 0.1F) Parameter Description color The color to adjust. amount The amount to decrease the saturation. Desaturated(Color, Single) Returns a new instance of the color with decreased saturation. public static Color Desaturated(this Color color, float amount = 0.1F) Parameter Description color The color to adjust. amount The amount to decrease the saturation. Grayscale(ref Color) Sets the saturation of the color to zero. public static void Grayscale(this ref Color color) Parameter Description color The color to adjust. Grayscaled(Color) Returns a new instance of the color with zero saturation. public static Color Grayscaled(this Color color) Parameter Description color The color to adjust. HueShift(ref Color, Single) Shifts the hue of the color by the given amount of degrees. public static void HueShift(this ref Color color, float degrees) Parameter Description color The color to adjust. degrees The amount of degrees to shift the hue. HueShifted(Color, Single) Returns a new instance of the color by shifting its hue by a given amount of degrees. public static Color HueShifted(this Color color, float degrees) Parameter Description color The color to adjust. degrees The amount of degrees to shift the hue. Invert(ref Color) Inverts the color by subtracting the RGB components from 1. public static void Invert(this ref Color color) Parameter Description color The color to invert. Inverted(Color) Returns the inverse of the color by subtracting the RGB components from 1. public static Color Inverted(this Color color) Parameter Description color The color to get the inverse of. Lighten(ref Color, Single) Increases the lightness of the color by the given amount. public static void Lighten(this ref Color color, float increase = 0.1F) Parameter Description color The color to adjust. increase The amount to increase the lightness. Lighter(Color, Single) Returns a new instance of the color with increased lightness. public static Color Lighter(this Color color, float increase = 0.1F) Parameter Description color The color to adjust. increase The amount to increase the lightness. Saturate(ref Color, Single) Increases the saturation of the color by the given amount. public static void Saturate(this ref Color color, float amount = 0.1F) Parameter Description color The color to adjust. amount The amount to increase the saturation. Saturated(Color, Single) Returns a new instance of the color with increased saturation. public static Color Saturated(this Color color, float amount = 0.1F) Parameter Description color The color to adjust. amount The amount to increase the saturation. WebSafe(Color) Returns the nearest websafe color to the current color. public static Color WebSafe(this Color color) Parameter Description color The color to get the closet websafe color of."
  },
  "api/Zigurous.ColorUtils.ARGB.html": {
    "href": "api/Zigurous.ColorUtils.ARGB.html",
    "title": "Struct ARGB | Color Utils",
    "keywords": "Struct ARGB The ARGB (alpha, red, green, blue) components of a color in the range [0..1]. Implements IEquatable < ARGB > Namespace : Zigurous.ColorUtils [Serializable] public struct ARGB : IEquatable<ARGB> Constructors ARGB(Color) public ARGB(Color color) Parameter Description color ARGB(Single, Single, Single, Single) public ARGB(float alpha, float red, float green, float blue) Parameter Description alpha red green blue Fields alpha The alpha component of the color in the range [0..1]. public float alpha blue The blue component of the color in the range [0..1]. public float blue green The green component of the color in the range [0..1]. public float green red The red component of the color in the range [0..1]. public float red Methods Equals(Object) public override bool Equals(object obj) Parameter Description obj Overrides System.ValueType.Equals(System.Object) Equals(ARGB) public bool Equals(ARGB other) Parameter Description other Extract(Color, out Single, out Single, out Single, out Single) Extracts the ARGB (alpha, red, green, blue) components from a color. public static void Extract(Color color, out float a, out float r, out float g, out float b) Parameter Description color a r g b GetHashCode() public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components into a color. public Color ToColor() ToColor(Single, Single, Single, Single) Converts ARGB (alpha, red, green, blue) components into a color. public static Color ToColor(float alpha, float red, float green, float blue) Parameter Description alpha red green blue ToString() public override string ToString() Overrides System.ValueType.ToString() Operators Equality(ARGB, ARGB) public static bool operator ==(ARGB lhs, ARGB rhs) Parameter Description lhs rhs Explicit(Color to ARGB) public static explicit operator ARGB(Color color) Parameter Description color Explicit(ARGB to Color) public static explicit operator Color(ARGB argb) Parameter Description argb Implicit(ARGB to RGB) public static implicit operator RGB(ARGB argb) Parameter Description argb Implicit(ARGB to RGBA) public static implicit operator RGBA(ARGB argb) Parameter Description argb Inequality(ARGB, ARGB) public static bool operator !=(ARGB lhs, ARGB rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorUtils.ARGB255.html": {
    "href": "api/Zigurous.ColorUtils.ARGB255.html",
    "title": "Struct ARGB255 | Color Utils",
    "keywords": "Struct ARGB255 The ARGB (alpha, red, green, blue) components of a color in the range [0..255]. Implements IEquatable < ARGB255 > Namespace : Zigurous.ColorUtils [Serializable] public struct ARGB255 : IEquatable<ARGB255> Constructors ARGB255(Color) public ARGB255(Color color) Parameter Description color ARGB255(Int32, Int32, Int32, Int32) public ARGB255(int alpha, int red, int green, int blue) Parameter Description alpha red green blue Fields alpha The alpha component of the color in the range [0..255]. public int alpha blue The blue component of the color in the range [0..255]. public int blue green The green component of the color in the range [0..255]. public int green red The red component of the color in the range [0..255]. public int red Methods Equals(Object) public override bool Equals(object obj) Parameter Description obj Overrides System.ValueType.Equals(System.Object) Equals(ARGB255) public bool Equals(ARGB255 other) Parameter Description other Extract(Color, out Int32, out Int32, out Int32, out Int32) Extracts the ARGB (alpha, red, green, blue) components from a color. public static void Extract(Color color, out int a, out int r, out int g, out int b) Parameter Description color a r g b GetHashCode() public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components into a color. public Color ToColor() ToColor(Int32, Int32, Int32, Int32) Converts ARGB (alpha, red, green, blue) components into a color. public static Color ToColor(int alpha, int red, int green, int blue) Parameter Description alpha red green blue ToString() public override string ToString() Overrides System.ValueType.ToString() Operators Equality(ARGB255, ARGB255) public static bool operator ==(ARGB255 lhs, ARGB255 rhs) Parameter Description lhs rhs Explicit(Color to ARGB255) public static explicit operator ARGB255(Color color) Parameter Description color Explicit(ARGB255 to Color) public static explicit operator Color(ARGB255 argb) Parameter Description argb Implicit(ARGB255 to RGB255) public static implicit operator RGB255(ARGB255 argb) Parameter Description argb Implicit(ARGB255 to RGBA255) public static implicit operator RGBA255(ARGB255 argb) Parameter Description argb Inequality(ARGB255, ARGB255) public static bool operator !=(ARGB255 lhs, ARGB255 rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorUtils.Arithmetic.html": {
    "href": "api/Zigurous.ColorUtils.Arithmetic.html",
    "title": "Class Arithmetic | Color Utils",
    "keywords": "Class Arithmetic Functions for color arithmetic. Inheritance System.Object Arithmetic Namespace : Zigurous.ColorUtils public static class Arithmetic Methods Add(Color, Color, Boolean) Returns the result of adding the RGBA component values of lhs to rhs . Clamps the values in the range [0..1]. public static Color Add(Color lhs, Color rhs, bool addAlpha = true) Parameter Description lhs The first color to add. rhs The second color to add. addAlpha True to add the alpha components, otherwise the first color's alpha is used. Divide(Color, Color, Boolean) Returns the result of dividing the RGBA component values of lhs by rhs . Clamps the values in the range [0..1]. public static Color Divide(Color lhs, Color rhs, bool divideAlpha = true) Parameter Description lhs The first color to divide. rhs The second color to divide. divideAlpha True to divide the alpha components, otherwise the first color's alpha is used. Divide(Color, Single, Boolean) Returns the result of dividing the RGBA component values of a color by a given divisor. Clamps the values in the range [0..1]. public static Color Divide(Color color, float divisor, bool divideAlpha = true) Parameter Description color The color to divide. divisor The amount to divide the color by. divideAlpha True to divide the alpha component, otherwise it is kept the same. Multiply(Color, Color, Boolean) Returns the result of multiplying the RGBA component values of lhs to rhs . Clamps the values in the range [0..1]. public static Color Multiply(Color lhs, Color rhs, bool multiplyAlpha = true) Parameter Description lhs The first color to multiply. rhs The second color to multiply. multiplyAlpha True to multiply the alpha components, otherwise the first color's alpha is used. Multiply(Color, Single, Boolean) Returns the result of multiplying the RGBA component values of a color with a given multiplier. Clamps the values in the range [0..1]. public static Color Multiply(Color color, float multiplier, bool multiplyAlpha = true) Parameter Description color The color to multiply. multiplier The amount to multiply the color by. multiplyAlpha True to multiply the alpha component, otherwise it is kept the same. Subtract(Color, Color, Boolean) Returns the result of subtracting the RGBA component values of rhs from lhs . Clamps the values in the range [0..1]. public static Color Subtract(Color lhs, Color rhs, bool subtractAlpha = true) Parameter Description lhs The first color to subtract. rhs The second color to subtract. subtractAlpha True to subtract the alpha components, otherwise the first color's alpha is used."
  },
  "api/Zigurous.ColorUtils.Averaging.html": {
    "href": "api/Zigurous.ColorUtils.Averaging.html",
    "title": "Class Averaging | Color Utils",
    "keywords": "Class Averaging Functions for averaging colors together. Inheritance System.Object Averaging Namespace : Zigurous.ColorUtils public static class Averaging Methods Average(Color, Color, Boolean) Returns the result of averaging the RGBA component values of one color with another. public static Color Average(Color first, Color second, bool averageAlpha = true) Parameter Description first The first color to average. second The second color to average. averageAlpha True to average the alpha components, otherwise the first color's alpha is used. Average(Color[]) Returns the result of averaging the RGBA component values of multiple colors. public static Color Average(params Color[] colors) Parameter Description colors The colors to average. AveragedWith(Color, Color, Boolean) Returns the result of averaging the RGBA component values of the color with another. public static Color AveragedWith(this Color color, Color other, bool averageAlpha = true) Parameter Description color The first color to average. other The second color to average. averageAlpha True to average the alpha components, otherwise the first color's alpha is used."
  },
  "api/Zigurous.ColorUtils.CMYK.html": {
    "href": "api/Zigurous.ColorUtils.CMYK.html",
    "title": "Struct CMYK | Color Utils",
    "keywords": "Struct CMYK The CMYK (cyan, magenta, yellow, black) components of a color in the range [0..1]. Implements IEquatable < CMYK > Namespace : Zigurous.ColorUtils [Serializable] public struct CMYK : IEquatable<CMYK> Constructors CMYK(Color) public CMYK(Color color) Parameter Description color CMYK(Single, Single, Single, Single) public CMYK(float cyan, float magenta, float yellow, float black) Parameter Description cyan magenta yellow black Fields black The black component of the color in the range [0..1]. public float black cyan The cyan component of the color in the range [0..1]. public float cyan magenta The magenta component of the color in the range [0..1]. public float magenta yellow The yellow component of the color in the range [0..1]. public float yellow Methods Equals(Object) public override bool Equals(object obj) Parameter Description obj Overrides System.ValueType.Equals(System.Object) Equals(CMYK) public bool Equals(CMYK other) Parameter Description other Extract(Color, out Single, out Single, out Single, out Single) Extracts the CMYK (cyan, magenta, yellow, black) components from a color in the range [0..1]. public static void Extract(Color color, out float c, out float m, out float y, out float k) Parameter Description color c m y k GetHashCode() public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components into a color. public Color ToColor() ToColor(Single, Single, Single, Single) Converts CMYK (cyan, magenta, yellow, black) components into a color. public static Color ToColor(float c, float m, float y, float k) Parameter Description c m y k ToString() public override string ToString() Overrides System.ValueType.ToString() Operators Equality(CMYK, CMYK) public static bool operator ==(CMYK lhs, CMYK rhs) Parameter Description lhs rhs Explicit(Color to CMYK) public static explicit operator CMYK(Color color) Parameter Description color Explicit(CMYK to Color) public static explicit operator Color(CMYK cmyk) Parameter Description cmyk Inequality(CMYK, CMYK) public static bool operator !=(CMYK lhs, CMYK rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorUtils.ColorModel.html": {
    "href": "api/Zigurous.ColorUtils.ColorModel.html",
    "title": "Enum ColorModel | Color Utils",
    "keywords": "Enum ColorModel A color model is an abstract mathematical model describing the ways colors can be represented as tuples of numbers, typically as three or four values or color components. Namespace : Zigurous.ColorUtils public enum ColorModel Fields Name Description CIE The CIE color spaces were the first defined quantitative links between distributions of wavelengths in the electromagnetic visible spectrum, and physiologically perceived colors in human color vision. The mathematical relationships that define these color spaces are essential tools for color management. CMYK The CMYK (cyan, magenta, yellow, black) color model, a subtractive color mixing model used in color printing. Hex A representation of the RGB color model using hexadecimal numbers, i.e., #0080ff . HSB The HSB (hue, saturation, brightness) color model is an alternative representation to the RGB color model designed to more closely align with the way human vision perceives color-making attributes. HSB is the same as HSV. The HSB representation models the way paints of different colors mix together, with the saturation dimension resembling various shades of brightly colored paint, and the brightness dimension resembling the mixture of those paints with varying amounts of black or white paint HSI The HSI (hue, saturation, intensity) color model is an alternative representation to the RGB color model designed to more closely align with the way human vision perceives color-making attributes. The HSI model commonly used for computer vision, which takes H as a hue dimension and the component average I (\"intensity\") as a lightness dimension, does not attempt to \"fill\" a cylinder by its definition of saturation. Instead of presenting color choice or modification interfaces to end users, the goal of HSI is to facilitate separation of shapes in an image. HSL The HSL (hue, saturation, lightness) color model is an alternative representation to the RGB color model designed to more closely align with the way human vision perceives color-making attributes. The HSL model attempts to resemble more perceptual color models such as the natural color system (NCS) or Munsell color system, placing fully saturated colors around a circle at a lightness value of âÂ½, where a lightness value of 0 or 1 is fully black or white, respectively. HSV The HSV (hue, saturation, value) color model is an alternative representation to the RGB color model designed to more closely align with the way human vision perceives color-making attributes. HSV is the same as HSB. The HSV representation models the way paints of different colors mix together, with the saturation dimension resembling various shades of brightly colored paint, and the value dimension resembling the mixture of those paints with varying amounts of black or white paint RGB The RGB (red, green, blue) color model, an additive color mixing, device-dependent model used mainly for the representation and display of images in digital formats. RYB The RYB (red, yellow, blue) color model, a traditional model used in a standard artist's color wheel, particularly in painting. YCbCr The YCbCr color model used as a part of the color image pipeline in video and digital photography systems. Y is the luminance (luma) component and Cb and Cr are the blue-difference and red-difference chrominance (chroma) components, respectively. YIQ YIQ is the color model used by the NTSC color TV system, intended to take advantage of human color-response characteristics. The chroma component I stands for in-phase , while chroma component Q stands for quadrature , referring to the used in quadrature amplitude modulation. YPbPr YPbPr is the analog version of the YCbCr color space; the two are numerically equivalent but YPbPr is designed for use in analog systems while YCbCr is intended for digital video. YUV YUV is a color encoding system typically used as part of a color image pipeline. It encodes a color image or video taking human perception into account, allowing reduced bandwidth for chroma components, thereby typically enabling transmission errors or compression artifacts to be more efficiently masked by human perception than using a \"direct\" RGB-representation."
  },
  "api/Zigurous.ColorUtils.ColorPalette.html": {
    "href": "api/Zigurous.ColorUtils.ColorPalette.html",
    "title": "Class ColorPalette | Color Utils",
    "keywords": "Class ColorPalette Represents a palette of colors that can be saved as a Unity asset. Inheritance System.Object ColorPalette Namespace : Zigurous.ColorUtils public sealed class ColorPalette : ScriptableObject Fields colors The colors that define the palette. public Color[] colors Methods CreateMaterialPalette(Material) Converts the color palette into a material palette by instantiating a new material for each color. public MaterialPalette CreateMaterialPalette(Material baseMaterial) Parameter Description baseMaterial The material to clone when creating new materials. Returns Description MaterialPalette A new material palette. Random() Returns a random color from the palette. public Color Random()"
  },
  "api/Zigurous.ColorUtils.ColorSpace.html": {
    "href": "api/Zigurous.ColorUtils.ColorSpace.html",
    "title": "Enum ColorSpace | Color Utils",
    "keywords": "Enum ColorSpace A color space is a specific organization of colors. In combination with physical device profiling, it allows for reproducible representations of color, in both analog and digital representations. Adding a specific mapping function between a color model and a reference color space establishes a definite \"footprint\", known as a gamut, and for a given color model this defines a color space. Namespace : Zigurous.ColorUtils public enum ColorSpace Fields Name Description CIELAB CIE 1976 L*a*b* is a color space in which L is lightness and a and b are chromaticity components, with the difference that the color values are far more than the human gamut. It was designed to be perceptually uniform with respect to human color vision, meaning that the same amount of numerical change in these values corresponds to about the same amount of visually perceived change. CIELCh The CIELChÂ° color space is a cylindrical representation of the CIELAB or CIELUV cube color space, where C* is the chroma and hÂ° is the hue. The L* lightness value remains unchanged. The LCh color space is not the same as the HSV, HSL or HSB color models, although their values can also be interpreted as a base color, saturation and lightness of a color. The HSL values are a polar coordinate transformation of what is technically defined RGB cube color space. LCh is still perceptually uniform. CIELUV The CIE 1976 L*u*v* color space is a simple-to-compute transformation of the CIE 1931 XYZ color space, but which attempted perceptual uniformity. It is extensively used for applications such as computer graphics which deal with colored lights. CIERGB In the 1920s, W. David Wright and John Guild independently conducted a series of experiments on human sight, from which they tried to determine the colors in human vision, and give it a mathematical basis. The results of these experiments defined the CIE 1931 RGB color space which became the basis for the trichromatic CIE 1931 XYZ color specification. CIEUCS The CIE 1960 UCS color space is another name for the (u, v) chromaticity space devised by David MacAdam. The CIE 1960 UCS does not define a luminance or lightness component. Today, the CIE 1960 UCS is mostly used to calculate correlated color temperature, where the isothermal lines are perpendicular to the Planckian locus. CIEUVW The CIE 1964 U*V*W* color space is based on the CIE 1960 UCS. Wyszecki invented the UVW color space in order to be able to calculate color differences without having to hold the luminance constant. He defined a lightness index W* by simplifying expressions suggested earlier. The chromaticity components U* and V* are defined such that the white point maps to the origin. This arrangement has the benefit of being able to express the loci of chromaticities with constant saturation. CIExyY In CIE xyY, Y is the luminance and x and y represents the chromaticity values derived from the tristimulus values X, Y and Z in the CIE 1931 XYZ color space. CIE xyY is just another way to represent CIE 1931 XYZ. CIEXYZ In 1931, based on the results of the CIE RGB version of the human eye, CIE mathematically determined a theoretical color space called the CIE 1931 XYZ color space to map out all of the colors perceived by the human eye. It is considered to be one of the most accurate color spaces; thus, it is commonly used for color management and conversions. X, Y and Z are extrapolations of RGB created mathematically to avoid negative numbers and are called Tristimulus values. Y means luminance, Z is somewhat equal to blue, and X is a mix of cone response curves chosen to be orthogonal to luminance and non-negative. HunterLab The Hunter Lab color space, defined in 1948 by Richard S. Hunter, is another color space sometimes referred to as \"Lab\". Like CIELAB, it was also designed to be computed via simple formulas from the CIE 1931 XYZ space but to be more perceptually uniform than CIE 1931 XYZ. Hunter named his coordinates L, a, and b; the CIELAB space, defined years later in 1976, named its coordinates L*, a*, and b* to distinguish them from Hunter's coordinates. sRGB sRGB (standard Red Green Blue) is an RGB color space that HP and Microsoft created cooperatively in 1996 to use on monitors, printers, and the Internet. It is often the \"default\" color space for images that contain no color space information, especially if the images' pixels are stored in 8-bit integers per color channel."
  },
  "api/Zigurous.ColorUtils.ColorWheelDivision.html": {
    "href": "api/Zigurous.ColorUtils.ColorWheelDivision.html",
    "title": "Enum ColorWheelDivision | Color Utils",
    "keywords": "Enum ColorWheelDivision A representation of the division of colors on the color wheel. Namespace : Zigurous.ColorUtils public enum ColorWheelDivision Fields Name Description Full All colors of the color wheel. Primary The primary colors of the color wheel. Secondary The secondary colors of the color wheel. Tertiary The tertiary colors of the color wheel."
  },
  "api/Zigurous.ColorUtils.Components.html": {
    "href": "api/Zigurous.ColorUtils.Components.html",
    "title": "Class Components | Color Utils",
    "keywords": "Class Components Functions for extracting color component values. Inheritance System.Object Components Namespace : Zigurous.ColorUtils public static class Components Methods Brightness(Color) Returns the brightness component of the color using the HSB/HSV color model. public static float Brightness(this Color color) Parameter Description color The color to extract the brightness component from. Hue(Color) Returns the hue component of the color. public static float Hue(this Color color) Parameter Description color The color to extract the hue component from. Lightness(Color) Returns the lightness component of the color using the HSL color model. public static float Lightness(this Color color) Parameter Description color The color to extract the lightness component from. SaturationL(Color) Returns the saturation component of the color using the HSL color model. public static float SaturationL(this Color color) Parameter Description color The color to extract the saturation component from. SaturationV(Color) Returns the saturation component of the color using the HSV color model. public static float SaturationV(this Color color) Parameter Description color The color to extract the saturation component from. Value(Color) Returns the value component of the color using the HSV color model. public static float Value(this Color color) Parameter Description color The color to extract the value component from. WithAlpha(Color, Single) Returns a new instance of the color with a new alpha component value. public static Color WithAlpha(this Color color, float alpha) Parameter Description color The color to copy. alpha The new alpha component value. WithBlue(Color, Single) Returns a new instance of the color with a new blue component value. public static Color WithBlue(this Color color, float blue) Parameter Description color The color to copy. blue The new blue component value. WithBrightness(Color, Single) Returns a new instance of the color with a new brightness component value using the HSB/HSV color model. public static Color WithBrightness(this Color color, float brightness) Parameter Description color The color to copy. brightness The new brightness component value. WithGreen(Color, Single) Returns a new instance of the color with a new green component value. public static Color WithGreen(this Color color, float green) Parameter Description color The color to copy. green The new green component value. WithHue(Color, Single) Returns a new instance of the color with a new hue component value. public static Color WithHue(this Color color, float hue) Parameter Description color The color to copy. hue The new hue component value. WithLightness(Color, Single) Returns a new instance of the color with a new value component value using the HSL color model. public static Color WithLightness(this Color color, float lightness) Parameter Description color The color to copy. lightness The new lightness component value. WithRed(Color, Single) Returns a new instance of the color with a new red component value. public static Color WithRed(this Color color, float red) Parameter Description color The color to copy. red The new red component value. WithSaturationL(Color, Single) Returns a new instance of the color with a new saturation component value using the HSL color model. public static Color WithSaturationL(this Color color, float saturation) Parameter Description color The color to copy. saturation The new saturation component value. WithSaturationV(Color, Single) Returns a new instance of the color with a new saturation component value using the HSV color model. public static Color WithSaturationV(this Color color, float saturation) Parameter Description color The color to copy. saturation The new saturation component value. WithValue(Color, Single) Returns a new instance of the color with a new \"value\" component value using the HSV color model. public static Color WithValue(this Color color, float value) Parameter Description color The color to copy. value The new \"value\" component value."
  },
  "api/Zigurous.ColorUtils.Contrast.html": {
    "href": "api/Zigurous.ColorUtils.Contrast.html",
    "title": "Class Contrast | Color Utils",
    "keywords": "Class Contrast Functions for calculating contrast between colors. Inheritance System.Object Contrast Namespace : Zigurous.ColorUtils public static class Contrast Methods ContrastRatioBetween(Color, Color) Returns the contrast ratio between two colors. public static float ContrastRatioBetween(Color first, Color second) Parameter Description first The first color to compare. second The second color to compare. ContrastRatioTo(Color, Color) Returns the contrast ratio of the color to another. public static float ContrastRatioTo(this Color color, Color other) Parameter Description color The first color to compare. other The second color to compare. HigherContrastingColor(Color, Color, Color) Returns the color that has the higher contrast ratio to the current color. public static Color HigherContrastingColor(this Color color, Color a, Color b) Parameter Description color The color to compare to. a The first color to test. b The second color to test. HighestContrastingColor(Color, Color[]) Returns the color that has the highest contrast ratio to the current color. public static Color HighestContrastingColor(this Color color, params Color[] colors) Parameter Description color The color to compare to. colors The colors to test. LowerContrastingColor(Color, Color, Color) Returns the color that has the lower contrast ratio to the current color. public static Color LowerContrastingColor(this Color color, Color a, Color b) Parameter Description color The color to compare to. a The first color to test. b The second color to test. LowestContrastingColor(Color, Color[]) Returns the color that has the lowest contrast ratio to the current color. public static Color LowestContrastingColor(this Color color, params Color[] colors) Parameter Description color The color to compare to. colors The colors to test."
  },
  "api/Zigurous.ColorUtils.Conversion.html": {
    "href": "api/Zigurous.ColorUtils.Conversion.html",
    "title": "Class Conversion | Color Utils",
    "keywords": "Class Conversion Functions for converting between color spaces and models. Inheritance System.Object Conversion Namespace : Zigurous.ColorUtils public static class Conversion Methods ToARGB(Color) Converts the color into ARGB (alpha, red, green, blue) components in the range [0..1]. public static ARGB ToARGB(this Color color) Parameter Description color The color to convert. ToARGB(Color, out Single, out Single, out Single, out Single) Converts the color into ARGB (alpha, red, green, blue) components in the range [0..1]. public static void ToARGB(this Color color, out float a, out float r, out float g, out float b) Parameter Description color The color to convert. a The alpha component output. r The red component output. g The green component output. b The blue component output. ToARGB255(Color) Converts the color into ARGB (alpha, red, green, blue) components in the range [0..255]. public static ARGB255 ToARGB255(this Color color) Parameter Description color The color to convert. ToARGB255(Color, out Int32, out Int32, out Int32, out Int32) Converts the color into ARGB (alpha, red, green, blue) components in the range [0..1]. public static void ToARGB255(this Color color, out int a, out int r, out int g, out int b) Parameter Description color The color to convert. a The alpha component output. r The red component output. g The green component output. b The blue component output. ToCMYK(Color) Converts the color into CMYK (cyan, magenta, yellow, black) components in the range [0..1]. public static CMYK ToCMYK(this Color color) Parameter Description color The color to convert. ToCMYK(Color, out Single, out Single, out Single, out Single) Converts the color into CMYK (cyan, magenta, yellow, black) components in the range [0..1]. public static void ToCMYK(this Color color, out float c, out float m, out float y, out float k) Parameter Description color The color to convert. c The cyan component output. m The magenta component output. y The yellow component output. k The black component output. ToHSB(Color) Converts the color into HSB (hue, saturation, brightness) components in the range [0..1]. public static HSB ToHSB(this Color color) Parameter Description color The color to convert. ToHSB(Color, out Single, out Single, out Single) Converts the color into HSB (hue, saturation, brightness) components in the range [0..1]. public static void ToHSB(this Color color, out float h, out float s, out float b) Parameter Description color The color to convert. h The hue component output. s The saturation component output. b The brightness component output. ToHSI(Color) Converts the color into HSI (hue, saturation, intensity) components in the range [0..1]. public static HSI ToHSI(this Color color) Parameter Description color The color to convert. ToHSI(Color, out Single, out Single, out Single) Converts the color into HSI (hue, saturation, intensity) components in the range [0..1]. public static void ToHSI(this Color color, out float h, out float s, out float i) Parameter Description color The color to convert. h The hue component output. s The saturation component output. i The intensity component output. ToHSL(Color) Converts the color into HSL (hue, saturation, lightness) components in the range [0..1]. public static HSL ToHSL(this Color color) Parameter Description color The color to convert. ToHSL(Color, out Single, out Single, out Single) Converts the color into HSL (hue, saturation, lightness) components in the range [0..1]. public static void ToHSL(this Color color, out float h, out float s, out float l) Parameter Description color The color to convert. h The hue component output. s The saturation component output. l The lightness component output. ToHSV(Color) Converts the color into HSV (hue, saturation, value) components in the range [0..1]. public static HSV ToHSV(this Color color) Parameter Description color The color to convert. ToHSV(Color, out Single, out Single, out Single) Converts the color into HSV (hue, saturation, value) components in the range [0..1]. public static void ToHSV(this Color color, out float h, out float s, out float v) Parameter Description color The color to convert. h The hue component output. s The saturation component output. v The value component output. ToHunterLab(Color) Converts the color into Hunter Lab components. public static HunterLab ToHunterLab(this Color color) Parameter Description color The color to convert. ToHunterLab(Color, out Single, out Single, out Single) Converts the color into Hunter Lab components. public static void ToHunterLab(this Color color, out float L, out float a, out float b) Parameter Description color The color to convert. L The L component output. a The a component output. b The b component output. ToHunterLab(Color, Illuminant, StandardObserver) Converts the color into Hunter Lab components using the given illuminant and standard observer. public static HunterLab ToHunterLab(this Color color, Illuminant illuminant, StandardObserver observer) Parameter Description color The color to convert. illuminant The illuminant to use. observer The standard observer to use. ToHunterLab(Color, Illuminant, StandardObserver, out Single, out Single, out Single) Converts the color into Hunter Lab components using the given illuminant and standard observer. public static void ToHunterLab(this Color color, Illuminant illuminant, StandardObserver observer, out float L, out float a, out float b) Parameter Description color The color to convert. illuminant The illuminant to use. observer The standard observer to use. L The L component output. a The a component output. b The b component output. ToHunterLab(Color, Tristimulus) Converts the color into Hunter Lab components using the given white point. public static HunterLab ToHunterLab(this Color color, Tristimulus whitePoint) Parameter Description color The color to convert. whitePoint The white point to use. ToHunterLab(Color, Tristimulus, out Single, out Single, out Single) Converts the color into Hunter Lab components using the given white point. public static void ToHunterLab(this Color color, Tristimulus whitePoint, out float L, out float a, out float b) Parameter Description color The color to convert. whitePoint The white point to use. L The L component output. a The a component output. b The b component output. ToLAB(Color) Converts the color into LAB components. public static LAB ToLAB(this Color color) Parameter Description color The color to convert. ToLAB(Color, out Single, out Single, out Single) Converts the color into LAB components. public static void ToLAB(this Color color, out float L, out float a, out float b) Parameter Description color The color to convert. L The L component output. a The a component output. b The b component output. ToLAB(Color, Illuminant, StandardObserver) Converts the color into LAB components using the given illuminant and standard observer. public static LAB ToLAB(this Color color, Illuminant illuminant, StandardObserver observer) Parameter Description color The color to convert. illuminant The illuminant to use. observer The standard observer to use. ToLAB(Color, Illuminant, StandardObserver, out Single, out Single, out Single) Converts the color into LAB components using the given illuminant and standard observer. public static void ToLAB(this Color color, Illuminant illuminant, StandardObserver observer, out float L, out float a, out float b) Parameter Description color The color to convert. illuminant The illuminant to use. observer The standard observer to use. L The L component output. a The a component output. b The b component output. ToLAB(Color, Tristimulus) Converts the color into LAB components using the given white point. public static LAB ToLAB(this Color color, Tristimulus whitePoint) Parameter Description color The color to convert. whitePoint The white point to use. ToLAB(Color, Tristimulus, out Single, out Single, out Single) Converts the color into LAB components using the given white point. public static void ToLAB(this Color color, Tristimulus whitePoint, out float L, out float a, out float b) Parameter Description color The color to convert. whitePoint The white point to use. L The L component output. a The a component output. b The b component output. ToLCH_ab(Color) Converts the color into LCH_ab components. public static LCH_ab ToLCH_ab(this Color color) Parameter Description color The color to convert. ToLCH_ab(Color, out Single, out Single, out Single) Converts the color into LCH_ab components. public static void ToLCH_ab(this Color color, out float L, out float C, out float h) Parameter Description color The color to convert. L The L component output. C The C component output. h The h component output. ToLCH_ab(Color, Illuminant, StandardObserver) Converts the color into LCH_ab components using the given illuminant and standard observer. public static LCH_ab ToLCH_ab(this Color color, Illuminant illuminant, StandardObserver observer) Parameter Description color The color to convert. illuminant The illuminant to use. observer The standard observer to use. ToLCH_ab(Color, Illuminant, StandardObserver, out Single, out Single, out Single) Converts the color into LCH_ab components using the given illuminant and standard observer. public static void ToLCH_ab(this Color color, Illuminant illuminant, StandardObserver observer, out float L, out float C, out float h) Parameter Description color The color to convert. illuminant The illuminant to use. observer The standard observer to use. L The L component output. C The C component output. h The h component output. ToLCH_ab(Color, Tristimulus) Converts the color into LCH_ab components using the given white point. public static LCH_ab ToLCH_ab(this Color color, Tristimulus whitePoint) Parameter Description color The color to convert. whitePoint The white point to use. ToLCH_ab(Color, Tristimulus, out Single, out Single, out Single) Converts the color into LCH_ab components using the given white point. public static void ToLCH_ab(this Color color, Tristimulus whitePoint, out float L, out float C, out float h) Parameter Description color The color to convert. whitePoint The white point to use. L The L component output. C The C component output. h The h component output. ToLCH_uv(Color) Converts the color into LCH_uv components. public static LCH_uv ToLCH_uv(this Color color) Parameter Description color The color to convert. ToLCH_uv(Color, out Single, out Single, out Single) Converts the color into LCH_uv components. public static void ToLCH_uv(this Color color, out float L, out float C, out float h) Parameter Description color The color to convert. L The L component output. C The C component output. h The h component output. ToLCH_uv(Color, Illuminant, StandardObserver) Converts the color into LCH_uv components using the given illuminant and standard observer. public static LCH_uv ToLCH_uv(this Color color, Illuminant illuminant, StandardObserver observer) Parameter Description color The color to convert. illuminant The illuminant to use. observer The standard observer to use. ToLCH_uv(Color, Illuminant, StandardObserver, out Single, out Single, out Single) Converts the color into LCH_uv components using the given illuminant and standard observer. public static void ToLCH_uv(this Color color, Illuminant illuminant, StandardObserver observer, out float L, out float C, out float h) Parameter Description color The color to convert. illuminant The illuminant to use. observer The standard observer to use. L The L component output. C The C component output. h The h component output. ToLCH_uv(Color, Tristimulus) Converts the color into LCH_uv components using the given white point. public static LCH_uv ToLCH_uv(this Color color, Tristimulus whitePoint) Parameter Description color The color to convert. whitePoint The white point to use. ToLCH_uv(Color, Tristimulus, out Single, out Single, out Single) Converts the color into LCH_uv components using the given white point. public static void ToLCH_uv(this Color color, Tristimulus whitePoint, out float L, out float C, out float h) Parameter Description color The color to convert. whitePoint The white point to use. L The L component output. C The C component output. h The h component output. ToLUV(Color) Converts the color into LUV components. public static LUV ToLUV(this Color color) Parameter Description color The color to convert. ToLUV(Color, out Single, out Single, out Single) Converts the color into LUV components. public static void ToLUV(this Color color, out float L, out float u, out float v) Parameter Description color The color to convert. L The L component output. u The u component output. v The v component output. ToLUV(Color, Illuminant, StandardObserver) Converts the color into LUV components using the given illuminant and standard observer. public static LUV ToLUV(this Color color, Illuminant illuminant, StandardObserver observer) Parameter Description color The color to convert. illuminant The illuminant to use. observer The standard observer to use. ToLUV(Color, Illuminant, StandardObserver, out Single, out Single, out Single) Converts the color into LUV components using the given illuminant and standard observer. public static void ToLUV(this Color color, Illuminant illuminant, StandardObserver observer, out float L, out float u, out float v) Parameter Description color The color to convert. illuminant The illuminant to use. observer The standard observer to use. L The L component output. u The u component output. v The v component output. ToLUV(Color, Tristimulus) Converts the color into LUV components using the given white point. public static LUV ToLUV(this Color color, Tristimulus whitePoint) Parameter Description color The color to convert. whitePoint The white point to use. ToLUV(Color, Tristimulus, out Single, out Single, out Single) Converts the color into LUV components using the given white point. public static void ToLUV(this Color color, Tristimulus whitePoint, out float L, out float u, out float v) Parameter Description color The color to convert. whitePoint The white point to use. L The L component output. u The u component output. v The v component output. ToRGB(Color) Converts the color into RGB (red, green, blue) components in the range [0..1]. public static RGB ToRGB(this Color color) Parameter Description color The color to convert. ToRGB(Color, out Single, out Single, out Single) Converts the color into RGB (red, green, blue) components in the range [0..1]. public static void ToRGB(this Color color, out float r, out float g, out float b) Parameter Description color The color to convert. r The red component output. g The green component output. b The blue component output. ToRGB255(Color) Converts the color into RGB (red, green, blue) components in the range [0..255]. public static RGB255 ToRGB255(this Color color) Parameter Description color The color to convert. ToRGB255(Color, out Int32, out Int32, out Int32) Converts the color into RGB (red, green, blue) components in the range [0..1]. public static void ToRGB255(this Color color, out int r, out int g, out int b) Parameter Description color The color to convert. r The red component output. g The green component output. b The blue component output. ToRGBA(Color) Converts the color into RGBA (red, green, blue, alpha) components in the range [0..1]. public static RGBA ToRGBA(this Color color) Parameter Description color The color to convert. ToRGBA(Color, out Single, out Single, out Single, out Single) Converts the color into RGBA (red, green, blue, alpha) components in the range [0..1]. public static void ToRGBA(this Color color, out float r, out float g, out float b, out float a) Parameter Description color The color to convert. r The red component output. g The green component output. b The blue component output. a The alpha component output. ToRGBA255(Color) Converts the color into RGBA (red, green, blue, alpha) components in the range [0..255]. public static RGBA255 ToRGBA255(this Color color) Parameter Description color The color to convert. ToRGBA255(Color, out Int32, out Int32, out Int32, out Int32) Converts the color into RGBA (red, green, blue, alpha) components in the range [0..1]. public static void ToRGBA255(this Color color, out int r, out int g, out int b, out int a) Parameter Description color The color to convert. r The red component output. g The green component output. b The blue component output. a The alpha component output. ToUCS(Color) Converts the color into UCS components. public static UCS ToUCS(this Color color) Parameter Description color The color to convert. ToUCS(Color, out Single, out Single) Converts the color into UCS components. public static void ToUCS(this Color color, out float u, out float v) Parameter Description color The color to convert. u The u component output. v The v component output. ToUVW(Color) Converts the color into UVW components. public static UVW ToUVW(this Color color) Parameter Description color The color to convert. ToUVW(Color, out Single, out Single, out Single) Converts the color into UVW components. public static void ToUVW(this Color color, out float U, out float V, out float W) Parameter Description color The color to convert. U The U component output. V The V component output. W The W component output. ToUVW(Color, Illuminant, StandardObserver) Converts the color into UVW components using the given illuminant and standard observer. public static UVW ToUVW(this Color color, Illuminant illuminant, StandardObserver observer) Parameter Description color The color to convert. illuminant The illuminant to use. observer The standard observer to use. ToUVW(Color, Illuminant, StandardObserver, out Single, out Single, out Single) Converts the color into UVW components using the given illuminant and standard observer. public static void ToUVW(this Color color, Illuminant illuminant, StandardObserver observer, out float U, out float V, out float W) Parameter Description color The color to convert. illuminant The illuminant to use. observer The standard observer to use. U The U component output. V The V component output. W The W component output. ToUVW(Color, Tristimulus) Converts the color into UVW components using the given white point. public static UVW ToUVW(this Color color, Tristimulus whitePoint) Parameter Description color The color to convert. whitePoint The white point to use. ToUVW(Color, Tristimulus, out Single, out Single, out Single) Converts the color into UVW components using the given white point. public static void ToUVW(this Color color, Tristimulus whitePoint, out float U, out float V, out float W) Parameter Description color The color to convert. whitePoint The white point to use. U The U component output. V The V component output. W The W component output. ToxyY(Color) Converts the color into xyY components. public static xyY ToxyY(this Color color) Parameter Description color The color to convert. ToxyY(Color, out Single, out Single, out Single) Converts the color into xyY components. public static void ToxyY(this Color color, out float x, out float y, out float Y) Parameter Description color The color to convert. x The x component output. y The y component output. Y The Y component output. ToXYZ(Color) Converts the color into XYZ components. public static XYZ ToXYZ(this Color color) Parameter Description color The color to convert. ToXYZ(Color, out Single, out Single, out Single) Converts the color into XYZ components. public static void ToXYZ(this Color color, out float X, out float Y, out float Z) Parameter Description color The color to convert. X The X component output. Y The Y component output. Z The Z component output. ToYCbCr(Color) Converts the color into Yâ²CbCr components. public static YCbCr ToYCbCr(this Color color) Parameter Description color The color to convert. ToYCbCr(Color, out Single, out Single, out Single) Converts the color into Yâ²CbCr components. public static void ToYCbCr(this Color color, out float Y, out float Cb, out float Cr) Parameter Description color The color to convert. Y The Y component output. Cb The Cb component output. Cr The Cr component output. ToYCbCr(Color, SignalEncoding) Converts the color into Yâ²CbCr components using the given signal encoding. public static YCbCr ToYCbCr(this Color color, SignalEncoding encoding) Parameter Description color The color to convert. encoding The signal encoding to use. ToYCbCr(Color, SignalEncoding, out Single, out Single, out Single) Converts the color into Yâ²CbCr components using the given signal encoding. public static void ToYCbCr(this Color color, SignalEncoding encoding, out float Y, out float Cb, out float Cr) Parameter Description color The color to convert. encoding The signal encoding to use. Y The Y component output. Cb The Cb component output. Cr The Cr component output. ToYIQ(Color) Converts the color into Yâ²IQ components. public static YIQ ToYIQ(this Color color) Parameter Description color The color to convert. ToYIQ(Color, out Single, out Single, out Single) Converts the color into Yâ²IQ components. public static void ToYIQ(this Color color, out float Y, out float I, out float Q) Parameter Description color The color to convert. Y The Y component output. I The I component output. Q The Q component output. ToYIQ(Color, SignalEncoding) Converts the color into Yâ²IQ components using the given signal encoding. public static YIQ ToYIQ(this Color color, SignalEncoding encoding) Parameter Description color The color to convert. encoding The signal encoding to use. ToYIQ(Color, SignalEncoding, out Single, out Single, out Single) Converts the color into Yâ²IQ components using the given signal encoding. public static void ToYIQ(this Color color, SignalEncoding encoding, out float Y, out float I, out float Q) Parameter Description color The color to convert. encoding The signal encoding to use. Y The Y component output. I The I component output. Q The Q component output. ToYPbPr(Color) Converts the color into Yâ²PbPr components. public static YPbPr ToYPbPr(this Color color) Parameter Description color The color to convert. ToYPbPr(Color, out Single, out Single, out Single) Converts the color into Yâ²PbPr components. public static void ToYPbPr(this Color color, out float Y, out float Pb, out float Pr) Parameter Description color The color to convert. Y The Y component output. Pb The Pb component output. Pr The Pr component output. ToYPbPr(Color, SignalEncoding) Converts the color into Yâ²PbPr components using the given signal encoding. public static YPbPr ToYPbPr(this Color color, SignalEncoding encoding) Parameter Description color The color to convert. encoding The signal encoding to use. ToYPbPr(Color, SignalEncoding, out Single, out Single, out Single) Converts the color into Yâ²PbPr components using the given signal encoding. public static void ToYPbPr(this Color color, SignalEncoding encoding, out float Y, out float Pb, out float Pr) Parameter Description color The color to convert. encoding The signal encoding to use. Y The Y component output. Pb The Pb component output. Pr The Pr component output. ToYUV(Color) Converts the color into Yâ²UV components. public static YUV ToYUV(this Color color) Parameter Description color The color to convert. ToYUV(Color, out Single, out Single, out Single) Converts the color into Yâ²UV components. public static void ToYUV(this Color color, out float Y, out float U, out float V) Parameter Description color The color to convert. Y The Y component output. U The U component output. V The V component output. ToYUV(Color, SignalEncoding) Converts the color into Yâ²UV components using the given signal encoding. public static YUV ToYUV(this Color color, SignalEncoding encoding) Parameter Description color The color to convert. encoding The signal encoding to use. ToYUV(Color, SignalEncoding, out Single, out Single, out Single) Converts the color into Yâ²UV components using the given signal encoding. public static void ToYUV(this Color color, SignalEncoding encoding, out float Y, out float U, out float V) Parameter Description color The color to convert. encoding The signal encoding to use. Y The Y component output. U The U component output. V The V component output."
  },
  "api/Zigurous.ColorUtils.Equality.html": {
    "href": "api/Zigurous.ColorUtils.Equality.html",
    "title": "Class Equality | Color Utils",
    "keywords": "Class Equality Functions for testing the equality of colors. Inheritance System.Object Equality Namespace : Zigurous.ColorUtils public static class Equality Methods Equals(Color, Color, Single, Boolean) Determines if two colors are equal by comparing their component values after being rounded by a given amount. public static bool Equals(this Color lhs, Color rhs, float rounding, bool compareAlpha = false) Parameter Description lhs The first color to compare. rhs The second color to compare. rounding The amount to round the component values by. compareAlpha Whether to compare the alpha values as well. EqualsHex(Color, Color) Determines if two colors are equal by comparing their hexadecimal representations. public static bool EqualsHex(this Color lhs, Color rhs) Parameter Description lhs The first color to compare. rhs The second color to compare."
  },
  "api/Zigurous.ColorUtils.Gradients.html": {
    "href": "api/Zigurous.ColorUtils.Gradients.html",
    "title": "Class Gradients | Color Utils",
    "keywords": "Class Gradients Functions for creating and working with color gradients. Inheritance System.Object Gradients Namespace : Zigurous.ColorUtils public static class Gradients Methods Create(Color, Color) Creates a new gradient with a given start color and end color. public static Gradient Create(Color start, Color end) Parameter Description start The start color of the gradient. end The end color of the gradient. Create(Color, Color, Int32) Creates a new gradient that interpolates a linear amount of stops between a start color and end color. public static Gradient Create(Color start, Color end, int stops) Parameter Description start The start color of the gradient. end The end color of the gradient. stops Create(Color, Color, Single[]) Creates a new gradient that distributes a predefined array of stops between a start color and end color. public static Gradient Create(Color start, Color end, float[] stops) Parameter Description start The start color of the gradient. end The end color of the gradient. stops The array of stops to distribute between the start and end color. Create(GradientColorKey[], GradientAlphaKey[]) Creates a new gradient and sets the given color keys and alpha keys. public static Gradient Create(GradientColorKey[] colors, GradientAlphaKey[] alpha) Parameter Description colors The color keys to set on the gradient. alpha The alpha keys to set on the gradient. Create(GradientColorKey[], Single) Creates a new gradient and sets the given color keys with a constant alpha value for the entire gradient. public static Gradient Create(GradientColorKey[] colors, float alpha = 1F) Parameter Description colors The color keys to set on the gradient. alpha The constant alpha value to set on the gradient. ToColors(Gradient, Int32) Generates a palette of colors by interpolating a linear amount of stops within a gradient. public static Color[] ToColors(this Gradient gradient, int stops) Parameter Description gradient The gradient to interpolate. stops The number of stops to interpolate in the gradient."
  },
  "api/Zigurous.ColorUtils.Harmonies.html": {
    "href": "api/Zigurous.ColorUtils.Harmonies.html",
    "title": "Class Harmonies | Color Utils",
    "keywords": "Class Harmonies Functions for generating color harmonies. Inheritance System.Object Harmonies Namespace : Zigurous.ColorUtils public static class Harmonies Methods Analogous(Color, Int32, Single) Creates an analogous harmony of the color, a set of colors located next to each other on the color wheel. public static Color[] Analogous(this Color baseColor, int amount = 3, float hueShift = 30F) Parameter Description baseColor The base color to create the harmony from. amount The number of colors to create. hueShift The amount of degrees to shift each hue. AnalogousNonAlloc(Color, Color[], Single) Creates an analogous harmony of the color, a set of colors located next to each other on the color wheel. Remarks This function does not allocate any memory on the heap. The amount of colors generated is determined by the size of the output array. public static void AnalogousNonAlloc(this Color baseColor, Color[] output, float hueShift = 30F) Parameter Description baseColor The base color to create the harmony from. output The output array to store the colors in. hueShift The amount of degrees to shift each hue. Complementary(Color) Creates a complementary harmony of the color, two colors located opposite to each other on the color wheel. public static Color[] Complementary(this Color baseColor) Parameter Description baseColor The base color to create the harmony from. ComplementaryNonAlloc(Color, Color[]) Creates a complementary harmony of the color, two colors located opposite to each other on the color wheel. Remarks This function does not allocate any memory on the heap. The output array is populated with the two complementary colors. public static void ComplementaryNonAlloc(this Color baseColor, Color[] output) Parameter Description baseColor The base color to create the harmony from. output The output array to store the colors in. DoubleSplitComplementary(Color) Creates a double split complementary harmony of the color, two pairs of complementary colors on either side of the base color. public static Color[] DoubleSplitComplementary(this Color baseColor) Parameter Description baseColor The base color to create the harmony from. DoubleSplitComplementaryNonAlloc(Color, Color[]) Creates a double split complementary harmony of the color, two pairs of complementary colors on either side of the base color. Remarks This function does not allocate any memory on the heap. The output array is populated with four colors. public static void DoubleSplitComplementaryNonAlloc(this Color baseColor, Color[] output) Parameter Description baseColor The base color to create the harmony from. output The output array to store the colors in. Monochromatic(Color, Int32, Single) Creates a monochromatic harmony of the color, a set of tints and shades formed from a base color. public static Color[] Monochromatic(this Color baseColor, int amount = 5, float difference = 0.25F) Parameter Description baseColor The base color to create the harmony from. amount The number of colors to create. difference The amount of change in each color. MonochromaticNonAlloc(Color, Color[], Single) Creates a monochromatic harmony of the color, a set of tints and shades formed from a base color. Remarks This function does not allocate any memory on the heap. The amount of colors generated is determined by the size of the output array. public static void MonochromaticNonAlloc(this Color baseColor, Color[] output, float difference = 0.25F) Parameter Description baseColor The base color to create the harmony from. output The output array to store the colors in. difference The amount of change in each color. SplitComplementary(Color) Creates a split complementary harmony of the color, a base color with two colors adjacent to the directly opposing color on the color wheel. public static Color[] SplitComplementary(this Color baseColor) Parameter Description baseColor The base color to create the harmony from. SplitComplementaryNonAlloc(Color, Color[]) Creates a split complementary harmony of the color, a base color with two colors adjacent to the directly opposing color on the color wheel. Remarks This function does not allocate any memory on the heap. The output array is populated with three colors. public static void SplitComplementaryNonAlloc(this Color baseColor, Color[] output) Parameter Description baseColor The base color to create the harmony from. output The output array to store the colors in. Square(Color) Creates a tetradic (square) harmony of the color, four colors evenly spaced around the color wheel to form a square (90Â° hue shifts). public static Color[] Square(this Color baseColor) Parameter Description baseColor The base color to create the harmony from. SquareNonAlloc(Color, Color[]) Creates a tetradic (square) harmony of the color, four colors evenly spaced around the color wheel to form a square (90Â° hue shifts). Remarks This function does not allocate any memory on the heap. The output array is populated with four colors. public static void SquareNonAlloc(this Color baseColor, Color[] output) Parameter Description baseColor The base color to create the harmony from. output The output array to store the colors in. Triadic(Color) Creates a triadic harmony of the color, three colors evenly spaced around the color wheel to form a triangle (120Â° hue shifts). public static Color[] Triadic(this Color baseColor) Parameter Description baseColor The base color to create the harmony from. TriadicNonAlloc(Color, Color[]) Creates a triadic harmony of the color, three colors evenly spaced around the color wheel to form a triangle (120Â° hue shifts). Remarks This function does not allocate any memory on the heap. The output array is populated with three colors. public static void TriadicNonAlloc(this Color baseColor, Color[] output) Parameter Description baseColor The base color to create the harmony from. output The output array to store the colors in."
  },
  "api/Zigurous.ColorUtils.Hex.html": {
    "href": "api/Zigurous.ColorUtils.Hex.html",
    "title": "Class Hex | Color Utils",
    "keywords": "Class Hex Functions for converting between hexadecimal and RGB color values. Inheritance System.Object Hex Namespace : Zigurous.ColorUtils public static class Hex Methods ToARGBColor(Int32) Creates a color from a hexadecimal integer in the ARGB format (AARRGGBB), e.g., 0x80ffff00. public static Color ToARGBColor(int hex) Parameter Description hex ToARGBColor(String) Creates a color from a hexadecimal string in the ARGB format (AARRGGBB), e.g., \"#80ffff00\". public static Color ToARGBColor(string hex) Parameter Description hex ToHex(Color) Converts the color to a hexadecimal integer in the RGB format (RRGGBB), e.g., 0xffff00. public static int ToHex(this Color color) Parameter Description color ToHexARGB(Color) Converts the color to a hexadecimal integer in the ARGB format (AARRGGBB), e.g., 0x80ffff00. public static int ToHexARGB(this Color color) Parameter Description color ToHexRGBA(Color) Converts the color to a hexadecimal integer in the RGBA format (RRGGBBAA), e.g., 0xffff0080. public static int ToHexRGBA(this Color color) Parameter Description color ToHexString(Color) Converts the color to a hexadecimal string in the RGB format (RRGGBB), e.g., \"#ffff00\". public static string ToHexString(this Color color) Parameter Description color ToHexStringARGB(Color) Converts the color to a hexadecimal string in the ARGB format (AARRGGBB), e.g., \"#80ffff00\". public static string ToHexStringARGB(this Color color) Parameter Description color ToHexStringRGBA(Color) Converts the color to a hexadecimal string in the RGBA format (RRGGBBAA), e.g., \"#ffff0080\". public static string ToHexStringRGBA(this Color color) Parameter Description color ToInt(String) Converts a hex string to a 32-bit integer in base 16. public static int ToInt(string hex) Parameter Description hex ToRGBAColor(Int32) Creates a color from a hexadecimal integer in the RGBA format (RRGGBBAA), e.g., 0xffff0080. public static Color ToRGBAColor(int hex) Parameter Description hex ToRGBAColor(String) Creates a color from a hexadecimal string in the ARGB format (RRGGBBAA), e.g., \"#ffff0080\". public static Color ToRGBAColor(string hex) Parameter Description hex ToRGBColor(Int32, Single) Creates a color from a hexadecimal integer in the RGB format (RRGGBB), e.g., 0xffff00. public static Color ToRGBColor(int hex, float alpha = 1F) Parameter Description hex alpha ToRGBColor(String, Single) Creates a color from a hexadecimal string in the RGB format (RRGGBB), e.g., \"#ffff00\". public static Color ToRGBColor(string hex, float alpha = 1F) Parameter Description hex alpha"
  },
  "api/Zigurous.ColorUtils.HSB.html": {
    "href": "api/Zigurous.ColorUtils.HSB.html",
    "title": "Struct HSB | Color Utils",
    "keywords": "Struct HSB The HSB (hue, saturation, brightness) components of a color in the range [0..1]. Implements IEquatable < HSB > Namespace : Zigurous.ColorUtils [Serializable] public struct HSB : IEquatable<HSB> Constructors HSB(Color) public HSB(Color color) Parameter Description color HSB(Single, Single, Single) public HSB(float hue, float saturation, float brightness) Parameter Description hue saturation brightness Fields brightness The brightness component of the color in the range [0..1]. public float brightness hue The hue component of the color in the range [0..1]. public float hue saturation The saturation component of the color in the range [0..1]. public float saturation Methods Equals(Object) public override bool Equals(object obj) Parameter Description obj Overrides System.ValueType.Equals(System.Object) Equals(HSB) public bool Equals(HSB other) Parameter Description other Extract(Color, out Single, out Single, out Single) Extracts the HSB (hue, saturation, brightness) components from a color in the range [0..1]. public static void Extract(Color color, out float h, out float s, out float b) Parameter Description color h s b GetHashCode() public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components into a color. public Color ToColor() ToColor(Single, Single, Single) Converts HSB (hue, saturation, brightness) components into a color. public static Color ToColor(float h, float s, float b) Parameter Description h s b ToString() public override string ToString() Overrides System.ValueType.ToString() Operators Equality(HSB, HSB) public static bool operator ==(HSB lhs, HSB rhs) Parameter Description lhs rhs Explicit(Color to HSB) public static explicit operator HSB(Color color) Parameter Description color Explicit(HSB to Color) public static explicit operator Color(HSB hsb) Parameter Description hsb Implicit(HSB to HSV) public static implicit operator HSV(HSB hsb) Parameter Description hsb Inequality(HSB, HSB) public static bool operator !=(HSB lhs, HSB rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorUtils.HSI.html": {
    "href": "api/Zigurous.ColorUtils.HSI.html",
    "title": "Struct HSI | Color Utils",
    "keywords": "Struct HSI The HSI (hue, saturation, intensity) components of a color in the range [0..1]. Implements IEquatable < HSI > Namespace : Zigurous.ColorUtils [Serializable] public struct HSI : IEquatable<HSI> Constructors HSI(Color) public HSI(Color color) Parameter Description color HSI(Single, Single, Single) public HSI(float hue, float saturation, float intensity) Parameter Description hue saturation intensity Fields hue The hue component of the color in the range [0..1]. public float hue intensity The intensity component of the color in the range [0..1]. public float intensity saturation The saturation component of the color in the range [0..1]. public float saturation Methods Equals(Object) public override bool Equals(object obj) Parameter Description obj Overrides System.ValueType.Equals(System.Object) Equals(HSI) public bool Equals(HSI other) Parameter Description other Extract(Color, out Single, out Single, out Single) Extracts the HSI (hue, saturation, intensity) components from a color in the range [0..1]. public static void Extract(Color color, out float h, out float s, out float i) Parameter Description color h s i GetHashCode() public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components into a color. public Color ToColor() ToColor(Single, Single, Single) Converts HSI (hue, saturation, intensity) components into a color. public static Color ToColor(float h, float s, float i) Parameter Description h s i ToString() public override string ToString() Overrides System.ValueType.ToString() Operators Equality(HSI, HSI) public static bool operator ==(HSI lhs, HSI rhs) Parameter Description lhs rhs Explicit(Color to HSI) public static explicit operator HSI(Color color) Parameter Description color Explicit(HSI to Color) public static explicit operator Color(HSI hsi) Parameter Description hsi Inequality(HSI, HSI) public static bool operator !=(HSI lhs, HSI rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorUtils.HSL.html": {
    "href": "api/Zigurous.ColorUtils.HSL.html",
    "title": "Struct HSL | Color Utils",
    "keywords": "Struct HSL The HSL (hue, saturation, lightness) components of a color in the range [0..1]. Implements IEquatable < HSL > Namespace : Zigurous.ColorUtils [Serializable] public struct HSL : IEquatable<HSL> Constructors HSL(Color) public HSL(Color color) Parameter Description color HSL(Single, Single, Single) public HSL(float hue, float saturation, float lightness) Parameter Description hue saturation lightness Fields hue The hue component of the color in the range [0..1]. public float hue lightness The lightness component of the color in the range [0..1]. public float lightness saturation The saturation component of the color in the range [0..1]. public float saturation Methods Equals(Object) public override bool Equals(object obj) Parameter Description obj Overrides System.ValueType.Equals(System.Object) Equals(HSL) public bool Equals(HSL other) Parameter Description other Extract(Color, out Single, out Single, out Single) Extracts the HSL (hue, saturation, lightness) components from a color in the range [0..1]. public static void Extract(Color color, out float h, out float s, out float l) Parameter Description color h s l GetHashCode() public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components into a color. public Color ToColor() ToColor(Single, Single, Single) Converts HSL (hue, saturation, lightness) components into a color. public static Color ToColor(float h, float s, float l) Parameter Description h s l ToHSB(in Single, ref Single, in Single, out Single) Converts HSL (hue, saturation, lightness) components to HSB (hue, saturation, brightness) components in the range [0..1]. public static void ToHSB(in float h, ref float s, in float l, out float b) Parameter Description h s l b ToHSV(in Single, ref Single, in Single, out Single) Converts HSL (hue, saturation, lightness) components to HSV (hue, saturation, value) components in the range [0..1]. public static void ToHSV(in float h, ref float s, in float l, out float v) Parameter Description h s l v ToString() public override string ToString() Overrides System.ValueType.ToString() Operators Equality(HSL, HSL) public static bool operator ==(HSL lhs, HSL rhs) Parameter Description lhs rhs Explicit(Color to HSL) public static explicit operator HSL(Color color) Parameter Description color Explicit(HSL to Color) public static explicit operator Color(HSL hsl) Parameter Description hsl Inequality(HSL, HSL) public static bool operator !=(HSL lhs, HSL rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorUtils.HSV.html": {
    "href": "api/Zigurous.ColorUtils.HSV.html",
    "title": "Struct HSV | Color Utils",
    "keywords": "Struct HSV The HSV (hue, saturation, value) components of a color in the range [0..1]. Implements IEquatable < HSV > Namespace : Zigurous.ColorUtils [Serializable] public struct HSV : IEquatable<HSV> Constructors HSV(Color) public HSV(Color color) Parameter Description color HSV(Single, Single, Single) public HSV(float hue, float saturation, float value) Parameter Description hue saturation value Fields hue The hue component of the color in the range [0..1]. public float hue saturation The saturation component of the color in the range [0..1]. public float saturation value The value component of the color in the range [0..1]. public float value Methods Equals(Object) public override bool Equals(object obj) Parameter Description obj Overrides System.ValueType.Equals(System.Object) Equals(HSV) public bool Equals(HSV other) Parameter Description other Extract(Color, out Single, out Single, out Single) Extracts the HSV (hue, saturation, value) components from a color in the range [0..1]. public static void Extract(Color color, out float h, out float s, out float v) Parameter Description color h s v GetHashCode() public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components into a color. public Color ToColor() ToColor(Single, Single, Single) Converts HSV (hue, saturation, value) components into a color. public static Color ToColor(float h, float s, float v) Parameter Description h s v ToString() public override string ToString() Overrides System.ValueType.ToString() Operators Equality(HSV, HSV) public static bool operator ==(HSV lhs, HSV rhs) Parameter Description lhs rhs Explicit(Color to HSV) public static explicit operator HSV(Color color) Parameter Description color Explicit(HSV to Color) public static explicit operator Color(HSV hsv) Parameter Description hsv Implicit(HSV to HSB) public static implicit operator HSB(HSV hsv) Parameter Description hsv Inequality(HSV, HSV) public static bool operator !=(HSV lhs, HSV rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorUtils.html": {
    "href": "api/Zigurous.ColorUtils.html",
    "title": "Namespace Zigurous.ColorUtils | Color Utils",
    "keywords": "Namespace Zigurous.ColorUtils Classes Accessibility Functions for testing color accessibility requirements. Adjustment Functions for adjusting color values, e.g., hue, saturation, brightness, lightness, etc. Arithmetic Functions for color arithmetic. Averaging Functions for averaging colors together. ColorPalette Represents a palette of colors that can be saved as a Unity asset. Components Functions for extracting color component values. Contrast Functions for calculating contrast between colors. Conversion Functions for converting between color spaces and models. Equality Functions for testing the equality of colors. Gradients Functions for creating and working with color gradients. Harmonies Functions for generating color harmonies. Hex Functions for converting between hexadecimal and RGB color values. IlluminantExtensions Extensions methods for Illuminant . Luminance Functions for calculating color luminance. MaterialPalette Represents a palette of materials that can be saved as a Unity asset. Mixing Functions for mixing colors together, including tints, shades, and tones. MixingModelExtensions Extensions methods for MixingModel . Palette Functions for generating color palettes. Random Functions for generating random colors. SignalEncodingExtensions Extension methods for SignalEncoding Temperature Functions for testing color temperature. Structs ARGB The ARGB (alpha, red, green, blue) components of a color in the range [0..1]. ARGB255 The ARGB (alpha, red, green, blue) components of a color in the range [0..255]. CMYK The CMYK (cyan, magenta, yellow, black) components of a color in the range [0..1]. HSB The HSB (hue, saturation, brightness) components of a color in the range [0..1]. HSI The HSI (hue, saturation, intensity) components of a color in the range [0..1]. HSL The HSL (hue, saturation, lightness) components of a color in the range [0..1]. HSV The HSV (hue, saturation, value) components of a color in the range [0..1]. HunterLab The Hunter Lab components of a color - lightness (L) and chromaticity (a,b). LAB The LAB components of a color - lightness (L) and chromaticity (a,b). LCH_ab The LCH(ab) components of a color - lightness (L), chroma (C), and hue (h). LCH_uv The LCH(uv) components of a color - lightness (L), chroma (C), and hue (h). LUV The LUV components of a color - lightness (L) and chromaticity (u,v). RGB The RGB (red, green, blue) components of a color in the range [0..1]. RGB255 The RGB (red, green, blue) components of a color in the range [0..255]. RGBA The RGBA (red, green, blue, alpha) components of a color in the range [0..1]. RGBA255 The RGBA (red, green, blue, alpha) components of a color in the range [0..255]. Tristimulus Tristimulus system, a system for visually matching a color under standardized conditions against the three primary colors â red, green, and blue; the three results are expressed as X, Y, and Z, respectively, and are called tristimulus values. UCS The UCS components of a color - (u,v) chromaticity coordinates. UVW The UVW components of a color - chromaticity (U,V) and lightness (W). xyY The xyY components of a color - chromaticity (x,y) and luminance (Y). XYZ The XYZ components of a color - chromaticity (X,Z) and luminance (Y). YCbCr The Yâ²CbCr components of a color - luma (Yâ²) and chroma (Cb,Cr). YIQ The Yâ²IQ components of a color - luma (Yâ²) and chroma (I,Q). YPbPr The Yâ²PbPr components of a color - luma (Yâ²) and chroma (Pb,Pr). YUV The Yâ²UV components of a color - luma (Yâ²) and chroma (U,V). Enums Accessibility.Requirement A requirement defining how the visual presentation of text achieves a minimum contrast ratio to pass the accessibility specification - https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast ColorModel A color model is an abstract mathematical model describing the ways colors can be represented as tuples of numbers, typically as three or four values or color components. ColorSpace A color space is a specific organization of colors. In combination with physical device profiling, it allows for reproducible representations of color, in both analog and digital representations. Adding a specific mapping function between a color model and a reference color space establishes a definite \"footprint\", known as a gamut, and for a given color model this defines a color space. ColorWheelDivision A representation of the division of colors on the color wheel. Illuminant A standard illuminant defined by the International Commission on Illumination (CIE) which provides a basis for comparing images or colors recorded under different lighting. MixingModel A model that describes how colors are mixed together to form all other colors. SignalEncoding A standard ITU-R Recommendation signal encoding. ITU-R Recommendations are the names given to the set of international technical standards developed by the Radiocommunication Sector of the International Telecommunication Union (ITU). StandardObserver A CIE color-mapping function called the standard observer which represents an average human's chromatic response while observing an object under an illuminant."
  },
  "api/Zigurous.ColorUtils.HunterLab.html": {
    "href": "api/Zigurous.ColorUtils.HunterLab.html",
    "title": "Struct HunterLab | Color Utils",
    "keywords": "Struct HunterLab The Hunter Lab components of a color - lightness (L) and chromaticity (a,b). Implements IEquatable < HunterLab > Namespace : Zigurous.ColorUtils [Serializable] public struct HunterLab : IEquatable<HunterLab> Constructors HunterLab(Color) public HunterLab(Color color) Parameter Description color HunterLab(Color, Illuminant, StandardObserver) public HunterLab(Color color, Illuminant illuminant, StandardObserver observer) Parameter Description color illuminant observer HunterLab(Color, Tristimulus) public HunterLab(Color color, Tristimulus whitePoint) Parameter Description color whitePoint HunterLab(Single, Single, Single) public HunterLab(float L, float a, float b) Parameter Description L a b Fields a The green-red chromaticity component of the color. public float a b The blue-yellow chromaticity component of the color. public float b L The lightness component of the color in the range [0..100]. public float L Methods Equals(Object) public override bool Equals(object obj) Parameter Description obj Overrides System.ValueType.Equals(System.Object) Equals(HunterLab) public bool Equals(HunterLab other) Parameter Description other Extract(Color, out Single, out Single, out Single) Extracts the Hunter Lab components from a color. public static void Extract(Color color, out float L, out float a, out float b) Parameter Description color L a b Extract(Color, Illuminant, StandardObserver, out Single, out Single, out Single) Extracts the Hunter Lab components from a color. public static void Extract(Color color, Illuminant illuminant, StandardObserver observer, out float L, out float a, out float b) Parameter Description color illuminant observer L a b Extract(Color, Tristimulus, out Single, out Single, out Single) Extracts the Hunter Lab components from a color using the given white point. public static void Extract(Color color, Tristimulus whitePoint, out float L, out float a, out float b) Parameter Description color whitePoint L a b GetHashCode() public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components into a color. public Color ToColor() ToColor(Single, Single, Single, Tristimulus) Converts Hunter Lab components into a color using the given white point. public static Color ToColor(float L, float a, float b, Tristimulus whitePoint) Parameter Description L a b whitePoint ToColor(Illuminant, StandardObserver) Converts the components into a color using the given illuminant and standard observer. public Color ToColor(Illuminant illuminant, StandardObserver observer) Parameter Description illuminant observer ToColor(Tristimulus) Converts the components into a color using the given white point. public Color ToColor(Tristimulus whitePoint) Parameter Description whitePoint ToString() public override string ToString() Overrides System.ValueType.ToString() Operators Equality(HunterLab, HunterLab) public static bool operator ==(HunterLab lhs, HunterLab rhs) Parameter Description lhs rhs Explicit(Color to HunterLab) public static explicit operator HunterLab(Color color) Parameter Description color Explicit(HunterLab to Color) public static explicit operator Color(HunterLab components) Parameter Description components Inequality(HunterLab, HunterLab) public static bool operator !=(HunterLab lhs, HunterLab rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorUtils.Illuminant.html": {
    "href": "api/Zigurous.ColorUtils.Illuminant.html",
    "title": "Enum Illuminant | Color Utils",
    "keywords": "Enum Illuminant A standard illuminant defined by the International Commission on Illumination (CIE) which provides a basis for comparing images or colors recorded under different lighting. Namespace : Zigurous.ColorUtils public enum Illuminant Fields Name Description a Incandescent/Tungsten b Old Direct Sunlight at Noon c Old Daylight d50 ICC Profile PCS d55 Mid-morning Daylight d65 Daylight, sRGB, Adobe-RGB d75 North Sky Daylight e Equal Energy f1 Daylight Fluorescent f10 Ultralume 50, Philips TL85 f11 Ultralume 40, Philips TL84 f12 Ultralume 30, Philips TL83 f2 Cool Fluorescent f3 White Fluorescent f4 Warm White Fluorescent f5 Daylight Fluorescent f6 Lite White Fluorescent f7 Daylight Fluorescent, D65 Simulator f8 Sylvania F40, D50 Simulator f9 Cool White Fluorescent"
  },
  "api/Zigurous.ColorUtils.IlluminantExtensions.html": {
    "href": "api/Zigurous.ColorUtils.IlluminantExtensions.html",
    "title": "Class IlluminantExtensions | Color Utils",
    "keywords": "Class IlluminantExtensions Extensions methods for Illuminant . Inheritance System.Object IlluminantExtensions Namespace : Zigurous.ColorUtils public static class IlluminantExtensions Methods GetWhitePoint(Illuminant, StandardObserver, Single) Returns the white point tristimulus values of the illuminant while observed under a given standard observer. Values are usually scaled between 0 and 100. public static Tristimulus GetWhitePoint(this Illuminant illuminant, StandardObserver observer = StandardObserver.Two, float scale = 100F) Parameter Description illuminant The illuminant to get the white point of. observer The standard observer to use. scale The scale to use for the output values."
  },
  "api/Zigurous.ColorUtils.LAB.html": {
    "href": "api/Zigurous.ColorUtils.LAB.html",
    "title": "Struct LAB | Color Utils",
    "keywords": "Struct LAB The LAB components of a color - lightness (L) and chromaticity (a,b). Implements IEquatable < LAB > Namespace : Zigurous.ColorUtils [Serializable] public struct LAB : IEquatable<LAB> Constructors LAB(Color) public LAB(Color color) Parameter Description color LAB(Color, Illuminant, StandardObserver) public LAB(Color color, Illuminant illuminant, StandardObserver observer) Parameter Description color illuminant observer LAB(Color, Tristimulus) public LAB(Color color, Tristimulus whitePoint) Parameter Description color whitePoint LAB(Single, Single, Single) public LAB(float L, float a, float b) Parameter Description L a b Fields a The green-red chromaticity component of the color typically in the range [-128..128]. public float a b The blue-yellow chromaticity component of the color typically in the range [-128..128]. public float b L The lightness component of the color in the range [0..100]. public float L Methods Equals(Object) public override bool Equals(object obj) Parameter Description obj Overrides System.ValueType.Equals(System.Object) Equals(LAB) public bool Equals(LAB other) Parameter Description other Extract(Color, out Single, out Single, out Single) Extracts the LAB components from a color. public static void Extract(Color color, out float L, out float a, out float b) Parameter Description color L a b Extract(Color, Illuminant, StandardObserver, out Single, out Single, out Single) Extracts the LAB components from a color. public static void Extract(Color color, Illuminant illuminant, StandardObserver observer, out float L, out float a, out float b) Parameter Description color illuminant observer L a b Extract(Color, Tristimulus, out Single, out Single, out Single) Extracts the LAB components from a color using the given white point. public static void Extract(Color color, Tristimulus whitePoint, out float L, out float a, out float b) Parameter Description color whitePoint L a b GetHashCode() public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components into a color. public Color ToColor() ToColor(Single, Single, Single, Tristimulus) Converts LAB components into a color using the given white point. public static Color ToColor(float L, float a, float b, Tristimulus whitePoint) Parameter Description L a b whitePoint ToColor(Illuminant, StandardObserver) Converts the components into a color using the given illuminant and standard observer. public Color ToColor(Illuminant illuminant, StandardObserver observer) Parameter Description illuminant observer ToColor(Tristimulus) Converts the components into a color using the given white point. public Color ToColor(Tristimulus whitePoint) Parameter Description whitePoint ToString() public override string ToString() Overrides System.ValueType.ToString() Operators Equality(LAB, LAB) public static bool operator ==(LAB lhs, LAB rhs) Parameter Description lhs rhs Explicit(Color to LAB) public static explicit operator LAB(Color color) Parameter Description color Explicit(LAB to Color) public static explicit operator Color(LAB components) Parameter Description components Inequality(LAB, LAB) public static bool operator !=(LAB lhs, LAB rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorUtils.LCH_ab.html": {
    "href": "api/Zigurous.ColorUtils.LCH_ab.html",
    "title": "Struct LCH_ab | Color Utils",
    "keywords": "Struct LCH_ab The LCH(ab) components of a color - lightness (L), chroma (C), and hue (h). Implements IEquatable < LCH_ab > Namespace : Zigurous.ColorUtils [Serializable] public struct LCH_ab : IEquatable<LCH_ab> Constructors LCH_ab(Color) public LCH_ab(Color color) Parameter Description color LCH_ab(Color, Illuminant, StandardObserver) public LCH_ab(Color color, Illuminant illuminant, StandardObserver observer) Parameter Description color illuminant observer LCH_ab(Color, Tristimulus) public LCH_ab(Color color, Tristimulus whitePoint) Parameter Description color whitePoint LCH_ab(Single, Single, Single) public LCH_ab(float L, float C, float h) Parameter Description L C h Fields C The chroma component of the color. public float C h The hue component of the color in the range [0..360Â°]. public float h L The lightness component of the color in the range [0..100]. public float L Methods Equals(Object) public override bool Equals(object obj) Parameter Description obj Overrides System.ValueType.Equals(System.Object) Equals(LCH_ab) public bool Equals(LCH_ab other) Parameter Description other Extract(Color, out Single, out Single, out Single) Extracts the LCH(ab) components from a color. public static void Extract(Color color, out float L, out float C, out float h) Parameter Description color L C h Extract(Color, Illuminant, StandardObserver, out Single, out Single, out Single) Extracts the LCH(ab) components from a color using the given illuminant and standard observer. public static void Extract(Color color, Illuminant illuminant, StandardObserver observer, out float L, out float C, out float h) Parameter Description color illuminant observer L C h Extract(Color, Tristimulus, out Single, out Single, out Single) Extracts the LCH(ab) components from a color using the given white point. public static void Extract(Color color, Tristimulus whitePoint, out float L, out float C, out float h) Parameter Description color whitePoint L C h GetHashCode() public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components into a color. public Color ToColor() ToColor(Single, Single, Single, Tristimulus) Converts LCH(ab) components into a color using the given white point. public static Color ToColor(float L, float C, float h, Tristimulus whitePoint) Parameter Description L C h whitePoint ToColor(Illuminant, StandardObserver) Converts the components into a color using the given illuminant and standard observer. public Color ToColor(Illuminant illuminant, StandardObserver observer) Parameter Description illuminant observer ToColor(Tristimulus) Converts the components into a color using the given white point. public Color ToColor(Tristimulus whitePoint) Parameter Description whitePoint ToString() public override string ToString() Overrides System.ValueType.ToString() Operators Equality(LCH_ab, LCH_ab) public static bool operator ==(LCH_ab lhs, LCH_ab rhs) Parameter Description lhs rhs Explicit(Color to LCH_ab) public static explicit operator LCH_ab(Color color) Parameter Description color Explicit(LCH_ab to Color) public static explicit operator Color(LCH_ab components) Parameter Description components Inequality(LCH_ab, LCH_ab) public static bool operator !=(LCH_ab lhs, LCH_ab rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorUtils.LCH_uv.html": {
    "href": "api/Zigurous.ColorUtils.LCH_uv.html",
    "title": "Struct LCH_uv | Color Utils",
    "keywords": "Struct LCH_uv The LCH(uv) components of a color - lightness (L), chroma (C), and hue (h). Implements IEquatable < LCH_uv > Namespace : Zigurous.ColorUtils [Serializable] public struct LCH_uv : IEquatable<LCH_uv> Constructors LCH_uv(Color) public LCH_uv(Color color) Parameter Description color LCH_uv(Color, Illuminant, StandardObserver) public LCH_uv(Color color, Illuminant illuminant, StandardObserver observer) Parameter Description color illuminant observer LCH_uv(Color, Tristimulus) public LCH_uv(Color color, Tristimulus whitePoint) Parameter Description color whitePoint LCH_uv(Single, Single, Single) public LCH_uv(float L, float C, float h) Parameter Description L C h Fields C The chroma component of the color. public float C h The hue component of the color in the range [0..360Â°]. public float h L The lightness component of the color in the range [0..100]. public float L Methods Equals(Object) public override bool Equals(object obj) Parameter Description obj Overrides System.ValueType.Equals(System.Object) Equals(LCH_uv) public bool Equals(LCH_uv other) Parameter Description other Extract(Color, out Single, out Single, out Single) Extracts the LCH(uv) components from a color. public static void Extract(Color color, out float L, out float C, out float h) Parameter Description color L C h Extract(Color, Illuminant, StandardObserver, out Single, out Single, out Single) Extracts the LCH(uv) components from a color using the given illuminant and standard observer. public static void Extract(Color color, Illuminant illuminant, StandardObserver observer, out float L, out float C, out float h) Parameter Description color illuminant observer L C h Extract(Color, Tristimulus, out Single, out Single, out Single) Extracts the LCH(uv) components from a color using the given white point. public static void Extract(Color color, Tristimulus whitePoint, out float L, out float C, out float h) Parameter Description color whitePoint L C h GetHashCode() public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components into a color. public Color ToColor() ToColor(Single, Single, Single, Tristimulus) Converts LCH(uv) components into a color using the given white point. public static Color ToColor(float L, float C, float h, Tristimulus whitePoint) Parameter Description L C h whitePoint ToColor(Illuminant, StandardObserver) Converts the components into a color using the given illuminant and standard observer. public Color ToColor(Illuminant illuminant, StandardObserver observer) Parameter Description illuminant observer ToColor(Tristimulus) Converts the components into a color using the given white point. public Color ToColor(Tristimulus whitePoint) Parameter Description whitePoint ToString() public override string ToString() Overrides System.ValueType.ToString() Operators Equality(LCH_uv, LCH_uv) public static bool operator ==(LCH_uv lhs, LCH_uv rhs) Parameter Description lhs rhs Explicit(Color to LCH_uv) public static explicit operator LCH_uv(Color color) Parameter Description color Explicit(LCH_uv to Color) public static explicit operator Color(LCH_uv components) Parameter Description components Inequality(LCH_uv, LCH_uv) public static bool operator !=(LCH_uv lhs, LCH_uv rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorUtils.Luminance.html": {
    "href": "api/Zigurous.ColorUtils.Luminance.html",
    "title": "Class Luminance | Color Utils",
    "keywords": "Class Luminance Functions for calculating color luminance. Inheritance System.Object Luminance Namespace : Zigurous.ColorUtils public static class Luminance Methods IsDark(Color) Determines if the color is perceived darker than it is lighter. public static bool IsDark(this Color color) Parameter Description color The color to test. IsLight(Color) Determines if the color is perceived lighter than it is darker. public static bool IsLight(this Color color) Parameter Description color The color to test. PerceivedBrightness(Color) Calculates the perceived brightness of the color, measured according to the HSP color model - http://alienryderflex.com/hsp.html . public static float PerceivedBrightness(this Color color) Parameter Description color The color to calculate the brightness of. RelativeLuminance(Color) Calculates the relative luminance of the color, measured according to the HSL color model. public static float RelativeLuminance(this Color color) Parameter Description color The color to calculate the luminance of."
  },
  "api/Zigurous.ColorUtils.LUV.html": {
    "href": "api/Zigurous.ColorUtils.LUV.html",
    "title": "Struct LUV | Color Utils",
    "keywords": "Struct LUV The LUV components of a color - lightness (L) and chromaticity (u,v). Implements IEquatable < LUV > Namespace : Zigurous.ColorUtils [Serializable] public struct LUV : IEquatable<LUV> Constructors LUV(Color) public LUV(Color color) Parameter Description color LUV(Color, Illuminant, StandardObserver) public LUV(Color color, Illuminant illuminant, StandardObserver observer) Parameter Description color illuminant observer LUV(Color, Tristimulus) public LUV(Color color, Tristimulus whitePoint) Parameter Description color whitePoint LUV(Single, Single, Single) public LUV(float L, float u, float v) Parameter Description L u v Fields L The lightness component of the color in the range [0..100]. public float L u The green-red chromaticity component of the color typically in the range [-100..100]. public float u v The blue-yellow chromaticity component of the color typically in the range [-100..100]. public float v Methods Equals(Object) public override bool Equals(object obj) Parameter Description obj Overrides System.ValueType.Equals(System.Object) Equals(LUV) public bool Equals(LUV other) Parameter Description other Extract(Color, out Single, out Single, out Single) Extracts the LUV components from a color. public static void Extract(Color color, out float L, out float u, out float v) Parameter Description color L u v Extract(Color, Illuminant, StandardObserver, out Single, out Single, out Single) Extracts the LUV components from a color. public static void Extract(Color color, Illuminant illuminant, StandardObserver observer, out float L, out float u, out float v) Parameter Description color illuminant observer L u v Extract(Color, Tristimulus, out Single, out Single, out Single) Extracts the LUV components from a color using the given white point. public static void Extract(Color color, Tristimulus whitePoint, out float L, out float u, out float v) Parameter Description color whitePoint L u v GetHashCode() public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components into a color. public Color ToColor() ToColor(Single, Single, Single, Tristimulus) Converts LUV components into a color using the given white point. public static Color ToColor(float L, float u, float v, Tristimulus whitePoint) Parameter Description L u v whitePoint ToColor(Illuminant, StandardObserver) Converts the components into a color using the given illuminant and standard observer. public Color ToColor(Illuminant illuminant, StandardObserver observer) Parameter Description illuminant observer ToColor(Tristimulus) Converts the components into a color using the given white point. public Color ToColor(Tristimulus whitePoint) Parameter Description whitePoint ToString() public override string ToString() Overrides System.ValueType.ToString() Operators Equality(LUV, LUV) public static bool operator ==(LUV lhs, LUV rhs) Parameter Description lhs rhs Explicit(Color to LUV) public static explicit operator LUV(Color color) Parameter Description color Explicit(LUV to Color) public static explicit operator Color(LUV components) Parameter Description components Inequality(LUV, LUV) public static bool operator !=(LUV lhs, LUV rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorUtils.MaterialPalette.html": {
    "href": "api/Zigurous.ColorUtils.MaterialPalette.html",
    "title": "Class MaterialPalette | Color Utils",
    "keywords": "Class MaterialPalette Represents a palette of materials that can be saved as a Unity asset. Inheritance System.Object MaterialPalette Namespace : Zigurous.ColorUtils public sealed class MaterialPalette : ScriptableObject Fields materials The materials that define the palette. public Material[] materials Methods CreateColorPalette() Converts the material palette into a color palette using each material's main color. public ColorPalette CreateColorPalette() Returns Description ColorPalette A new color palette. Random() Returns a random material from the palette. public Material Random()"
  },
  "api/Zigurous.ColorUtils.Mixing.html": {
    "href": "api/Zigurous.ColorUtils.Mixing.html",
    "title": "Class Mixing | Color Utils",
    "keywords": "Class Mixing Functions for mixing colors together, including tints, shades, and tones. Inheritance System.Object Mixing Namespace : Zigurous.ColorUtils public static class Mixing Methods Mix(Color, Color, Single, Boolean) Returns the result of mixing two colors together using a given weight between [0..1]. A weight of 0 results in the first color, and a weight of 1 results in the second color. public static Color Mix(Color first, Color second, float weight = 0.5F, bool mixAlpha = true) Parameter Description first The first color to mix. second The second color to mix. weight The weight of the second color to mix with the first. mixAlpha True to mix the alpha components, otherwise the first color's alpha is used. MixedWith(Color, Color, Single, Boolean) Returns the result of mixing the current color with another color using a given weight between [0..1]. A weight of 0 results in the first color, and a weight of 1 results in the second color. public static Color MixedWith(this Color color, Color other, float weight = 0.5F, bool mixAlpha = true) Parameter Description color The first color to mix. other The second color to mix. weight The weight of the second color to mix with the first. mixAlpha True to mix the alpha components, otherwise the first color's alpha is used. Shade(Color, Single) Returns a shade of the color by mixing it with a percentage of black. public static Color Shade(this Color color, float percentage = 0.1F) Parameter Description color The color to shade. percentage The percentage of black to mix with. Tint(Color, Single) Returns a tint of the color by mixing it with a percentage of white. public static Color Tint(this Color color, float percentage = 0.1F) Parameter Description color The color to tint. percentage The percentage of white to mix with. Tone(Color, Single) Returns a tone of the color by mixing it with a percentage of gray. public static Color Tone(this Color color, float percentage = 0.1F) Parameter Description color The color to tone. percentage The percentage of gray to mix with."
  },
  "api/Zigurous.ColorUtils.MixingModel.html": {
    "href": "api/Zigurous.ColorUtils.MixingModel.html",
    "title": "Enum MixingModel | Color Utils",
    "keywords": "Enum MixingModel A model that describes how colors are mixed together to form all other colors. Namespace : Zigurous.ColorUtils public enum MixingModel Fields Name Description Additive A mixing model that leads to the RGB color model with primary colors of red, green, and blue. The absence of color is black, and the presence of all three primary colors is white. Colors are added together to form white. Additive color mixing simulates light. Subtractive A mixing model that leads to the CMYK color model with primary colors of cyan, magenta, and yellow. The absence of color is white, and the presence of all three primary colors is black. Colors are subtracted to form black. Subtractive color mixing simulates print. Traditional A mixing model that leads to the RYB color model with primary colors of red, yellow, and blue. The absence of color is white, and the presence of all three primary colors is black. Traditional color mixing simulates paint."
  },
  "api/Zigurous.ColorUtils.MixingModelExtensions.html": {
    "href": "api/Zigurous.ColorUtils.MixingModelExtensions.html",
    "title": "Class MixingModelExtensions | Color Utils",
    "keywords": "Class MixingModelExtensions Extensions methods for MixingModel . Inheritance System.Object MixingModelExtensions Namespace : Zigurous.ColorUtils public static class MixingModelExtensions Methods ColorWheel(MixingModel) Returns the primary, secondary, and tertiary colors of the mixing model. public static Color[] ColorWheel(this MixingModel model) Parameter Description model PrimaryColors(MixingModel) Returns the primary colors of the mixing model. public static Color[] PrimaryColors(this MixingModel model) Parameter Description model SecondaryColors(MixingModel) Returns the secondary colors of the mixing model. public static Color[] SecondaryColors(this MixingModel model) Parameter Description model TertiaryColors(MixingModel) Returns the tertiary colors of the mixing model. public static Color[] TertiaryColors(this MixingModel model) Parameter Description model"
  },
  "api/Zigurous.ColorUtils.Palette.html": {
    "href": "api/Zigurous.ColorUtils.Palette.html",
    "title": "Class Palette | Color Utils",
    "keywords": "Class Palette Functions for generating color palettes. Inheritance System.Object Palette Namespace : Zigurous.ColorUtils public static class Palette Methods Darker(Color, Int32) Generates a given amount of darker colors from a base color. public static Color[] Darker(this Color baseColor, int amount) Parameter Description baseColor The base color to generate new colors from. amount The amount of darker colors to generate. Desaturated(Color, Int32) Generates a given amount of desaturated colors from a base color. public static Color[] Desaturated(this Color baseColor, int amount) Parameter Description baseColor The base color to generate new colors from. amount The amount of desaturated colors to generate. Hues(Color, Single) Generates the hues of a base color with a given increment of degrees. For example an increment of 30 will generate 12 different hues (360/30 = 12). public static Color[] Hues(this Color baseColor, float degrees = 30F) Parameter Description baseColor The base color to generate new colors from. degrees The hue increment in degrees. Lighter(Color, Int32) Generates a given amount of lighter colors from a base color. public static Color[] Lighter(this Color baseColor, int amount) Parameter Description baseColor The base color to generate new colors from. amount The amount of lighter colors to generate. RandomDarker(Color, Int32, Single, Single) Generates a given amount of random darker colors from a base color. The amount of change in darkness can be constrained between a minimum and maximum range if desired. public static Color[] RandomDarker(this Color baseColor, int amount, float min = 0F, float max = 1F) Parameter Description baseColor The base color to generate new colors from. amount The amount of random darker colors to generate. min The minimum amount of change in darkness. max The maximum amount of change in darkness. RandomDesaturated(Color, Int32, Single, Single) Generates a given amount of random desaturated colors from a base color. The amount of change in desaturation can be constrained between a minimum and maximum range if desired. public static Color[] RandomDesaturated(this Color baseColor, int amount, float min = 0F, float max = 1F) Parameter Description baseColor The base color to generate new colors from. amount The amount of random desaturated colors to generate. min The minimum amount of change in desaturation. max The maximum amount of change in desaturation. RandomHues(Color, Int32) Generates a given amount of random hues from a base color. public static Color[] RandomHues(this Color baseColor, int amount) Parameter Description baseColor The base color to generate new colors from. amount The amount of random hues to generate. RandomLighter(Color, Int32, Single, Single) Generates a given amount of random lighter colors from a base color. The amount of change in lightness can be constrained between a minimum and maximum range if desired. public static Color[] RandomLighter(this Color baseColor, int amount, float min = 0F, float max = 1F) Parameter Description baseColor The base color to generate new colors from. amount The amount of random lighter colors to generate. min The minimum amount of change in lightness. max The maximum amount of change in lightness. RandomSaturated(Color, Int32, Single, Single) Generates a given amount of random saturated colors from a base color. The amount of change in saturation can be constrained between a minimum and maximum range if desired. public static Color[] RandomSaturated(this Color baseColor, int amount, float min = 0F, float max = 1F) Parameter Description baseColor The base color to generate new colors from. amount The amount of random saturated colors to generate. min The minimum amount of change in saturation. max The maximum amount of change in saturation. RandomShades(Color, Int32, Single, Single) Generates a given amount of random shades from a base color. The amount of change in the shades can be constrained between a minimum and maximum range if desired. public static Color[] RandomShades(this Color baseColor, int amount, float min = 0F, float max = 1F) Parameter Description baseColor The base color to generate new colors from. amount The amount of random shades to generate. min The minimum amount of change in the shades. max The maximum amount of change in the shades. RandomTints(Color, Int32, Single, Single) Generates a given amount of random tints from a base color. The amount of change in the tints can be constrained between a minimum and maximum range if desired. public static Color[] RandomTints(this Color baseColor, int amount, float min = 0F, float max = 1F) Parameter Description baseColor The base color to generate new colors from. amount The amount of random tints to generate. min The minimum amount of change in the tints. max The maximum amount of change in the tints. RandomTones(Color, Int32, Single, Single) Generates a given amount of random tones from a base color. The amount of change in the tones can be constrained between a minimum and maximum range if desired. public static Color[] RandomTones(this Color baseColor, int amount, float min = 0F, float max = 1F) Parameter Description baseColor The base color to generate new colors from. amount The amount of random tones to generate. min The minimum amount of change in the tones. max The maximum amount of change in the tones. Saturated(Color, Int32) Generates a given amount of saturated colors from a base color. public static Color[] Saturated(this Color baseColor, int amount) Parameter Description baseColor The base color to generate new colors from. amount The amount of saturated colors to generate. Shades(Color, Int32) Generates a given amount of shades from a base color. public static Color[] Shades(this Color baseColor, int amount) Parameter Description baseColor The base color to generate new colors from. amount The amount of shades to generate. Tints(Color, Int32) Generates a given amount of tints from a base color. public static Color[] Tints(this Color baseColor, int amount) Parameter Description baseColor The base color to generate new colors from. amount The amount of tints to generate. Tones(Color, Int32) Generates a given amount of tones from a base color. public static Color[] Tones(this Color baseColor, int amount) Parameter Description baseColor The base color to generate new colors from. amount The amount of tones to generate."
  },
  "api/Zigurous.ColorUtils.Random.html": {
    "href": "api/Zigurous.ColorUtils.Random.html",
    "title": "Class Random | Color Utils",
    "keywords": "Class Random Functions for generating random colors. Inheritance System.Object Random Namespace : Zigurous.ColorUtils public static class Random Methods Color(Boolean) Returns a random color. public static Color Color(bool randomizeAlpha = false) Parameter Description randomizeAlpha Randomizes the alpha value as well, otherwise uses a value of 1. Colors(Int32, Boolean) Returns a random array of colors. public static Color[] Colors(int amount, bool randomizeAlpha = false) Parameter Description amount The number of colors to return. randomizeAlpha Randomizes the alpha values as well, otherwise uses a value of 1. ColorsNonAlloc(Color[], Boolean) Populates an existing array with random colors. Remarks This function does not allocate any memory on the heap. The amount of colors created is determined by the size of the array. public static void ColorsNonAlloc(Color[] output, bool randomizeAlpha = false) Parameter Description output The array to populate with random colors. randomizeAlpha Randomizes the alpha values as well, otherwise uses a value of 1."
  },
  "api/Zigurous.ColorUtils.RGB.html": {
    "href": "api/Zigurous.ColorUtils.RGB.html",
    "title": "Struct RGB | Color Utils",
    "keywords": "Struct RGB The RGB (red, green, blue) components of a color in the range [0..1]. Implements IEquatable < RGB > Namespace : Zigurous.ColorUtils [Serializable] public struct RGB : IEquatable<RGB> Constructors RGB(Color) public RGB(Color color) Parameter Description color RGB(Single, Single, Single) public RGB(float red, float green, float blue) Parameter Description red green blue Fields blue The blue component of the color in the range [0..1]. public float blue green The green component of the color in the range [0..1]. public float green red The red component of the color in the range [0..1]. public float red Methods Equals(Object) public override bool Equals(object obj) Parameter Description obj Overrides System.ValueType.Equals(System.Object) Equals(RGB) public bool Equals(RGB other) Parameter Description other Extract(Color, out Single, out Single, out Single) Extracts the RGB (red, green, blue) components from a color. public static void Extract(Color color, out float r, out float g, out float b) Parameter Description color r g b GetHashCode() public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components into a color. public Color ToColor() ToColor(Single, Single, Single) Converts RGB (red, green, blue) components into a color. public static Color ToColor(float red, float green, float blue) Parameter Description red green blue ToString() public override string ToString() Overrides System.ValueType.ToString() Operators Equality(RGB, RGB) public static bool operator ==(RGB lhs, RGB rhs) Parameter Description lhs rhs Explicit(Color to RGB) public static explicit operator RGB(Color color) Parameter Description color Explicit(RGB to Color) public static explicit operator Color(RGB rgb) Parameter Description rgb Implicit(RGB to ARGB) public static implicit operator ARGB(RGB rgb) Parameter Description rgb Implicit(RGB to RGBA) public static implicit operator RGBA(RGB rgb) Parameter Description rgb Inequality(RGB, RGB) public static bool operator !=(RGB lhs, RGB rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorUtils.RGB255.html": {
    "href": "api/Zigurous.ColorUtils.RGB255.html",
    "title": "Struct RGB255 | Color Utils",
    "keywords": "Struct RGB255 The RGB (red, green, blue) components of a color in the range [0..255]. Implements IEquatable < RGB255 > Namespace : Zigurous.ColorUtils [Serializable] public struct RGB255 : IEquatable<RGB255> Constructors RGB255(Color) public RGB255(Color color) Parameter Description color RGB255(Int32, Int32, Int32) public RGB255(int red, int green, int blue) Parameter Description red green blue Fields blue The blue component of the color in the range [0..255]. public int blue green The green component of the color in the range [0..255]. public int green red The red component of the color in the range [0..255]. public int red Methods Equals(Object) public override bool Equals(object obj) Parameter Description obj Overrides System.ValueType.Equals(System.Object) Equals(RGB255) public bool Equals(RGB255 other) Parameter Description other Extract(Color, out Int32, out Int32, out Int32) Extracts the RGB (red, green, blue) components from a color. public static void Extract(Color color, out int r, out int g, out int b) Parameter Description color r g b GetHashCode() public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components into a color. public Color ToColor() ToColor(Int32, Int32, Int32) Converts RGB (red, green, blue) components into a color. public static Color ToColor(int red, int green, int blue) Parameter Description red green blue ToString() public override string ToString() Overrides System.ValueType.ToString() Operators Equality(RGB255, RGB255) public static bool operator ==(RGB255 lhs, RGB255 rhs) Parameter Description lhs rhs Explicit(Color to RGB255) public static explicit operator RGB255(Color color) Parameter Description color Explicit(RGB255 to Color) public static explicit operator Color(RGB255 rgb) Parameter Description rgb Implicit(RGB255 to ARGB255) public static implicit operator ARGB255(RGB255 rgb) Parameter Description rgb Implicit(RGB255 to RGBA255) public static implicit operator RGBA255(RGB255 rgb) Parameter Description rgb Inequality(RGB255, RGB255) public static bool operator !=(RGB255 lhs, RGB255 rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorUtils.RGBA.html": {
    "href": "api/Zigurous.ColorUtils.RGBA.html",
    "title": "Struct RGBA | Color Utils",
    "keywords": "Struct RGBA The RGBA (red, green, blue, alpha) components of a color in the range [0..1]. Implements IEquatable < RGBA > Namespace : Zigurous.ColorUtils [Serializable] public struct RGBA : IEquatable<RGBA> Constructors RGBA(Color) public RGBA(Color color) Parameter Description color RGBA(Single, Single, Single, Single) public RGBA(float red, float green, float blue, float alpha) Parameter Description red green blue alpha Fields alpha The alpha component of the color in the range [0..1]. public float alpha blue The blue component of the color in the range [0..1]. public float blue green The green component of the color in the range [0..1]. public float green red The red component of the color in the range [0..1]. public float red Methods Equals(Object) public override bool Equals(object obj) Parameter Description obj Overrides System.ValueType.Equals(System.Object) Equals(RGBA) public bool Equals(RGBA other) Parameter Description other Extract(Color, out Single, out Single, out Single, out Single) Extracts the RGBA (red, green, blue, alpha) components from a color. public static void Extract(Color color, out float r, out float g, out float b, out float a) Parameter Description color r g b a GetHashCode() public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components into a color. public Color ToColor() ToColor(Single, Single, Single, Single) Converts RGBA (red, green, blue, alpha) components into a color. public static Color ToColor(float red, float green, float blue, float alpha) Parameter Description red green blue alpha ToString() public override string ToString() Overrides System.ValueType.ToString() Operators Equality(RGBA, RGBA) public static bool operator ==(RGBA lhs, RGBA rhs) Parameter Description lhs rhs Explicit(Color to RGBA) public static explicit operator RGBA(Color color) Parameter Description color Explicit(RGBA to Color) public static explicit operator Color(RGBA rgba) Parameter Description rgba Implicit(RGBA to ARGB) public static implicit operator ARGB(RGBA rgba) Parameter Description rgba Implicit(RGBA to RGB) public static implicit operator RGB(RGBA rgba) Parameter Description rgba Inequality(RGBA, RGBA) public static bool operator !=(RGBA lhs, RGBA rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorUtils.RGBA255.html": {
    "href": "api/Zigurous.ColorUtils.RGBA255.html",
    "title": "Struct RGBA255 | Color Utils",
    "keywords": "Struct RGBA255 The RGBA (red, green, blue, alpha) components of a color in the range [0..255]. Implements IEquatable < RGBA255 > Namespace : Zigurous.ColorUtils [Serializable] public struct RGBA255 : IEquatable<RGBA255> Constructors RGBA255(Color) public RGBA255(Color color) Parameter Description color RGBA255(Int32, Int32, Int32, Int32) public RGBA255(int red, int green, int blue, int alpha) Parameter Description red green blue alpha Fields alpha The alpha component of the color in the range [0..255]. public int alpha blue The blue component of the color in the range [0..255]. public int blue green The green component of the color in the range [0..255]. public int green red The red component of the color in the range [0..255]. public int red Methods Equals(Object) public override bool Equals(object obj) Parameter Description obj Overrides System.ValueType.Equals(System.Object) Equals(RGBA255) public bool Equals(RGBA255 other) Parameter Description other Extract(Color, out Int32, out Int32, out Int32, out Int32) Extracts the RGBA (red, green, blue, alpha) components from a color. public static void Extract(Color color, out int r, out int g, out int b, out int a) Parameter Description color r g b a GetHashCode() public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components into a color. public Color ToColor() ToColor(Int32, Int32, Int32, Int32) Converts RGBA (red, green, blue, alpha) components into a color. public static Color ToColor(int red, int green, int blue, int alpha) Parameter Description red green blue alpha ToString() public override string ToString() Overrides System.ValueType.ToString() Operators Equality(RGBA255, RGBA255) public static bool operator ==(RGBA255 lhs, RGBA255 rhs) Parameter Description lhs rhs Explicit(Color to RGBA255) public static explicit operator RGBA255(Color color) Parameter Description color Explicit(RGBA255 to Color) public static explicit operator Color(RGBA255 rgba) Parameter Description rgba Implicit(RGBA255 to ARGB255) public static implicit operator ARGB255(RGBA255 rgba) Parameter Description rgba Implicit(RGBA255 to RGB255) public static implicit operator RGB255(RGBA255 rgba) Parameter Description rgba Inequality(RGBA255, RGBA255) public static bool operator !=(RGBA255 lhs, RGBA255 rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorUtils.SignalEncoding.html": {
    "href": "api/Zigurous.ColorUtils.SignalEncoding.html",
    "title": "Enum SignalEncoding | Color Utils",
    "keywords": "Enum SignalEncoding A standard ITU-R Recommendation signal encoding. ITU-R Recommendations are the names given to the set of international technical standards developed by the Radiocommunication Sector of the International Telecommunication Union (ITU). Namespace : Zigurous.ColorUtils public enum SignalEncoding Fields Name Description Rec601 ITU-R BT.601 (standard-definition television) Rec709 ITU-R BT.709 (high-definition television)"
  },
  "api/Zigurous.ColorUtils.SignalEncodingExtensions.html": {
    "href": "api/Zigurous.ColorUtils.SignalEncodingExtensions.html",
    "title": "Class SignalEncodingExtensions | Color Utils",
    "keywords": "Class SignalEncodingExtensions Extension methods for SignalEncoding Inheritance System.Object SignalEncodingExtensions Namespace : Zigurous.ColorUtils public static class SignalEncodingExtensions Methods GetCoefficients(SignalEncoding) Returns the coefficients of the signal encoding used to calculate figures such as relative luminance and perceived brightness. public static Tristimulus GetCoefficients(this SignalEncoding encoding) Parameter Description encoding The encoding to get the coefficients of."
  },
  "api/Zigurous.ColorUtils.StandardObserver.html": {
    "href": "api/Zigurous.ColorUtils.StandardObserver.html",
    "title": "Enum StandardObserver | Color Utils",
    "keywords": "Enum StandardObserver A CIE color-mapping function called the standard observer which represents an average human's chromatic response while observing an object under an illuminant. Namespace : Zigurous.ColorUtils public enum StandardObserver Fields Name Description Ten CIE 1964 10Â° Standard Observer Two CIE 1931 2Â° Standard Observer"
  },
  "api/Zigurous.ColorUtils.Temperature.html": {
    "href": "api/Zigurous.ColorUtils.Temperature.html",
    "title": "Class Temperature | Color Utils",
    "keywords": "Class Temperature Functions for testing color temperature. Inheritance System.Object Temperature Namespace : Zigurous.ColorUtils public static class Temperature Methods IsCool(Color) Determines if the color falls within a cool temperature range. public static bool IsCool(this Color color) Parameter Description color The color to test. IsWarm(Color) Determines if the color falls within a warm temperature range. public static bool IsWarm(this Color color) Parameter Description color The color to test."
  },
  "api/Zigurous.ColorUtils.Tristimulus.html": {
    "href": "api/Zigurous.ColorUtils.Tristimulus.html",
    "title": "Struct Tristimulus | Color Utils",
    "keywords": "Struct Tristimulus Tristimulus system, a system for visually matching a color under standardized conditions against the three primary colors â red, green, and blue; the three results are expressed as X, Y, and Z, respectively, and are called tristimulus values. Implements IEquatable < Tristimulus > Namespace : Zigurous.ColorUtils [Serializable] public struct Tristimulus : IEquatable<Tristimulus> Constructors Tristimulus(Single, Single, Single) Creates a new tristimulus tuple with the given values. public Tristimulus(float X, float Y, float Z) Parameter Description X The X tristimulus value. Y The Y tristimulus value. Z The Z tristimulus value. Fields X The X tristimulus value. public float X Y The Y tristimulus value. public float Y Z The Z tristimulus value. public float Z Properties Item[Int32] Gets or sets the component at the given index . public float this[int index] { get; set; } Parameter Description index The index of the component to get or set. Methods Equals(Object) Determines if the tristimulus values are equal to other . public override bool Equals(object other) Parameter Description other The object to compare to. Overrides System.ValueType.Equals(System.Object) Equals(Tristimulus) Determines if the tristimulus values are equal to other . public bool Equals(Tristimulus other) Parameter Description other The other tristimulus values to compare to. GetHashCode() Returns the hash code of the tristimulus values. public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToString() Converts the tristimulus values to a string. public override string ToString() Returns Description System.String A string representation of the tristimulus values. Overrides System.ValueType.ToString() Operators Equality(Tristimulus, Tristimulus) public static bool operator ==(Tristimulus lhs, Tristimulus rhs) Parameter Description lhs rhs Inequality(Tristimulus, Tristimulus) public static bool operator !=(Tristimulus lhs, Tristimulus rhs) Parameter Description lhs rhs Multiply(Color, Tristimulus) public static Tristimulus operator *(Color lhs, Tristimulus rhs) Parameter Description lhs rhs Multiply(Single, Tristimulus) public static Tristimulus operator *(float lhs, Tristimulus rhs) Parameter Description lhs rhs Multiply(Tristimulus, Color) public static Tristimulus operator *(Tristimulus lhs, Color rhs) Parameter Description lhs rhs Multiply(Tristimulus, Single) public static Tristimulus operator *(Tristimulus lhs, float rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorUtils.UCS.html": {
    "href": "api/Zigurous.ColorUtils.UCS.html",
    "title": "Struct UCS | Color Utils",
    "keywords": "Struct UCS The UCS components of a color - (u,v) chromaticity coordinates. Implements IEquatable < UCS > Namespace : Zigurous.ColorUtils [Serializable] public struct UCS : IEquatable<UCS> Constructors UCS(Color) public UCS(Color color) Parameter Description color UCS(Single, Single) public UCS(float u, float v) Parameter Description u v Fields u The u-axis chromaticity coordinate of the color in the range [0..1]. public float u v The v-axis chromaticity coordinate of the color in the range [0..1]. public float v Methods Equals(Object) public override bool Equals(object obj) Parameter Description obj Overrides System.ValueType.Equals(System.Object) Equals(UCS) public bool Equals(UCS other) Parameter Description other Extract(Color, out Single, out Single) Extracts the UCS components from a color. public static void Extract(Color color, out float u, out float v) Parameter Description color u v GetHashCode() public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components into a color. public Color ToColor() ToColor(Single) Converts the components into a color using a given luminance value. public Color ToColor(float luminance) Parameter Description luminance ToColor(Single, Single, Single) Converts UCS components into a color using a given luminance value. public static Color ToColor(float u, float v, float luminance) Parameter Description u v luminance ToString() public override string ToString() Overrides System.ValueType.ToString() Operators Equality(UCS, UCS) public static bool operator ==(UCS lhs, UCS rhs) Parameter Description lhs rhs Explicit(Color to UCS) public static explicit operator UCS(Color color) Parameter Description color Explicit(UCS to Color) public static explicit operator Color(UCS components) Parameter Description components Inequality(UCS, UCS) public static bool operator !=(UCS lhs, UCS rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorUtils.UVW.html": {
    "href": "api/Zigurous.ColorUtils.UVW.html",
    "title": "Struct UVW | Color Utils",
    "keywords": "Struct UVW The UVW components of a color - chromaticity (U,V) and lightness (W). Implements IEquatable < UVW > Namespace : Zigurous.ColorUtils [Serializable] public struct UVW : IEquatable<UVW> Constructors UVW(Color) public UVW(Color color) Parameter Description color UVW(Color, Illuminant, StandardObserver) public UVW(Color color, Illuminant illuminant, StandardObserver observer) Parameter Description color illuminant observer UVW(Color, Tristimulus) public UVW(Color color, Tristimulus whitePoint) Parameter Description color whitePoint UVW(Single, Single, Single) public UVW(float U, float V, float W) Parameter Description U V W Fields U The U chromaticity component of the color typically in the range [-100..100]. public float U V The V chromaticity component of the color typically in the range [-100..100]. public float V W The lightness component of the color in the range [0..100]. public float W Methods Equals(Object) public override bool Equals(object obj) Parameter Description obj Overrides System.ValueType.Equals(System.Object) Equals(UVW) public bool Equals(UVW other) Parameter Description other Extract(Color, out Single, out Single, out Single) Extracts the UVW components from a color. public static void Extract(Color color, out float U, out float V, out float W) Parameter Description color U V W Extract(Color, Illuminant, StandardObserver, out Single, out Single, out Single) Extracts the UVW components from a color using the given illuminant and standard observer. public static void Extract(Color color, Illuminant illuminant, StandardObserver observer, out float U, out float V, out float W) Parameter Description color illuminant observer U V W Extract(Color, Tristimulus, out Single, out Single, out Single) Extracts the UVW components from a color using the given white point. public static void Extract(Color color, Tristimulus whitePoint, out float U, out float V, out float W) Parameter Description color whitePoint U V W GetHashCode() public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components into a color. public Color ToColor() ToColor(Single, Single, Single, Tristimulus) Converts UVW components into a color using the given white point. public static Color ToColor(float U, float V, float W, Tristimulus whitePoint) Parameter Description U V W whitePoint ToColor(Illuminant, StandardObserver) Converts the components into a color using the given illuminant and standard observer. public Color ToColor(Illuminant illuminant, StandardObserver observer) Parameter Description illuminant observer ToColor(Tristimulus) Converts the components into a color using the given white point. public Color ToColor(Tristimulus whitePoint) Parameter Description whitePoint ToString() public override string ToString() Overrides System.ValueType.ToString() Operators Equality(UVW, UVW) public static bool operator ==(UVW lhs, UVW rhs) Parameter Description lhs rhs Explicit(Color to UVW) public static explicit operator UVW(Color color) Parameter Description color Explicit(UVW to Color) public static explicit operator Color(UVW components) Parameter Description components Inequality(UVW, UVW) public static bool operator !=(UVW lhs, UVW rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorUtils.xyY.html": {
    "href": "api/Zigurous.ColorUtils.xyY.html",
    "title": "Struct xyY | Color Utils",
    "keywords": "Struct xyY The xyY components of a color - chromaticity (x,y) and luminance (Y). Implements IEquatable < xyY > Namespace : Zigurous.ColorUtils [Serializable] public struct xyY : IEquatable<xyY> Constructors xyY(Color) public xyY(Color color) Parameter Description color xyY(Single, Single, Single) public xyY(float x, float y, float Y) Parameter Description x y Y Fields x The x-axis chromaticity coordinate of the color in the range [0..1]. public float x y The y-axis chromaticity coordinate of the color in the range [0..1]. public float y Y The luminance component of the color in the range [0..100]. public float Y Methods Equals(Object) public override bool Equals(object obj) Parameter Description obj Overrides System.ValueType.Equals(System.Object) Equals(xyY) public bool Equals(xyY other) Parameter Description other Extract(Color, out Single, out Single, out Single) Extracts the xyY components from a color. public static void Extract(Color color, out float x, out float y, out float Y) Parameter Description color x y Y GetHashCode() public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components into a color. public Color ToColor() ToColor(Single, Single, Single) Converts xyY components into a color. public static Color ToColor(float x, float y, float Y) Parameter Description x y Y ToString() public override string ToString() Overrides System.ValueType.ToString() Operators Equality(xyY, xyY) public static bool operator ==(xyY lhs, xyY rhs) Parameter Description lhs rhs Explicit(Color to xyY) public static explicit operator xyY(Color color) Parameter Description color Explicit(xyY to Color) public static explicit operator Color(xyY components) Parameter Description components Inequality(xyY, xyY) public static bool operator !=(xyY lhs, xyY rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorUtils.XYZ.html": {
    "href": "api/Zigurous.ColorUtils.XYZ.html",
    "title": "Struct XYZ | Color Utils",
    "keywords": "Struct XYZ The XYZ components of a color - chromaticity (X,Z) and luminance (Y). Implements IEquatable < XYZ > Namespace : Zigurous.ColorUtils [Serializable] public struct XYZ : IEquatable<XYZ> Constructors XYZ(Color) public XYZ(Color color) Parameter Description color XYZ(Single, Single, Single) public XYZ(float X, float Y, float Z) Parameter Description X Y Z Fields X A mix of cone response curves chosen to be orthogonal to luminance and non-negative in the range [0..95.047]. public float X Y The luminance component of the colo in the range [0..100]. public float Y Z Somewhat equal to blue, or the \"S\" cone response in the range [0..108.883]. public float Z Methods Equals(Object) public override bool Equals(object obj) Parameter Description obj Overrides System.ValueType.Equals(System.Object) Equals(XYZ) public bool Equals(XYZ other) Parameter Description other Extract(Color, out Single, out Single, out Single) Extracts the XYZ components from a color. public static void Extract(Color color, out float X, out float Y, out float Z) Parameter Description color X Y Z GetHashCode() public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components into a color. public Color ToColor() ToColor(Single, Single, Single) Converts XYZ components into a color. public static Color ToColor(float X, float Y, float Z) Parameter Description X Y Z ToString() public override string ToString() Overrides System.ValueType.ToString() Operators Equality(XYZ, XYZ) public static bool operator ==(XYZ lhs, XYZ rhs) Parameter Description lhs rhs Explicit(Color to XYZ) public static explicit operator XYZ(Color color) Parameter Description color Explicit(XYZ to Color) public static explicit operator Color(XYZ components) Parameter Description components Inequality(XYZ, XYZ) public static bool operator !=(XYZ lhs, XYZ rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorUtils.YCbCr.html": {
    "href": "api/Zigurous.ColorUtils.YCbCr.html",
    "title": "Struct YCbCr | Color Utils",
    "keywords": "Struct YCbCr The Yâ²CbCr components of a color - luma (Yâ²) and chroma (Cb,Cr). Implements IEquatable < YCbCr > Namespace : Zigurous.ColorUtils [Serializable] public struct YCbCr : IEquatable<YCbCr> Constructors YCbCr(Color) public YCbCr(Color color) Parameter Description color YCbCr(Color, SignalEncoding) public YCbCr(Color color, SignalEncoding encoding) Parameter Description color encoding YCbCr(Single, Single, Single) public YCbCr(float Y, float Cb, float Cr) Parameter Description Y Cb Cr YCbCr(YPbPr) public YCbCr(YPbPr yPbPr) Parameter Description yPbPr Fields Cb The blue-difference chroma component of the color in the full range [0..255]. public float Cb Cr The red-difference chroma component of the color in the full range [0..255]. public float Cr Y The luma component of the color in the full range [0..255]. public float Y Methods Equals(Object) public override bool Equals(object obj) Parameter Description obj Overrides System.ValueType.Equals(System.Object) Equals(YCbCr) public bool Equals(YCbCr other) Parameter Description other Extract(Color, out Single, out Single, out Single) Extracts the Yâ²CbCr components from a color. public static void Extract(Color color, out float Y, out float Cb, out float Cr) Parameter Description color Y Cb Cr Extract(Color, SignalEncoding, out Single, out Single, out Single) Extracts the Yâ²CbCr components from a color using the given signal encoding. public static void Extract(Color color, SignalEncoding encoding, out float Y, out float Cb, out float Cr) Parameter Description color encoding Y Cb Cr GetHashCode() public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components into a color. public Color ToColor() ToColor(Single, Single, Single, SignalEncoding) Converts Yâ²CbCr components into a color using the given signal encoding. public static Color ToColor(float Y, float Cb, float Cr, SignalEncoding encoding) Parameter Description Y Cb Cr encoding ToColor(SignalEncoding) Converts the components into a color using the given signal encoding. public Color ToColor(SignalEncoding encoding) Parameter Description encoding ToString() public override string ToString() Overrides System.ValueType.ToString() ToYPbPr(ref Single, in Single, in Single, out Single, out Single) Converts Yâ²CbCr components to Yâ²PbPr components. public static void ToYPbPr(ref float Y, in float Cb, in float Cr, out float Pb, out float Pr) Parameter Description Y Cb Cr Pb Pr Operators Equality(YCbCr, YCbCr) public static bool operator ==(YCbCr lhs, YCbCr rhs) Parameter Description lhs rhs Explicit(Color to YCbCr) public static explicit operator YCbCr(Color color) Parameter Description color Explicit(YCbCr to Color) public static explicit operator Color(YCbCr yCbCr) Parameter Description yCbCr Implicit(YPbPr to YCbCr) public static implicit operator YCbCr(YPbPr yPbPr) Parameter Description yPbPr Inequality(YCbCr, YCbCr) public static bool operator !=(YCbCr lhs, YCbCr rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorUtils.YIQ.html": {
    "href": "api/Zigurous.ColorUtils.YIQ.html",
    "title": "Struct YIQ | Color Utils",
    "keywords": "Struct YIQ The Yâ²IQ components of a color - luma (Yâ²) and chroma (I,Q). Implements IEquatable < YIQ > Namespace : Zigurous.ColorUtils [Serializable] public struct YIQ : IEquatable<YIQ> Constructors YIQ(Color) public YIQ(Color color) Parameter Description color YIQ(Color, SignalEncoding) public YIQ(Color color, SignalEncoding encoding) Parameter Description color encoding YIQ(Single, Single, Single) public YIQ(float Y, float I, float Q) Parameter Description Y I Q Fields I The orange-blue chroma component of the color in the range [-0.596..0.596]. public float I Q The purple-green chroma component of the color in the range [-0.523..0.523]. public float Q Y The luma component of the color in the range [0..1]. public float Y Methods Equals(Object) public override bool Equals(object obj) Parameter Description obj Overrides System.ValueType.Equals(System.Object) Equals(YIQ) public bool Equals(YIQ other) Parameter Description other Extract(Color, out Single, out Single, out Single) Extracts the Yâ²IQ components from a color. public static void Extract(Color color, out float Y, out float I, out float Q) Parameter Description color Y I Q Extract(Color, SignalEncoding, out Single, out Single, out Single) Extracts the Yâ²IQ components from a color using the given signal encoding. public static void Extract(Color color, SignalEncoding encoding, out float Y, out float I, out float Q) Parameter Description color encoding Y I Q GetHashCode() public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components into a color. public Color ToColor() ToColor(Single, Single, Single, SignalEncoding) Converts Yâ²IQ components into a color using the given signal encoding. public static Color ToColor(float Y, float I, float Q, SignalEncoding encoding) Parameter Description Y I Q encoding ToColor(SignalEncoding) Converts the components into a color using a given signal encoding. public Color ToColor(SignalEncoding encoding) Parameter Description encoding ToString() public override string ToString() Overrides System.ValueType.ToString() Operators Equality(YIQ, YIQ) public static bool operator ==(YIQ lhs, YIQ rhs) Parameter Description lhs rhs Explicit(Color to YIQ) public static explicit operator YIQ(Color color) Parameter Description color Explicit(YIQ to Color) public static explicit operator Color(YIQ yiq) Parameter Description yiq Inequality(YIQ, YIQ) public static bool operator !=(YIQ lhs, YIQ rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorUtils.YPbPr.html": {
    "href": "api/Zigurous.ColorUtils.YPbPr.html",
    "title": "Struct YPbPr | Color Utils",
    "keywords": "Struct YPbPr The Yâ²PbPr components of a color - luma (Yâ²) and chroma (Pb,Pr). Implements IEquatable < YPbPr > Namespace : Zigurous.ColorUtils [Serializable] public struct YPbPr : IEquatable<YPbPr> Constructors YPbPr(Color) public YPbPr(Color color) Parameter Description color YPbPr(Color, SignalEncoding) public YPbPr(Color color, SignalEncoding encoding) Parameter Description color encoding YPbPr(Single, Single, Single) public YPbPr(float Y, float Pb, float Pr) Parameter Description Y Pb Pr YPbPr(YCbCr) public YPbPr(YCbCr yCbCr) Parameter Description yCbCr Fields Pb The blue-difference chroma component of the color in the range [-0.5..0.5]. public float Pb Pr The red-difference chroma component of the color in the range [-0.5..0.5]. public float Pr Y The luma component of the color in the range [0..1]. public float Y Methods Equals(Object) public override bool Equals(object obj) Parameter Description obj Overrides System.ValueType.Equals(System.Object) Equals(YPbPr) public bool Equals(YPbPr other) Parameter Description other Extract(Color, out Single, out Single, out Single) Extracts the Yâ²PbPr components from a color. public static void Extract(Color color, out float Y, out float Pb, out float Pr) Parameter Description color Y Pb Pr Extract(Color, SignalEncoding, out Single, out Single, out Single) Extracts the Yâ²PbPr components from a color using the given signal encoding. public static void Extract(Color color, SignalEncoding encoding, out float Y, out float Pb, out float Pr) Parameter Description color encoding Y Pb Pr GetHashCode() public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components into a color. public Color ToColor() ToColor(Single, Single, Single, SignalEncoding) Converts Yâ²PbPr components into a color using the given signal encoding. public static Color ToColor(float Y, float Pb, float Pr, SignalEncoding encoding) Parameter Description Y Pb Pr encoding ToColor(SignalEncoding) Converts the components into a color using the given signal encoding. public Color ToColor(SignalEncoding encoding) Parameter Description encoding ToString() public override string ToString() Overrides System.ValueType.ToString() ToYCbCr(ref Single, in Single, in Single, out Single, out Single) Converts Yâ²PbPr components to Yâ²CbCr components. public static void ToYCbCr(ref float Y, in float Pb, in float Pr, out float Cb, out float Cr) Parameter Description Y Pb Pr Cb Cr Operators Equality(YPbPr, YPbPr) public static bool operator ==(YPbPr lhs, YPbPr rhs) Parameter Description lhs rhs Explicit(Color to YPbPr) public static explicit operator YPbPr(Color color) Parameter Description color Explicit(YPbPr to Color) public static explicit operator Color(YPbPr yPbPr) Parameter Description yPbPr Implicit(YCbCr to YPbPr) public static implicit operator YPbPr(YCbCr yCbCr) Parameter Description yCbCr Inequality(YPbPr, YPbPr) public static bool operator !=(YPbPr lhs, YPbPr rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "api/Zigurous.ColorUtils.YUV.html": {
    "href": "api/Zigurous.ColorUtils.YUV.html",
    "title": "Struct YUV | Color Utils",
    "keywords": "Struct YUV The Yâ²UV components of a color - luma (Yâ²) and chroma (U,V). Implements IEquatable < YUV > Namespace : Zigurous.ColorUtils [Serializable] public struct YUV : IEquatable<YUV> Constructors YUV(Color) public YUV(Color color) Parameter Description color YUV(Color, SignalEncoding) public YUV(Color color, SignalEncoding encoding) Parameter Description color encoding YUV(Single, Single, Single) public YUV(float Y, float U, float V) Parameter Description Y U V Fields U The blue-difference chroma component of the color in the range [-0.436..0.436]. public float U V The red-difference chroma component of the color in the range [-0.615..0.615]. public float V Y The luma component of the color in the range [0..1]. public float Y Methods Equals(Object) public override bool Equals(object obj) Parameter Description obj Overrides System.ValueType.Equals(System.Object) Equals(YUV) public bool Equals(YUV other) Parameter Description other Extract(Color, out Single, out Single, out Single) Extracts the Yâ²UV components from a color. public static void Extract(Color color, out float Y, out float U, out float V) Parameter Description color Y U V Extract(Color, SignalEncoding, out Single, out Single, out Single) Extracts the Yâ²UV components from a color using the given signal encoding. public static void Extract(Color color, SignalEncoding encoding, out float Y, out float U, out float V) Parameter Description color encoding Y U V GetHashCode() public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToColor() Converts the components into a color. public Color ToColor() ToColor(Single, Single, Single, SignalEncoding) Converts Yâ²UV components into a color using the given signal encoding. public static Color ToColor(float Y, float U, float V, SignalEncoding encoding) Parameter Description Y U V encoding ToColor(SignalEncoding) Converts the components into a color using the given signal encoding. public Color ToColor(SignalEncoding encoding) Parameter Description encoding ToString() public override string ToString() Overrides System.ValueType.ToString() Operators Equality(YUV, YUV) public static bool operator ==(YUV lhs, YUV rhs) Parameter Description lhs rhs Explicit(Color to YUV) public static explicit operator YUV(Color color) Parameter Description color Explicit(YUV to Color) public static explicit operator Color(YUV yuv) Parameter Description yuv Inequality(YUV, YUV) public static bool operator !=(YUV lhs, YUV rhs) Parameter Description lhs rhs Implements IEquatable<>"
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "Changelog | Color Utils",
    "keywords": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning ."
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "License | Color Utils",
    "keywords": "License Copyright (c) 2021 Zigurous. All Rights Reserved."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "Color Utils | Color Utils",
    "keywords": "Color Utils The Color Utils package is a robust utility library for working with colors in Unity projects. Included in the package are dozens of functions for color mixing, conversion, generating color palettes, and much more."
  },
  "manual/installation.html": {
    "href": "manual/installation.html",
    "title": "Installation | Color Utils",
    "keywords": "Installation Use the Unity Package Manager to install the Color Utils package. Open the Package Manager in Window > Package Manager Click the add ( + ) button in the status bar Select Add package from git URL from the add menu Enter the following Git URL in the text box and click Add: https://github.com/zigurous/unity-color-utils.git For more information on the Package Manager and installing packages, see the following pages: Unity's Package Manager Installing from a Git URL Importing Import the package namespace in each script or file you want to use it. Note : You may need to regenerate project files/assemblies first. using Zigurous.ColorUtils; Source Code The source code for the Color Utils package is in the following repository: https://github.com/zigurous/unity-color-utils"
  }
}