{"data":{"api":{"nodes":[{"items":[{"children":["Zigurous.CharacterController.Abilities.CrouchSettings.#ctor","Zigurous.CharacterController.Abilities.CrouchSettings.animationDuration","Zigurous.CharacterController.Abilities.CrouchSettings.animationTiming","Zigurous.CharacterController.Abilities.CrouchSettings.crouchHeight","Zigurous.CharacterController.Abilities.CrouchSettings.standHeight"],"id":"CrouchSettings","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementSettings","Zigurous.CharacterController.MovementBehaviorSettings","Zigurous.CharacterController.MovementControlSettings","Zigurous.CharacterController.MovementAbilitySettings","Zigurous.CharacterController.MovementAbilitySettings{Zigurous.CharacterController.Abilities.Crouch}"],"inheritedMembers":["Zigurous.CharacterController.MovementAbilitySettings.preconditions","Zigurous.CharacterController.MovementAbilitySettings.preventingConditions","Zigurous.CharacterController.MovementAbilitySettings.deactivatingConditions","Zigurous.CharacterController.MovementAbilitySettings.staminaCost","Zigurous.CharacterController.MovementAbilitySettings.cooldownMode","Zigurous.CharacterController.MovementAbilitySettings.cooldownDuration","Zigurous.CharacterController.MovementControlSettings.inputButton","Zigurous.CharacterController.MovementControlSettings.inputStyle","Zigurous.CharacterController.MovementSettings.active","Zigurous.CharacterController.MovementSettings.enabled","Zigurous.CharacterController.MovementSettings.isActiveAndEnabled","Zigurous.CharacterController.MovementSettings.OnActivate(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementSettings.OnDeactivate(Zigurous.CharacterController.MovementController)"],"name":"CrouchSettings","nameWithType":"CrouchSettings","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities","remarks":null,"summary":"\nSettings for crouching.\n","syntax":{"content":"[Serializable]\npublic class CrouchSettings : MovementAbilitySettings<Crouch>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Abilities.CrouchSettings"},{"children":null,"id":"crouchHeight","implements":null,"inheritance":null,"inheritedMembers":null,"name":"crouchHeight","nameWithType":"CrouchSettings.crouchHeight","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.CrouchSettings","remarks":null,"summary":"\nThe height of the character while crouching.\n","syntax":{"content":"public float crouchHeight","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Abilities.CrouchSettings.crouchHeight"},{"children":null,"id":"standHeight","implements":null,"inheritance":null,"inheritedMembers":null,"name":"standHeight","nameWithType":"CrouchSettings.standHeight","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.CrouchSettings","remarks":null,"summary":"\nThe height of the character while standing.\n","syntax":{"content":"public float standHeight","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Abilities.CrouchSettings.standHeight"},{"children":null,"id":"animationDuration","implements":null,"inheritance":null,"inheritedMembers":null,"name":"animationDuration","nameWithType":"CrouchSettings.animationDuration","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.CrouchSettings","remarks":null,"summary":"\nThe amount of seconds it takes the character to crouch.\n","syntax":{"content":"public float animationDuration","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Abilities.CrouchSettings.animationDuration"},{"children":null,"id":"animationTiming","implements":null,"inheritance":null,"inheritedMembers":null,"name":"animationTiming","nameWithType":"CrouchSettings.animationTiming","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.CrouchSettings","remarks":null,"summary":"\nThe easing curve applied to the crouch animation.\n","syntax":{"content":"public AnimationCurve animationTiming","parameters":null,"return":{"description":null,"type":"Global.AnimationCurve"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Abilities.CrouchSettings.animationTiming"},{"children":null,"id":"#ctor","implements":null,"inheritance":null,"inheritedMembers":null,"name":"CrouchSettings()","nameWithType":"CrouchSettings.CrouchSettings()","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.CrouchSettings","remarks":null,"summary":null,"syntax":{"content":"public CrouchSettings()","parameters":null,"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.CharacterController.Abilities.CrouchSettings.#ctor"}]},{"items":[{"children":["Zigurous.CharacterController.Abilities.DashSettings.#ctor","Zigurous.CharacterController.Abilities.DashSettings.consecutiveDashes","Zigurous.CharacterController.Abilities.DashSettings.consecutiveDelay","Zigurous.CharacterController.Abilities.DashSettings.distance","Zigurous.CharacterController.Abilities.DashSettings.speedModifier"],"id":"DashSettings","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementSettings","Zigurous.CharacterController.MovementBehaviorSettings","Zigurous.CharacterController.MovementControlSettings","Zigurous.CharacterController.MovementAbilitySettings","Zigurous.CharacterController.MovementAbilitySettings{Zigurous.CharacterController.Abilities.Dash}"],"inheritedMembers":["Zigurous.CharacterController.MovementAbilitySettings.preconditions","Zigurous.CharacterController.MovementAbilitySettings.preventingConditions","Zigurous.CharacterController.MovementAbilitySettings.deactivatingConditions","Zigurous.CharacterController.MovementAbilitySettings.staminaCost","Zigurous.CharacterController.MovementAbilitySettings.cooldownMode","Zigurous.CharacterController.MovementAbilitySettings.cooldownDuration","Zigurous.CharacterController.MovementControlSettings.inputButton","Zigurous.CharacterController.MovementControlSettings.inputStyle","Zigurous.CharacterController.MovementSettings.active","Zigurous.CharacterController.MovementSettings.enabled","Zigurous.CharacterController.MovementSettings.isActiveAndEnabled","Zigurous.CharacterController.MovementSettings.OnActivate(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementSettings.OnDeactivate(Zigurous.CharacterController.MovementController)"],"name":"DashSettings","nameWithType":"DashSettings","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities","remarks":null,"summary":"\nSettings for dashing.\n","syntax":{"content":"[Serializable]\npublic class DashSettings : MovementAbilitySettings<Dash>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Abilities.DashSettings"},{"children":null,"id":"distance","implements":null,"inheritance":null,"inheritedMembers":null,"name":"distance","nameWithType":"DashSettings.distance","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.DashSettings","remarks":null,"summary":"\nThe distance the character travels while dashing.\n","syntax":{"content":"public float distance","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Abilities.DashSettings.distance"},{"children":null,"id":"consecutiveDashes","implements":null,"inheritance":null,"inheritedMembers":null,"name":"consecutiveDashes","nameWithType":"DashSettings.consecutiveDashes","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.DashSettings","remarks":null,"summary":"\nThe amount of dashes the character can perform in a row before\nthe reset cooldown starts.\n","syntax":{"content":"public int consecutiveDashes","parameters":null,"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Abilities.DashSettings.consecutiveDashes"},{"children":null,"id":"consecutiveDelay","implements":null,"inheritance":null,"inheritedMembers":null,"name":"consecutiveDelay","nameWithType":"DashSettings.consecutiveDelay","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.DashSettings","remarks":null,"summary":"\nThe amount of seconds before the character can perform another\ndash after an initial dash.\n","syntax":{"content":"public float consecutiveDelay","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Abilities.DashSettings.consecutiveDelay"},{"children":null,"id":"speedModifier","implements":null,"inheritance":null,"inheritedMembers":null,"name":"speedModifier","nameWithType":"DashSettings.speedModifier","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.DashSettings","remarks":null,"summary":"\nThe character&apos;s movement speed multiplier while dashing. The\nx-axis represents percentage of time in the range [0..1], and\nthe y-axis represents the speed multiplier.\n","syntax":{"content":"public AnimationCurve speedModifier","parameters":null,"return":{"description":null,"type":"Global.AnimationCurve"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Abilities.DashSettings.speedModifier"},{"children":null,"id":"#ctor","implements":null,"inheritance":null,"inheritedMembers":null,"name":"DashSettings()","nameWithType":"DashSettings.DashSettings()","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.DashSettings","remarks":null,"summary":null,"syntax":{"content":"public DashSettings()","parameters":null,"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.CharacterController.Abilities.DashSettings.#ctor"}]},{"items":[{"children":["Zigurous.CharacterController.Abilities.DodgeSettings.#ctor","Zigurous.CharacterController.Abilities.DodgeSettings.consecutiveDelay","Zigurous.CharacterController.Abilities.DodgeSettings.consecutiveDodges","Zigurous.CharacterController.Abilities.DodgeSettings.duration","Zigurous.CharacterController.Abilities.DodgeSettings.speedModifier"],"id":"DodgeSettings","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementSettings","Zigurous.CharacterController.MovementBehaviorSettings","Zigurous.CharacterController.MovementControlSettings","Zigurous.CharacterController.MovementAbilitySettings","Zigurous.CharacterController.MovementAbilitySettings{Zigurous.CharacterController.Abilities.Dodge}"],"inheritedMembers":["Zigurous.CharacterController.MovementAbilitySettings.preconditions","Zigurous.CharacterController.MovementAbilitySettings.preventingConditions","Zigurous.CharacterController.MovementAbilitySettings.deactivatingConditions","Zigurous.CharacterController.MovementAbilitySettings.staminaCost","Zigurous.CharacterController.MovementAbilitySettings.cooldownMode","Zigurous.CharacterController.MovementAbilitySettings.cooldownDuration","Zigurous.CharacterController.MovementControlSettings.inputButton","Zigurous.CharacterController.MovementControlSettings.inputStyle","Zigurous.CharacterController.MovementSettings.active","Zigurous.CharacterController.MovementSettings.enabled","Zigurous.CharacterController.MovementSettings.isActiveAndEnabled","Zigurous.CharacterController.MovementSettings.OnActivate(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementSettings.OnDeactivate(Zigurous.CharacterController.MovementController)"],"name":"DodgeSettings","nameWithType":"DodgeSettings","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities","remarks":null,"summary":"\nSettings for dodging.\n","syntax":{"content":"[Serializable]\npublic class DodgeSettings : MovementAbilitySettings<Dodge>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Abilities.DodgeSettings"},{"children":null,"id":"duration","implements":null,"inheritance":null,"inheritedMembers":null,"name":"duration","nameWithType":"DodgeSettings.duration","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.DodgeSettings","remarks":null,"summary":"\nThe amount of seconds it takes to perform a dodge.\n","syntax":{"content":"public float duration","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Abilities.DodgeSettings.duration"},{"children":null,"id":"consecutiveDodges","implements":null,"inheritance":null,"inheritedMembers":null,"name":"consecutiveDodges","nameWithType":"DodgeSettings.consecutiveDodges","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.DodgeSettings","remarks":null,"summary":"\nThe amount of dodges the character can perform in a row before\nthe reset cooldown starts.\n","syntax":{"content":"public int consecutiveDodges","parameters":null,"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Abilities.DodgeSettings.consecutiveDodges"},{"children":null,"id":"consecutiveDelay","implements":null,"inheritance":null,"inheritedMembers":null,"name":"consecutiveDelay","nameWithType":"DodgeSettings.consecutiveDelay","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.DodgeSettings","remarks":null,"summary":"\nThe amount of seconds before the character can perform another\ndodge after an initial dodge.\n","syntax":{"content":"public float consecutiveDelay","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Abilities.DodgeSettings.consecutiveDelay"},{"children":null,"id":"speedModifier","implements":null,"inheritance":null,"inheritedMembers":null,"name":"speedModifier","nameWithType":"DodgeSettings.speedModifier","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.DodgeSettings","remarks":null,"summary":"\nThe multiplier applied to the characters&apos;s movement speed while\ndodging.\n","syntax":{"content":"public AnimationCurve speedModifier","parameters":null,"return":{"description":null,"type":"Global.AnimationCurve"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Abilities.DodgeSettings.speedModifier"},{"children":null,"id":"#ctor","implements":null,"inheritance":null,"inheritedMembers":null,"name":"DodgeSettings()","nameWithType":"DodgeSettings.DodgeSettings()","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.DodgeSettings","remarks":null,"summary":null,"syntax":{"content":"public DodgeSettings()","parameters":null,"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.CharacterController.Abilities.DodgeSettings.#ctor"}]},{"items":[{"children":["Zigurous.CharacterController.Abilities.JetpackSettings.#ctor","Zigurous.CharacterController.Abilities.JetpackSettings.defaultFuel","Zigurous.CharacterController.Abilities.JetpackSettings.fuelCost","Zigurous.CharacterController.Abilities.JetpackSettings.maxFuel","Zigurous.CharacterController.Abilities.JetpackSettings.minFuelCost","Zigurous.CharacterController.Abilities.JetpackSettings.refuelDelay","Zigurous.CharacterController.Abilities.JetpackSettings.refuelRate","Zigurous.CharacterController.Abilities.JetpackSettings.thrust"],"id":"JetpackSettings","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementSettings","Zigurous.CharacterController.MovementBehaviorSettings","Zigurous.CharacterController.MovementControlSettings","Zigurous.CharacterController.MovementAbilitySettings","Zigurous.CharacterController.MovementAbilitySettings{Zigurous.CharacterController.Abilities.Jetpack}"],"inheritedMembers":["Zigurous.CharacterController.MovementAbilitySettings.preconditions","Zigurous.CharacterController.MovementAbilitySettings.preventingConditions","Zigurous.CharacterController.MovementAbilitySettings.deactivatingConditions","Zigurous.CharacterController.MovementAbilitySettings.staminaCost","Zigurous.CharacterController.MovementAbilitySettings.cooldownMode","Zigurous.CharacterController.MovementAbilitySettings.cooldownDuration","Zigurous.CharacterController.MovementControlSettings.inputButton","Zigurous.CharacterController.MovementControlSettings.inputStyle","Zigurous.CharacterController.MovementSettings.active","Zigurous.CharacterController.MovementSettings.enabled","Zigurous.CharacterController.MovementSettings.isActiveAndEnabled","Zigurous.CharacterController.MovementSettings.OnActivate(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementSettings.OnDeactivate(Zigurous.CharacterController.MovementController)"],"name":"JetpackSettings","nameWithType":"JetpackSettings","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities","remarks":null,"summary":"\nSettings for jetpacking.\n","syntax":{"content":"[Serializable]\npublic class JetpackSettings : MovementAbilitySettings<Jetpack>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Abilities.JetpackSettings"},{"children":null,"id":"thrust","implements":null,"inheritance":null,"inheritedMembers":null,"name":"thrust","nameWithType":"JetpackSettings.thrust","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.JetpackSettings","remarks":null,"summary":"\nThe amount of thrust force applied to the character while the\njetpack is active.\n","syntax":{"content":"public Vector3 thrust","parameters":null,"return":{"description":null,"type":"Global.Vector3"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Abilities.JetpackSettings.thrust"},{"children":null,"id":"defaultFuel","implements":null,"inheritance":null,"inheritedMembers":null,"name":"defaultFuel","nameWithType":"JetpackSettings.defaultFuel","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.JetpackSettings","remarks":null,"summary":"\nThe amount of fuel the jetpack starts with.\n","syntax":{"content":"public float defaultFuel","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Abilities.JetpackSettings.defaultFuel"},{"children":null,"id":"maxFuel","implements":null,"inheritance":null,"inheritedMembers":null,"name":"maxFuel","nameWithType":"JetpackSettings.maxFuel","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.JetpackSettings","remarks":null,"summary":"\nThe maximum amount of fuel the jetpack can hold.\n","syntax":{"content":"public float maxFuel","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Abilities.JetpackSettings.maxFuel"},{"children":null,"id":"fuelCost","implements":null,"inheritance":null,"inheritedMembers":null,"name":"fuelCost","nameWithType":"JetpackSettings.fuelCost","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.JetpackSettings","remarks":null,"summary":"\nThe amount of fuel per second the jetpack expends during thrust.\n","syntax":{"content":"public float fuelCost","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Abilities.JetpackSettings.fuelCost"},{"children":null,"id":"minFuelCost","implements":null,"inheritance":null,"inheritedMembers":null,"name":"minFuelCost","nameWithType":"JetpackSettings.minFuelCost","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.JetpackSettings","remarks":null,"summary":"\nThe minimum amount of fuel required for the jetpack to thrust.\n","syntax":{"content":"public float minFuelCost","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Abilities.JetpackSettings.minFuelCost"},{"children":null,"id":"refuelRate","implements":null,"inheritance":null,"inheritedMembers":null,"name":"refuelRate","nameWithType":"JetpackSettings.refuelRate","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.JetpackSettings","remarks":null,"summary":"\nThe rate at which the jetpack refuels when inactive.\n","syntax":{"content":"public float refuelRate","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Abilities.JetpackSettings.refuelRate"},{"children":null,"id":"refuelDelay","implements":null,"inheritance":null,"inheritedMembers":null,"name":"refuelDelay","nameWithType":"JetpackSettings.refuelDelay","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.JetpackSettings","remarks":null,"summary":"\nThe amount of seconds before the jetpack starts refueling after\nbecoming inactive.\n","syntax":{"content":"public float refuelDelay","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Abilities.JetpackSettings.refuelDelay"},{"children":null,"id":"#ctor","implements":null,"inheritance":null,"inheritedMembers":null,"name":"JetpackSettings()","nameWithType":"JetpackSettings.JetpackSettings()","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.JetpackSettings","remarks":null,"summary":null,"syntax":{"content":"public JetpackSettings()","parameters":null,"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.CharacterController.Abilities.JetpackSettings.#ctor"}]},{"items":[{"children":["Zigurous.CharacterController.Abilities.JumpSettings.#ctor","Zigurous.CharacterController.Abilities.JumpSettings.consecutiveDelay","Zigurous.CharacterController.Abilities.JumpSettings.consecutiveJumps","Zigurous.CharacterController.Abilities.JumpSettings.coyoteTime","Zigurous.CharacterController.Abilities.JumpSettings.height"],"id":"JumpSettings","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementSettings","Zigurous.CharacterController.MovementBehaviorSettings","Zigurous.CharacterController.MovementControlSettings","Zigurous.CharacterController.MovementAbilitySettings","Zigurous.CharacterController.MovementAbilitySettings{Zigurous.CharacterController.Abilities.Jump}"],"inheritedMembers":["Zigurous.CharacterController.MovementAbilitySettings.preconditions","Zigurous.CharacterController.MovementAbilitySettings.preventingConditions","Zigurous.CharacterController.MovementAbilitySettings.deactivatingConditions","Zigurous.CharacterController.MovementAbilitySettings.staminaCost","Zigurous.CharacterController.MovementAbilitySettings.cooldownMode","Zigurous.CharacterController.MovementAbilitySettings.cooldownDuration","Zigurous.CharacterController.MovementControlSettings.inputButton","Zigurous.CharacterController.MovementControlSettings.inputStyle","Zigurous.CharacterController.MovementSettings.active","Zigurous.CharacterController.MovementSettings.enabled","Zigurous.CharacterController.MovementSettings.isActiveAndEnabled","Zigurous.CharacterController.MovementSettings.OnActivate(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementSettings.OnDeactivate(Zigurous.CharacterController.MovementController)"],"name":"JumpSettings","nameWithType":"JumpSettings","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities","remarks":null,"summary":"\nSettings for jumping.\n","syntax":{"content":"[Serializable]\npublic class JumpSettings : MovementAbilitySettings<Jump>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Abilities.JumpSettings"},{"children":null,"id":"height","implements":null,"inheritance":null,"inheritedMembers":null,"name":"height","nameWithType":"JumpSettings.height","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.JumpSettings","remarks":null,"summary":"\nThe vertical force of the jump.\n","syntax":{"content":"public float height","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Abilities.JumpSettings.height"},{"children":null,"id":"consecutiveJumps","implements":null,"inheritance":null,"inheritedMembers":null,"name":"consecutiveJumps","nameWithType":"JumpSettings.consecutiveJumps","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.JumpSettings","remarks":null,"summary":"\nThe amount of jumps the character can perform in a row before\nthey must wait to land before they can jump again.\n","syntax":{"content":"public int consecutiveJumps","parameters":null,"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Abilities.JumpSettings.consecutiveJumps"},{"children":null,"id":"consecutiveDelay","implements":null,"inheritance":null,"inheritedMembers":null,"name":"consecutiveDelay","nameWithType":"JumpSettings.consecutiveDelay","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.JumpSettings","remarks":null,"summary":"\nThe amount of seconds before the character can perform another\njump after an initial jump.\n","syntax":{"content":"public float consecutiveDelay","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Abilities.JumpSettings.consecutiveDelay"},{"children":null,"id":"coyoteTime","implements":null,"inheritance":null,"inheritedMembers":null,"name":"coyoteTime","nameWithType":"JumpSettings.coyoteTime","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.JumpSettings","remarks":null,"summary":"\nThe amount of extra time the character has to jump after falling\noff a ledge.\n","syntax":{"content":"public float coyoteTime","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Abilities.JumpSettings.coyoteTime"},{"children":null,"id":"#ctor","implements":null,"inheritance":null,"inheritedMembers":null,"name":"JumpSettings()","nameWithType":"JumpSettings.JumpSettings()","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.JumpSettings","remarks":null,"summary":null,"syntax":{"content":"public JumpSettings()","parameters":null,"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.CharacterController.Abilities.JumpSettings.#ctor"}]},{"items":[{"children":["Zigurous.CharacterController.Abilities.NoClipSettings.#ctor","Zigurous.CharacterController.Abilities.NoClipSettings.moveSpeed","Zigurous.CharacterController.Abilities.NoClipSettings.verticalInputAxis"],"id":"NoClipSettings","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementSettings","Zigurous.CharacterController.MovementBehaviorSettings","Zigurous.CharacterController.MovementControlSettings","Zigurous.CharacterController.MovementAbilitySettings","Zigurous.CharacterController.MovementAbilitySettings{Zigurous.CharacterController.Abilities.NoClip}"],"inheritedMembers":["Zigurous.CharacterController.MovementAbilitySettings.preconditions","Zigurous.CharacterController.MovementAbilitySettings.preventingConditions","Zigurous.CharacterController.MovementAbilitySettings.deactivatingConditions","Zigurous.CharacterController.MovementAbilitySettings.staminaCost","Zigurous.CharacterController.MovementAbilitySettings.cooldownMode","Zigurous.CharacterController.MovementAbilitySettings.cooldownDuration","Zigurous.CharacterController.MovementControlSettings.inputButton","Zigurous.CharacterController.MovementControlSettings.inputStyle","Zigurous.CharacterController.MovementSettings.active","Zigurous.CharacterController.MovementSettings.enabled","Zigurous.CharacterController.MovementSettings.isActiveAndEnabled","Zigurous.CharacterController.MovementSettings.OnActivate(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementSettings.OnDeactivate(Zigurous.CharacterController.MovementController)"],"name":"NoClipSettings","nameWithType":"NoClipSettings","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities","remarks":null,"summary":"\nSettings for no clip.\n","syntax":{"content":"[Serializable]\npublic class NoClipSettings : MovementAbilitySettings<NoClip>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Abilities.NoClipSettings"},{"children":null,"id":"moveSpeed","implements":null,"inheritance":null,"inheritedMembers":null,"name":"moveSpeed","nameWithType":"NoClipSettings.moveSpeed","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.NoClipSettings","remarks":null,"summary":"\nThe speed of the character while no clip is active.\n","syntax":{"content":"public float moveSpeed","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Abilities.NoClipSettings.moveSpeed"},{"children":null,"id":"verticalInputAxis","implements":null,"inheritance":null,"inheritedMembers":null,"name":"verticalInputAxis","nameWithType":"NoClipSettings.verticalInputAxis","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.NoClipSettings","remarks":null,"summary":"\nThe input name for moving the character along the y-axis.\n","syntax":{"content":"public InputAxis verticalInputAxis","parameters":null,"return":{"description":null,"type":"Global.InputAxis"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Abilities.NoClipSettings.verticalInputAxis"},{"children":null,"id":"#ctor","implements":null,"inheritance":null,"inheritedMembers":null,"name":"NoClipSettings()","nameWithType":"NoClipSettings.NoClipSettings()","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.NoClipSettings","remarks":null,"summary":null,"syntax":{"content":"public NoClipSettings()","parameters":null,"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.CharacterController.Abilities.NoClipSettings.#ctor"}]},{"items":[{"children":["Zigurous.CharacterController.Abilities.SprintSettings.#ctor"],"id":"SprintSettings","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementSettings","Zigurous.CharacterController.MovementBehaviorSettings","Zigurous.CharacterController.MovementControlSettings","Zigurous.CharacterController.MovementAbilitySettings","Zigurous.CharacterController.MovementAbilitySettings{Zigurous.CharacterController.Abilities.Sprint}"],"inheritedMembers":["Zigurous.CharacterController.MovementAbilitySettings.preconditions","Zigurous.CharacterController.MovementAbilitySettings.preventingConditions","Zigurous.CharacterController.MovementAbilitySettings.deactivatingConditions","Zigurous.CharacterController.MovementAbilitySettings.staminaCost","Zigurous.CharacterController.MovementAbilitySettings.cooldownMode","Zigurous.CharacterController.MovementAbilitySettings.cooldownDuration","Zigurous.CharacterController.MovementControlSettings.inputButton","Zigurous.CharacterController.MovementControlSettings.inputStyle","Zigurous.CharacterController.MovementSettings.active","Zigurous.CharacterController.MovementSettings.enabled","Zigurous.CharacterController.MovementSettings.isActiveAndEnabled","Zigurous.CharacterController.MovementSettings.OnActivate(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementSettings.OnDeactivate(Zigurous.CharacterController.MovementController)"],"name":"SprintSettings","nameWithType":"SprintSettings","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities","remarks":null,"summary":"\nSettings for sprinting.\n","syntax":{"content":"[Serializable]\npublic class SprintSettings : MovementAbilitySettings<Sprint>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Abilities.SprintSettings"},{"children":null,"id":"#ctor","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SprintSettings()","nameWithType":"SprintSettings.SprintSettings()","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.SprintSettings","remarks":null,"summary":null,"syntax":{"content":"public SprintSettings()","parameters":null,"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.CharacterController.Abilities.SprintSettings.#ctor"}]},{"items":[{"children":["Zigurous.CharacterController.Abilities.WalkSettings.#ctor"],"id":"WalkSettings","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementSettings","Zigurous.CharacterController.MovementBehaviorSettings","Zigurous.CharacterController.MovementControlSettings","Zigurous.CharacterController.MovementAbilitySettings","Zigurous.CharacterController.MovementAbilitySettings{Zigurous.CharacterController.Abilities.Walk}"],"inheritedMembers":["Zigurous.CharacterController.MovementAbilitySettings.preconditions","Zigurous.CharacterController.MovementAbilitySettings.preventingConditions","Zigurous.CharacterController.MovementAbilitySettings.deactivatingConditions","Zigurous.CharacterController.MovementAbilitySettings.staminaCost","Zigurous.CharacterController.MovementAbilitySettings.cooldownMode","Zigurous.CharacterController.MovementAbilitySettings.cooldownDuration","Zigurous.CharacterController.MovementControlSettings.inputButton","Zigurous.CharacterController.MovementControlSettings.inputStyle","Zigurous.CharacterController.MovementSettings.active","Zigurous.CharacterController.MovementSettings.enabled","Zigurous.CharacterController.MovementSettings.isActiveAndEnabled","Zigurous.CharacterController.MovementSettings.OnActivate(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementSettings.OnDeactivate(Zigurous.CharacterController.MovementController)"],"name":"WalkSettings","nameWithType":"WalkSettings","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities","remarks":null,"summary":"\nSettings for walking.\n","syntax":{"content":"[Serializable]\npublic class WalkSettings : MovementAbilitySettings<Walk>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Abilities.WalkSettings"},{"children":null,"id":"#ctor","implements":null,"inheritance":null,"inheritedMembers":null,"name":"WalkSettings()","nameWithType":"WalkSettings.WalkSettings()","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.WalkSettings","remarks":null,"summary":null,"syntax":{"content":"public WalkSettings()","parameters":null,"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.CharacterController.Abilities.WalkSettings.#ctor"}]},{"items":[{"children":["Zigurous.CharacterController.Abilities.Crouch","Zigurous.CharacterController.Abilities.CrouchSettings","Zigurous.CharacterController.Abilities.Dash","Zigurous.CharacterController.Abilities.DashSettings","Zigurous.CharacterController.Abilities.Dodge","Zigurous.CharacterController.Abilities.DodgeSettings","Zigurous.CharacterController.Abilities.Jetpack","Zigurous.CharacterController.Abilities.JetpackSettings","Zigurous.CharacterController.Abilities.Jump","Zigurous.CharacterController.Abilities.JumpSettings","Zigurous.CharacterController.Abilities.NoClip","Zigurous.CharacterController.Abilities.NoClipSettings","Zigurous.CharacterController.Abilities.Sprint","Zigurous.CharacterController.Abilities.SprintSettings","Zigurous.CharacterController.Abilities.Walk","Zigurous.CharacterController.Abilities.WalkSettings"],"id":"Zigurous.CharacterController.Abilities","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Zigurous.CharacterController.Abilities","nameWithType":"Zigurous.CharacterController.Abilities","namespace":null,"parent":null,"remarks":null,"summary":null,"syntax":null,"type":"Namespace","uid":"Zigurous.CharacterController.Abilities"}]},{"items":[{"children":["Zigurous.CharacterController.Animation.AnimationSetting.Property.DirectionX","Zigurous.CharacterController.Animation.AnimationSetting.Property.DirectionY","Zigurous.CharacterController.Animation.AnimationSetting.Property.DodgeTime","Zigurous.CharacterController.Animation.AnimationSetting.Property.FallHeight","Zigurous.CharacterController.Animation.AnimationSetting.Property.FallRecoveryTime","Zigurous.CharacterController.Animation.AnimationSetting.Property.InputX","Zigurous.CharacterController.Animation.AnimationSetting.Property.InputY","Zigurous.CharacterController.Animation.AnimationSetting.Property.None","Zigurous.CharacterController.Animation.AnimationSetting.Property.Speed","Zigurous.CharacterController.Animation.AnimationSetting.Property.VelocityX","Zigurous.CharacterController.Animation.AnimationSetting.Property.VelocityY"],"id":"AnimationSetting.Property","implements":null,"inheritance":null,"inheritedMembers":null,"name":"AnimationSetting.Property","nameWithType":"AnimationSetting.Property","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation","remarks":null,"summary":"\nA floating-point property that can be set as the value of a parameter.\n","syntax":{"content":"public enum Property","parameters":null,"return":null,"typeParameters":null},"type":"Enum","uid":"Zigurous.CharacterController.Animation.AnimationSetting.Property"},{"children":null,"id":"None","implements":null,"inheritance":null,"inheritedMembers":null,"name":"None","nameWithType":"AnimationSetting.Property.None","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.AnimationSetting.Property","remarks":null,"summary":null,"syntax":{"content":"None = 0","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.Animation.AnimationSetting.Property"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.AnimationSetting.Property.None"},{"children":null,"id":"Speed","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Speed","nameWithType":"AnimationSetting.Property.Speed","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.AnimationSetting.Property","remarks":null,"summary":null,"syntax":{"content":"Speed = 1","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.Animation.AnimationSetting.Property"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.AnimationSetting.Property.Speed"},{"children":null,"id":"DodgeTime","implements":null,"inheritance":null,"inheritedMembers":null,"name":"DodgeTime","nameWithType":"AnimationSetting.Property.DodgeTime","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.AnimationSetting.Property","remarks":null,"summary":null,"syntax":{"content":"DodgeTime = 2","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.Animation.AnimationSetting.Property"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.AnimationSetting.Property.DodgeTime"},{"children":null,"id":"FallHeight","implements":null,"inheritance":null,"inheritedMembers":null,"name":"FallHeight","nameWithType":"AnimationSetting.Property.FallHeight","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.AnimationSetting.Property","remarks":null,"summary":null,"syntax":{"content":"FallHeight = 3","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.Animation.AnimationSetting.Property"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.AnimationSetting.Property.FallHeight"},{"children":null,"id":"FallRecoveryTime","implements":null,"inheritance":null,"inheritedMembers":null,"name":"FallRecoveryTime","nameWithType":"AnimationSetting.Property.FallRecoveryTime","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.AnimationSetting.Property","remarks":null,"summary":null,"syntax":{"content":"FallRecoveryTime = 4","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.Animation.AnimationSetting.Property"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.AnimationSetting.Property.FallRecoveryTime"},{"children":null,"id":"InputX","implements":null,"inheritance":null,"inheritedMembers":null,"name":"InputX","nameWithType":"AnimationSetting.Property.InputX","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.AnimationSetting.Property","remarks":null,"summary":null,"syntax":{"content":"InputX = 5","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.Animation.AnimationSetting.Property"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.AnimationSetting.Property.InputX"},{"children":null,"id":"InputY","implements":null,"inheritance":null,"inheritedMembers":null,"name":"InputY","nameWithType":"AnimationSetting.Property.InputY","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.AnimationSetting.Property","remarks":null,"summary":null,"syntax":{"content":"InputY = 6","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.Animation.AnimationSetting.Property"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.AnimationSetting.Property.InputY"},{"children":null,"id":"DirectionX","implements":null,"inheritance":null,"inheritedMembers":null,"name":"DirectionX","nameWithType":"AnimationSetting.Property.DirectionX","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.AnimationSetting.Property","remarks":null,"summary":null,"syntax":{"content":"DirectionX = 7","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.Animation.AnimationSetting.Property"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.AnimationSetting.Property.DirectionX"},{"children":null,"id":"DirectionY","implements":null,"inheritance":null,"inheritedMembers":null,"name":"DirectionY","nameWithType":"AnimationSetting.Property.DirectionY","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.AnimationSetting.Property","remarks":null,"summary":null,"syntax":{"content":"DirectionY = 8","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.Animation.AnimationSetting.Property"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.AnimationSetting.Property.DirectionY"},{"children":null,"id":"VelocityX","implements":null,"inheritance":null,"inheritedMembers":null,"name":"VelocityX","nameWithType":"AnimationSetting.Property.VelocityX","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.AnimationSetting.Property","remarks":null,"summary":null,"syntax":{"content":"VelocityX = 9","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.Animation.AnimationSetting.Property"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.AnimationSetting.Property.VelocityX"},{"children":null,"id":"VelocityY","implements":null,"inheritance":null,"inheritedMembers":null,"name":"VelocityY","nameWithType":"AnimationSetting.Property.VelocityY","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.AnimationSetting.Property","remarks":null,"summary":null,"syntax":{"content":"VelocityY = 10","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.Animation.AnimationSetting.Property"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.AnimationSetting.Property.VelocityY"}]},{"items":[{"children":["Zigurous.CharacterController.Animation.AnimationSetting.#ctor(System.String,AnimatorControllerParameterType,Zigurous.CharacterController.MovementFlags,Zigurous.CharacterController.Animation.AnimationSetting.Property,System.Single,System.Boolean)","Zigurous.CharacterController.Animation.AnimationSetting.Bool(System.String,Zigurous.CharacterController.MovementFlags,System.Boolean)","Zigurous.CharacterController.Animation.AnimationSetting.condition","Zigurous.CharacterController.Animation.AnimationSetting.damping","Zigurous.CharacterController.Animation.AnimationSetting.enabled","Zigurous.CharacterController.Animation.AnimationSetting.Float(System.String,Zigurous.CharacterController.MovementFlags,Zigurous.CharacterController.Animation.AnimationSetting.Property,System.Single,System.Boolean)","Zigurous.CharacterController.Animation.AnimationSetting.Int(System.String,Zigurous.CharacterController.MovementFlags,Zigurous.CharacterController.Animation.AnimationSetting.Property,System.Boolean)","Zigurous.CharacterController.Animation.AnimationSetting.parameter","Zigurous.CharacterController.Animation.AnimationSetting.property","Zigurous.CharacterController.Animation.AnimationSetting.Trigger(System.String,Zigurous.CharacterController.MovementFlags,System.Boolean)","Zigurous.CharacterController.Animation.AnimationSetting.type"],"id":"AnimationSetting","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"AnimationSetting","nameWithType":"AnimationSetting","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation","remarks":null,"summary":"\nAn animator setting that can be set on an animation controller.\n","syntax":{"content":"[Serializable]\npublic sealed class AnimationSetting","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Animation.AnimationSetting"},{"children":null,"id":"Bool(System.String,Zigurous.CharacterController.MovementFlags,System.Boolean)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Bool(String, MovementFlags, Boolean)","nameWithType":"AnimationSetting.Bool(String, MovementFlags, Boolean)","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.AnimationSetting","remarks":null,"summary":"\nCreates a Bool type animation setting with the given condition and\nparameter.\n","syntax":{"content":"public static AnimationSetting Bool(string parameter, MovementFlags condition, bool enabled = true)","parameters":[{"description":null,"id":"parameter","type":"System.String"},{"description":null,"id":"condition","type":"Zigurous.CharacterController.MovementFlags"},{"description":null,"id":"enabled","type":"System.Boolean"}],"return":{"description":null,"type":"Zigurous.CharacterController.Animation.AnimationSetting"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Animation.AnimationSetting.Bool(System.String,Zigurous.CharacterController.MovementFlags,System.Boolean)"},{"children":null,"id":"Trigger(System.String,Zigurous.CharacterController.MovementFlags,System.Boolean)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Trigger(String, MovementFlags, Boolean)","nameWithType":"AnimationSetting.Trigger(String, MovementFlags, Boolean)","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.AnimationSetting","remarks":null,"summary":"\nCreates a Trigger type animation setting with the given condition\nand parameter.\n","syntax":{"content":"public static AnimationSetting Trigger(string parameter, MovementFlags condition, bool enabled = true)","parameters":[{"description":null,"id":"parameter","type":"System.String"},{"description":null,"id":"condition","type":"Zigurous.CharacterController.MovementFlags"},{"description":null,"id":"enabled","type":"System.Boolean"}],"return":{"description":null,"type":"Zigurous.CharacterController.Animation.AnimationSetting"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Animation.AnimationSetting.Trigger(System.String,Zigurous.CharacterController.MovementFlags,System.Boolean)"},{"children":null,"id":"Float(System.String,Zigurous.CharacterController.MovementFlags,Zigurous.CharacterController.Animation.AnimationSetting.Property,System.Single,System.Boolean)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Float(String, MovementFlags, AnimationSetting.Property, Single, Boolean)","nameWithType":"AnimationSetting.Float(String, MovementFlags, AnimationSetting.Property, Single, Boolean)","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.AnimationSetting","remarks":null,"summary":"\nCreates a Float type animation setting for the specified property\nwith the given condition and parameter.\n","syntax":{"content":"public static AnimationSetting Float(string parameter, MovementFlags condition, AnimationSetting.Property property, float damping = 0F, bool enabled = true)","parameters":[{"description":null,"id":"parameter","type":"System.String"},{"description":null,"id":"condition","type":"Zigurous.CharacterController.MovementFlags"},{"description":null,"id":"property","type":"Zigurous.CharacterController.Animation.AnimationSetting.Property"},{"description":null,"id":"damping","type":"System.Single"},{"description":null,"id":"enabled","type":"System.Boolean"}],"return":{"description":null,"type":"Zigurous.CharacterController.Animation.AnimationSetting"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Animation.AnimationSetting.Float(System.String,Zigurous.CharacterController.MovementFlags,Zigurous.CharacterController.Animation.AnimationSetting.Property,System.Single,System.Boolean)"},{"children":null,"id":"Int(System.String,Zigurous.CharacterController.MovementFlags,Zigurous.CharacterController.Animation.AnimationSetting.Property,System.Boolean)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Int(String, MovementFlags, AnimationSetting.Property, Boolean)","nameWithType":"AnimationSetting.Int(String, MovementFlags, AnimationSetting.Property, Boolean)","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.AnimationSetting","remarks":null,"summary":"\nCreates a Float type animation setting for the specified property\nwith the given condition and parameter.\n","syntax":{"content":"public static AnimationSetting Int(string parameter, MovementFlags condition, AnimationSetting.Property property, bool enabled = true)","parameters":[{"description":null,"id":"parameter","type":"System.String"},{"description":null,"id":"condition","type":"Zigurous.CharacterController.MovementFlags"},{"description":null,"id":"property","type":"Zigurous.CharacterController.Animation.AnimationSetting.Property"},{"description":null,"id":"enabled","type":"System.Boolean"}],"return":{"description":null,"type":"Zigurous.CharacterController.Animation.AnimationSetting"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Animation.AnimationSetting.Int(System.String,Zigurous.CharacterController.MovementFlags,Zigurous.CharacterController.Animation.AnimationSetting.Property,System.Boolean)"},{"children":null,"id":"parameter","implements":null,"inheritance":null,"inheritedMembers":null,"name":"parameter","nameWithType":"AnimationSetting.parameter","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.AnimationSetting","remarks":null,"summary":"\nThe animator parameter as set in the animation controller.\n","syntax":{"content":"public AnimatorParameter parameter","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.Animation.AnimatorParameter"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.AnimationSetting.parameter"},{"children":null,"id":"condition","implements":null,"inheritance":null,"inheritedMembers":null,"name":"condition","nameWithType":"AnimationSetting.condition","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.AnimationSetting","remarks":null,"summary":"\nThe movement state condition that must be met for the animation\nparameter to be set on an animation controller.\n","syntax":{"content":"public MovementFlags condition","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.AnimationSetting.condition"},{"children":null,"id":"type","implements":null,"inheritance":null,"inheritedMembers":null,"name":"type","nameWithType":"AnimationSetting.type","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.AnimationSetting","remarks":null,"summary":"\nThe type of animation parameter, i.e., Bool, Trigger, Float.\n","syntax":{"content":"public AnimatorControllerParameterType type","parameters":null,"return":{"description":null,"type":"Global.AnimatorControllerParameterType"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.AnimationSetting.type"},{"children":null,"id":"property","implements":null,"inheritance":null,"inheritedMembers":null,"name":"property","nameWithType":"AnimationSetting.property","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.AnimationSetting","remarks":null,"summary":"\nThe property that is used as the float value of the animation\nparameter (only applicable for &apos;Float&apos; type parameters).\n","syntax":{"content":"public AnimationSetting.Property property","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.Animation.AnimationSetting.Property"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.AnimationSetting.property"},{"children":null,"id":"damping","implements":null,"inheritance":null,"inheritedMembers":null,"name":"damping","nameWithType":"AnimationSetting.damping","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.AnimationSetting","remarks":null,"summary":"\nHow quickly the parameter value changes (only applicable for &apos;Float&apos;\ntype parameters). Small numbers make the parameter more responsive,\nand large numbers make the parameter respond slowly.\n","syntax":{"content":"public float damping","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.AnimationSetting.damping"},{"children":null,"id":"enabled","implements":null,"inheritance":null,"inheritedMembers":null,"name":"enabled","nameWithType":"AnimationSetting.enabled","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.AnimationSetting","remarks":null,"summary":"\nWhether the animation parameter should be set on an animation\ncontroller.\n","syntax":{"content":"public bool enabled","parameters":null,"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.AnimationSetting.enabled"},{"children":null,"id":"#ctor(System.String,AnimatorControllerParameterType,Zigurous.CharacterController.MovementFlags,Zigurous.CharacterController.Animation.AnimationSetting.Property,System.Single,System.Boolean)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"AnimationSetting(String, AnimatorControllerParameterType, MovementFlags, AnimationSetting.Property, Single, Boolean)","nameWithType":"AnimationSetting.AnimationSetting(String, AnimatorControllerParameterType, MovementFlags, AnimationSetting.Property, Single, Boolean)","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.AnimationSetting","remarks":null,"summary":"\nConstructs a new animation parameter with the given properties.\n","syntax":{"content":"public AnimationSetting(string parameter, AnimatorControllerParameterType type, MovementFlags condition, AnimationSetting.Property property, float damping = 0F, bool enabled = true)","parameters":[{"description":null,"id":"parameter","type":"System.String"},{"description":null,"id":"type","type":"Global.AnimatorControllerParameterType"},{"description":null,"id":"condition","type":"Zigurous.CharacterController.MovementFlags"},{"description":null,"id":"property","type":"Zigurous.CharacterController.Animation.AnimationSetting.Property"},{"description":null,"id":"damping","type":"System.Single"},{"description":null,"id":"enabled","type":"System.Boolean"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.CharacterController.Animation.AnimationSetting.#ctor(System.String,AnimatorControllerParameterType,Zigurous.CharacterController.MovementFlags,Zigurous.CharacterController.Animation.AnimationSetting.Property,System.Single,System.Boolean)"}]},{"items":[{"children":["Zigurous.CharacterController.Animation.AnimationSettings.SetState(Zigurous.CharacterController.MovementController,Animator)"],"id":"AnimationSettings","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementSettings","Zigurous.CharacterController.MovementBehaviorSettings","Zigurous.CharacterController.MovementBehaviorSettings{Zigurous.CharacterController.Animation.AnimationState}"],"inheritedMembers":["Zigurous.CharacterController.MovementSettings.active","Zigurous.CharacterController.MovementSettings.enabled","Zigurous.CharacterController.MovementSettings.isActiveAndEnabled","Zigurous.CharacterController.MovementSettings.OnActivate(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementSettings.OnDeactivate(Zigurous.CharacterController.MovementController)"],"name":"AnimationSettings","nameWithType":"AnimationSettings","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation","remarks":null,"summary":"\nThe animation settings for a movement controller.\n","syntax":{"content":"[Serializable]\npublic class AnimationSettings : MovementBehaviorSettings<AnimationState>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Animation.AnimationSettings"},{"children":null,"id":"SetState(Zigurous.CharacterController.MovementController,Animator)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SetState(MovementController, Animator)","nameWithType":"AnimationSettings.SetState(MovementController, Animator)","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.AnimationSettings","remarks":null,"summary":"\nSet the animation state of the animator component.\n","syntax":{"content":"public void SetState(MovementController controller, Animator animator)","parameters":[{"description":"The movement controller updating the animation state.","id":"controller","type":"Zigurous.CharacterController.MovementController"},{"description":"The animator component to set the state of.","id":"animator","type":"Global.Animator"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Animation.AnimationSettings.SetState(Zigurous.CharacterController.MovementController,Animator)"}]},{"items":[{"children":["Zigurous.CharacterController.Animation.AnimationState.OnPostUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)"],"id":"AnimationState","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementProcess","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Animation.AnimationSettings}"],"inheritedMembers":["Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Animation.AnimationSettings}.settings","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Animation.AnimationSettings}.enabled","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Animation.AnimationSettings}.OnPreUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Animation.AnimationSettings}.OnEnable","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Animation.AnimationSettings}.OnDisable","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Animation.AnimationSettings}.StartCoroutine(System.Collections.IEnumerator)","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Animation.AnimationSettings}.StopCoroutine(Coroutine)","Zigurous.CharacterController.MovementProcess.controller","Zigurous.CharacterController.MovementProcess.registered","Zigurous.CharacterController.MovementProcess.order","Zigurous.CharacterController.MovementProcess.id","Zigurous.CharacterController.MovementProcess.OnRegister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUnregister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementProcess.OnMovementProfileChanged(Zigurous.CharacterController.MovementProfile,Zigurous.CharacterController.MovementProfile)"],"name":"AnimationState","nameWithType":"AnimationState","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation","remarks":null,"summary":"\nUpdates the animation state of a character.\n","syntax":{"content":"public class AnimationState : MovementBehavior<AnimationSettings>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Animation.AnimationState"},{"children":null,"id":"OnPostUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnPostUpdate(MovementController, MovementState)","nameWithType":"AnimationState.OnPostUpdate(MovementController, MovementState)","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.AnimationState","remarks":null,"summary":"\nChecks for any state changes after the process is handled.\n","syntax":{"content":"protected override void OnPostUpdate(MovementController controller, MovementState state)","parameters":[{"description":"The controller updating the process.","id":"controller","type":"Zigurous.CharacterController.MovementController"},{"description":"The current movement state of the character.","id":"state","type":"Zigurous.CharacterController.MovementState"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Animation.AnimationState.OnPostUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)"}]},{"items":[{"children":["Zigurous.CharacterController.Animation.AnimatorParameter.#ctor(System.String)","Zigurous.CharacterController.Animation.AnimatorParameter.hash","Zigurous.CharacterController.Animation.AnimatorParameter.name","Zigurous.CharacterController.Animation.AnimatorParameter.op_Implicit(System.String)~Zigurous.CharacterController.Animation.AnimatorParameter","Zigurous.CharacterController.Animation.AnimatorParameter.op_Implicit(Zigurous.CharacterController.Animation.AnimatorParameter)~System.Int32"],"id":"AnimatorParameter","implements":null,"inheritance":null,"inheritedMembers":null,"name":"AnimatorParameter","nameWithType":"AnimatorParameter","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation","remarks":"\nA hash id is automatically created for the parameter. Ids are used for\noptimized setters and getters on Animator parameters.\n","summary":"\nAn animation parameter that can be set on an Animator.\n","syntax":{"content":"[Serializable]\npublic struct AnimatorParameter","parameters":null,"return":null,"typeParameters":null},"type":"Struct","uid":"Zigurous.CharacterController.Animation.AnimatorParameter"},{"children":null,"id":"hash","implements":null,"inheritance":null,"inheritedMembers":null,"name":"hash","nameWithType":"AnimatorParameter.hash","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.AnimatorParameter","remarks":null,"summary":"\nThe hash id of the animator parameter (Read only).\n","syntax":{"content":"public readonly int hash { get; }","parameters":[],"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Animation.AnimatorParameter.hash"},{"children":null,"id":"name","implements":null,"inheritance":null,"inheritedMembers":null,"name":"name","nameWithType":"AnimatorParameter.name","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.AnimatorParameter","remarks":null,"summary":"\nThe name of the animator parameter.\n","syntax":{"content":"public string name { get; set; }","parameters":[],"return":{"description":null,"type":"System.String"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Animation.AnimatorParameter.name"},{"children":null,"id":"#ctor(System.String)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"AnimatorParameter(String)","nameWithType":"AnimatorParameter.AnimatorParameter(String)","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.AnimatorParameter","remarks":null,"summary":"\nCreates a new animator parameter with the given name.\n","syntax":{"content":"public AnimatorParameter(string name)","parameters":[{"description":"The name of the animator parameter.","id":"name","type":"System.String"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.CharacterController.Animation.AnimatorParameter.#ctor(System.String)"},{"children":null,"id":"op_Implicit(System.String)~Zigurous.CharacterController.Animation.AnimatorParameter","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Implicit(String to AnimatorParameter)","nameWithType":"AnimatorParameter.Implicit(String to AnimatorParameter)","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.AnimatorParameter","remarks":null,"summary":"\nImplicitly converts a name to an animator parameter.\n","syntax":{"content":"public static implicit operator AnimatorParameter(string name)","parameters":[{"description":"The name of the animator parameter.","id":"name","type":"System.String"}],"return":{"description":"A new animator parameter with the given name.","type":"Zigurous.CharacterController.Animation.AnimatorParameter"},"typeParameters":null},"type":"Operator","uid":"Zigurous.CharacterController.Animation.AnimatorParameter.op_Implicit(System.String)~Zigurous.CharacterController.Animation.AnimatorParameter"},{"children":null,"id":"op_Implicit(Zigurous.CharacterController.Animation.AnimatorParameter)~System.Int32","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Implicit(AnimatorParameter to Int32)","nameWithType":"AnimatorParameter.Implicit(AnimatorParameter to Int32)","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.AnimatorParameter","remarks":null,"summary":"\nImplicitly converts an animator parameter to a hash id.\n","syntax":{"content":"public static implicit operator int (AnimatorParameter property)","parameters":[{"description":"The animator parameter to convert to an id.","id":"property","type":"Zigurous.CharacterController.Animation.AnimatorParameter"}],"return":{"description":"The hash id of the animator parameter.","type":"System.Int32"},"typeParameters":null},"type":"Operator","uid":"Zigurous.CharacterController.Animation.AnimatorParameter.op_Implicit(Zigurous.CharacterController.Animation.AnimatorParameter)~System.Int32"}]},{"items":[{"children":["Zigurous.CharacterController.Animation.IKBehavior.animator","Zigurous.CharacterController.Animation.IKBehavior.OnDestroy","Zigurous.CharacterController.Animation.IKBehavior.Start","Zigurous.CharacterController.Animation.IKBehavior.UpdateIK(System.Int32)"],"id":"IKBehavior","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"IKBehavior","nameWithType":"IKBehavior","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation","remarks":null,"summary":"\nAn IK behavior attached to an animator component.\n","syntax":{"content":"public abstract class IKBehavior : MonoBehaviour","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Animation.IKBehavior"},{"children":null,"id":"animator","implements":null,"inheritance":null,"inheritedMembers":null,"name":"animator","nameWithType":"IKBehavior.animator","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKBehavior","remarks":null,"summary":"\nThe animator component the IK solution is applied to.\n","syntax":{"content":"public Animator animator { get; }","parameters":[],"return":{"description":null,"type":"Global.Animator"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Animation.IKBehavior.animator"},{"children":null,"id":"Start","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Start()","nameWithType":"IKBehavior.Start()","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKBehavior","remarks":null,"summary":"\nA Unity lifecycle method called the first frame the behavior is enabled.\n","syntax":{"content":"protected virtual void Start()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Animation.IKBehavior.Start"},{"children":null,"id":"OnDestroy","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnDestroy()","nameWithType":"IKBehavior.OnDestroy()","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKBehavior","remarks":null,"summary":"\nA Unity lifecycle method called when the behavior is destroyed.\n","syntax":{"content":"protected virtual void OnDestroy()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Animation.IKBehavior.OnDestroy"},{"children":null,"id":"UpdateIK(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"UpdateIK(Int32)","nameWithType":"IKBehavior.UpdateIK(Int32)","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKBehavior","remarks":null,"summary":"\nUpdates the IK solution.\n","syntax":{"content":"public abstract void UpdateIK(int layerIndex)","parameters":[{"description":"The index of the animator layer being updated.","id":"layerIndex","type":"System.Int32"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Animation.IKBehavior.UpdateIK(System.Int32)"}]},{"items":[{"children":["Zigurous.CharacterController.Animation.IKBehaviorManager.behaviors","Zigurous.CharacterController.Animation.IKBehaviorManager.Clear","Zigurous.CharacterController.Animation.IKBehaviorManager.Register(Zigurous.CharacterController.Animation.IKBehavior)","Zigurous.CharacterController.Animation.IKBehaviorManager.Unregister(Zigurous.CharacterController.Animation.IKBehavior)"],"id":"IKBehaviorManager","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"IKBehaviorManager","nameWithType":"IKBehaviorManager","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation","remarks":null,"summary":"\nManages and updates IK behaviors on an Animator component. This ensures\nonly a single OnAnimatorIK call is made per frame for the animator.\n","syntax":{"content":"public sealed class IKBehaviorManager : MonoBehaviour","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Animation.IKBehaviorManager"},{"children":null,"id":"behaviors","implements":null,"inheritance":null,"inheritedMembers":null,"name":"behaviors","nameWithType":"IKBehaviorManager.behaviors","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKBehaviorManager","remarks":null,"summary":"\nThe behaviors registered and being updated by the manager.\n","syntax":{"content":"public List<IKBehavior> behaviors { get; }","parameters":[],"return":{"description":null,"type":"Global.List{Zigurous.CharacterController.Animation.IKBehavior}"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Animation.IKBehaviorManager.behaviors"},{"children":null,"id":"Register(Zigurous.CharacterController.Animation.IKBehavior)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Register(IKBehavior)","nameWithType":"IKBehaviorManager.Register(IKBehavior)","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKBehaviorManager","remarks":null,"summary":"\nRegisters an IK behavior to be updated by the manager.\n","syntax":{"content":"public bool Register(IKBehavior behavior)","parameters":[{"description":"The behavior to register.","id":"behavior","type":"Zigurous.CharacterController.Animation.IKBehavior"}],"return":{"description":"True if the behavior was successfully registered.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Animation.IKBehaviorManager.Register(Zigurous.CharacterController.Animation.IKBehavior)"},{"children":null,"id":"Unregister(Zigurous.CharacterController.Animation.IKBehavior)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Unregister(IKBehavior)","nameWithType":"IKBehaviorManager.Unregister(IKBehavior)","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKBehaviorManager","remarks":null,"summary":"\nUnregisters an IK behavior from being updated by the manager.\n","syntax":{"content":"public bool Unregister(IKBehavior behavior)","parameters":[{"description":"The behavior to unregister.","id":"behavior","type":"Zigurous.CharacterController.Animation.IKBehavior"}],"return":{"description":"True if the behavior was successfully unregistered.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Animation.IKBehaviorManager.Unregister(Zigurous.CharacterController.Animation.IKBehavior)"},{"children":null,"id":"Clear","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clear()","nameWithType":"IKBehaviorManager.Clear()","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKBehaviorManager","remarks":null,"summary":"\nClears the list of behaviors registered to the manager.\n","syntax":{"content":"public void Clear()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Animation.IKBehaviorManager.Clear"}]},{"items":[{"children":["Zigurous.CharacterController.Animation.IKFootData.distance","Zigurous.CharacterController.Animation.IKFootData.hitPoint","Zigurous.CharacterController.Animation.IKFootData.position","Zigurous.CharacterController.Animation.IKFootData.rotation","Zigurous.CharacterController.Animation.IKFootData.weight"],"id":"IKFootData","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IKFootData","nameWithType":"IKFootData","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation","remarks":null,"summary":"\nIK solution data for a foot.\n","syntax":{"content":"[Serializable]\npublic struct IKFootData","parameters":null,"return":null,"typeParameters":null},"type":"Struct","uid":"Zigurous.CharacterController.Animation.IKFootData"},{"children":null,"id":"hitPoint","implements":null,"inheritance":null,"inheritedMembers":null,"name":"hitPoint","nameWithType":"IKFootData.hitPoint","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKFootData","remarks":null,"summary":"\nThe ground hit point.\n","syntax":{"content":"public Vector3 hitPoint","parameters":null,"return":{"description":null,"type":"Global.Vector3"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.IKFootData.hitPoint"},{"children":null,"id":"position","implements":null,"inheritance":null,"inheritedMembers":null,"name":"position","nameWithType":"IKFootData.position","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKFootData","remarks":null,"summary":"\nThe target IK foot position.\n","syntax":{"content":"public Vector3 position","parameters":null,"return":{"description":null,"type":"Global.Vector3"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.IKFootData.position"},{"children":null,"id":"rotation","implements":null,"inheritance":null,"inheritedMembers":null,"name":"rotation","nameWithType":"IKFootData.rotation","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKFootData","remarks":null,"summary":"\nThe target IK foot rotation.\n","syntax":{"content":"public Quaternion rotation","parameters":null,"return":{"description":null,"type":"Global.Quaternion"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.IKFootData.rotation"},{"children":null,"id":"distance","implements":null,"inheritance":null,"inheritedMembers":null,"name":"distance","nameWithType":"IKFootData.distance","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKFootData","remarks":null,"summary":"\nThe distance from the foot to the ground.\n","syntax":{"content":"public float distance","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.IKFootData.distance"},{"children":null,"id":"weight","implements":null,"inheritance":null,"inheritedMembers":null,"name":"weight","nameWithType":"IKFootData.weight","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKFootData","remarks":null,"summary":"\nThe IK weight of the foot.\n","syntax":{"content":"public float weight","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.IKFootData.weight"}]},{"items":[{"children":["Zigurous.CharacterController.Animation.IKFootSolver.bodyPositionOffset","Zigurous.CharacterController.Animation.IKFootSolver.damping","Zigurous.CharacterController.Animation.IKFootSolver.debug","Zigurous.CharacterController.Animation.IKFootSolver.footHeight","Zigurous.CharacterController.Animation.IKFootSolver.groundLayers","Zigurous.CharacterController.Animation.IKFootSolver.maxGroundDistance","Zigurous.CharacterController.Animation.IKFootSolver.maxStepHeight","Zigurous.CharacterController.Animation.IKFootSolver.positionWeightMultiplier","Zigurous.CharacterController.Animation.IKFootSolver.rotationWeightMultiplier","Zigurous.CharacterController.Animation.IKFootSolver.UpdateIK(System.Int32)"],"id":"IKFootSolver","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.Animation.IKBehavior"],"inheritedMembers":["Zigurous.CharacterController.Animation.IKBehavior.animator","Zigurous.CharacterController.Animation.IKBehavior.Start","Zigurous.CharacterController.Animation.IKBehavior.OnDestroy"],"name":"IKFootSolver","nameWithType":"IKFootSolver","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation","remarks":null,"summary":"\nHandles setting the IK foot position and rotation of a character as they\nmove around uneven surfaces.\n","syntax":{"content":"public sealed class IKFootSolver : IKBehavior","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Animation.IKFootSolver"},{"children":null,"id":"groundLayers","implements":null,"inheritance":null,"inheritedMembers":null,"name":"groundLayers","nameWithType":"IKFootSolver.groundLayers","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKFootSolver","remarks":null,"summary":"\nThe layers that are detected by raycasts. Raycasts are used to\ndetermine the distance of each foot to the ground.\n","syntax":{"content":"public LayerMask groundLayers","parameters":null,"return":{"description":null,"type":"Global.LayerMask"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.IKFootSolver.groundLayers"},{"children":null,"id":"footHeight","implements":null,"inheritance":null,"inheritedMembers":null,"name":"footHeight","nameWithType":"IKFootSolver.footHeight","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKFootSolver","remarks":null,"summary":"\nThe distance from the resting position of the foot to the ground\n(depends on the model).\n","syntax":{"content":"public float footHeight","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.IKFootSolver.footHeight"},{"children":null,"id":"maxStepHeight","implements":null,"inheritance":null,"inheritedMembers":null,"name":"maxStepHeight","nameWithType":"IKFootSolver.maxStepHeight","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKFootSolver","remarks":null,"summary":"\nThe maximum distance the character can reach a surface.\n","syntax":{"content":"public float maxStepHeight","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.IKFootSolver.maxStepHeight"},{"children":null,"id":"maxGroundDistance","implements":null,"inheritance":null,"inheritedMembers":null,"name":"maxGroundDistance","nameWithType":"IKFootSolver.maxGroundDistance","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKFootSolver","remarks":null,"summary":"\nThe maximum distance to detect the ground.\n","syntax":{"content":"public float maxGroundDistance","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.IKFootSolver.maxGroundDistance"},{"children":null,"id":"positionWeightMultiplier","implements":null,"inheritance":null,"inheritedMembers":null,"name":"positionWeightMultiplier","nameWithType":"IKFootSolver.positionWeightMultiplier","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKFootSolver","remarks":null,"summary":"\nMultiplies the foot position weight of the IK solution.\n","syntax":{"content":"public float positionWeightMultiplier","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.IKFootSolver.positionWeightMultiplier"},{"children":null,"id":"rotationWeightMultiplier","implements":null,"inheritance":null,"inheritedMembers":null,"name":"rotationWeightMultiplier","nameWithType":"IKFootSolver.rotationWeightMultiplier","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKFootSolver","remarks":null,"summary":"\nMultiplies the foot rotation weight of the IK solution.\n","syntax":{"content":"public float rotationWeightMultiplier","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.IKFootSolver.rotationWeightMultiplier"},{"children":null,"id":"damping","implements":null,"inheritance":null,"inheritedMembers":null,"name":"damping","nameWithType":"IKFootSolver.damping","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKFootSolver","remarks":null,"summary":"\nHow quickly the animator body position changes. Smaller values\nchange the position more quickly.\n","syntax":{"content":"public float damping","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.IKFootSolver.damping"},{"children":null,"id":"debug","implements":null,"inheritance":null,"inheritedMembers":null,"name":"debug","nameWithType":"IKFootSolver.debug","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKFootSolver","remarks":null,"summary":"\nTurns on/off debug gizmos.\n","syntax":{"content":"public bool debug","parameters":null,"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.IKFootSolver.debug"},{"children":null,"id":"bodyPositionOffset","implements":null,"inheritance":null,"inheritedMembers":null,"name":"bodyPositionOffset","nameWithType":"IKFootSolver.bodyPositionOffset","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKFootSolver","remarks":null,"summary":"\nThe current offset of the animator body position.\n","syntax":{"content":"public float bodyPositionOffset { get; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Animation.IKFootSolver.bodyPositionOffset"},{"children":null,"id":"UpdateIK(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"UpdateIK(Int32)","nameWithType":"IKFootSolver.UpdateIK(Int32)","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKFootSolver","remarks":null,"summary":"\nUpdates the IK solution.\n","syntax":{"content":"public override void UpdateIK(int layerIndex)","parameters":[{"description":"The index of the animator layer being updated.","id":"layerIndex","type":"System.Int32"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Animation.IKFootSolver.UpdateIK(System.Int32)"}]},{"items":[{"children":["Zigurous.CharacterController.Animation.IKLookAround.lookAtPosition","Zigurous.CharacterController.Animation.IKLookAround.lookTransform","Zigurous.CharacterController.Animation.IKLookAround.maxLookAngle","Zigurous.CharacterController.Animation.IKLookAround.positionDamping","Zigurous.CharacterController.Animation.IKLookAround.Start","Zigurous.CharacterController.Animation.IKLookAround.UpdateIK(System.Int32)","Zigurous.CharacterController.Animation.IKLookAround.weight","Zigurous.CharacterController.Animation.IKLookAround.weightDamping"],"id":"IKLookAround","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.Animation.IKBehavior","Zigurous.CharacterController.Animation.IKLookBehavior"],"inheritedMembers":["Zigurous.CharacterController.Animation.IKLookBehavior.head","Zigurous.CharacterController.Animation.IKBehavior.animator","Zigurous.CharacterController.Animation.IKBehavior.OnDestroy"],"name":"IKLookAround","nameWithType":"IKLookAround","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation","remarks":null,"summary":"\nHandles setting the IK position to look around in the camera direction.\n","syntax":{"content":"public sealed class IKLookAround : IKLookBehavior","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Animation.IKLookAround"},{"children":null,"id":"lookTransform","implements":null,"inheritance":null,"inheritedMembers":null,"name":"lookTransform","nameWithType":"IKLookAround.lookTransform","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKLookAround","remarks":null,"summary":"\nThe transform that represents the direction to look around.\nIf not set Camera.main will be assigned automatically.\n","syntax":{"content":"public Transform lookTransform","parameters":null,"return":{"description":null,"type":"Global.Transform"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.IKLookAround.lookTransform"},{"children":null,"id":"lookAtPosition","implements":null,"inheritance":null,"inheritedMembers":null,"name":"lookAtPosition","nameWithType":"IKLookAround.lookAtPosition","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKLookAround","remarks":null,"summary":"\nThe point the character is looking at.\n","syntax":{"content":"public Vector3 lookAtPosition { get; }","parameters":[],"return":{"description":null,"type":"Global.Vector3"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Animation.IKLookAround.lookAtPosition"},{"children":null,"id":"weight","implements":null,"inheritance":null,"inheritedMembers":null,"name":"weight","nameWithType":"IKLookAround.weight","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKLookAround","remarks":null,"summary":"\nThe weight of the look at position (0=none, 1=full).\n","syntax":{"content":"public float weight { get; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Animation.IKLookAround.weight"},{"children":null,"id":"maxLookAngle","implements":null,"inheritance":null,"inheritedMembers":null,"name":"maxLookAngle","nameWithType":"IKLookAround.maxLookAngle","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKLookAround","remarks":null,"summary":"\nThe maximum angle the character can turn their head to look around.\n","syntax":{"content":"public float maxLookAngle","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.IKLookAround.maxLookAngle"},{"children":null,"id":"weightDamping","implements":null,"inheritance":null,"inheritedMembers":null,"name":"weightDamping","nameWithType":"IKLookAround.weightDamping","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKLookAround","remarks":null,"summary":"\nHow quickly the look at weight changes. Smaller values change the\nweight more quickly.\n","syntax":{"content":"public float weightDamping","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.IKLookAround.weightDamping"},{"children":null,"id":"positionDamping","implements":null,"inheritance":null,"inheritedMembers":null,"name":"positionDamping","nameWithType":"IKLookAround.positionDamping","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKLookAround","remarks":null,"summary":"\nHow quickly the look at position changes. Smaller values change the\nposition more quickly.\n","syntax":{"content":"public float positionDamping","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.IKLookAround.positionDamping"},{"children":null,"id":"Start","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Start()","nameWithType":"IKLookAround.Start()","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKLookAround","remarks":null,"summary":"\nA Unity lifecycle method called the first frame the behavior is enabled.\n","syntax":{"content":"protected override void Start()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Animation.IKLookAround.Start"},{"children":null,"id":"UpdateIK(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"UpdateIK(Int32)","nameWithType":"IKLookAround.UpdateIK(Int32)","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKLookAround","remarks":null,"summary":"\nUpdates the IK solution.\n","syntax":{"content":"public override void UpdateIK(int layerIndex)","parameters":[{"description":"The index of the animator layer being updated.","id":"layerIndex","type":"System.Int32"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Animation.IKLookAround.UpdateIK(System.Int32)"}]},{"items":[{"children":["Zigurous.CharacterController.Animation.IKLookAtCamera.camera","Zigurous.CharacterController.Animation.IKLookAtCamera.lookAtPosition","Zigurous.CharacterController.Animation.IKLookAtCamera.maxLookAngle","Zigurous.CharacterController.Animation.IKLookAtCamera.positionDamping","Zigurous.CharacterController.Animation.IKLookAtCamera.Start","Zigurous.CharacterController.Animation.IKLookAtCamera.UpdateIK(System.Int32)","Zigurous.CharacterController.Animation.IKLookAtCamera.weight","Zigurous.CharacterController.Animation.IKLookAtCamera.weightDamping"],"id":"IKLookAtCamera","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.Animation.IKBehavior","Zigurous.CharacterController.Animation.IKLookBehavior"],"inheritedMembers":["Zigurous.CharacterController.Animation.IKLookBehavior.head","Zigurous.CharacterController.Animation.IKBehavior.animator","Zigurous.CharacterController.Animation.IKBehavior.OnDestroy"],"name":"IKLookAtCamera","nameWithType":"IKLookAtCamera","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation","remarks":null,"summary":"\nHandles setting the IK position to look at the camera.\n","syntax":{"content":"public sealed class IKLookAtCamera : IKLookBehavior","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Animation.IKLookAtCamera"},{"children":null,"id":"camera","implements":null,"inheritance":null,"inheritedMembers":null,"name":"camera","nameWithType":"IKLookAtCamera.camera","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKLookAtCamera","remarks":null,"summary":"\nThe camera to look at.\n","syntax":{"content":"public Camera camera","parameters":null,"return":{"description":null,"type":"Global.Camera"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.IKLookAtCamera.camera"},{"children":null,"id":"lookAtPosition","implements":null,"inheritance":null,"inheritedMembers":null,"name":"lookAtPosition","nameWithType":"IKLookAtCamera.lookAtPosition","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKLookAtCamera","remarks":null,"summary":"\nThe point the character is looking at.\n","syntax":{"content":"public Vector3 lookAtPosition { get; }","parameters":[],"return":{"description":null,"type":"Global.Vector3"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Animation.IKLookAtCamera.lookAtPosition"},{"children":null,"id":"weight","implements":null,"inheritance":null,"inheritedMembers":null,"name":"weight","nameWithType":"IKLookAtCamera.weight","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKLookAtCamera","remarks":null,"summary":"\nThe weight of the look at position (0=none, 1=full).\n","syntax":{"content":"public float weight { get; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Animation.IKLookAtCamera.weight"},{"children":null,"id":"maxLookAngle","implements":null,"inheritance":null,"inheritedMembers":null,"name":"maxLookAngle","nameWithType":"IKLookAtCamera.maxLookAngle","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKLookAtCamera","remarks":null,"summary":"\nThe maximum angle the character can turn their head to look at the camera.\n","syntax":{"content":"public float maxLookAngle","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.IKLookAtCamera.maxLookAngle"},{"children":null,"id":"weightDamping","implements":null,"inheritance":null,"inheritedMembers":null,"name":"weightDamping","nameWithType":"IKLookAtCamera.weightDamping","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKLookAtCamera","remarks":null,"summary":"\nHow quickly the look at weight changes. Smaller values change the\nweight more quickly.\n","syntax":{"content":"public float weightDamping","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.IKLookAtCamera.weightDamping"},{"children":null,"id":"positionDamping","implements":null,"inheritance":null,"inheritedMembers":null,"name":"positionDamping","nameWithType":"IKLookAtCamera.positionDamping","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKLookAtCamera","remarks":null,"summary":"\nHow quickly the look at position changes. Smaller values change the\nposition more quickly.\n","syntax":{"content":"public float positionDamping","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.IKLookAtCamera.positionDamping"},{"children":null,"id":"Start","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Start()","nameWithType":"IKLookAtCamera.Start()","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKLookAtCamera","remarks":null,"summary":"\nA Unity lifecycle method called the first frame the behavior is enabled.\n","syntax":{"content":"protected override void Start()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Animation.IKLookAtCamera.Start"},{"children":null,"id":"UpdateIK(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"UpdateIK(Int32)","nameWithType":"IKLookAtCamera.UpdateIK(Int32)","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKLookAtCamera","remarks":null,"summary":"\nUpdates the IK solution.\n","syntax":{"content":"public override void UpdateIK(int layerIndex)","parameters":[{"description":"The index of the animator layer being updated.","id":"layerIndex","type":"System.Int32"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Animation.IKLookAtCamera.UpdateIK(System.Int32)"}]},{"items":[{"children":["Zigurous.CharacterController.Animation.IKLookAtTarget.lookAtPosition","Zigurous.CharacterController.Animation.IKLookAtTarget.maxDistance","Zigurous.CharacterController.Animation.IKLookAtTarget.maxHeightDifference","Zigurous.CharacterController.Animation.IKLookAtTarget.maxLookAngle","Zigurous.CharacterController.Animation.IKLookAtTarget.obstacleLayers","Zigurous.CharacterController.Animation.IKLookAtTarget.positionDamping","Zigurous.CharacterController.Animation.IKLookAtTarget.target","Zigurous.CharacterController.Animation.IKLookAtTarget.targetLayers","Zigurous.CharacterController.Animation.IKLookAtTarget.targetOverride","Zigurous.CharacterController.Animation.IKLookAtTarget.UpdateIK(System.Int32)","Zigurous.CharacterController.Animation.IKLookAtTarget.weight","Zigurous.CharacterController.Animation.IKLookAtTarget.weightDamping"],"id":"IKLookAtTarget","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.Animation.IKBehavior","Zigurous.CharacterController.Animation.IKLookBehavior"],"inheritedMembers":["Zigurous.CharacterController.Animation.IKLookBehavior.head","Zigurous.CharacterController.Animation.IKLookBehavior.Start","Zigurous.CharacterController.Animation.IKBehavior.animator","Zigurous.CharacterController.Animation.IKBehavior.OnDestroy"],"name":"IKLookAtTarget","nameWithType":"IKLookAtTarget","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation","remarks":null,"summary":"\nHandles setting the IK position to look at nearby target objects.\n","syntax":{"content":"public sealed class IKLookAtTarget : IKLookBehavior","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Animation.IKLookAtTarget"},{"children":null,"id":"target","implements":null,"inheritance":null,"inheritedMembers":null,"name":"target","nameWithType":"IKLookAtTarget.target","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKLookAtTarget","remarks":null,"summary":"\nThe current target being looked at.\n","syntax":{"content":"public Transform target { get; }","parameters":[],"return":{"description":null,"type":"Global.Transform"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Animation.IKLookAtTarget.target"},{"children":null,"id":"targetOverride","implements":null,"inheritance":null,"inheritedMembers":null,"name":"targetOverride","nameWithType":"IKLookAtTarget.targetOverride","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKLookAtTarget","remarks":null,"summary":"\nOverride the target to look at.\n","syntax":{"content":"public Transform targetOverride","parameters":null,"return":{"description":null,"type":"Global.Transform"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.IKLookAtTarget.targetOverride"},{"children":null,"id":"targetLayers","implements":null,"inheritance":null,"inheritedMembers":null,"name":"targetLayers","nameWithType":"IKLookAtTarget.targetLayers","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKLookAtTarget","remarks":null,"summary":"\nThe layers to scan for targets.\n","syntax":{"content":"public LayerMask targetLayers","parameters":null,"return":{"description":null,"type":"Global.LayerMask"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.IKLookAtTarget.targetLayers"},{"children":null,"id":"obstacleLayers","implements":null,"inheritance":null,"inheritedMembers":null,"name":"obstacleLayers","nameWithType":"IKLookAtTarget.obstacleLayers","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKLookAtTarget","remarks":null,"summary":"\nThe layers to scan for obstacles to determine if a target is obstructed.\n","syntax":{"content":"public LayerMask obstacleLayers","parameters":null,"return":{"description":null,"type":"Global.LayerMask"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.IKLookAtTarget.obstacleLayers"},{"children":null,"id":"lookAtPosition","implements":null,"inheritance":null,"inheritedMembers":null,"name":"lookAtPosition","nameWithType":"IKLookAtTarget.lookAtPosition","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKLookAtTarget","remarks":null,"summary":"\nThe point the character is looking at.\n","syntax":{"content":"public Vector3 lookAtPosition { get; }","parameters":[],"return":{"description":null,"type":"Global.Vector3"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Animation.IKLookAtTarget.lookAtPosition"},{"children":null,"id":"weight","implements":null,"inheritance":null,"inheritedMembers":null,"name":"weight","nameWithType":"IKLookAtTarget.weight","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKLookAtTarget","remarks":null,"summary":"\nThe weight of the look at position (0=none, 1=full).\n","syntax":{"content":"public float weight { get; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Animation.IKLookAtTarget.weight"},{"children":null,"id":"maxLookAngle","implements":null,"inheritance":null,"inheritedMembers":null,"name":"maxLookAngle","nameWithType":"IKLookAtTarget.maxLookAngle","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKLookAtTarget","remarks":null,"summary":"\nThe maximum angle the character can turn their head to look at a target.\n","syntax":{"content":"public float maxLookAngle","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.IKLookAtTarget.maxLookAngle"},{"children":null,"id":"maxDistance","implements":null,"inheritance":null,"inheritedMembers":null,"name":"maxDistance","nameWithType":"IKLookAtTarget.maxDistance","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKLookAtTarget","remarks":null,"summary":"\nThe maximum distance away the character will look at a target.\n","syntax":{"content":"public float maxDistance","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.IKLookAtTarget.maxDistance"},{"children":null,"id":"maxHeightDifference","implements":null,"inheritance":null,"inheritedMembers":null,"name":"maxHeightDifference","nameWithType":"IKLookAtTarget.maxHeightDifference","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKLookAtTarget","remarks":null,"summary":"\nThe maximum elevation difference the character will look at a target.\n","syntax":{"content":"public float maxHeightDifference","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.IKLookAtTarget.maxHeightDifference"},{"children":null,"id":"weightDamping","implements":null,"inheritance":null,"inheritedMembers":null,"name":"weightDamping","nameWithType":"IKLookAtTarget.weightDamping","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKLookAtTarget","remarks":null,"summary":"\nHow quickly the look at weight changes. Smaller values change the\nweight more quickly.\n","syntax":{"content":"public float weightDamping","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.IKLookAtTarget.weightDamping"},{"children":null,"id":"positionDamping","implements":null,"inheritance":null,"inheritedMembers":null,"name":"positionDamping","nameWithType":"IKLookAtTarget.positionDamping","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKLookAtTarget","remarks":null,"summary":"\nHow quickly the look at position changes. Smaller values change the\nposition more quickly.\n","syntax":{"content":"public float positionDamping","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Animation.IKLookAtTarget.positionDamping"},{"children":null,"id":"UpdateIK(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"UpdateIK(Int32)","nameWithType":"IKLookAtTarget.UpdateIK(Int32)","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKLookAtTarget","remarks":null,"summary":"\nUpdates the IK solution.\n","syntax":{"content":"public override void UpdateIK(int layerIndex)","parameters":[{"description":"The index of the animator layer being updated.","id":"layerIndex","type":"System.Int32"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Animation.IKLookAtTarget.UpdateIK(System.Int32)"}]},{"items":[{"children":["Zigurous.CharacterController.Animation.IKLookBehavior.head","Zigurous.CharacterController.Animation.IKLookBehavior.Start"],"id":"IKLookBehavior","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.Animation.IKBehavior"],"inheritedMembers":["Zigurous.CharacterController.Animation.IKBehavior.animator","Zigurous.CharacterController.Animation.IKBehavior.OnDestroy","Zigurous.CharacterController.Animation.IKBehavior.UpdateIK(System.Int32)"],"name":"IKLookBehavior","nameWithType":"IKLookBehavior","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation","remarks":null,"summary":"\nAn IK behavior attached to an animator component.\n","syntax":{"content":"public abstract class IKLookBehavior : IKBehavior","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Animation.IKLookBehavior"},{"children":null,"id":"head","implements":null,"inheritance":null,"inheritedMembers":null,"name":"head","nameWithType":"IKLookBehavior.head","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKLookBehavior","remarks":null,"summary":"\nThe transform of the head bone.\n","syntax":{"content":"public Transform head { get; }","parameters":[],"return":{"description":null,"type":"Global.Transform"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Animation.IKLookBehavior.head"},{"children":null,"id":"Start","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Start()","nameWithType":"IKLookBehavior.Start()","namespace":"Zigurous.CharacterController.Animation","parent":"Zigurous.CharacterController.Animation.IKLookBehavior","remarks":null,"summary":"\nA Unity lifecycle method called the first frame the behavior is enabled.\n","syntax":{"content":"protected override void Start()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Animation.IKLookBehavior.Start"}]},{"items":[{"children":["Zigurous.CharacterController.Animation.AnimationSetting","Zigurous.CharacterController.Animation.AnimationSetting.Property","Zigurous.CharacterController.Animation.AnimationSettings","Zigurous.CharacterController.Animation.AnimationState","Zigurous.CharacterController.Animation.AnimatorParameter","Zigurous.CharacterController.Animation.IKBehavior","Zigurous.CharacterController.Animation.IKBehaviorManager","Zigurous.CharacterController.Animation.IKFootData","Zigurous.CharacterController.Animation.IKFootSolver","Zigurous.CharacterController.Animation.IKLookAround","Zigurous.CharacterController.Animation.IKLookAtCamera","Zigurous.CharacterController.Animation.IKLookAtTarget","Zigurous.CharacterController.Animation.IKLookBehavior"],"id":"Zigurous.CharacterController.Animation","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Zigurous.CharacterController.Animation","nameWithType":"Zigurous.CharacterController.Animation","namespace":null,"parent":null,"remarks":null,"summary":null,"syntax":null,"type":"Namespace","uid":"Zigurous.CharacterController.Animation"}]},{"items":[{"children":["Zigurous.CharacterController.CharacterModelSwitcher.Model.animator","Zigurous.CharacterController.CharacterModelSwitcher.Model.parent"],"id":"CharacterModelSwitcher.Model","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"CharacterModelSwitcher.Model","nameWithType":"CharacterModelSwitcher.Model","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nA character model representation, including the parent game object,\nanimator component, and whether the model is active.\n","syntax":{"content":"[Serializable]\npublic sealed class Model","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.CharacterModelSwitcher.Model"},{"children":null,"id":"parent","implements":null,"inheritance":null,"inheritedMembers":null,"name":"parent","nameWithType":"CharacterModelSwitcher.Model.parent","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.CharacterModelSwitcher.Model","remarks":null,"summary":"\nThe parent game object of the character model. This object is\nactivated/deactivated based on the active character model.\n","syntax":{"content":"public GameObject parent","parameters":null,"return":{"description":null,"type":"Global.GameObject"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.CharacterModelSwitcher.Model.parent"},{"children":null,"id":"animator","implements":null,"inheritance":null,"inheritedMembers":null,"name":"animator","nameWithType":"CharacterModelSwitcher.Model.animator","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.CharacterModelSwitcher.Model","remarks":null,"summary":"\nThe animator component of the character model. This component is\nassigned to the movement controller when the character model\nbecomes active.\n","syntax":{"content":"public Animator animator","parameters":null,"return":{"description":null,"type":"Global.Animator"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.CharacterModelSwitcher.Model.animator"}]},{"items":[{"children":["Zigurous.CharacterController.CharacterModelSwitcher.ActivateModel(System.Int32)","Zigurous.CharacterController.CharacterModelSwitcher.activeModel","Zigurous.CharacterController.CharacterModelSwitcher.models","Zigurous.CharacterController.CharacterModelSwitcher.movementController"],"id":"CharacterModelSwitcher","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"CharacterModelSwitcher","nameWithType":"CharacterModelSwitcher","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nHandles switching between different character models, including setting\nthe animator on a movement controller to the active model.\n","syntax":{"content":"public sealed class CharacterModelSwitcher : MonoBehaviour","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.CharacterModelSwitcher"},{"children":null,"id":"movementController","implements":null,"inheritance":null,"inheritedMembers":null,"name":"movementController","nameWithType":"CharacterModelSwitcher.movementController","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.CharacterModelSwitcher","remarks":null,"summary":"\nThe movement controller that will be updated to use the character\nmodel&apos;s animator component when active.\n","syntax":{"content":"public MovementController movementController","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementController"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.CharacterModelSwitcher.movementController"},{"children":null,"id":"models","implements":null,"inheritance":null,"inheritedMembers":null,"name":"models","nameWithType":"CharacterModelSwitcher.models","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.CharacterModelSwitcher","remarks":null,"summary":"\nThe character models that can be switched to and from.\n","syntax":{"content":"public CharacterModelSwitcher.Model[] models","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.CharacterModelSwitcher.Model[]"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.CharacterModelSwitcher.models"},{"children":null,"id":"activeModel","implements":null,"inheritance":null,"inheritedMembers":null,"name":"activeModel","nameWithType":"CharacterModelSwitcher.activeModel","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.CharacterModelSwitcher","remarks":null,"summary":"\nThe active character model.\n","syntax":{"content":"public CharacterModelSwitcher.Model activeModel { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.CharacterController.CharacterModelSwitcher.Model"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.CharacterModelSwitcher.activeModel"},{"children":null,"id":"ActivateModel(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ActivateModel(Int32)","nameWithType":"CharacterModelSwitcher.ActivateModel(Int32)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.CharacterModelSwitcher","remarks":null,"summary":null,"syntax":{"content":"public void ActivateModel(int index)","parameters":[{"description":null,"id":"index","type":"System.Int32"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.CharacterModelSwitcher.ActivateModel(System.Int32)"}]},{"items":[{"children":[],"id":"EdgeSlip","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementProcess","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.EdgeSlipSettings}"],"inheritedMembers":["Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.EdgeSlipSettings}.settings","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.EdgeSlipSettings}.enabled","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.EdgeSlipSettings}.OnPreUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.EdgeSlipSettings}.OnEnable","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.EdgeSlipSettings}.OnDisable","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.EdgeSlipSettings}.StartCoroutine(System.Collections.IEnumerator)","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.EdgeSlipSettings}.StopCoroutine(Coroutine)","Zigurous.CharacterController.MovementProcess.controller","Zigurous.CharacterController.MovementProcess.registered","Zigurous.CharacterController.MovementProcess.order","Zigurous.CharacterController.MovementProcess.id","Zigurous.CharacterController.MovementProcess.OnRegister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUnregister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementProcess.OnPostUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementProcess.OnMovementProfileChanged(Zigurous.CharacterController.MovementProfile,Zigurous.CharacterController.MovementProfile)"],"name":"EdgeSlip","nameWithType":"EdgeSlip","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nHandles slipping the character off surface edges to prevent them from\nappearing as though they are floating.\n","syntax":{"content":"public sealed class EdgeSlip : MovementBehavior<EdgeSlipSettings>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.EdgeSlip"}]},{"items":[{"children":["Zigurous.CharacterController.EdgeSlipSettings.slipFactor"],"id":"EdgeSlipSettings","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementSettings","Zigurous.CharacterController.MovementBehaviorSettings","Zigurous.CharacterController.MovementBehaviorSettings{Zigurous.CharacterController.EdgeSlip}"],"inheritedMembers":["Zigurous.CharacterController.MovementSettings.active","Zigurous.CharacterController.MovementSettings.enabled","Zigurous.CharacterController.MovementSettings.isActiveAndEnabled","Zigurous.CharacterController.MovementSettings.OnActivate(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementSettings.OnDeactivate(Zigurous.CharacterController.MovementController)"],"name":"EdgeSlipSettings","nameWithType":"EdgeSlipSettings","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nSettings for edge slip.\n","syntax":{"content":"[Serializable]\npublic class EdgeSlipSettings : MovementBehaviorSettings<EdgeSlip>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.EdgeSlipSettings"},{"children":null,"id":"slipFactor","implements":null,"inheritance":null,"inheritedMembers":null,"name":"slipFactor","nameWithType":"EdgeSlipSettings.slipFactor","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.EdgeSlipSettings","remarks":null,"summary":"\nThe strength of the force of slipping off an edge.\n","syntax":{"content":"public float slipFactor","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.EdgeSlipSettings.slipFactor"}]},{"items":[{"children":["Zigurous.CharacterController.Effects.CustomMovementEffect.activated","Zigurous.CharacterController.Effects.CustomMovementEffect.condition","Zigurous.CharacterController.Effects.CustomMovementEffect.deactivated","Zigurous.CharacterController.Effects.CustomMovementEffect.OnEffectActivated","Zigurous.CharacterController.Effects.CustomMovementEffect.OnEffectDeactivated"],"id":"CustomMovementEffect","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementProcess","Zigurous.CharacterController.MovementEffect"],"inheritedMembers":["Zigurous.CharacterController.MovementProcess.controller","Zigurous.CharacterController.MovementProcess.registered","Zigurous.CharacterController.MovementProcess.order","Zigurous.CharacterController.MovementProcess.id","Zigurous.CharacterController.MovementProcess.OnRegister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUnregister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementProcess.OnPreUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementProcess.OnPostUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementProcess.OnMovementProfileChanged(Zigurous.CharacterController.MovementProfile,Zigurous.CharacterController.MovementProfile)"],"name":"CustomMovementEffect","nameWithType":"CustomMovementEffect","namespace":"Zigurous.CharacterController.Effects","parent":"Zigurous.CharacterController.Effects","remarks":null,"summary":"\nA custom effect type that invokes a unity event when triggered.\n","syntax":{"content":"public class CustomMovementEffect : MovementEffect","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Effects.CustomMovementEffect"},{"children":null,"id":"condition","implements":null,"inheritance":null,"inheritedMembers":null,"name":"condition","nameWithType":"CustomMovementEffect.condition","namespace":"Zigurous.CharacterController.Effects","parent":"Zigurous.CharacterController.Effects.CustomMovementEffect","remarks":null,"summary":"\nThe movement condition(s) that trigger the effect.\n","syntax":{"content":"public override MovementFlags condition { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Effects.CustomMovementEffect.condition"},{"children":null,"id":"activated","implements":null,"inheritance":null,"inheritedMembers":null,"name":"activated","nameWithType":"CustomMovementEffect.activated","namespace":"Zigurous.CharacterController.Effects","parent":"Zigurous.CharacterController.Effects.CustomMovementEffect","remarks":null,"summary":"\nThe event that is invoked when the effect is activated.\n","syntax":{"content":"public UnityEvent activated","parameters":null,"return":{"description":null,"type":"Global.UnityEvent"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Effects.CustomMovementEffect.activated"},{"children":null,"id":"deactivated","implements":null,"inheritance":null,"inheritedMembers":null,"name":"deactivated","nameWithType":"CustomMovementEffect.deactivated","namespace":"Zigurous.CharacterController.Effects","parent":"Zigurous.CharacterController.Effects.CustomMovementEffect","remarks":null,"summary":"\nThe event that is invoked when the effect is deactivated.\n","syntax":{"content":"public UnityEvent deactivated","parameters":null,"return":{"description":null,"type":"Global.UnityEvent"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Effects.CustomMovementEffect.deactivated"},{"children":null,"id":"OnEffectActivated","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnEffectActivated()","nameWithType":"CustomMovementEffect.OnEffectActivated()","namespace":"Zigurous.CharacterController.Effects","parent":"Zigurous.CharacterController.Effects.CustomMovementEffect","remarks":null,"summary":null,"syntax":{"content":"protected override void OnEffectActivated()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Effects.CustomMovementEffect.OnEffectActivated"},{"children":null,"id":"OnEffectDeactivated","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnEffectDeactivated()","nameWithType":"CustomMovementEffect.OnEffectDeactivated()","namespace":"Zigurous.CharacterController.Effects","parent":"Zigurous.CharacterController.Effects.CustomMovementEffect","remarks":null,"summary":null,"syntax":{"content":"protected override void OnEffectDeactivated()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Effects.CustomMovementEffect.OnEffectDeactivated"}]},{"items":[{"children":["Zigurous.CharacterController.Effects.CustomMovementEffect"],"id":"Zigurous.CharacterController.Effects","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Zigurous.CharacterController.Effects","nameWithType":"Zigurous.CharacterController.Effects","namespace":null,"parent":null,"remarks":null,"summary":null,"syntax":null,"type":"Namespace","uid":"Zigurous.CharacterController.Effects"}]},{"items":[{"children":[],"id":"FallHeight.DamageEvent","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"FallHeight.DamageEvent","nameWithType":"FallHeight.DamageEvent","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":null,"syntax":{"content":"[Serializable]\npublic class DamageEvent : UnityEvent<float>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.FallHeight.DamageEvent"}]},{"items":[{"children":["Zigurous.CharacterController.FallHeight.damage","Zigurous.CharacterController.FallHeight.damaged","Zigurous.CharacterController.FallHeight.elevation","Zigurous.CharacterController.FallHeight.height","Zigurous.CharacterController.FallHeight.recovering","Zigurous.CharacterController.FallHeight.recoveryDuration","Zigurous.CharacterController.FallHeight.recoveryPercent","Zigurous.CharacterController.FallHeight.recoveryTimeRemaining"],"id":"FallHeight","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementProcess","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.FallHeightSettings}"],"inheritedMembers":["Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.FallHeightSettings}.settings","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.FallHeightSettings}.enabled","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.FallHeightSettings}.OnPreUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.FallHeightSettings}.OnEnable","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.FallHeightSettings}.OnDisable","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.FallHeightSettings}.StartCoroutine(System.Collections.IEnumerator)","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.FallHeightSettings}.StopCoroutine(Coroutine)","Zigurous.CharacterController.MovementProcess.controller","Zigurous.CharacterController.MovementProcess.registered","Zigurous.CharacterController.MovementProcess.order","Zigurous.CharacterController.MovementProcess.id","Zigurous.CharacterController.MovementProcess.OnRegister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUnregister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementProcess.OnPostUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementProcess.OnMovementProfileChanged(Zigurous.CharacterController.MovementProfile,Zigurous.CharacterController.MovementProfile)"],"name":"FallHeight","nameWithType":"FallHeight","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nHandles fall recovery and damage after the character lands from high heights.\n","syntax":{"content":"public sealed class FallHeight : MovementBehavior<FallHeightSettings>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.FallHeight"},{"children":null,"id":"damaged","implements":null,"inheritance":null,"inheritedMembers":null,"name":"damaged","nameWithType":"FallHeight.damaged","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.FallHeight","remarks":null,"summary":"\nThe event invoked when the character takes fall damage.\n","syntax":{"content":"public FallHeight.DamageEvent damaged","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.FallHeight.DamageEvent"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.FallHeight.damaged"},{"children":null,"id":"height","implements":null,"inheritance":null,"inheritedMembers":null,"name":"height","nameWithType":"FallHeight.height","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.FallHeight","remarks":null,"summary":"\nThe height of the character&apos;s last fall.\n","syntax":{"content":"public float height { get; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.FallHeight.height"},{"children":null,"id":"damage","implements":null,"inheritance":null,"inheritedMembers":null,"name":"damage","nameWithType":"FallHeight.damage","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.FallHeight","remarks":null,"summary":"\nThe amount of damage the character took from the last fall.\n","syntax":{"content":"public float damage { get; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.FallHeight.damage"},{"children":null,"id":"elevation","implements":null,"inheritance":null,"inheritedMembers":null,"name":"elevation","nameWithType":"FallHeight.elevation","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.FallHeight","remarks":null,"summary":"\nThe elevation of the character while on the ground.\n","syntax":{"content":"public float elevation { get; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.FallHeight.elevation"},{"children":null,"id":"recoveryTimeRemaining","implements":null,"inheritance":null,"inheritedMembers":null,"name":"recoveryTimeRemaining","nameWithType":"FallHeight.recoveryTimeRemaining","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.FallHeight","remarks":null,"summary":"\nThe amount of seconds left before the character finishes recovering\nfrom the fall.\n","syntax":{"content":"public float recoveryTimeRemaining { get; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.FallHeight.recoveryTimeRemaining"},{"children":null,"id":"recoveryDuration","implements":null,"inheritance":null,"inheritedMembers":null,"name":"recoveryDuration","nameWithType":"FallHeight.recoveryDuration","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.FallHeight","remarks":null,"summary":"\nThe amount of seconds the current fall recovery will last.\n","syntax":{"content":"public float recoveryDuration { get; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.FallHeight.recoveryDuration"},{"children":null,"id":"recoveryPercent","implements":null,"inheritance":null,"inheritedMembers":null,"name":"recoveryPercent","nameWithType":"FallHeight.recoveryPercent","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.FallHeight","remarks":null,"summary":"\nThe completion percentage of the current fall recovery.\n","syntax":{"content":"public float recoveryPercent { get; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.FallHeight.recoveryPercent"},{"children":null,"id":"recovering","implements":null,"inheritance":null,"inheritedMembers":null,"name":"recovering","nameWithType":"FallHeight.recovering","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.FallHeight","remarks":null,"summary":"\nWhether the character is currently recovering from a fall.\n","syntax":{"content":"public bool recovering { get; }","parameters":[],"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.FallHeight.recovering"}]},{"items":[{"children":["Zigurous.CharacterController.FallHeightSettings.damage","Zigurous.CharacterController.FallHeightSettings.recoveryDuration"],"id":"FallHeightSettings","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementSettings","Zigurous.CharacterController.MovementBehaviorSettings","Zigurous.CharacterController.MovementBehaviorSettings{Zigurous.CharacterController.FallHeight}"],"inheritedMembers":["Zigurous.CharacterController.MovementSettings.active","Zigurous.CharacterController.MovementSettings.enabled","Zigurous.CharacterController.MovementSettings.isActiveAndEnabled","Zigurous.CharacterController.MovementSettings.OnActivate(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementSettings.OnDeactivate(Zigurous.CharacterController.MovementController)"],"name":"FallHeightSettings","nameWithType":"FallHeightSettings","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nSettings for fall height.\n","syntax":{"content":"[Serializable]\npublic class FallHeightSettings : MovementBehaviorSettings<FallHeight>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.FallHeightSettings"},{"children":null,"id":"recoveryDuration","implements":null,"inheritance":null,"inheritedMembers":null,"name":"recoveryDuration","nameWithType":"FallHeightSettings.recoveryDuration","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.FallHeightSettings","remarks":null,"summary":"\nFor a given fall height (x-axis), the amount of seconds it takes the\ncharacter to begin moving again after landing (y-axis).\n","syntax":{"content":"public AnimationCurve recoveryDuration","parameters":null,"return":{"description":null,"type":"Global.AnimationCurve"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.FallHeightSettings.recoveryDuration"},{"children":null,"id":"damage","implements":null,"inheritance":null,"inheritedMembers":null,"name":"damage","nameWithType":"FallHeightSettings.damage","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.FallHeightSettings","remarks":null,"summary":"\nFor a given fall height (x-axis), the percentage of damage the\ncharacter receives after landing (y-axis).\n","syntax":{"content":"public AnimationCurve damage","parameters":null,"return":{"description":null,"type":"Global.AnimationCurve"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.FallHeightSettings.damage"}]},{"items":[{"children":["Zigurous.CharacterController.IgnoreCollisionEffect.condition","Zigurous.CharacterController.IgnoreCollisionEffect.layer1","Zigurous.CharacterController.IgnoreCollisionEffect.layer2","Zigurous.CharacterController.IgnoreCollisionEffect.OnEffectActivated","Zigurous.CharacterController.IgnoreCollisionEffect.OnEffectDeactivated"],"id":"IgnoreCollisionEffect","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementProcess","Zigurous.CharacterController.MovementEffect"],"inheritedMembers":["Zigurous.CharacterController.MovementProcess.controller","Zigurous.CharacterController.MovementProcess.registered","Zigurous.CharacterController.MovementProcess.order","Zigurous.CharacterController.MovementProcess.id","Zigurous.CharacterController.MovementProcess.OnRegister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUnregister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementProcess.OnPreUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementProcess.OnPostUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementProcess.OnMovementProfileChanged(Zigurous.CharacterController.MovementProfile,Zigurous.CharacterController.MovementProfile)"],"name":"IgnoreCollisionEffect","nameWithType":"IgnoreCollisionEffect","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nDisables collision between two layers when a movement state is activated.\nThe collision is enabled again when the movement state is deactivated.\n","syntax":{"content":"public class IgnoreCollisionEffect : MovementEffect","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.IgnoreCollisionEffect"},{"children":null,"id":"condition","implements":null,"inheritance":null,"inheritedMembers":null,"name":"condition","nameWithType":"IgnoreCollisionEffect.condition","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.IgnoreCollisionEffect","remarks":null,"summary":"\nThe movement condition(s) that trigger the effect.\n","syntax":{"content":"public override MovementFlags condition { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.IgnoreCollisionEffect.condition"},{"children":null,"id":"layer1","implements":null,"inheritance":null,"inheritedMembers":null,"name":"layer1","nameWithType":"IgnoreCollisionEffect.layer1","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.IgnoreCollisionEffect","remarks":null,"summary":"\nThe first layer to ignore.\n","syntax":{"content":"public string layer1","parameters":null,"return":{"description":null,"type":"System.String"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.IgnoreCollisionEffect.layer1"},{"children":null,"id":"layer2","implements":null,"inheritance":null,"inheritedMembers":null,"name":"layer2","nameWithType":"IgnoreCollisionEffect.layer2","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.IgnoreCollisionEffect","remarks":null,"summary":"\nThe second layer to ignore.\n","syntax":{"content":"public string layer2","parameters":null,"return":{"description":null,"type":"System.String"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.IgnoreCollisionEffect.layer2"},{"children":null,"id":"OnEffectActivated","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnEffectActivated()","nameWithType":"IgnoreCollisionEffect.OnEffectActivated()","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.IgnoreCollisionEffect","remarks":null,"summary":null,"syntax":{"content":"protected override void OnEffectActivated()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.IgnoreCollisionEffect.OnEffectActivated"},{"children":null,"id":"OnEffectDeactivated","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnEffectDeactivated()","nameWithType":"IgnoreCollisionEffect.OnEffectDeactivated()","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.IgnoreCollisionEffect","remarks":null,"summary":null,"syntax":{"content":"protected override void OnEffectDeactivated()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.IgnoreCollisionEffect.OnEffectDeactivated"}]},{"items":[{"children":["Zigurous.CharacterController.Input.InputAxis.#ctor(System.String,System.Single,System.Boolean,System.Boolean)","Zigurous.CharacterController.Input.InputAxis.inverted","Zigurous.CharacterController.Input.InputAxis.IsDefined","Zigurous.CharacterController.Input.InputAxis.name","Zigurous.CharacterController.Input.InputAxis.op_Implicit(System.String)~Zigurous.CharacterController.Input.InputAxis","Zigurous.CharacterController.Input.InputAxis.sensitivity","Zigurous.CharacterController.Input.InputAxis.timescaled"],"id":"InputAxis","implements":null,"inheritance":null,"inheritedMembers":null,"name":"InputAxis","nameWithType":"InputAxis","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input","remarks":null,"summary":"\nAn input axis setting.\n","syntax":{"content":"[Serializable]\npublic struct InputAxis","parameters":null,"return":null,"typeParameters":null},"type":"Struct","uid":"Zigurous.CharacterController.Input.InputAxis"},{"children":null,"id":"name","implements":null,"inheritance":null,"inheritedMembers":null,"name":"name","nameWithType":"InputAxis.name","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputAxis","remarks":null,"summary":"\nThe name of the input axis.\n","syntax":{"content":"public string name","parameters":null,"return":{"description":null,"type":"System.String"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Input.InputAxis.name"},{"children":null,"id":"sensitivity","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sensitivity","nameWithType":"InputAxis.sensitivity","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputAxis","remarks":null,"summary":"\nThe input sensitivity multiplier.\n","syntax":{"content":"public float sensitivity","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Input.InputAxis.sensitivity"},{"children":null,"id":"inverted","implements":null,"inheritance":null,"inheritedMembers":null,"name":"inverted","nameWithType":"InputAxis.inverted","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputAxis","remarks":null,"summary":"\nInverts the input axis value.\n","syntax":{"content":"public bool inverted","parameters":null,"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Input.InputAxis.inverted"},{"children":null,"id":"timescaled","implements":null,"inheritance":null,"inheritedMembers":null,"name":"timescaled","nameWithType":"InputAxis.timescaled","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputAxis","remarks":null,"summary":"\nScales the input axis value by delta time.\n","syntax":{"content":"public bool timescaled","parameters":null,"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Input.InputAxis.timescaled"},{"children":null,"id":"#ctor(System.String,System.Single,System.Boolean,System.Boolean)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"InputAxis(String, Single, Boolean, Boolean)","nameWithType":"InputAxis.InputAxis(String, Single, Boolean, Boolean)","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputAxis","remarks":null,"summary":"\nCreates an input button setting with the specified name.\n","syntax":{"content":"public InputAxis(string name, float sensitivity = 1F, bool inverted = false, bool timescaled = false)","parameters":[{"description":"The name of the input button.","id":"name","type":"System.String"},{"description":"The input sensitivity multiplier (default=1).","id":"sensitivity","type":"System.Single"},{"description":"Inverts the input axis value (default=false).","id":"inverted","type":"System.Boolean"},{"description":"Scales the input axis value by delta time (default=false).","id":"timescaled","type":"System.Boolean"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.CharacterController.Input.InputAxis.#ctor(System.String,System.Single,System.Boolean,System.Boolean)"},{"children":null,"id":"IsDefined","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsDefined()","nameWithType":"InputAxis.IsDefined()","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputAxis","remarks":null,"summary":"\nChecks if the input name is not null or empty.\n","syntax":{"content":"public bool IsDefined()","parameters":null,"return":{"description":"True if the input name is not null or empty.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Input.InputAxis.IsDefined"},{"children":null,"id":"op_Implicit(System.String)~Zigurous.CharacterController.Input.InputAxis","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Implicit(String to InputAxis)","nameWithType":"InputAxis.Implicit(String to InputAxis)","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputAxis","remarks":null,"summary":"\nImplicitly converts the input name to an input axis setting.\n","syntax":{"content":"public static implicit operator InputAxis(string name)","parameters":[{"description":"The name of the input axis.","id":"name","type":"System.String"}],"return":{"description":null,"type":"Zigurous.CharacterController.Input.InputAxis"},"typeParameters":null},"type":"Operator","uid":"Zigurous.CharacterController.Input.InputAxis.op_Implicit(System.String)~Zigurous.CharacterController.Input.InputAxis"}]},{"items":[{"children":["Zigurous.CharacterController.Input.InputButton.#ctor(System.String)","Zigurous.CharacterController.Input.InputButton.IsDefined","Zigurous.CharacterController.Input.InputButton.name","Zigurous.CharacterController.Input.InputButton.op_Implicit(System.String)~Zigurous.CharacterController.Input.InputButton"],"id":"InputButton","implements":null,"inheritance":null,"inheritedMembers":null,"name":"InputButton","nameWithType":"InputButton","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input","remarks":null,"summary":"\nAn input button setting.\n","syntax":{"content":"[Serializable]\npublic struct InputButton","parameters":null,"return":null,"typeParameters":null},"type":"Struct","uid":"Zigurous.CharacterController.Input.InputButton"},{"children":null,"id":"name","implements":null,"inheritance":null,"inheritedMembers":null,"name":"name","nameWithType":"InputButton.name","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputButton","remarks":null,"summary":"\nThe name of the input button.\n","syntax":{"content":"public string name","parameters":null,"return":{"description":null,"type":"System.String"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Input.InputButton.name"},{"children":null,"id":"#ctor(System.String)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"InputButton(String)","nameWithType":"InputButton.InputButton(String)","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputButton","remarks":null,"summary":"\nCreates an input button setting with the specified name.\n","syntax":{"content":"public InputButton(string name)","parameters":[{"description":"The name of the input button.","id":"name","type":"System.String"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.CharacterController.Input.InputButton.#ctor(System.String)"},{"children":null,"id":"IsDefined","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsDefined()","nameWithType":"InputButton.IsDefined()","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputButton","remarks":null,"summary":"\nChecks if the input name is not null or empty.\n","syntax":{"content":"public bool IsDefined()","parameters":null,"return":{"description":"True if the input name is not null or empty.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Input.InputButton.IsDefined"},{"children":null,"id":"op_Implicit(System.String)~Zigurous.CharacterController.Input.InputButton","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Implicit(String to InputButton)","nameWithType":"InputButton.Implicit(String to InputButton)","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputButton","remarks":null,"summary":"\nImplicitly converts the input name to an input button setting.\n","syntax":{"content":"public static implicit operator InputButton(string name)","parameters":[{"description":"The name of the input button.","id":"name","type":"System.String"}],"return":{"description":null,"type":"Zigurous.CharacterController.Input.InputButton"},"typeParameters":null},"type":"Operator","uid":"Zigurous.CharacterController.Input.InputButton.op_Implicit(System.String)~Zigurous.CharacterController.Input.InputButton"}]},{"items":[{"children":["Zigurous.CharacterController.Input.InputHandler.GetAxis(Zigurous.CharacterController.Input.InputAxis)","Zigurous.CharacterController.Input.InputHandler.GetButtonHeld(Zigurous.CharacterController.Input.InputButton)","Zigurous.CharacterController.Input.InputHandler.GetButtonPressed(Zigurous.CharacterController.Input.InputButton)","Zigurous.CharacterController.Input.InputHandler.GetButtonReleased(Zigurous.CharacterController.Input.InputButton)"],"id":"InputHandler","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"InputHandler","nameWithType":"InputHandler","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input","remarks":null,"summary":"\nA type of input handler that reads input values from the system.\n","syntax":{"content":"public abstract class InputHandler : ScriptableObject","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Input.InputHandler"},{"children":null,"id":"GetAxis(Zigurous.CharacterController.Input.InputAxis)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetAxis(InputAxis)","nameWithType":"InputHandler.GetAxis(InputAxis)","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputHandler","remarks":null,"summary":"\nGets the input value for the specified input axis.\n","syntax":{"content":"public abstract float GetAxis(InputAxis axis)","parameters":[{"description":"The input axis to read.","id":"axis","type":"Zigurous.CharacterController.Input.InputAxis"}],"return":{"description":"The input value.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Input.InputHandler.GetAxis(Zigurous.CharacterController.Input.InputAxis)"},{"children":null,"id":"GetButtonPressed(Zigurous.CharacterController.Input.InputButton)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetButtonPressed(InputButton)","nameWithType":"InputHandler.GetButtonPressed(InputButton)","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputHandler","remarks":null,"summary":"\nChecks if the specified input button was pressed during this frame.\n","syntax":{"content":"public abstract bool GetButtonPressed(InputButton button)","parameters":[{"description":"The input button to read.","id":"button","type":"Zigurous.CharacterController.Input.InputButton"}],"return":{"description":"True if the input button was pressed during this frame.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Input.InputHandler.GetButtonPressed(Zigurous.CharacterController.Input.InputButton)"},{"children":null,"id":"GetButtonReleased(Zigurous.CharacterController.Input.InputButton)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetButtonReleased(InputButton)","nameWithType":"InputHandler.GetButtonReleased(InputButton)","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputHandler","remarks":null,"summary":"\nChecks if the specified input button was released during this frame.\n","syntax":{"content":"public abstract bool GetButtonReleased(InputButton button)","parameters":[{"description":"The input button to read.","id":"button","type":"Zigurous.CharacterController.Input.InputButton"}],"return":{"description":"True if the input button was released during this frame.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Input.InputHandler.GetButtonReleased(Zigurous.CharacterController.Input.InputButton)"},{"children":null,"id":"GetButtonHeld(Zigurous.CharacterController.Input.InputButton)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetButtonHeld(InputButton)","nameWithType":"InputHandler.GetButtonHeld(InputButton)","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputHandler","remarks":null,"summary":"\nChecks if the specified input button was held down during this frame.\n","syntax":{"content":"public abstract bool GetButtonHeld(InputButton button)","parameters":[{"description":"The input button to read.","id":"button","type":"Zigurous.CharacterController.Input.InputButton"}],"return":{"description":"True if the input button was held down during this frame.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Input.InputHandler.GetButtonHeld(Zigurous.CharacterController.Input.InputButton)"}]},{"items":[{"children":["Zigurous.CharacterController.Input.InputHandlerInputManager.GetAxis(Zigurous.CharacterController.Input.InputAxis)","Zigurous.CharacterController.Input.InputHandlerInputManager.GetButtonHeld(Zigurous.CharacterController.Input.InputButton)","Zigurous.CharacterController.Input.InputHandlerInputManager.GetButtonPressed(Zigurous.CharacterController.Input.InputButton)","Zigurous.CharacterController.Input.InputHandlerInputManager.GetButtonReleased(Zigurous.CharacterController.Input.InputButton)","Zigurous.CharacterController.Input.InputHandlerInputManager.Instance"],"id":"InputHandlerInputManager","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.Input.InputHandler"],"inheritedMembers":null,"name":"InputHandlerInputManager","nameWithType":"InputHandlerInputManager","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input","remarks":null,"summary":"\nAn input handler that reads input values from the legacy input manager.\n","syntax":{"content":"public sealed class InputHandlerInputManager : InputHandler","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Input.InputHandlerInputManager"},{"children":null,"id":"Instance","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Instance","nameWithType":"InputHandlerInputManager.Instance","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputHandlerInputManager","remarks":null,"summary":"\nA shared instance of the input handler.\n","syntax":{"content":"public static readonly Lazy<InputHandlerInputManager> Instance","parameters":null,"return":{"description":null,"type":"Global.Lazy{Zigurous.CharacterController.Input.InputHandlerInputManager}"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Input.InputHandlerInputManager.Instance"},{"children":null,"id":"GetAxis(Zigurous.CharacterController.Input.InputAxis)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetAxis(InputAxis)","nameWithType":"InputHandlerInputManager.GetAxis(InputAxis)","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputHandlerInputManager","remarks":null,"summary":"\nGets the input value for the specified input axis.\n","syntax":{"content":"public override float GetAxis(InputAxis axis)","parameters":[{"description":"The input axis to read.","id":"axis","type":"Zigurous.CharacterController.Input.InputAxis"}],"return":{"description":"The input value.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Input.InputHandlerInputManager.GetAxis(Zigurous.CharacterController.Input.InputAxis)"},{"children":null,"id":"GetButtonPressed(Zigurous.CharacterController.Input.InputButton)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetButtonPressed(InputButton)","nameWithType":"InputHandlerInputManager.GetButtonPressed(InputButton)","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputHandlerInputManager","remarks":null,"summary":"\nChecks if the specified input button was pressed during this frame.\n","syntax":{"content":"public override bool GetButtonPressed(InputButton button)","parameters":[{"description":"The input button to read.","id":"button","type":"Zigurous.CharacterController.Input.InputButton"}],"return":{"description":"True if the input button was pressed during this frame.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Input.InputHandlerInputManager.GetButtonPressed(Zigurous.CharacterController.Input.InputButton)"},{"children":null,"id":"GetButtonReleased(Zigurous.CharacterController.Input.InputButton)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetButtonReleased(InputButton)","nameWithType":"InputHandlerInputManager.GetButtonReleased(InputButton)","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputHandlerInputManager","remarks":null,"summary":"\nChecks if the specified input button was released during this frame.\n","syntax":{"content":"public override bool GetButtonReleased(InputButton button)","parameters":[{"description":"The input button to read.","id":"button","type":"Zigurous.CharacterController.Input.InputButton"}],"return":{"description":"True if the input button was released during this frame.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Input.InputHandlerInputManager.GetButtonReleased(Zigurous.CharacterController.Input.InputButton)"},{"children":null,"id":"GetButtonHeld(Zigurous.CharacterController.Input.InputButton)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetButtonHeld(InputButton)","nameWithType":"InputHandlerInputManager.GetButtonHeld(InputButton)","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputHandlerInputManager","remarks":null,"summary":"\nChecks if the specified input button was held down during this frame.\n","syntax":{"content":"public override bool GetButtonHeld(InputButton button)","parameters":[{"description":"The input button to read.","id":"button","type":"Zigurous.CharacterController.Input.InputButton"}],"return":{"description":"True if the input button was held down during this frame.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Input.InputHandlerInputManager.GetButtonHeld(Zigurous.CharacterController.Input.InputButton)"}]},{"items":[{"children":["Zigurous.CharacterController.Input.InputHandlerInputSystem.GetAxis(Zigurous.CharacterController.Input.InputAxis)","Zigurous.CharacterController.Input.InputHandlerInputSystem.GetButtonHeld(Zigurous.CharacterController.Input.InputButton)","Zigurous.CharacterController.Input.InputHandlerInputSystem.GetButtonPressed(Zigurous.CharacterController.Input.InputButton)","Zigurous.CharacterController.Input.InputHandlerInputSystem.GetButtonReleased(Zigurous.CharacterController.Input.InputButton)"],"id":"InputHandlerInputSystem","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.Input.InputHandler"],"inheritedMembers":null,"name":"InputHandlerInputSystem","nameWithType":"InputHandlerInputSystem","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input","remarks":null,"summary":"\nAn input handler that reads input values from the new input system.\n","syntax":{"content":"public sealed class InputHandlerInputSystem : InputHandler","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Input.InputHandlerInputSystem"},{"children":null,"id":"GetAxis(Zigurous.CharacterController.Input.InputAxis)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetAxis(InputAxis)","nameWithType":"InputHandlerInputSystem.GetAxis(InputAxis)","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputHandlerInputSystem","remarks":null,"summary":"\nGets the input value for the specified input axis.\n","syntax":{"content":"public override float GetAxis(InputAxis axis)","parameters":[{"description":"The input axis to read.","id":"axis","type":"Zigurous.CharacterController.Input.InputAxis"}],"return":{"description":"The input value.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Input.InputHandlerInputSystem.GetAxis(Zigurous.CharacterController.Input.InputAxis)"},{"children":null,"id":"GetButtonPressed(Zigurous.CharacterController.Input.InputButton)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetButtonPressed(InputButton)","nameWithType":"InputHandlerInputSystem.GetButtonPressed(InputButton)","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputHandlerInputSystem","remarks":null,"summary":"\nChecks if the specified input button was pressed during this frame.\n","syntax":{"content":"public override bool GetButtonPressed(InputButton button)","parameters":[{"description":"The input button to read.","id":"button","type":"Zigurous.CharacterController.Input.InputButton"}],"return":{"description":"True if the input button was pressed during this frame.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Input.InputHandlerInputSystem.GetButtonPressed(Zigurous.CharacterController.Input.InputButton)"},{"children":null,"id":"GetButtonReleased(Zigurous.CharacterController.Input.InputButton)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetButtonReleased(InputButton)","nameWithType":"InputHandlerInputSystem.GetButtonReleased(InputButton)","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputHandlerInputSystem","remarks":null,"summary":"\nChecks if the specified input button was released during this frame.\n","syntax":{"content":"public override bool GetButtonReleased(InputButton button)","parameters":[{"description":"The input button to read.","id":"button","type":"Zigurous.CharacterController.Input.InputButton"}],"return":{"description":"True if the input button was released during this frame.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Input.InputHandlerInputSystem.GetButtonReleased(Zigurous.CharacterController.Input.InputButton)"},{"children":null,"id":"GetButtonHeld(Zigurous.CharacterController.Input.InputButton)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetButtonHeld(InputButton)","nameWithType":"InputHandlerInputSystem.GetButtonHeld(InputButton)","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputHandlerInputSystem","remarks":null,"summary":"\nChecks if the specified input button was held down during this frame.\n","syntax":{"content":"public override bool GetButtonHeld(InputButton button)","parameters":[{"description":"The input button to read.","id":"button","type":"Zigurous.CharacterController.Input.InputButton"}],"return":{"description":"True if the input button was held down during this frame.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Input.InputHandlerInputSystem.GetButtonHeld(Zigurous.CharacterController.Input.InputButton)"}]},{"items":[{"children":["Zigurous.CharacterController.Input.InputHandlerNone.GetAxis(Zigurous.CharacterController.Input.InputAxis)","Zigurous.CharacterController.Input.InputHandlerNone.GetButtonHeld(Zigurous.CharacterController.Input.InputButton)","Zigurous.CharacterController.Input.InputHandlerNone.GetButtonPressed(Zigurous.CharacterController.Input.InputButton)","Zigurous.CharacterController.Input.InputHandlerNone.GetButtonReleased(Zigurous.CharacterController.Input.InputButton)","Zigurous.CharacterController.Input.InputHandlerNone.Instance"],"id":"InputHandlerNone","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.Input.InputHandler"],"inheritedMembers":null,"name":"InputHandlerNone","nameWithType":"InputHandlerNone","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input","remarks":null,"summary":"\nAn input handler that does nothing.\n","syntax":{"content":"public sealed class InputHandlerNone : InputHandler","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Input.InputHandlerNone"},{"children":null,"id":"Instance","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Instance","nameWithType":"InputHandlerNone.Instance","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputHandlerNone","remarks":null,"summary":"\nA shared instance of the input handler.\n","syntax":{"content":"public static readonly Lazy<InputHandlerNone> Instance","parameters":null,"return":{"description":null,"type":"Global.Lazy{Zigurous.CharacterController.Input.InputHandlerNone}"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Input.InputHandlerNone.Instance"},{"children":null,"id":"GetAxis(Zigurous.CharacterController.Input.InputAxis)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetAxis(InputAxis)","nameWithType":"InputHandlerNone.GetAxis(InputAxis)","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputHandlerNone","remarks":null,"summary":"\nGets the input value for the specified input axis.\n","syntax":{"content":"public override float GetAxis(InputAxis axis)","parameters":[{"description":"The input axis to read.","id":"axis","type":"Zigurous.CharacterController.Input.InputAxis"}],"return":{"description":"The input value.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Input.InputHandlerNone.GetAxis(Zigurous.CharacterController.Input.InputAxis)"},{"children":null,"id":"GetButtonPressed(Zigurous.CharacterController.Input.InputButton)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetButtonPressed(InputButton)","nameWithType":"InputHandlerNone.GetButtonPressed(InputButton)","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputHandlerNone","remarks":null,"summary":"\nChecks if the specified input button was pressed during this frame.\n","syntax":{"content":"public override bool GetButtonPressed(InputButton button)","parameters":[{"description":"The input button to read.","id":"button","type":"Zigurous.CharacterController.Input.InputButton"}],"return":{"description":"True if the input button was pressed during this frame.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Input.InputHandlerNone.GetButtonPressed(Zigurous.CharacterController.Input.InputButton)"},{"children":null,"id":"GetButtonReleased(Zigurous.CharacterController.Input.InputButton)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetButtonReleased(InputButton)","nameWithType":"InputHandlerNone.GetButtonReleased(InputButton)","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputHandlerNone","remarks":null,"summary":"\nChecks if the specified input button was released during this frame.\n","syntax":{"content":"public override bool GetButtonReleased(InputButton button)","parameters":[{"description":"The input button to read.","id":"button","type":"Zigurous.CharacterController.Input.InputButton"}],"return":{"description":"True if the input button was released during this frame.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Input.InputHandlerNone.GetButtonReleased(Zigurous.CharacterController.Input.InputButton)"},{"children":null,"id":"GetButtonHeld(Zigurous.CharacterController.Input.InputButton)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetButtonHeld(InputButton)","nameWithType":"InputHandlerNone.GetButtonHeld(InputButton)","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputHandlerNone","remarks":null,"summary":"\nChecks if the specified input button was held down during this frame.\n","syntax":{"content":"public override bool GetButtonHeld(InputButton button)","parameters":[{"description":"The input button to read.","id":"button","type":"Zigurous.CharacterController.Input.InputButton"}],"return":{"description":"True if the input button was held down during this frame.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Input.InputHandlerNone.GetButtonHeld(Zigurous.CharacterController.Input.InputButton)"}]},{"items":[{"children":["Zigurous.CharacterController.Input.InputHandlerType.Custom","Zigurous.CharacterController.Input.InputHandlerType.InputSystemPackage","Zigurous.CharacterController.Input.InputHandlerType.LegacyInputManager","Zigurous.CharacterController.Input.InputHandlerType.None"],"id":"InputHandlerType","implements":null,"inheritance":null,"inheritedMembers":null,"name":"InputHandlerType","nameWithType":"InputHandlerType","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input","remarks":null,"summary":"\nA type of input handler.\n","syntax":{"content":"public enum InputHandlerType","parameters":null,"return":null,"typeParameters":null},"type":"Enum","uid":"Zigurous.CharacterController.Input.InputHandlerType"},{"children":null,"id":"InputSystemPackage","implements":null,"inheritance":null,"inheritedMembers":null,"name":"InputSystemPackage","nameWithType":"InputHandlerType.InputSystemPackage","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputHandlerType","remarks":null,"summary":"\nHandles input using Unity&apos;s new Input System package.\n","syntax":{"content":"InputSystemPackage = 0","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.Input.InputHandlerType"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Input.InputHandlerType.InputSystemPackage"},{"children":null,"id":"LegacyInputManager","implements":null,"inheritance":null,"inheritedMembers":null,"name":"LegacyInputManager","nameWithType":"InputHandlerType.LegacyInputManager","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputHandlerType","remarks":null,"summary":"\nHandles input using Unity&apos;s legacy Input Manager.\n","syntax":{"content":"LegacyInputManager = 1","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.Input.InputHandlerType"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Input.InputHandlerType.LegacyInputManager"},{"children":null,"id":"Custom","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Custom","nameWithType":"InputHandlerType.Custom","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputHandlerType","remarks":null,"summary":"\nHandles input using a custom input handler.\n","syntax":{"content":"Custom = 2","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.Input.InputHandlerType"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Input.InputHandlerType.Custom"},{"children":null,"id":"None","implements":null,"inheritance":null,"inheritedMembers":null,"name":"None","nameWithType":"InputHandlerType.None","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputHandlerType","remarks":null,"summary":"\nDisables input handling.\n","syntax":{"content":"None = 3","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.Input.InputHandlerType"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Input.InputHandlerType.None"}]},{"items":[{"children":["Zigurous.CharacterController.Input.InputManager.enabled","Zigurous.CharacterController.Input.InputManager.GetAxis(Zigurous.CharacterController.Input.InputAxis)","Zigurous.CharacterController.Input.InputManager.GetButtonHeld(Zigurous.CharacterController.Input.InputButton)","Zigurous.CharacterController.Input.InputManager.GetButtonPressed(Zigurous.CharacterController.Input.InputButton)","Zigurous.CharacterController.Input.InputManager.GetButtonReleased(Zigurous.CharacterController.Input.InputButton)","Zigurous.CharacterController.Input.InputManager.inputHandler","Zigurous.CharacterController.Input.InputManager.settings"],"id":"InputManager","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"InputManager","nameWithType":"InputManager","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input","remarks":null,"summary":"\nManages and reads input from the player.\n","syntax":{"content":"public sealed class InputManager","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Input.InputManager"},{"children":null,"id":"settings","implements":null,"inheritance":null,"inheritedMembers":null,"name":"settings","nameWithType":"InputManager.settings","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputManager","remarks":null,"summary":"\nThe input settings used by the manager.\n","syntax":{"content":"public InputSettings settings { get; set; }","parameters":[],"return":{"description":null,"type":"Zigurous.CharacterController.Input.InputSettings"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Input.InputManager.settings"},{"children":null,"id":"enabled","implements":null,"inheritance":null,"inheritedMembers":null,"name":"enabled","nameWithType":"InputManager.enabled","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputManager","remarks":null,"summary":"\nTurns on/off input handling.\n","syntax":{"content":"public bool enabled { get; set; }","parameters":[],"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Input.InputManager.enabled"},{"children":null,"id":"inputHandler","implements":null,"inheritance":null,"inheritedMembers":null,"name":"inputHandler","nameWithType":"InputManager.inputHandler","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputManager","remarks":null,"summary":"\nThe active input handler.\n","syntax":{"content":"public InputHandler inputHandler { get; set; }","parameters":[],"return":{"description":null,"type":"Zigurous.CharacterController.Input.InputHandler"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Input.InputManager.inputHandler"},{"children":null,"id":"GetAxis(Zigurous.CharacterController.Input.InputAxis)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetAxis(InputAxis)","nameWithType":"InputManager.GetAxis(InputAxis)","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputManager","remarks":null,"summary":"\nGets the input value for the specified input axis.\n","syntax":{"content":"public float GetAxis(InputAxis axis)","parameters":[{"description":"The input axis to read.","id":"axis","type":"Zigurous.CharacterController.Input.InputAxis"}],"return":{"description":"The input value.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Input.InputManager.GetAxis(Zigurous.CharacterController.Input.InputAxis)"},{"children":null,"id":"GetButtonPressed(Zigurous.CharacterController.Input.InputButton)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetButtonPressed(InputButton)","nameWithType":"InputManager.GetButtonPressed(InputButton)","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputManager","remarks":null,"summary":"\nChecks if the specified input button was pressed during this frame.\n","syntax":{"content":"public bool GetButtonPressed(InputButton button)","parameters":[{"description":"The input button to read.","id":"button","type":"Zigurous.CharacterController.Input.InputButton"}],"return":{"description":"True if the input button was pressed during this frame.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Input.InputManager.GetButtonPressed(Zigurous.CharacterController.Input.InputButton)"},{"children":null,"id":"GetButtonReleased(Zigurous.CharacterController.Input.InputButton)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetButtonReleased(InputButton)","nameWithType":"InputManager.GetButtonReleased(InputButton)","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputManager","remarks":null,"summary":"\nChecks if the specified input button was released during this frame.\n","syntax":{"content":"public bool GetButtonReleased(InputButton button)","parameters":[{"description":"The input button to read.","id":"button","type":"Zigurous.CharacterController.Input.InputButton"}],"return":{"description":"True if the input button was released during this frame.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Input.InputManager.GetButtonReleased(Zigurous.CharacterController.Input.InputButton)"},{"children":null,"id":"GetButtonHeld(Zigurous.CharacterController.Input.InputButton)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetButtonHeld(InputButton)","nameWithType":"InputManager.GetButtonHeld(InputButton)","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputManager","remarks":null,"summary":"\nChecks if the specified input button was held down during this frame.\n","syntax":{"content":"public bool GetButtonHeld(InputButton button)","parameters":[{"description":"The input button to read.","id":"button","type":"Zigurous.CharacterController.Input.InputButton"}],"return":{"description":"True if the input button was held down during this frame.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Input.InputManager.GetButtonHeld(Zigurous.CharacterController.Input.InputButton)"}]},{"items":[{"children":["Zigurous.CharacterController.Input.InputSettings.customHandler","Zigurous.CharacterController.Input.InputSettings.handlerType","Zigurous.CharacterController.Input.InputSettings.horizontalAxis","Zigurous.CharacterController.Input.InputSettings.maxInputThreshold","Zigurous.CharacterController.Input.InputSettings.minInputThreshold","Zigurous.CharacterController.Input.InputSettings.verticalAxis"],"id":"InputSettings","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementSettings"],"inheritedMembers":["Zigurous.CharacterController.MovementSettings.active","Zigurous.CharacterController.MovementSettings.enabled","Zigurous.CharacterController.MovementSettings.isActiveAndEnabled","Zigurous.CharacterController.MovementSettings.OnActivate(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementSettings.OnDeactivate(Zigurous.CharacterController.MovementController)"],"name":"InputSettings","nameWithType":"InputSettings","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input","remarks":null,"summary":"\nSettings for an input manager.\n","syntax":{"content":"[Serializable]\npublic sealed class InputSettings : MovementSettings","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Input.InputSettings"},{"children":null,"id":"handlerType","implements":null,"inheritance":null,"inheritedMembers":null,"name":"handlerType","nameWithType":"InputSettings.handlerType","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputSettings","remarks":null,"summary":"\nThe input handler type to use.\n","syntax":{"content":"public InputHandlerType handlerType","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.Input.InputHandlerType"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Input.InputSettings.handlerType"},{"children":null,"id":"customHandler","implements":null,"inheritance":null,"inheritedMembers":null,"name":"customHandler","nameWithType":"InputSettings.customHandler","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputSettings","remarks":null,"summary":"\nThe custom input handler to use.\n","syntax":{"content":"public InputHandler customHandler","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.Input.InputHandler"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Input.InputSettings.customHandler"},{"children":null,"id":"horizontalAxis","implements":null,"inheritance":null,"inheritedMembers":null,"name":"horizontalAxis","nameWithType":"InputSettings.horizontalAxis","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputSettings","remarks":null,"summary":"\nThe input axis for horizontal movement.\n","syntax":{"content":"public InputAxis horizontalAxis","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.Input.InputAxis"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Input.InputSettings.horizontalAxis"},{"children":null,"id":"verticalAxis","implements":null,"inheritance":null,"inheritedMembers":null,"name":"verticalAxis","nameWithType":"InputSettings.verticalAxis","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputSettings","remarks":null,"summary":"\nThe input axis for vertical movement.\n","syntax":{"content":"public InputAxis verticalAxis","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.Input.InputAxis"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Input.InputSettings.verticalAxis"},{"children":null,"id":"minInputThreshold","implements":null,"inheritance":null,"inheritedMembers":null,"name":"minInputThreshold","nameWithType":"InputSettings.minInputThreshold","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputSettings","remarks":null,"summary":"\nClamps the input magnitude lower than the min to zero.\n","syntax":{"content":"public float minInputThreshold","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Input.InputSettings.minInputThreshold"},{"children":null,"id":"maxInputThreshold","implements":null,"inheritance":null,"inheritedMembers":null,"name":"maxInputThreshold","nameWithType":"InputSettings.maxInputThreshold","namespace":"Zigurous.CharacterController.Input","parent":"Zigurous.CharacterController.Input.InputSettings","remarks":null,"summary":"\nClamps the input magnitude greater than the max to one.\n","syntax":{"content":"public float maxInputThreshold","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Input.InputSettings.maxInputThreshold"}]},{"items":[{"children":["Zigurous.CharacterController.Input.InputAxis","Zigurous.CharacterController.Input.InputButton","Zigurous.CharacterController.Input.InputHandler","Zigurous.CharacterController.Input.InputHandlerInputManager","Zigurous.CharacterController.Input.InputHandlerInputSystem","Zigurous.CharacterController.Input.InputHandlerNone","Zigurous.CharacterController.Input.InputHandlerType","Zigurous.CharacterController.Input.InputManager","Zigurous.CharacterController.Input.InputSettings"],"id":"Zigurous.CharacterController.Input","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Zigurous.CharacterController.Input","nameWithType":"Zigurous.CharacterController.Input","namespace":null,"parent":null,"remarks":null,"summary":null,"syntax":null,"type":"Namespace","uid":"Zigurous.CharacterController.Input"}]},{"items":[{"children":["Zigurous.CharacterController.IStaminaCostAction.staminaCost"],"id":"IStaminaCostAction","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IStaminaCostAction","nameWithType":"IStaminaCostAction","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nAn action that drains stamina when performed.\n","syntax":{"content":"public interface IStaminaCostAction","parameters":null,"return":null,"typeParameters":null},"type":"Interface","uid":"Zigurous.CharacterController.IStaminaCostAction"},{"children":null,"id":"staminaCost","implements":null,"inheritance":null,"inheritedMembers":null,"name":"staminaCost","nameWithType":"IStaminaCostAction.staminaCost","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.IStaminaCostAction","remarks":null,"summary":"\nThe stamina cost of performing the action.\n","syntax":{"content":"StaminaCost staminaCost { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.CharacterController.StaminaCost"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.IStaminaCostAction.staminaCost"}]},{"items":[{"children":["Zigurous.CharacterController.MovementAbilityCooldownMode.Manual","Zigurous.CharacterController.MovementAbilityCooldownMode.OnActivate","Zigurous.CharacterController.MovementAbilityCooldownMode.OnDeactivate"],"id":"MovementAbilityCooldownMode","implements":null,"inheritance":null,"inheritedMembers":null,"name":"MovementAbilityCooldownMode","nameWithType":"MovementAbilityCooldownMode","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nA type of cooldown mode that determines how the cooldown is started.\n","syntax":{"content":"public enum MovementAbilityCooldownMode","parameters":null,"return":null,"typeParameters":null},"type":"Enum","uid":"Zigurous.CharacterController.MovementAbilityCooldownMode"},{"children":null,"id":"OnDeactivate","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnDeactivate","nameWithType":"MovementAbilityCooldownMode.OnDeactivate","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementAbilityCooldownMode","remarks":null,"summary":"\nThe cooldown starts when the ability is deactivated.\n","syntax":{"content":"OnDeactivate = 0","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementAbilityCooldownMode"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementAbilityCooldownMode.OnDeactivate"},{"children":null,"id":"OnActivate","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnActivate","nameWithType":"MovementAbilityCooldownMode.OnActivate","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementAbilityCooldownMode","remarks":null,"summary":"\nThe cooldown starts when the ability is activated.\n","syntax":{"content":"OnActivate = 1","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementAbilityCooldownMode"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementAbilityCooldownMode.OnActivate"},{"children":null,"id":"Manual","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Manual","nameWithType":"MovementAbilityCooldownMode.Manual","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementAbilityCooldownMode","remarks":null,"summary":"\nThe cooldown is manually started.\n","syntax":{"content":"Manual = 2","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementAbilityCooldownMode"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementAbilityCooldownMode.Manual"}]},{"items":[{"children":[],"id":"MovementAbilitySettings`1","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementSettings","Zigurous.CharacterController.MovementBehaviorSettings","Zigurous.CharacterController.MovementControlSettings","Zigurous.CharacterController.MovementAbilitySettings"],"inheritedMembers":["Zigurous.CharacterController.MovementAbilitySettings.preconditions","Zigurous.CharacterController.MovementAbilitySettings.preventingConditions","Zigurous.CharacterController.MovementAbilitySettings.deactivatingConditions","Zigurous.CharacterController.MovementAbilitySettings.staminaCost","Zigurous.CharacterController.MovementAbilitySettings.cooldownMode","Zigurous.CharacterController.MovementAbilitySettings.cooldownDuration","Zigurous.CharacterController.MovementControlSettings.inputButton","Zigurous.CharacterController.MovementControlSettings.inputStyle","Zigurous.CharacterController.MovementSettings.active","Zigurous.CharacterController.MovementSettings.enabled","Zigurous.CharacterController.MovementSettings.isActiveAndEnabled","Zigurous.CharacterController.MovementSettings.OnActivate(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementSettings.OnDeactivate(Zigurous.CharacterController.MovementController)"],"name":"MovementAbilitySettings<T>","nameWithType":"MovementAbilitySettings<T>","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nThe base class for movement ability settings of a specified type.\n","syntax":{"content":"[Serializable]\npublic abstract class MovementAbilitySettings<T> : MovementAbilitySettings where T : MovementProcess, new()","parameters":null,"return":null,"typeParameters":[{"description":"The type of ability associated with the settings.","id":"T"}]},"type":"Class","uid":"Zigurous.CharacterController.MovementAbilitySettings`1"}]},{"items":[{"children":["Zigurous.CharacterController.MovementAbilitySettings.cooldownDuration","Zigurous.CharacterController.MovementAbilitySettings.cooldownMode","Zigurous.CharacterController.MovementAbilitySettings.deactivatingConditions","Zigurous.CharacterController.MovementAbilitySettings.preconditions","Zigurous.CharacterController.MovementAbilitySettings.preventingConditions","Zigurous.CharacterController.MovementAbilitySettings.staminaCost"],"id":"MovementAbilitySettings","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementSettings","Zigurous.CharacterController.MovementBehaviorSettings","Zigurous.CharacterController.MovementControlSettings"],"inheritedMembers":["Zigurous.CharacterController.MovementControlSettings.inputButton","Zigurous.CharacterController.MovementControlSettings.inputStyle","Zigurous.CharacterController.MovementSettings.active","Zigurous.CharacterController.MovementSettings.enabled","Zigurous.CharacterController.MovementSettings.isActiveAndEnabled","Zigurous.CharacterController.MovementSettings.OnActivate(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementSettings.OnDeactivate(Zigurous.CharacterController.MovementController)"],"name":"MovementAbilitySettings","nameWithType":"MovementAbilitySettings","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nThe base class for all movement ability settings.\n","syntax":{"content":"[Serializable]\npublic abstract class MovementAbilitySettings : MovementControlSettings","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.MovementAbilitySettings"},{"children":null,"id":"preconditions","implements":null,"inheritance":null,"inheritedMembers":null,"name":"preconditions","nameWithType":"MovementAbilitySettings.preconditions","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementAbilitySettings","remarks":null,"summary":"\nThe conditions that must be met before the ability can be activated.\n","syntax":{"content":"public MovementFlags preconditions","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementAbilitySettings.preconditions"},{"children":null,"id":"preventingConditions","implements":null,"inheritance":null,"inheritedMembers":null,"name":"preventingConditions","nameWithType":"MovementAbilitySettings.preventingConditions","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementAbilitySettings","remarks":null,"summary":"\nThe conditions that prevent the ability from being activated.\n","syntax":{"content":"public MovementFlags preventingConditions","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementAbilitySettings.preventingConditions"},{"children":null,"id":"deactivatingConditions","implements":null,"inheritance":null,"inheritedMembers":null,"name":"deactivatingConditions","nameWithType":"MovementAbilitySettings.deactivatingConditions","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementAbilitySettings","remarks":null,"summary":"\nThe conditions that deactivate the ability when active.\n","syntax":{"content":"public MovementFlags deactivatingConditions","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementAbilitySettings.deactivatingConditions"},{"children":null,"id":"staminaCost","implements":null,"inheritance":null,"inheritedMembers":null,"name":"staminaCost","nameWithType":"MovementAbilitySettings.staminaCost","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementAbilitySettings","remarks":null,"summary":"\nThe stamina cost of the ability.\n","syntax":{"content":"public StaminaCost staminaCost","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.StaminaCost"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementAbilitySettings.staminaCost"},{"children":null,"id":"cooldownMode","implements":null,"inheritance":null,"inheritedMembers":null,"name":"cooldownMode","nameWithType":"MovementAbilitySettings.cooldownMode","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementAbilitySettings","remarks":null,"summary":"\nThe cooldown mode to use for the ability.\n","syntax":{"content":"public MovementAbilityCooldownMode cooldownMode","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementAbilityCooldownMode"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementAbilitySettings.cooldownMode"},{"children":null,"id":"cooldownDuration","implements":null,"inheritance":null,"inheritedMembers":null,"name":"cooldownDuration","nameWithType":"MovementAbilitySettings.cooldownDuration","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementAbilitySettings","remarks":null,"summary":"\nThe amount of seconds before the ability can be activated again.\n","syntax":{"content":"public float cooldownDuration","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementAbilitySettings.cooldownDuration"}]},{"items":[{"children":["Zigurous.CharacterController.MovementBehavior`1.enabled","Zigurous.CharacterController.MovementBehavior`1.OnDisable","Zigurous.CharacterController.MovementBehavior`1.OnEnable","Zigurous.CharacterController.MovementBehavior`1.OnPreUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementBehavior`1.settings","Zigurous.CharacterController.MovementBehavior`1.StartCoroutine(System.Collections.IEnumerator)","Zigurous.CharacterController.MovementBehavior`1.StopCoroutine(Coroutine)"],"id":"MovementBehavior`1","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementProcess"],"inheritedMembers":["Zigurous.CharacterController.MovementProcess.controller","Zigurous.CharacterController.MovementProcess.registered","Zigurous.CharacterController.MovementProcess.order","Zigurous.CharacterController.MovementProcess.id","Zigurous.CharacterController.MovementProcess.OnRegister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUnregister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementProcess.OnPostUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementProcess.OnMovementProfileChanged(Zigurous.CharacterController.MovementProfile,Zigurous.CharacterController.MovementProfile)"],"name":"MovementBehavior<T>","nameWithType":"MovementBehavior<T>","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nA type that executes a movement behavior using provided settings.\n","syntax":{"content":"public abstract class MovementBehavior<T> : MovementProcess where T : MovementBehaviorSettings, new()","parameters":null,"return":null,"typeParameters":[{"description":null,"id":"T"}]},"type":"Class","uid":"Zigurous.CharacterController.MovementBehavior`1"},{"children":null,"id":"settings","implements":null,"inheritance":null,"inheritedMembers":null,"name":"settings","nameWithType":"MovementBehavior<T>.settings","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementBehavior`1","remarks":null,"summary":"\nThe settings for the behavior.\n","syntax":{"content":"public T settings { get; set; }","parameters":[],"return":{"description":null,"type":"{T}"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementBehavior`1.settings"},{"children":null,"id":"enabled","implements":null,"inheritance":null,"inheritedMembers":null,"name":"enabled","nameWithType":"MovementBehavior<T>.enabled","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementBehavior`1","remarks":null,"summary":"\nEnables or disables the behavior from being updated.\n","syntax":{"content":"public bool enabled { get; set; }","parameters":[],"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementBehavior`1.enabled"},{"children":null,"id":"OnPreUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnPreUpdate(MovementController, MovementState)","nameWithType":"MovementBehavior<T>.OnPreUpdate(MovementController, MovementState)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementBehavior`1","remarks":null,"summary":"\nChecks for any state changes before the process is handled.\n","syntax":{"content":"protected override void OnPreUpdate(MovementController controller, MovementState state)","parameters":[{"description":"The controller updating the process.","id":"controller","type":"Zigurous.CharacterController.MovementController"},{"description":"The current movement state of the character.","id":"state","type":"Zigurous.CharacterController.MovementState"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementBehavior`1.OnPreUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)"},{"children":null,"id":"OnEnable","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnEnable()","nameWithType":"MovementBehavior<T>.OnEnable()","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementBehavior`1","remarks":null,"summary":"\nA callback invoked when the behavior is enabled.\n","syntax":{"content":"protected virtual void OnEnable()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementBehavior`1.OnEnable"},{"children":null,"id":"OnDisable","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnDisable()","nameWithType":"MovementBehavior<T>.OnDisable()","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementBehavior`1","remarks":null,"summary":"\nA callback invoked when the behavior is disabled.\n","syntax":{"content":"protected virtual void OnDisable()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementBehavior`1.OnDisable"},{"children":null,"id":"StartCoroutine(System.Collections.IEnumerator)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"StartCoroutine(IEnumerator)","nameWithType":"MovementBehavior<T>.StartCoroutine(IEnumerator)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementBehavior`1","remarks":null,"summary":"\nStarts a coroutine.\n","syntax":{"content":"protected Coroutine StartCoroutine(IEnumerator routine)","parameters":[{"description":"The routine to start.","id":"routine","type":"System.Collections.IEnumerator"}],"return":{"description":"A reference to the coroutine.","type":"Global.Coroutine"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementBehavior`1.StartCoroutine(System.Collections.IEnumerator)"},{"children":null,"id":"StopCoroutine(Coroutine)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"StopCoroutine(Coroutine)","nameWithType":"MovementBehavior<T>.StopCoroutine(Coroutine)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementBehavior`1","remarks":null,"summary":"\nStops a coroutine.\n","syntax":{"content":"protected void StopCoroutine(Coroutine routine)","parameters":[{"description":"The routine to stop.","id":"routine","type":"Global.Coroutine"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementBehavior`1.StopCoroutine(Coroutine)"}]},{"items":[{"children":[],"id":"MovementBehaviorSettings`1","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementSettings","Zigurous.CharacterController.MovementBehaviorSettings"],"inheritedMembers":["Zigurous.CharacterController.MovementSettings.active","Zigurous.CharacterController.MovementSettings.enabled","Zigurous.CharacterController.MovementSettings.isActiveAndEnabled","Zigurous.CharacterController.MovementSettings.OnActivate(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementSettings.OnDeactivate(Zigurous.CharacterController.MovementController)"],"name":"MovementBehaviorSettings<T>","nameWithType":"MovementBehaviorSettings<T>","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nThe base class for movement behavior settings of a specified type.\n","syntax":{"content":"[Serializable]\npublic abstract class MovementBehaviorSettings<T> : MovementBehaviorSettings where T : MovementProcess, new()","parameters":null,"return":null,"typeParameters":[{"description":"The type of behavior associated with the settings.","id":"T"}]},"type":"Class","uid":"Zigurous.CharacterController.MovementBehaviorSettings`1"}]},{"items":[{"children":[],"id":"MovementBehaviorSettings","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementSettings"],"inheritedMembers":["Zigurous.CharacterController.MovementSettings.active","Zigurous.CharacterController.MovementSettings.enabled","Zigurous.CharacterController.MovementSettings.isActiveAndEnabled","Zigurous.CharacterController.MovementSettings.OnActivate(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementSettings.OnDeactivate(Zigurous.CharacterController.MovementController)"],"name":"MovementBehaviorSettings","nameWithType":"MovementBehaviorSettings","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nThe base class for all movement behavior settings.\n","syntax":{"content":"[Serializable]\npublic abstract class MovementBehaviorSettings : MovementSettings","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.MovementBehaviorSettings"}]},{"items":[{"children":["Zigurous.CharacterController.MovementControl`1.isInputActive","Zigurous.CharacterController.MovementControl`1.OnPostUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)"],"id":"MovementControl`1","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementProcess","Zigurous.CharacterController.MovementBehavior{{T}}"],"inheritedMembers":["Zigurous.CharacterController.MovementBehavior{{T}}.settings","Zigurous.CharacterController.MovementBehavior{{T}}.enabled","Zigurous.CharacterController.MovementBehavior{{T}}.OnPreUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementBehavior{{T}}.OnEnable","Zigurous.CharacterController.MovementBehavior{{T}}.OnDisable","Zigurous.CharacterController.MovementBehavior{{T}}.StartCoroutine(System.Collections.IEnumerator)","Zigurous.CharacterController.MovementBehavior{{T}}.StopCoroutine(Coroutine)","Zigurous.CharacterController.MovementProcess.controller","Zigurous.CharacterController.MovementProcess.registered","Zigurous.CharacterController.MovementProcess.order","Zigurous.CharacterController.MovementProcess.id","Zigurous.CharacterController.MovementProcess.OnRegister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUnregister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementProcess.OnMovementProfileChanged(Zigurous.CharacterController.MovementProfile,Zigurous.CharacterController.MovementProfile)"],"name":"MovementControl<T>","nameWithType":"MovementControl<T>","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nA type that defines a movement control handled by player input.\n","syntax":{"content":"public abstract class MovementControl<T> : MovementBehavior<T> where T : MovementControlSettings, new()","parameters":null,"return":null,"typeParameters":[{"description":null,"id":"T"}]},"type":"Class","uid":"Zigurous.CharacterController.MovementControl`1"},{"children":null,"id":"isInputActive","implements":null,"inheritance":null,"inheritedMembers":null,"name":"isInputActive","nameWithType":"MovementControl<T>.isInputActive","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementControl`1","remarks":null,"summary":"\nWhether the input control is currently active. This does not\nindicate that the ability or behavior for the control is active,\nonly that the input is.\n","syntax":{"content":"public bool isInputActive { get; protected set; }","parameters":[],"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementControl`1.isInputActive"},{"children":null,"id":"OnPostUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnPostUpdate(MovementController, MovementState)","nameWithType":"MovementControl<T>.OnPostUpdate(MovementController, MovementState)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementControl`1","remarks":null,"summary":"\nChecks for any state changes after the process is handled.\n","syntax":{"content":"protected override void OnPostUpdate(MovementController controller, MovementState state)","parameters":[{"description":"The controller updating the process.","id":"controller","type":"Zigurous.CharacterController.MovementController"},{"description":"The current movement state of the character.","id":"state","type":"Zigurous.CharacterController.MovementState"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementControl`1.OnPostUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)"}]},{"items":[{"children":["Zigurous.CharacterController.MovementControlInputStyle.Hold","Zigurous.CharacterController.MovementControlInputStyle.Manual","Zigurous.CharacterController.MovementControlInputStyle.Press","Zigurous.CharacterController.MovementControlInputStyle.Toggle"],"id":"MovementControlInputStyle","implements":null,"inheritance":null,"inheritedMembers":null,"name":"MovementControlInputStyle","nameWithType":"MovementControlInputStyle","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nA movement control input style, i.e, press, hold, toggle, etc.\n","syntax":{"content":"public enum MovementControlInputStyle","parameters":null,"return":null,"typeParameters":null},"type":"Enum","uid":"Zigurous.CharacterController.MovementControlInputStyle"},{"children":null,"id":"Press","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Press","nameWithType":"MovementControlInputStyle.Press","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementControlInputStyle","remarks":null,"summary":"\nThe control is activated each time the input is performed, and\nthe input must be performed again and again each time the\ncontrol is to be activated.\n","syntax":{"content":"Press = 0","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementControlInputStyle"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementControlInputStyle.Press"},{"children":null,"id":"Hold","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Hold","nameWithType":"MovementControlInputStyle.Hold","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementControlInputStyle","remarks":null,"summary":"\nThe control is active for as long as the input is held down. As\nsoon as the input is released, the control is deactivated.\n","syntax":{"content":"Hold = 1","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementControlInputStyle"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementControlInputStyle.Hold"},{"children":null,"id":"Toggle","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Toggle","nameWithType":"MovementControlInputStyle.Toggle","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementControlInputStyle","remarks":null,"summary":"\nThe control&apos;s state is toggled between active/inactive every\ntime the input is performed.\n","syntax":{"content":"Toggle = 2","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementControlInputStyle"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementControlInputStyle.Toggle"},{"children":null,"id":"Manual","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Manual","nameWithType":"MovementControlInputStyle.Manual","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementControlInputStyle","remarks":null,"summary":"\nNo input is checked, and the control is activated/deactivated\nmanually.\n","syntax":{"content":"Manual = 3","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementControlInputStyle"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementControlInputStyle.Manual"}]},{"items":[{"children":["Zigurous.CharacterController.MovementController.animator","Zigurous.CharacterController.MovementController.camera","Zigurous.CharacterController.MovementController.character","Zigurous.CharacterController.MovementController.GetProcess``1","Zigurous.CharacterController.MovementController.input","Zigurous.CharacterController.MovementController.movementHandler","Zigurous.CharacterController.MovementController.movementStyle","Zigurous.CharacterController.MovementController.processes","Zigurous.CharacterController.MovementController.profile","Zigurous.CharacterController.MovementController.SetMovementHandler(Zigurous.CharacterController.MovementHandler)","Zigurous.CharacterController.MovementController.SetMovementProfile(Zigurous.CharacterController.MovementProfile)","Zigurous.CharacterController.MovementController.SetMovementStyle(Zigurous.CharacterController.MovementStyle)","Zigurous.CharacterController.MovementController.sharedProfile","Zigurous.CharacterController.MovementController.stamina","Zigurous.CharacterController.MovementController.state","Zigurous.CharacterController.MovementController.usesStamina"],"id":"MovementController","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"MovementController","nameWithType":"MovementController","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nControls all movement-related actions and abilities of a character.\n","syntax":{"content":"public sealed class MovementController : MonoBehaviour","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.MovementController"},{"children":null,"id":"character","implements":null,"inheritance":null,"inheritedMembers":null,"name":"character","nameWithType":"MovementController.character","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementController","remarks":null,"summary":"\nThe character being controlled by the movement controller.\n","syntax":{"content":"public UnityEngine.CharacterController character { get; }","parameters":[],"return":{"description":null,"type":"Global.UnityEngine.CharacterController"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementController.character"},{"children":null,"id":"profile","implements":null,"inheritance":null,"inheritedMembers":null,"name":"profile","nameWithType":"MovementController.profile","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementController","remarks":null,"summary":"\nThe instanced movement settings profile used by the controller.\n","syntax":{"content":"public MovementProfile profile { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.CharacterController.MovementProfile"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementController.profile"},{"children":null,"id":"sharedProfile","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sharedProfile","nameWithType":"MovementController.sharedProfile","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementController","remarks":null,"summary":"\nThe shared movement settings profile used by the controller.\n","syntax":{"content":"public MovementProfile sharedProfile { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.CharacterController.MovementProfile"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementController.sharedProfile"},{"children":null,"id":"state","implements":null,"inheritance":null,"inheritedMembers":null,"name":"state","nameWithType":"MovementController.state","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementController","remarks":null,"summary":"\nThe current movement state of the character.\n","syntax":{"content":"public MovementState state { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.CharacterController.MovementState"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementController.state"},{"children":null,"id":"processes","implements":null,"inheritance":null,"inheritedMembers":null,"name":"processes","nameWithType":"MovementController.processes","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementController","remarks":null,"summary":"\nThe movement process manager for the controller.\n","syntax":{"content":"public MovementProcessManager processes { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.CharacterController.MovementProcessManager"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementController.processes"},{"children":null,"id":"input","implements":null,"inheritance":null,"inheritedMembers":null,"name":"input","nameWithType":"MovementController.input","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementController","remarks":null,"summary":"\nThe movement input manager for the controller.\n","syntax":{"content":"public InputManager input { get; }","parameters":[],"return":{"description":null,"type":"Global.InputManager"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementController.input"},{"children":null,"id":"movementHandler","implements":null,"inheritance":null,"inheritedMembers":null,"name":"movementHandler","nameWithType":"MovementController.movementHandler","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementController","remarks":null,"summary":"\nThe active movement style handler of the character.\n","syntax":{"content":"public MovementHandler movementHandler { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.CharacterController.MovementHandler"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementController.movementHandler"},{"children":null,"id":"movementStyle","implements":null,"inheritance":null,"inheritedMembers":null,"name":"movementStyle","nameWithType":"MovementController.movementStyle","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementController","remarks":null,"summary":"\nThe type of movement style that determines how the character moves\nand rotates relative to the look transform.\n","syntax":{"content":"public MovementStyle movementStyle { get; set; }","parameters":[],"return":{"description":null,"type":"Zigurous.CharacterController.MovementStyle"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementController.movementStyle"},{"children":null,"id":"camera","implements":null,"inheritance":null,"inheritedMembers":null,"name":"camera","nameWithType":"MovementController.camera","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementController","remarks":null,"summary":"\nThe camera the character moves relative to. Camera.main will be used\nif not set.\n","syntax":{"content":"public Camera camera { get; set; }","parameters":[],"return":{"description":null,"type":"Global.Camera"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementController.camera"},{"children":null,"id":"animator","implements":null,"inheritance":null,"inheritedMembers":null,"name":"animator","nameWithType":"MovementController.animator","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementController","remarks":null,"summary":"\nThe animator component attached to the character.\n","syntax":{"content":"public Animator animator { get; set; }","parameters":[],"return":{"description":null,"type":"Global.Animator"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementController.animator"},{"children":null,"id":"stamina","implements":null,"inheritance":null,"inheritedMembers":null,"name":"stamina","nameWithType":"MovementController.stamina","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementController","remarks":null,"summary":"\nThe character&apos;s stamina resource (Read only).\n","syntax":{"content":"public Stamina stamina { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.CharacterController.Stamina"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementController.stamina"},{"children":null,"id":"usesStamina","implements":null,"inheritance":null,"inheritedMembers":null,"name":"usesStamina","nameWithType":"MovementController.usesStamina","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementController","remarks":null,"summary":"\nWhether the character uses stamina (Read only).\n","syntax":{"content":"public bool usesStamina { get; }","parameters":[],"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementController.usesStamina"},{"children":null,"id":"SetMovementProfile(Zigurous.CharacterController.MovementProfile)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SetMovementProfile(MovementProfile)","nameWithType":"MovementController.SetMovementProfile(MovementProfile)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementController","remarks":null,"summary":"\nApplies the movement settings profile to the controller.\n","syntax":{"content":"public void SetMovementProfile(MovementProfile profile)","parameters":[{"description":"The profile to apply.","id":"profile","type":"Zigurous.CharacterController.MovementProfile"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementController.SetMovementProfile(Zigurous.CharacterController.MovementProfile)"},{"children":null,"id":"SetMovementStyle(Zigurous.CharacterController.MovementStyle)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SetMovementStyle(MovementStyle)","nameWithType":"MovementController.SetMovementStyle(MovementStyle)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementController","remarks":null,"summary":"\nSets the movement style for the controller to use.\n","syntax":{"content":"public void SetMovementStyle(MovementStyle style)","parameters":[{"description":"The movement style to use.","id":"style","type":"Zigurous.CharacterController.MovementStyle"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementController.SetMovementStyle(Zigurous.CharacterController.MovementStyle)"},{"children":null,"id":"SetMovementHandler(Zigurous.CharacterController.MovementHandler)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SetMovementHandler(MovementHandler)","nameWithType":"MovementController.SetMovementHandler(MovementHandler)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementController","remarks":null,"summary":"\nSets the movement handler for the controller to use.\n","syntax":{"content":"public void SetMovementHandler(MovementHandler handler)","parameters":[{"description":"The movement handler to use.","id":"handler","type":"Zigurous.CharacterController.MovementHandler"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementController.SetMovementHandler(Zigurous.CharacterController.MovementHandler)"},{"children":null,"id":"GetProcess``1","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetProcess<T>()","nameWithType":"MovementController.GetProcess<T>()","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementController","remarks":null,"summary":"\nReturns the movement process of the specified type.\n","syntax":{"content":"public T GetProcess<T>()\n    where T : MovementProcess","parameters":null,"return":{"description":"The movement process of the specified type, or null if not registered.","type":"{T}"},"typeParameters":[{"description":"The type of the process to retrieve.","id":"T"}]},"type":"Method","uid":"Zigurous.CharacterController.MovementController.GetProcess``1"}]},{"items":[{"children":[],"id":"MovementControlSettings`1","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementSettings","Zigurous.CharacterController.MovementBehaviorSettings","Zigurous.CharacterController.MovementControlSettings"],"inheritedMembers":["Zigurous.CharacterController.MovementControlSettings.inputButton","Zigurous.CharacterController.MovementControlSettings.inputStyle","Zigurous.CharacterController.MovementSettings.active","Zigurous.CharacterController.MovementSettings.enabled","Zigurous.CharacterController.MovementSettings.isActiveAndEnabled","Zigurous.CharacterController.MovementSettings.OnActivate(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementSettings.OnDeactivate(Zigurous.CharacterController.MovementController)"],"name":"MovementControlSettings<T>","nameWithType":"MovementControlSettings<T>","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nThe base class for movement control settings of a specified type.\n","syntax":{"content":"[Serializable]\npublic abstract class MovementControlSettings<T> : MovementControlSettings where T : MovementProcess, new()","parameters":null,"return":null,"typeParameters":[{"description":"The type of control associated with the settings.","id":"T"}]},"type":"Class","uid":"Zigurous.CharacterController.MovementControlSettings`1"}]},{"items":[{"children":["Zigurous.CharacterController.MovementControlSettings.inputButton","Zigurous.CharacterController.MovementControlSettings.inputStyle"],"id":"MovementControlSettings","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementSettings","Zigurous.CharacterController.MovementBehaviorSettings"],"inheritedMembers":["Zigurous.CharacterController.MovementSettings.active","Zigurous.CharacterController.MovementSettings.enabled","Zigurous.CharacterController.MovementSettings.isActiveAndEnabled","Zigurous.CharacterController.MovementSettings.OnActivate(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementSettings.OnDeactivate(Zigurous.CharacterController.MovementController)"],"name":"MovementControlSettings","nameWithType":"MovementControlSettings","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nThe base class for all movement control settings.\n","syntax":{"content":"[Serializable]\npublic abstract class MovementControlSettings : MovementBehaviorSettings","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.MovementControlSettings"},{"children":null,"id":"inputButton","implements":null,"inheritance":null,"inheritedMembers":null,"name":"inputButton","nameWithType":"MovementControlSettings.inputButton","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementControlSettings","remarks":null,"summary":"\nThe name of the input action for the control.\n","syntax":{"content":"public InputButton inputButton","parameters":null,"return":{"description":null,"type":"Global.InputButton"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementControlSettings.inputButton"},{"children":null,"id":"inputStyle","implements":null,"inheritance":null,"inheritedMembers":null,"name":"inputStyle","nameWithType":"MovementControlSettings.inputStyle","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementControlSettings","remarks":null,"summary":"\nThe input press type, i.e, hold, toggle, etc.\n","syntax":{"content":"public MovementControlInputStyle inputStyle","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementControlInputStyle"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementControlSettings.inputStyle"}]},{"items":[{"children":["Zigurous.CharacterController.MovementEffect.condition","Zigurous.CharacterController.MovementEffect.OnEffectActivated","Zigurous.CharacterController.MovementEffect.OnEffectDeactivated"],"id":"MovementEffect","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementProcess"],"inheritedMembers":["Zigurous.CharacterController.MovementProcess.controller","Zigurous.CharacterController.MovementProcess.registered","Zigurous.CharacterController.MovementProcess.order","Zigurous.CharacterController.MovementProcess.id","Zigurous.CharacterController.MovementProcess.OnRegister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUnregister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementProcess.OnPreUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementProcess.OnPostUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementProcess.OnMovementProfileChanged(Zigurous.CharacterController.MovementProfile,Zigurous.CharacterController.MovementProfile)"],"name":"MovementEffect","nameWithType":"MovementEffect","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nA type that activates a movement effect under certain conditions.\n","syntax":{"content":"public abstract class MovementEffect : MovementProcess","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.MovementEffect"},{"children":null,"id":"condition","implements":null,"inheritance":null,"inheritedMembers":null,"name":"condition","nameWithType":"MovementEffect.condition","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementEffect","remarks":null,"summary":"\nThe movement condition(s) that trigger the effect.\n","syntax":{"content":"public abstract MovementFlags condition { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementEffect.condition"},{"children":null,"id":"OnEffectActivated","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnEffectActivated()","nameWithType":"MovementEffect.OnEffectActivated()","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementEffect","remarks":null,"summary":null,"syntax":{"content":"protected abstract void OnEffectActivated()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementEffect.OnEffectActivated"},{"children":null,"id":"OnEffectDeactivated","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnEffectDeactivated()","nameWithType":"MovementEffect.OnEffectDeactivated()","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementEffect","remarks":null,"summary":null,"syntax":{"content":"protected abstract void OnEffectDeactivated()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementEffect.OnEffectDeactivated"}]},{"items":[{"children":["Zigurous.CharacterController.MovementFlags.Airborne","Zigurous.CharacterController.MovementFlags.Attacking","Zigurous.CharacterController.MovementFlags.Backpedaling","Zigurous.CharacterController.MovementFlags.Crouching","Zigurous.CharacterController.MovementFlags.Dashing","Zigurous.CharacterController.MovementFlags.Dodging","Zigurous.CharacterController.MovementFlags.Grounded","Zigurous.CharacterController.MovementFlags.Idle","Zigurous.CharacterController.MovementFlags.Jetpacking","Zigurous.CharacterController.MovementFlags.Jumping","Zigurous.CharacterController.MovementFlags.Landed","Zigurous.CharacterController.MovementFlags.Moving","Zigurous.CharacterController.MovementFlags.NoClip","Zigurous.CharacterController.MovementFlags.None","Zigurous.CharacterController.MovementFlags.Recovering","Zigurous.CharacterController.MovementFlags.Sprinting","Zigurous.CharacterController.MovementFlags.Standing","Zigurous.CharacterController.MovementFlags.Strafing","Zigurous.CharacterController.MovementFlags.Walking"],"id":"MovementFlags","implements":null,"inheritance":null,"inheritedMembers":null,"name":"MovementFlags","nameWithType":"MovementFlags","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nThe movement flags of a character.\n","syntax":{"content":"public enum MovementFlags","parameters":null,"return":null,"typeParameters":null},"type":"Enum","uid":"Zigurous.CharacterController.MovementFlags"},{"children":null,"id":"None","implements":null,"inheritance":null,"inheritedMembers":null,"name":"None","nameWithType":"MovementFlags.None","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementFlags","remarks":null,"summary":null,"syntax":{"content":"None = 0","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementFlags.None"},{"children":null,"id":"Idle","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Idle","nameWithType":"MovementFlags.Idle","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementFlags","remarks":null,"summary":null,"syntax":{"content":"Idle = 1","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementFlags.Idle"},{"children":null,"id":"Grounded","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Grounded","nameWithType":"MovementFlags.Grounded","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementFlags","remarks":null,"summary":null,"syntax":{"content":"Grounded = 2","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementFlags.Grounded"},{"children":null,"id":"Airborne","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Airborne","nameWithType":"MovementFlags.Airborne","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementFlags","remarks":null,"summary":null,"syntax":{"content":"Airborne = 4","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementFlags.Airborne"},{"children":null,"id":"Landed","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Landed","nameWithType":"MovementFlags.Landed","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementFlags","remarks":null,"summary":null,"syntax":{"content":"Landed = 8","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementFlags.Landed"},{"children":null,"id":"Recovering","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Recovering","nameWithType":"MovementFlags.Recovering","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementFlags","remarks":null,"summary":null,"syntax":{"content":"Recovering = 16","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementFlags.Recovering"},{"children":null,"id":"Moving","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Moving","nameWithType":"MovementFlags.Moving","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementFlags","remarks":null,"summary":null,"syntax":{"content":"Moving = 32","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementFlags.Moving"},{"children":null,"id":"Strafing","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Strafing","nameWithType":"MovementFlags.Strafing","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementFlags","remarks":null,"summary":null,"syntax":{"content":"Strafing = 64","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementFlags.Strafing"},{"children":null,"id":"Backpedaling","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Backpedaling","nameWithType":"MovementFlags.Backpedaling","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementFlags","remarks":null,"summary":null,"syntax":{"content":"Backpedaling = 128","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementFlags.Backpedaling"},{"children":null,"id":"Standing","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Standing","nameWithType":"MovementFlags.Standing","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementFlags","remarks":null,"summary":null,"syntax":{"content":"Standing = 256","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementFlags.Standing"},{"children":null,"id":"Crouching","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Crouching","nameWithType":"MovementFlags.Crouching","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementFlags","remarks":null,"summary":null,"syntax":{"content":"Crouching = 512","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementFlags.Crouching"},{"children":null,"id":"Sprinting","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Sprinting","nameWithType":"MovementFlags.Sprinting","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementFlags","remarks":null,"summary":null,"syntax":{"content":"Sprinting = 1024","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementFlags.Sprinting"},{"children":null,"id":"Walking","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Walking","nameWithType":"MovementFlags.Walking","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementFlags","remarks":null,"summary":null,"syntax":{"content":"Walking = 2048","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementFlags.Walking"},{"children":null,"id":"Dodging","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Dodging","nameWithType":"MovementFlags.Dodging","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementFlags","remarks":null,"summary":null,"syntax":{"content":"Dodging = 4096","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementFlags.Dodging"},{"children":null,"id":"Dashing","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Dashing","nameWithType":"MovementFlags.Dashing","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementFlags","remarks":null,"summary":null,"syntax":{"content":"Dashing = 8192","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementFlags.Dashing"},{"children":null,"id":"Jumping","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Jumping","nameWithType":"MovementFlags.Jumping","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementFlags","remarks":null,"summary":null,"syntax":{"content":"Jumping = 16384","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementFlags.Jumping"},{"children":null,"id":"Jetpacking","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Jetpacking","nameWithType":"MovementFlags.Jetpacking","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementFlags","remarks":null,"summary":null,"syntax":{"content":"Jetpacking = 32768","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementFlags.Jetpacking"},{"children":null,"id":"Attacking","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Attacking","nameWithType":"MovementFlags.Attacking","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementFlags","remarks":null,"summary":null,"syntax":{"content":"Attacking = 65536","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementFlags.Attacking"},{"children":null,"id":"NoClip","implements":null,"inheritance":null,"inheritedMembers":null,"name":"NoClip","nameWithType":"MovementFlags.NoClip","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementFlags","remarks":null,"summary":null,"syntax":{"content":"NoClip = 131072","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementFlags.NoClip"}]},{"items":[{"children":["Zigurous.CharacterController.MovementFlagsExtensions.Has(Zigurous.CharacterController.MovementFlags,Zigurous.CharacterController.MovementFlags)","Zigurous.CharacterController.MovementFlagsExtensions.HasAny(Zigurous.CharacterController.MovementFlags,Zigurous.CharacterController.MovementFlags)"],"id":"MovementFlagsExtensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"MovementFlagsExtensions","nameWithType":"MovementFlagsExtensions","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nExtension methods for <xref href=\"Zigurous.CharacterController.MovementFlags\" data-throw-if-not-resolved=\"false\"></xref>.\n","syntax":{"content":"public static class MovementFlagsExtensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.MovementFlagsExtensions"},{"children":null,"id":"Has(Zigurous.CharacterController.MovementFlags,Zigurous.CharacterController.MovementFlags)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Has(MovementFlags, MovementFlags)","nameWithType":"MovementFlagsExtensions.Has(MovementFlags, MovementFlags)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementFlagsExtensions","remarks":null,"summary":"\nChecks if the movement flags contains a specified flag.\n","syntax":{"content":"public static bool Has(this MovementFlags flags, MovementFlags flag)","parameters":[{"description":"The movement flags to check.","id":"flags","type":"Zigurous.CharacterController.MovementFlags"},{"description":"The other flag to check for.","id":"flag","type":"Zigurous.CharacterController.MovementFlags"}],"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementFlagsExtensions.Has(Zigurous.CharacterController.MovementFlags,Zigurous.CharacterController.MovementFlags)"},{"children":null,"id":"HasAny(Zigurous.CharacterController.MovementFlags,Zigurous.CharacterController.MovementFlags)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"HasAny(MovementFlags, MovementFlags)","nameWithType":"MovementFlagsExtensions.HasAny(MovementFlags, MovementFlags)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementFlagsExtensions","remarks":null,"summary":"\nChecks if the movement flags contains any of the other flags.\n","syntax":{"content":"public static bool HasAny(this MovementFlags flags, MovementFlags other)","parameters":[{"description":"The movement flags to check.","id":"flags","type":"Zigurous.CharacterController.MovementFlags"},{"description":"The other flags to check for.","id":"other","type":"Zigurous.CharacterController.MovementFlags"}],"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementFlagsExtensions.HasAny(Zigurous.CharacterController.MovementFlags,Zigurous.CharacterController.MovementFlags)"}]},{"items":[{"children":["Zigurous.CharacterController.MovementHandler.GetAnimationDirection(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementHandler.GetDirection(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementHandler.GetRotation(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementHandler.movableConditions","Zigurous.CharacterController.MovementHandler.movementStyle","Zigurous.CharacterController.MovementHandler.unmovableConditions"],"id":"MovementHandler","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"MovementHandler","nameWithType":"MovementHandler","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nA movement style handler that calculates the direction and rotation of\nthe character relative to the camera.\n","syntax":{"content":"public abstract class MovementHandler","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.MovementHandler"},{"children":null,"id":"movementStyle","implements":null,"inheritance":null,"inheritedMembers":null,"name":"movementStyle","nameWithType":"MovementHandler.movementStyle","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementHandler","remarks":null,"summary":"\nThe type of movement style.\n","syntax":{"content":"public virtual MovementStyle movementStyle { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.CharacterController.MovementStyle"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementHandler.movementStyle"},{"children":null,"id":"movableConditions","implements":null,"inheritance":null,"inheritedMembers":null,"name":"movableConditions","nameWithType":"MovementHandler.movableConditions","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementHandler","remarks":null,"summary":"\nThe conditions that must be met for the character to move.\n","syntax":{"content":"public virtual MovementFlags movableConditions { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementHandler.movableConditions"},{"children":null,"id":"unmovableConditions","implements":null,"inheritance":null,"inheritedMembers":null,"name":"unmovableConditions","nameWithType":"MovementHandler.unmovableConditions","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementHandler","remarks":null,"summary":"\nThe conditions that prevent the character from moving.\n","syntax":{"content":"public virtual MovementFlags unmovableConditions { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementHandler.unmovableConditions"},{"children":null,"id":"GetDirection(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetDirection(MovementController, MovementState)","nameWithType":"MovementHandler.GetDirection(MovementController, MovementState)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementHandler","remarks":null,"summary":"\nDetermines the character&apos;s movement direction.\n","syntax":{"content":"public abstract Vector3 GetDirection(MovementController controller, MovementState state)","parameters":[{"description":"The movement controller determining the direction.","id":"controller","type":"Zigurous.CharacterController.MovementController"},{"description":"The current movement state.","id":"state","type":"Zigurous.CharacterController.MovementState"}],"return":{"description":"The new movement direction.","type":"Global.Vector3"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementHandler.GetDirection(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)"},{"children":null,"id":"GetRotation(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetRotation(MovementController, MovementState)","nameWithType":"MovementHandler.GetRotation(MovementController, MovementState)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementHandler","remarks":null,"summary":"\nDetermines the character&apos;s rotation.\n","syntax":{"content":"public abstract Quaternion GetRotation(MovementController controller, MovementState state)","parameters":[{"description":"The movement controller determining the rotation.","id":"controller","type":"Zigurous.CharacterController.MovementController"},{"description":"The current movement state.","id":"state","type":"Zigurous.CharacterController.MovementState"}],"return":{"description":"The new character rotation.","type":"Global.Quaternion"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementHandler.GetRotation(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)"},{"children":null,"id":"GetAnimationDirection(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetAnimationDirection(MovementController, MovementState)","nameWithType":"MovementHandler.GetAnimationDirection(MovementController, MovementState)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementHandler","remarks":null,"summary":"\nDetermines the character&apos;s direction for animation purposes. This is\nusually the character&apos;s forward direction normalized in local space.\n","syntax":{"content":"public abstract Vector2 GetAnimationDirection(MovementController controller, MovementState state)","parameters":[{"description":"The movement controller determining the animation direction.","id":"controller","type":"Zigurous.CharacterController.MovementController"},{"description":"The current movement state.","id":"state","type":"Zigurous.CharacterController.MovementState"}],"return":{"description":"The new animation direction.","type":"Global.Vector2"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementHandler.GetAnimationDirection(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)"}]},{"items":[{"children":["Zigurous.CharacterController.MovementHandlerFirstPersonCombat.GetAnimationDirection(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementHandlerFirstPersonCombat.GetDirection(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementHandlerFirstPersonCombat.GetRotation(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementHandlerFirstPersonCombat.Instance","Zigurous.CharacterController.MovementHandlerFirstPersonCombat.movementStyle"],"id":"MovementHandlerFirstPersonCombat","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementHandler"],"inheritedMembers":["Zigurous.CharacterController.MovementHandler.movableConditions","Zigurous.CharacterController.MovementHandler.unmovableConditions"],"name":"MovementHandlerFirstPersonCombat","nameWithType":"MovementHandlerFirstPersonCombat","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nA movement handler that moves the character relative to the camera&apos;s\ndirection. The character can strafe and move backwards while always\nfacing away from the camera. This movement style should be used in\nconjunction with a first person camera setup.\n","syntax":{"content":"public class MovementHandlerFirstPersonCombat : MovementHandler","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.MovementHandlerFirstPersonCombat"},{"children":null,"id":"Instance","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Instance","nameWithType":"MovementHandlerFirstPersonCombat.Instance","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementHandlerFirstPersonCombat","remarks":null,"summary":"\nThe shared instance of the first person combat movement handler.\n","syntax":{"content":"public static readonly Lazy<MovementHandlerFirstPersonCombat> Instance","parameters":null,"return":{"description":null,"type":"Global.Lazy{Zigurous.CharacterController.MovementHandlerFirstPersonCombat}"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementHandlerFirstPersonCombat.Instance"},{"children":null,"id":"movementStyle","implements":null,"inheritance":null,"inheritedMembers":null,"name":"movementStyle","nameWithType":"MovementHandlerFirstPersonCombat.movementStyle","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementHandlerFirstPersonCombat","remarks":null,"summary":"\nThe type of movement style.\n","syntax":{"content":"public override MovementStyle movementStyle { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.CharacterController.MovementStyle"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementHandlerFirstPersonCombat.movementStyle"},{"children":null,"id":"GetDirection(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetDirection(MovementController, MovementState)","nameWithType":"MovementHandlerFirstPersonCombat.GetDirection(MovementController, MovementState)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementHandlerFirstPersonCombat","remarks":null,"summary":"\nDetermines the character&apos;s movement direction.\n","syntax":{"content":"public override Vector3 GetDirection(MovementController controller, MovementState state)","parameters":[{"description":"The movement controller determining the direction.","id":"controller","type":"Zigurous.CharacterController.MovementController"},{"description":"The current movement state.","id":"state","type":"Zigurous.CharacterController.MovementState"}],"return":{"description":"The new movement direction.","type":"Global.Vector3"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementHandlerFirstPersonCombat.GetDirection(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)"},{"children":null,"id":"GetRotation(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetRotation(MovementController, MovementState)","nameWithType":"MovementHandlerFirstPersonCombat.GetRotation(MovementController, MovementState)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementHandlerFirstPersonCombat","remarks":null,"summary":"\nDetermines the character&apos;s rotation.\n","syntax":{"content":"public override Quaternion GetRotation(MovementController controller, MovementState state)","parameters":[{"description":"The movement controller determining the rotation.","id":"controller","type":"Zigurous.CharacterController.MovementController"},{"description":"The current movement state.","id":"state","type":"Zigurous.CharacterController.MovementState"}],"return":{"description":"The new character rotation.","type":"Global.Quaternion"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementHandlerFirstPersonCombat.GetRotation(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)"},{"children":null,"id":"GetAnimationDirection(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetAnimationDirection(MovementController, MovementState)","nameWithType":"MovementHandlerFirstPersonCombat.GetAnimationDirection(MovementController, MovementState)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementHandlerFirstPersonCombat","remarks":null,"summary":"\nDetermines the character&apos;s direction for animation purposes. This is\nusually the character&apos;s forward direction normalized in local space.\n","syntax":{"content":"public override Vector2 GetAnimationDirection(MovementController controller, MovementState state)","parameters":[{"description":"The movement controller determining the animation direction.","id":"controller","type":"Zigurous.CharacterController.MovementController"},{"description":"The current movement state.","id":"state","type":"Zigurous.CharacterController.MovementState"}],"return":{"description":"The new animation direction.","type":"Global.Vector2"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementHandlerFirstPersonCombat.GetAnimationDirection(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)"}]},{"items":[{"children":["Zigurous.CharacterController.MovementHandlerNone.GetAnimationDirection(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementHandlerNone.GetDirection(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementHandlerNone.GetRotation(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementHandlerNone.Instance","Zigurous.CharacterController.MovementHandlerNone.movementStyle","Zigurous.CharacterController.MovementHandlerNone.unmovableConditions"],"id":"MovementHandlerNone","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementHandler"],"inheritedMembers":["Zigurous.CharacterController.MovementHandler.movableConditions"],"name":"MovementHandlerNone","nameWithType":"MovementHandlerNone","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nA movement handler that prevents the character from moving.\n","syntax":{"content":"public class MovementHandlerNone : MovementHandler","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.MovementHandlerNone"},{"children":null,"id":"Instance","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Instance","nameWithType":"MovementHandlerNone.Instance","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementHandlerNone","remarks":null,"summary":"\nThe shared instance of the no movement handler.\n","syntax":{"content":"public static readonly Lazy<MovementHandlerNone> Instance","parameters":null,"return":{"description":null,"type":"Global.Lazy{Zigurous.CharacterController.MovementHandlerNone}"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementHandlerNone.Instance"},{"children":null,"id":"movementStyle","implements":null,"inheritance":null,"inheritedMembers":null,"name":"movementStyle","nameWithType":"MovementHandlerNone.movementStyle","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementHandlerNone","remarks":null,"summary":"\nThe type of movement style.\n","syntax":{"content":"public override MovementStyle movementStyle { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.CharacterController.MovementStyle"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementHandlerNone.movementStyle"},{"children":null,"id":"unmovableConditions","implements":null,"inheritance":null,"inheritedMembers":null,"name":"unmovableConditions","nameWithType":"MovementHandlerNone.unmovableConditions","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementHandlerNone","remarks":null,"summary":"\nThe conditions that prevent the character from moving.\n","syntax":{"content":"public override MovementFlags unmovableConditions { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementHandlerNone.unmovableConditions"},{"children":null,"id":"GetDirection(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetDirection(MovementController, MovementState)","nameWithType":"MovementHandlerNone.GetDirection(MovementController, MovementState)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementHandlerNone","remarks":null,"summary":"\nDetermines the character&apos;s movement direction.\n","syntax":{"content":"public override Vector3 GetDirection(MovementController controller, MovementState state)","parameters":[{"description":"The movement controller determining the direction.","id":"controller","type":"Zigurous.CharacterController.MovementController"},{"description":"The current movement state.","id":"state","type":"Zigurous.CharacterController.MovementState"}],"return":{"description":"The new movement direction.","type":"Global.Vector3"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementHandlerNone.GetDirection(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)"},{"children":null,"id":"GetRotation(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetRotation(MovementController, MovementState)","nameWithType":"MovementHandlerNone.GetRotation(MovementController, MovementState)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementHandlerNone","remarks":null,"summary":"\nDetermines the character&apos;s rotation.\n","syntax":{"content":"public override Quaternion GetRotation(MovementController controller, MovementState state)","parameters":[{"description":"The movement controller determining the rotation.","id":"controller","type":"Zigurous.CharacterController.MovementController"},{"description":"The current movement state.","id":"state","type":"Zigurous.CharacterController.MovementState"}],"return":{"description":"The new character rotation.","type":"Global.Quaternion"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementHandlerNone.GetRotation(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)"},{"children":null,"id":"GetAnimationDirection(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetAnimationDirection(MovementController, MovementState)","nameWithType":"MovementHandlerNone.GetAnimationDirection(MovementController, MovementState)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementHandlerNone","remarks":null,"summary":"\nDetermines the character&apos;s direction for animation purposes. This is\nusually the character&apos;s forward direction normalized in local space.\n","syntax":{"content":"public override Vector2 GetAnimationDirection(MovementController controller, MovementState state)","parameters":[{"description":"The movement controller determining the animation direction.","id":"controller","type":"Zigurous.CharacterController.MovementController"},{"description":"The current movement state.","id":"state","type":"Zigurous.CharacterController.MovementState"}],"return":{"description":"The new animation direction.","type":"Global.Vector2"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementHandlerNone.GetAnimationDirection(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)"}]},{"items":[{"children":["Zigurous.CharacterController.MovementHandlerThirdPersonAdventure.GetAnimationDirection(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementHandlerThirdPersonAdventure.GetDirection(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementHandlerThirdPersonAdventure.GetRotation(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementHandlerThirdPersonAdventure.Instance","Zigurous.CharacterController.MovementHandlerThirdPersonAdventure.movementStyle"],"id":"MovementHandlerThirdPersonAdventure","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementHandler"],"inheritedMembers":["Zigurous.CharacterController.MovementHandler.movableConditions","Zigurous.CharacterController.MovementHandler.unmovableConditions"],"name":"MovementHandlerThirdPersonAdventure","nameWithType":"MovementHandlerThirdPersonAdventure","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nA movement handler that moves the character relative to the input in\nrelation to the camera. The character will always move forward while\nrotating to face the direction of the input. For example, if the\ncharacter moves backwards, then they will rotate towards the camera and\nbegin walking forward in that direction. This movement style should be\nused in conjunction with a third person camera setup.\n","syntax":{"content":"public class MovementHandlerThirdPersonAdventure : MovementHandler","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.MovementHandlerThirdPersonAdventure"},{"children":null,"id":"Instance","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Instance","nameWithType":"MovementHandlerThirdPersonAdventure.Instance","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementHandlerThirdPersonAdventure","remarks":null,"summary":"\nThe shared instance of the third person adventure movement handler.\n","syntax":{"content":"public static readonly Lazy<MovementHandlerThirdPersonAdventure> Instance","parameters":null,"return":{"description":null,"type":"Global.Lazy{Zigurous.CharacterController.MovementHandlerThirdPersonAdventure}"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementHandlerThirdPersonAdventure.Instance"},{"children":null,"id":"movementStyle","implements":null,"inheritance":null,"inheritedMembers":null,"name":"movementStyle","nameWithType":"MovementHandlerThirdPersonAdventure.movementStyle","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementHandlerThirdPersonAdventure","remarks":null,"summary":"\nThe type of movement style.\n","syntax":{"content":"public override MovementStyle movementStyle { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.CharacterController.MovementStyle"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementHandlerThirdPersonAdventure.movementStyle"},{"children":null,"id":"GetDirection(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetDirection(MovementController, MovementState)","nameWithType":"MovementHandlerThirdPersonAdventure.GetDirection(MovementController, MovementState)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementHandlerThirdPersonAdventure","remarks":null,"summary":"\nDetermines the character&apos;s movement direction.\n","syntax":{"content":"public override Vector3 GetDirection(MovementController controller, MovementState state)","parameters":[{"description":"The movement controller determining the direction.","id":"controller","type":"Zigurous.CharacterController.MovementController"},{"description":"The current movement state.","id":"state","type":"Zigurous.CharacterController.MovementState"}],"return":{"description":"The new movement direction.","type":"Global.Vector3"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementHandlerThirdPersonAdventure.GetDirection(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)"},{"children":null,"id":"GetRotation(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetRotation(MovementController, MovementState)","nameWithType":"MovementHandlerThirdPersonAdventure.GetRotation(MovementController, MovementState)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementHandlerThirdPersonAdventure","remarks":null,"summary":"\nDetermines the character&apos;s rotation.\n","syntax":{"content":"public override Quaternion GetRotation(MovementController controller, MovementState state)","parameters":[{"description":"The movement controller determining the rotation.","id":"controller","type":"Zigurous.CharacterController.MovementController"},{"description":"The current movement state.","id":"state","type":"Zigurous.CharacterController.MovementState"}],"return":{"description":"The new character rotation.","type":"Global.Quaternion"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementHandlerThirdPersonAdventure.GetRotation(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)"},{"children":null,"id":"GetAnimationDirection(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetAnimationDirection(MovementController, MovementState)","nameWithType":"MovementHandlerThirdPersonAdventure.GetAnimationDirection(MovementController, MovementState)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementHandlerThirdPersonAdventure","remarks":null,"summary":"\nDetermines the character&apos;s direction for animation purposes. This is\nusually the character&apos;s forward direction normalized in local space.\n","syntax":{"content":"public override Vector2 GetAnimationDirection(MovementController controller, MovementState state)","parameters":[{"description":"The movement controller determining the animation direction.","id":"controller","type":"Zigurous.CharacterController.MovementController"},{"description":"The current movement state.","id":"state","type":"Zigurous.CharacterController.MovementState"}],"return":{"description":"The new animation direction.","type":"Global.Vector2"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementHandlerThirdPersonAdventure.GetAnimationDirection(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)"}]},{"items":[{"children":["Zigurous.CharacterController.MovementHandlerThirdPersonCombat.GetAnimationDirection(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementHandlerThirdPersonCombat.GetDirection(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementHandlerThirdPersonCombat.GetRotation(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementHandlerThirdPersonCombat.Instance","Zigurous.CharacterController.MovementHandlerThirdPersonCombat.movementStyle"],"id":"MovementHandlerThirdPersonCombat","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementHandler"],"inheritedMembers":["Zigurous.CharacterController.MovementHandler.movableConditions","Zigurous.CharacterController.MovementHandler.unmovableConditions"],"name":"MovementHandlerThirdPersonCombat","nameWithType":"MovementHandlerThirdPersonCombat","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nA movement handler that moves the character relative to the camera&apos;s\ndirection. The character can strafe and move backwards while always\nfacing away from the camera. This movement style should be used in\nconjunction with a third person camera setup.\n","syntax":{"content":"public class MovementHandlerThirdPersonCombat : MovementHandler","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.MovementHandlerThirdPersonCombat"},{"children":null,"id":"Instance","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Instance","nameWithType":"MovementHandlerThirdPersonCombat.Instance","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementHandlerThirdPersonCombat","remarks":null,"summary":"\nThe shared instance of the third person combat movement handler.\n","syntax":{"content":"public static readonly Lazy<MovementHandlerThirdPersonCombat> Instance","parameters":null,"return":{"description":null,"type":"Global.Lazy{Zigurous.CharacterController.MovementHandlerThirdPersonCombat}"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementHandlerThirdPersonCombat.Instance"},{"children":null,"id":"movementStyle","implements":null,"inheritance":null,"inheritedMembers":null,"name":"movementStyle","nameWithType":"MovementHandlerThirdPersonCombat.movementStyle","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementHandlerThirdPersonCombat","remarks":null,"summary":"\nThe type of movement style.\n","syntax":{"content":"public override MovementStyle movementStyle { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.CharacterController.MovementStyle"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementHandlerThirdPersonCombat.movementStyle"},{"children":null,"id":"GetDirection(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetDirection(MovementController, MovementState)","nameWithType":"MovementHandlerThirdPersonCombat.GetDirection(MovementController, MovementState)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementHandlerThirdPersonCombat","remarks":null,"summary":"\nDetermines the character&apos;s movement direction.\n","syntax":{"content":"public override Vector3 GetDirection(MovementController controller, MovementState state)","parameters":[{"description":"The movement controller determining the direction.","id":"controller","type":"Zigurous.CharacterController.MovementController"},{"description":"The current movement state.","id":"state","type":"Zigurous.CharacterController.MovementState"}],"return":{"description":"The new movement direction.","type":"Global.Vector3"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementHandlerThirdPersonCombat.GetDirection(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)"},{"children":null,"id":"GetRotation(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetRotation(MovementController, MovementState)","nameWithType":"MovementHandlerThirdPersonCombat.GetRotation(MovementController, MovementState)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementHandlerThirdPersonCombat","remarks":null,"summary":"\nDetermines the character&apos;s rotation.\n","syntax":{"content":"public override Quaternion GetRotation(MovementController controller, MovementState state)","parameters":[{"description":"The movement controller determining the rotation.","id":"controller","type":"Zigurous.CharacterController.MovementController"},{"description":"The current movement state.","id":"state","type":"Zigurous.CharacterController.MovementState"}],"return":{"description":"The new character rotation.","type":"Global.Quaternion"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementHandlerThirdPersonCombat.GetRotation(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)"},{"children":null,"id":"GetAnimationDirection(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetAnimationDirection(MovementController, MovementState)","nameWithType":"MovementHandlerThirdPersonCombat.GetAnimationDirection(MovementController, MovementState)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementHandlerThirdPersonCombat","remarks":null,"summary":"\nDetermines the character&apos;s direction for animation purposes. This is\nusually the character&apos;s forward direction normalized in local space.\n","syntax":{"content":"public override Vector2 GetAnimationDirection(MovementController controller, MovementState state)","parameters":[{"description":"The movement controller determining the animation direction.","id":"controller","type":"Zigurous.CharacterController.MovementController"},{"description":"The current movement state.","id":"state","type":"Zigurous.CharacterController.MovementState"}],"return":{"description":"The new animation direction.","type":"Global.Vector2"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementHandlerThirdPersonCombat.GetAnimationDirection(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)"}]},{"items":[{"children":["Zigurous.CharacterController.MovementProcess.controller","Zigurous.CharacterController.MovementProcess.id","Zigurous.CharacterController.MovementProcess.OnMovementProfileChanged(Zigurous.CharacterController.MovementProfile,Zigurous.CharacterController.MovementProfile)","Zigurous.CharacterController.MovementProcess.OnPostUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementProcess.OnPreUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementProcess.OnRegister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUnregister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementProcess.order","Zigurous.CharacterController.MovementProcess.registered"],"id":"MovementProcess","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"MovementProcess","nameWithType":"MovementProcess","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nA type that is registered to a movement controller and is updated every\nframe by the controller.\n","syntax":{"content":"public abstract class MovementProcess","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.MovementProcess"},{"children":null,"id":"controller","implements":null,"inheritance":null,"inheritedMembers":null,"name":"controller","nameWithType":"MovementProcess.controller","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProcess","remarks":null,"summary":"\nThe movement controller handling the process.\n","syntax":{"content":"public MovementController controller { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.CharacterController.MovementController"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementProcess.controller"},{"children":null,"id":"registered","implements":null,"inheritance":null,"inheritedMembers":null,"name":"registered","nameWithType":"MovementProcess.registered","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProcess","remarks":null,"summary":"\nWhether the process has been registered to a controller.\n","syntax":{"content":"public bool registered { get; }","parameters":[],"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementProcess.registered"},{"children":null,"id":"order","implements":null,"inheritance":null,"inheritedMembers":null,"name":"order","nameWithType":"MovementProcess.order","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProcess","remarks":null,"summary":"\nDetermines the order in which processes are handled. The process\nwith the lowest order value is handled first.\n","syntax":{"content":"public virtual int order { get; }","parameters":[],"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementProcess.order"},{"children":null,"id":"id","implements":null,"inheritance":null,"inheritedMembers":null,"name":"id","nameWithType":"MovementProcess.id","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProcess","remarks":null,"summary":"\nThe unique identifier of the movement process.\n","syntax":{"content":"public virtual int id { get; }","parameters":[],"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementProcess.id"},{"children":null,"id":"OnRegister(Zigurous.CharacterController.MovementController)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnRegister(MovementController)","nameWithType":"MovementProcess.OnRegister(MovementController)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProcess","remarks":null,"summary":"\nA callback invoked when the process is registered to a controller.\n","syntax":{"content":"protected virtual void OnRegister(MovementController controller)","parameters":[{"description":"The controller the process was registered to.","id":"controller","type":"Zigurous.CharacterController.MovementController"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementProcess.OnRegister(Zigurous.CharacterController.MovementController)"},{"children":null,"id":"OnUnregister(Zigurous.CharacterController.MovementController)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnUnregister(MovementController)","nameWithType":"MovementProcess.OnUnregister(MovementController)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProcess","remarks":null,"summary":"\nA callback invoked when the process is unregistered from a controller.\n","syntax":{"content":"protected virtual void OnUnregister(MovementController controller)","parameters":[{"description":"The controller the process was unregistered from.","id":"controller","type":"Zigurous.CharacterController.MovementController"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementProcess.OnUnregister(Zigurous.CharacterController.MovementController)"},{"children":null,"id":"OnUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnUpdate(MovementController, MovementState)","nameWithType":"MovementProcess.OnUpdate(MovementController, MovementState)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProcess","remarks":null,"summary":"\nHandles the movement process logic every frame by the controller.\n","syntax":{"content":"protected virtual void OnUpdate(MovementController controller, MovementState state)","parameters":[{"description":"The controller updating the process.","id":"controller","type":"Zigurous.CharacterController.MovementController"},{"description":"The current movement state of the character.","id":"state","type":"Zigurous.CharacterController.MovementState"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementProcess.OnUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)"},{"children":null,"id":"OnPreUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnPreUpdate(MovementController, MovementState)","nameWithType":"MovementProcess.OnPreUpdate(MovementController, MovementState)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProcess","remarks":null,"summary":"\nChecks for any state changes before the process is handled.\n","syntax":{"content":"protected virtual void OnPreUpdate(MovementController controller, MovementState state)","parameters":[{"description":"The controller updating the process.","id":"controller","type":"Zigurous.CharacterController.MovementController"},{"description":"The current movement state of the character.","id":"state","type":"Zigurous.CharacterController.MovementState"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementProcess.OnPreUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)"},{"children":null,"id":"OnPostUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnPostUpdate(MovementController, MovementState)","nameWithType":"MovementProcess.OnPostUpdate(MovementController, MovementState)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProcess","remarks":null,"summary":"\nChecks for any state changes after the process is handled.\n","syntax":{"content":"protected virtual void OnPostUpdate(MovementController controller, MovementState state)","parameters":[{"description":"The controller updating the process.","id":"controller","type":"Zigurous.CharacterController.MovementController"},{"description":"The current movement state of the character.","id":"state","type":"Zigurous.CharacterController.MovementState"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementProcess.OnPostUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)"},{"children":null,"id":"OnMovementProfileChanged(Zigurous.CharacterController.MovementProfile,Zigurous.CharacterController.MovementProfile)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnMovementProfileChanged(MovementProfile, MovementProfile)","nameWithType":"MovementProcess.OnMovementProfileChanged(MovementProfile, MovementProfile)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProcess","remarks":null,"summary":"\nA callback invoked when the movement profile changes.\n","syntax":{"content":"protected virtual void OnMovementProfileChanged(MovementProfile newProfile, MovementProfile oldProfile)","parameters":[{"description":"The new movement profile.","id":"newProfile","type":"Zigurous.CharacterController.MovementProfile"},{"description":"The previous movement profile.","id":"oldProfile","type":"Zigurous.CharacterController.MovementProfile"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementProcess.OnMovementProfileChanged(Zigurous.CharacterController.MovementProfile,Zigurous.CharacterController.MovementProfile)"}]},{"items":[{"children":["Zigurous.CharacterController.MovementProcessManager.#ctor(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcessManager.Clear","Zigurous.CharacterController.MovementProcessManager.Count","Zigurous.CharacterController.MovementProcessManager.Get``1","Zigurous.CharacterController.MovementProcessManager.Item(System.Int32)","Zigurous.CharacterController.MovementProcessManager.Register(Zigurous.CharacterController.MovementProcess)","Zigurous.CharacterController.MovementProcessManager.Register``1","Zigurous.CharacterController.MovementProcessManager.Unregister(Zigurous.CharacterController.MovementProcess)","Zigurous.CharacterController.MovementProcessManager.Unregister``1"],"id":"MovementProcessManager","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"MovementProcessManager","nameWithType":"MovementProcessManager","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nManages the movement processes for a movement controller.\n","syntax":{"content":"public sealed class MovementProcessManager","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.MovementProcessManager"},{"children":null,"id":"Count","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Count","nameWithType":"MovementProcessManager.Count","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProcessManager","remarks":null,"summary":"\nThe number of processes registered to the controller.\n","syntax":{"content":"public int Count { get; }","parameters":[],"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementProcessManager.Count"},{"children":null,"id":"Item(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Item[Int32]","nameWithType":"MovementProcessManager.Item[Int32]","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProcessManager","remarks":null,"summary":"\nGets the process at the specified index.\n","syntax":{"content":"public MovementProcess this[int index] { get; }","parameters":[{"description":"The index of the process to get.","id":"index","type":"System.Int32"}],"return":{"description":"The process at the specified index.","type":"Zigurous.CharacterController.MovementProcess"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementProcessManager.Item(System.Int32)"},{"children":null,"id":"#ctor(Zigurous.CharacterController.MovementController)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"MovementProcessManager(MovementController)","nameWithType":"MovementProcessManager.MovementProcessManager(MovementController)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProcessManager","remarks":null,"summary":"\nInitializes the process manager for the specified controller.\n","syntax":{"content":"public MovementProcessManager(MovementController controller)","parameters":[{"description":"The controller to initialize the manager for.","id":"controller","type":"Zigurous.CharacterController.MovementController"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.CharacterController.MovementProcessManager.#ctor(Zigurous.CharacterController.MovementController)"},{"children":null,"id":"Get``1","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Get<T>()","nameWithType":"MovementProcessManager.Get<T>()","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProcessManager","remarks":null,"summary":"\nReturns the movement process of the specified type.\n","syntax":{"content":"public T Get<T>()\n    where T : MovementProcess","parameters":null,"return":{"description":"The movement process of the specified type, or null if not registered.","type":"{T}"},"typeParameters":[{"description":"The type of the process to retrieve.","id":"T"}]},"type":"Method","uid":"Zigurous.CharacterController.MovementProcessManager.Get``1"},{"children":null,"id":"Register``1","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Register<T>()","nameWithType":"MovementProcessManager.Register<T>()","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProcessManager","remarks":null,"summary":"\nRegisters a process to the controller of the specified type.\n","syntax":{"content":"public T Register<T>()\n    where T : MovementProcess, new()","parameters":null,"return":{"description":"The registered process.","type":"{T}"},"typeParameters":[{"description":"The type of process to register.","id":"T"}]},"type":"Method","uid":"Zigurous.CharacterController.MovementProcessManager.Register``1"},{"children":null,"id":"Register(Zigurous.CharacterController.MovementProcess)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Register(MovementProcess)","nameWithType":"MovementProcessManager.Register(MovementProcess)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProcessManager","remarks":null,"summary":"\nRegisters a process to the controller.\n","syntax":{"content":"public bool Register(MovementProcess process)","parameters":[{"description":"The process to register.","id":"process","type":"Zigurous.CharacterController.MovementProcess"}],"return":{"description":"True if the process was registered, false if not.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementProcessManager.Register(Zigurous.CharacterController.MovementProcess)"},{"children":null,"id":"Unregister``1","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Unregister<T>()","nameWithType":"MovementProcessManager.Unregister<T>()","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProcessManager","remarks":null,"summary":"\nUnregisters a process from the controller of the specified type.\n","syntax":{"content":"public bool Unregister<T>()\n    where T : MovementProcess","parameters":null,"return":{"description":"True if the process was unregistered, false if not.","type":"System.Boolean"},"typeParameters":[{"description":"The type of process to unregister.","id":"T"}]},"type":"Method","uid":"Zigurous.CharacterController.MovementProcessManager.Unregister``1"},{"children":null,"id":"Unregister(Zigurous.CharacterController.MovementProcess)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Unregister(MovementProcess)","nameWithType":"MovementProcessManager.Unregister(MovementProcess)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProcessManager","remarks":null,"summary":"\nUnregisters a process from the controller.\n","syntax":{"content":"public bool Unregister(MovementProcess process)","parameters":[{"description":"The process to unregister.","id":"process","type":"Zigurous.CharacterController.MovementProcess"}],"return":{"description":"True if the process was unregistered, false if not.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementProcessManager.Unregister(Zigurous.CharacterController.MovementProcess)"},{"children":null,"id":"Clear","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clear()","nameWithType":"MovementProcessManager.Clear()","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProcessManager","remarks":null,"summary":"\nClears all of the processes from the controller.\n","syntax":{"content":"public void Clear()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementProcessManager.Clear"}]},{"items":[{"children":["Zigurous.CharacterController.MovementProfile.#ctor","Zigurous.CharacterController.MovementProfile.AddSettings``1(System.Boolean)","Zigurous.CharacterController.MovementProfile.animation","Zigurous.CharacterController.MovementProfile.Create","Zigurous.CharacterController.MovementProfile.crouch","Zigurous.CharacterController.MovementProfile.dash","Zigurous.CharacterController.MovementProfile.dodge","Zigurous.CharacterController.MovementProfile.edgeSlip","Zigurous.CharacterController.MovementProfile.fallHeight","Zigurous.CharacterController.MovementProfile.GetSettings``1","Zigurous.CharacterController.MovementProfile.gravity","Zigurous.CharacterController.MovementProfile.input","Zigurous.CharacterController.MovementProfile.jetpack","Zigurous.CharacterController.MovementProfile.jump","Zigurous.CharacterController.MovementProfile.movement","Zigurous.CharacterController.MovementProfile.noClip","Zigurous.CharacterController.MovementProfile.platformMovement","Zigurous.CharacterController.MovementProfile.RemoveSettings``1","Zigurous.CharacterController.MovementProfile.rigidbodyPush","Zigurous.CharacterController.MovementProfile.sprint","Zigurous.CharacterController.MovementProfile.stamina","Zigurous.CharacterController.MovementProfile.walk"],"id":"MovementProfile","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"MovementProfile","nameWithType":"MovementProfile","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nThe settings profile for a movement controller.\n","syntax":{"content":"public sealed class MovementProfile : ScriptableObject","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.MovementProfile"},{"children":null,"id":"animation","implements":null,"inheritance":null,"inheritedMembers":null,"name":"animation","nameWithType":"MovementProfile.animation","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProfile","remarks":null,"summary":"\nThe animation settings.\n","syntax":{"content":"public AnimationSettings animation { get; }","parameters":[],"return":{"description":null,"type":"Global.AnimationSettings"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementProfile.animation"},{"children":null,"id":"crouch","implements":null,"inheritance":null,"inheritedMembers":null,"name":"crouch","nameWithType":"MovementProfile.crouch","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProfile","remarks":null,"summary":"\nThe crouch settings.\n","syntax":{"content":"public CrouchSettings crouch { get; }","parameters":[],"return":{"description":null,"type":"Global.CrouchSettings"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementProfile.crouch"},{"children":null,"id":"dash","implements":null,"inheritance":null,"inheritedMembers":null,"name":"dash","nameWithType":"MovementProfile.dash","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProfile","remarks":null,"summary":"\nThe dash settings.\n","syntax":{"content":"public DashSettings dash { get; }","parameters":[],"return":{"description":null,"type":"Global.DashSettings"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementProfile.dash"},{"children":null,"id":"dodge","implements":null,"inheritance":null,"inheritedMembers":null,"name":"dodge","nameWithType":"MovementProfile.dodge","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProfile","remarks":null,"summary":"\nThe dodge settings.\n","syntax":{"content":"public DodgeSettings dodge { get; }","parameters":[],"return":{"description":null,"type":"Global.DodgeSettings"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementProfile.dodge"},{"children":null,"id":"edgeSlip","implements":null,"inheritance":null,"inheritedMembers":null,"name":"edgeSlip","nameWithType":"MovementProfile.edgeSlip","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProfile","remarks":null,"summary":"\nThe edge slip settings.\n","syntax":{"content":"public EdgeSlipSettings edgeSlip { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.CharacterController.EdgeSlipSettings"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementProfile.edgeSlip"},{"children":null,"id":"fallHeight","implements":null,"inheritance":null,"inheritedMembers":null,"name":"fallHeight","nameWithType":"MovementProfile.fallHeight","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProfile","remarks":null,"summary":"\nThe fall height settings.\n","syntax":{"content":"public FallHeightSettings fallHeight { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.CharacterController.FallHeightSettings"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementProfile.fallHeight"},{"children":null,"id":"gravity","implements":null,"inheritance":null,"inheritedMembers":null,"name":"gravity","nameWithType":"MovementProfile.gravity","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProfile","remarks":null,"summary":"\nThe gravity settings.\n","syntax":{"content":"public GravitySettings gravity { get; }","parameters":[],"return":{"description":null,"type":"Global.GravitySettings"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementProfile.gravity"},{"children":null,"id":"input","implements":null,"inheritance":null,"inheritedMembers":null,"name":"input","nameWithType":"MovementProfile.input","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProfile","remarks":null,"summary":"\nThe movement input settings.\n","syntax":{"content":"public InputSettings input { get; }","parameters":[],"return":{"description":null,"type":"Global.InputSettings"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementProfile.input"},{"children":null,"id":"jetpack","implements":null,"inheritance":null,"inheritedMembers":null,"name":"jetpack","nameWithType":"MovementProfile.jetpack","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProfile","remarks":null,"summary":"\nThe jetpack settings.\n","syntax":{"content":"public JetpackSettings jetpack { get; }","parameters":[],"return":{"description":null,"type":"Global.JetpackSettings"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementProfile.jetpack"},{"children":null,"id":"jump","implements":null,"inheritance":null,"inheritedMembers":null,"name":"jump","nameWithType":"MovementProfile.jump","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProfile","remarks":null,"summary":"\nThe jump settings.\n","syntax":{"content":"public JumpSettings jump { get; }","parameters":[],"return":{"description":null,"type":"Global.JumpSettings"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementProfile.jump"},{"children":null,"id":"movement","implements":null,"inheritance":null,"inheritedMembers":null,"name":"movement","nameWithType":"MovementProfile.movement","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProfile","remarks":null,"summary":"\nThe general movement settings.\n","syntax":{"content":"public GeneralSettings movement { get; }","parameters":[],"return":{"description":null,"type":"Global.GeneralSettings"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementProfile.movement"},{"children":null,"id":"noClip","implements":null,"inheritance":null,"inheritedMembers":null,"name":"noClip","nameWithType":"MovementProfile.noClip","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProfile","remarks":null,"summary":"\nThe no clip settings.\n","syntax":{"content":"public NoClipSettings noClip { get; }","parameters":[],"return":{"description":null,"type":"Global.NoClipSettings"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementProfile.noClip"},{"children":null,"id":"platformMovement","implements":null,"inheritance":null,"inheritedMembers":null,"name":"platformMovement","nameWithType":"MovementProfile.platformMovement","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProfile","remarks":null,"summary":"\nThe platform movement settings.\n","syntax":{"content":"public PlatformMovementSettings platformMovement { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.CharacterController.PlatformMovementSettings"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementProfile.platformMovement"},{"children":null,"id":"rigidbodyPush","implements":null,"inheritance":null,"inheritedMembers":null,"name":"rigidbodyPush","nameWithType":"MovementProfile.rigidbodyPush","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProfile","remarks":null,"summary":"\nThe rigidbody push settings.\n","syntax":{"content":"public RigidbodyPushSettings rigidbodyPush { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.CharacterController.RigidbodyPushSettings"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementProfile.rigidbodyPush"},{"children":null,"id":"sprint","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sprint","nameWithType":"MovementProfile.sprint","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProfile","remarks":null,"summary":"\nThe sprint settings.\n","syntax":{"content":"public SprintSettings sprint { get; }","parameters":[],"return":{"description":null,"type":"Global.SprintSettings"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementProfile.sprint"},{"children":null,"id":"stamina","implements":null,"inheritance":null,"inheritedMembers":null,"name":"stamina","nameWithType":"MovementProfile.stamina","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProfile","remarks":null,"summary":"\nThe stamina settings.\n","syntax":{"content":"public StaminaSettings stamina { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.CharacterController.StaminaSettings"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementProfile.stamina"},{"children":null,"id":"walk","implements":null,"inheritance":null,"inheritedMembers":null,"name":"walk","nameWithType":"MovementProfile.walk","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProfile","remarks":null,"summary":"\nThe walk settings.\n","syntax":{"content":"public WalkSettings walk { get; }","parameters":[],"return":{"description":null,"type":"Global.WalkSettings"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementProfile.walk"},{"children":null,"id":"#ctor","implements":null,"inheritance":null,"inheritedMembers":null,"name":"MovementProfile()","nameWithType":"MovementProfile.MovementProfile()","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProfile","remarks":null,"summary":"\nCreates a new movement settings profile.\n","syntax":{"content":"public MovementProfile()","parameters":null,"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.CharacterController.MovementProfile.#ctor"},{"children":null,"id":"Create","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Create()","nameWithType":"MovementProfile.Create()","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProfile","remarks":null,"summary":"\nCreates a new movement settings profile.\n","syntax":{"content":"public static MovementProfile Create()","parameters":null,"return":{"description":"The new movement settings profile.","type":"Zigurous.CharacterController.MovementProfile"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementProfile.Create"},{"children":null,"id":"GetSettings``1","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetSettings<T>()","nameWithType":"MovementProfile.GetSettings<T>()","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProfile","remarks":null,"summary":"\nGets the settings of the specified type.\n","syntax":{"content":"public T GetSettings<T>()\n    where T : MovementSettings","parameters":null,"return":{"description":"The settings of the specified type, or null if not present.","type":"{T}"},"typeParameters":[{"description":"The type of settings to get.","id":"T"}]},"type":"Method","uid":"Zigurous.CharacterController.MovementProfile.GetSettings``1"},{"children":null,"id":"AddSettings``1(System.Boolean)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"AddSettings<T>(Boolean)","nameWithType":"MovementProfile.AddSettings<T>(Boolean)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProfile","remarks":null,"summary":"\nAdds the settings of the specified type to the profile.\n","syntax":{"content":"public T AddSettings<T>(bool enabled = true)\n    where T : MovementSettings, new()","parameters":[{"description":"Whether the settings behavior is enabled (default=true).","id":"enabled","type":"System.Boolean"}],"return":{"description":"The settings added to the profile.","type":"{T}"},"typeParameters":[{"description":"The type of settings to add.","id":"T"}]},"type":"Method","uid":"Zigurous.CharacterController.MovementProfile.AddSettings``1(System.Boolean)"},{"children":null,"id":"RemoveSettings``1","implements":null,"inheritance":null,"inheritedMembers":null,"name":"RemoveSettings<T>()","nameWithType":"MovementProfile.RemoveSettings<T>()","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementProfile","remarks":null,"summary":"\nRemoves the settings of the specified type from the profile.\n","syntax":{"content":"public void RemoveSettings<T>()\n    where T : MovementSettings","parameters":null,"return":null,"typeParameters":[{"description":"The type of settings to remove.","id":"T"}]},"type":"Method","uid":"Zigurous.CharacterController.MovementProfile.RemoveSettings``1"}]},{"items":[{"children":["Zigurous.CharacterController.MovementSettings.active","Zigurous.CharacterController.MovementSettings.enabled","Zigurous.CharacterController.MovementSettings.isActiveAndEnabled","Zigurous.CharacterController.MovementSettings.OnActivate(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementSettings.OnDeactivate(Zigurous.CharacterController.MovementController)"],"id":"MovementSettings","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"MovementSettings","nameWithType":"MovementSettings","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nThe base class for all movement settings.\n","syntax":{"content":"[Serializable]\npublic abstract class MovementSettings","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.MovementSettings"},{"children":null,"id":"active","implements":null,"inheritance":null,"inheritedMembers":null,"name":"active","nameWithType":"MovementSettings.active","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementSettings","remarks":null,"summary":"\nWhether the settings are active on a movement profile. Inactive\nsettings will not display in the editor.\n","syntax":{"content":"public bool active { get; set; }","parameters":[],"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementSettings.active"},{"children":null,"id":"enabled","implements":null,"inheritance":null,"inheritedMembers":null,"name":"enabled","nameWithType":"MovementSettings.enabled","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementSettings","remarks":null,"summary":"\nTurns on or off the settings behavior. Enabled behaviors are updated\nevery frame.\n","syntax":{"content":"public bool enabled { get; set; }","parameters":[],"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementSettings.enabled"},{"children":null,"id":"isActiveAndEnabled","implements":null,"inheritance":null,"inheritedMembers":null,"name":"isActiveAndEnabled","nameWithType":"MovementSettings.isActiveAndEnabled","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementSettings","remarks":null,"summary":"\nWhether the settings are active and enabled.\n","syntax":{"content":"public bool isActiveAndEnabled { get; }","parameters":[],"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementSettings.isActiveAndEnabled"},{"children":null,"id":"OnActivate(Zigurous.CharacterController.MovementController)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnActivate(MovementController)","nameWithType":"MovementSettings.OnActivate(MovementController)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementSettings","remarks":null,"summary":"\nA callback invoked when the settings are activated on a controller.\n","syntax":{"content":"protected virtual void OnActivate(MovementController controller)","parameters":[{"description":"The controller that activated the settings.","id":"controller","type":"Zigurous.CharacterController.MovementController"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementSettings.OnActivate(Zigurous.CharacterController.MovementController)"},{"children":null,"id":"OnDeactivate(Zigurous.CharacterController.MovementController)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnDeactivate(MovementController)","nameWithType":"MovementSettings.OnDeactivate(MovementController)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementSettings","remarks":null,"summary":"\nA callback invoked when the settings are deactivated on a controller.\n","syntax":{"content":"protected virtual void OnDeactivate(MovementController controller)","parameters":[{"description":"The controller that deactivated the settings.","id":"controller","type":"Zigurous.CharacterController.MovementController"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementSettings.OnDeactivate(Zigurous.CharacterController.MovementController)"}]},{"items":[{"children":["Zigurous.CharacterController.MovementState.direction","Zigurous.CharacterController.MovementState.externalForce","Zigurous.CharacterController.MovementState.flags","Zigurous.CharacterController.MovementState.gravity","Zigurous.CharacterController.MovementState.ground","Zigurous.CharacterController.MovementState.input","Zigurous.CharacterController.MovementState.localDirection","Zigurous.CharacterController.MovementState.previousFlags","Zigurous.CharacterController.MovementState.rotation","Zigurous.CharacterController.MovementState.Set(Zigurous.CharacterController.MovementFlags,System.Boolean)","Zigurous.CharacterController.MovementState.speed"],"id":"MovementState","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"MovementState","nameWithType":"MovementState","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nA context object that represents a character&apos;s movement state.\n","syntax":{"content":"[Serializable]\npublic sealed class MovementState","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.MovementState"},{"children":null,"id":"flags","implements":null,"inheritance":null,"inheritedMembers":null,"name":"flags","nameWithType":"MovementState.flags","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementState","remarks":null,"summary":"\nThe active movement flags.\n","syntax":{"content":"public MovementFlags flags","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementState.flags"},{"children":null,"id":"previousFlags","implements":null,"inheritance":null,"inheritedMembers":null,"name":"previousFlags","nameWithType":"MovementState.previousFlags","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementState","remarks":null,"summary":"\nThe movement flags from the last frame.\n","syntax":{"content":"public MovementFlags previousFlags { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementState.previousFlags"},{"children":null,"id":"speed","implements":null,"inheritance":null,"inheritedMembers":null,"name":"speed","nameWithType":"MovementState.speed","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementState","remarks":null,"summary":"\nThe speed of the character.\n","syntax":{"content":"public float speed","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementState.speed"},{"children":null,"id":"input","implements":null,"inheritance":null,"inheritedMembers":null,"name":"input","nameWithType":"MovementState.input","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementState","remarks":null,"summary":"\nThe movement vector read from the input system after deadzone\nprocessing is applied.\n","syntax":{"content":"public Vector2 input","parameters":null,"return":{"description":null,"type":"Global.Vector2"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementState.input"},{"children":null,"id":"localDirection","implements":null,"inheritance":null,"inheritedMembers":null,"name":"localDirection","nameWithType":"MovementState.localDirection","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementState","remarks":null,"summary":"\nThe direction of the character in local space.\n","syntax":{"content":"public Vector3 localDirection","parameters":null,"return":{"description":null,"type":"Global.Vector3"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementState.localDirection"},{"children":null,"id":"direction","implements":null,"inheritance":null,"inheritedMembers":null,"name":"direction","nameWithType":"MovementState.direction","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementState","remarks":null,"summary":"\nThe direction of the character in world space.\n","syntax":{"content":"public Vector3 direction","parameters":null,"return":{"description":null,"type":"Global.Vector3"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementState.direction"},{"children":null,"id":"gravity","implements":null,"inheritance":null,"inheritedMembers":null,"name":"gravity","nameWithType":"MovementState.gravity","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementState","remarks":null,"summary":"\nThe current gravity force applied to the character.\n","syntax":{"content":"public Vector3 gravity","parameters":null,"return":{"description":null,"type":"Global.Vector3"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementState.gravity"},{"children":null,"id":"externalForce","implements":null,"inheritance":null,"inheritedMembers":null,"name":"externalForce","nameWithType":"MovementState.externalForce","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementState","remarks":null,"summary":"\nA custom external force applied to the character. This value is\nreset each frame.\n","syntax":{"content":"public Vector3 externalForce","parameters":null,"return":{"description":null,"type":"Global.Vector3"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementState.externalForce"},{"children":null,"id":"rotation","implements":null,"inheritance":null,"inheritedMembers":null,"name":"rotation","nameWithType":"MovementState.rotation","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementState","remarks":null,"summary":"\nThe rotation of the character.\n","syntax":{"content":"public Quaternion rotation","parameters":null,"return":{"description":null,"type":"Global.Quaternion"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementState.rotation"},{"children":null,"id":"ground","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ground","nameWithType":"MovementState.ground","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementState","remarks":null,"summary":"\nThe ground contact info.\n","syntax":{"content":"public RaycastHit ground","parameters":null,"return":{"description":null,"type":"Global.RaycastHit"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementState.ground"},{"children":null,"id":"Set(Zigurous.CharacterController.MovementFlags,System.Boolean)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Set(MovementFlags, Boolean)","nameWithType":"MovementState.Set(MovementFlags, Boolean)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementState","remarks":null,"summary":"\nTurns on or off the given movement flag(s).\n","syntax":{"content":"public void Set(MovementFlags flags, bool on)","parameters":[{"description":"The movement flag(s) to turn on or off.","id":"flags","type":"Zigurous.CharacterController.MovementFlags"},{"description":"Whether to turn the flag(s) on or off.","id":"on","type":"System.Boolean"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementState.Set(Zigurous.CharacterController.MovementFlags,System.Boolean)"}]},{"items":[{"children":["Zigurous.CharacterController.MovementStyle.Custom","Zigurous.CharacterController.MovementStyle.FirstPersonCombat","Zigurous.CharacterController.MovementStyle.None","Zigurous.CharacterController.MovementStyle.ThirdPersonAdventure","Zigurous.CharacterController.MovementStyle.ThirdPersonCombat"],"id":"MovementStyle","implements":null,"inheritance":null,"inheritedMembers":null,"name":"MovementStyle","nameWithType":"MovementStyle","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nA type of movement style that determines how the character moves and\nrotates relative to the camera.\n","syntax":{"content":"public enum MovementStyle","parameters":null,"return":null,"typeParameters":null},"type":"Enum","uid":"Zigurous.CharacterController.MovementStyle"},{"children":null,"id":"ThirdPersonAdventure","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ThirdPersonAdventure","nameWithType":"MovementStyle.ThirdPersonAdventure","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementStyle","remarks":null,"summary":"\nMoves the character relative to the input in relation to the camera.\nThe character will always move forward while rotating to face the\ndirection of the input. For example, if the character moves\nbackwards, then they will rotate towards the camera and begin\nwalking forward in that direction. This movement style should be\nused in conjunction with a third person camera setup.\n","syntax":{"content":"ThirdPersonAdventure = 0","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementStyle"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementStyle.ThirdPersonAdventure"},{"children":null,"id":"ThirdPersonCombat","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ThirdPersonCombat","nameWithType":"MovementStyle.ThirdPersonCombat","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementStyle","remarks":null,"summary":"\nMoves the character relative to the camera&apos;s direction. The\ncharacter can strafe and move backwards while always facing away\nfrom the camera. This movement style should be used in conjunction\nwith a third person camera setup.\n","syntax":{"content":"ThirdPersonCombat = 1","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementStyle"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementStyle.ThirdPersonCombat"},{"children":null,"id":"FirstPersonCombat","implements":null,"inheritance":null,"inheritedMembers":null,"name":"FirstPersonCombat","nameWithType":"MovementStyle.FirstPersonCombat","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementStyle","remarks":null,"summary":"\nMoves the character relative to the camera&apos;s direction. The\ncharacter can strafe and move backwards while always facing away\nfrom the camera. This movement style should be used in conjunction\nwith a first person camera setup.\n","syntax":{"content":"FirstPersonCombat = 2","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementStyle"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementStyle.FirstPersonCombat"},{"children":null,"id":"None","implements":null,"inheritance":null,"inheritedMembers":null,"name":"None","nameWithType":"MovementStyle.None","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementStyle","remarks":null,"summary":"\nPrevents the character from moving.\n","syntax":{"content":"None = 3","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementStyle"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementStyle.None"},{"children":null,"id":"Custom","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Custom","nameWithType":"MovementStyle.Custom","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementStyle","remarks":null,"summary":"\nMovement is handled through a custom script.\n","syntax":{"content":"Custom = 4","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementStyle"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementStyle.Custom"}]},{"items":[{"children":["Zigurous.CharacterController.PlatformMovement.groundedLocalPosition","Zigurous.CharacterController.PlatformMovement.groundedPosition","Zigurous.CharacterController.PlatformMovement.OnPostUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.PlatformMovement.platform","Zigurous.CharacterController.PlatformMovement.platformRotation"],"id":"PlatformMovement","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementProcess","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.PlatformMovementSettings}"],"inheritedMembers":["Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.PlatformMovementSettings}.settings","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.PlatformMovementSettings}.enabled","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.PlatformMovementSettings}.OnPreUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.PlatformMovementSettings}.OnEnable","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.PlatformMovementSettings}.OnDisable","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.PlatformMovementSettings}.StartCoroutine(System.Collections.IEnumerator)","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.PlatformMovementSettings}.StopCoroutine(Coroutine)","Zigurous.CharacterController.MovementProcess.controller","Zigurous.CharacterController.MovementProcess.registered","Zigurous.CharacterController.MovementProcess.order","Zigurous.CharacterController.MovementProcess.id","Zigurous.CharacterController.MovementProcess.OnRegister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUnregister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementProcess.OnMovementProfileChanged(Zigurous.CharacterController.MovementProfile,Zigurous.CharacterController.MovementProfile)"],"name":"PlatformMovement","nameWithType":"PlatformMovement","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nMoves a character with the movement of a platform.\n","syntax":{"content":"public sealed class PlatformMovement : MovementBehavior<PlatformMovementSettings>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.PlatformMovement"},{"children":null,"id":"platform","implements":null,"inheritance":null,"inheritedMembers":null,"name":"platform","nameWithType":"PlatformMovement.platform","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.PlatformMovement","remarks":null,"summary":"\nThe platform the character is currently grounded on.\n","syntax":{"content":"public Transform platform { get; }","parameters":[],"return":{"description":null,"type":"Global.Transform"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.PlatformMovement.platform"},{"children":null,"id":"platformRotation","implements":null,"inheritance":null,"inheritedMembers":null,"name":"platformRotation","nameWithType":"PlatformMovement.platformRotation","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.PlatformMovement","remarks":null,"summary":"\nThe rotation of the platform during the last frame. This is used to\ncalculated the change in rotation.\n","syntax":{"content":"public Quaternion platformRotation { get; }","parameters":[],"return":{"description":null,"type":"Global.Quaternion"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.PlatformMovement.platformRotation"},{"children":null,"id":"groundedLocalPosition","implements":null,"inheritance":null,"inheritedMembers":null,"name":"groundedLocalPosition","nameWithType":"PlatformMovement.groundedLocalPosition","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.PlatformMovement","remarks":null,"summary":"\nThe position of the character in local space relative to the\nplatform they are grounded on.\n","syntax":{"content":"public Vector3 groundedLocalPosition { get; }","parameters":[],"return":{"description":null,"type":"Global.Vector3"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.PlatformMovement.groundedLocalPosition"},{"children":null,"id":"groundedPosition","implements":null,"inheritance":null,"inheritedMembers":null,"name":"groundedPosition","nameWithType":"PlatformMovement.groundedPosition","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.PlatformMovement","remarks":null,"summary":"\nThe position of the character in world space relative to the\nplatform they are grounded on.\n","syntax":{"content":"public Vector3 groundedPosition { get; }","parameters":[],"return":{"description":null,"type":"Global.Vector3"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.PlatformMovement.groundedPosition"},{"children":null,"id":"OnPostUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnPostUpdate(MovementController, MovementState)","nameWithType":"PlatformMovement.OnPostUpdate(MovementController, MovementState)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.PlatformMovement","remarks":null,"summary":"\nChecks for any state changes after the process is handled.\n","syntax":{"content":"protected override void OnPostUpdate(MovementController controller, MovementState state)","parameters":[{"description":"The controller updating the process.","id":"controller","type":"Zigurous.CharacterController.MovementController"},{"description":"The current movement state of the character.","id":"state","type":"Zigurous.CharacterController.MovementState"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.PlatformMovement.OnPostUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)"}]},{"items":[{"children":["Zigurous.CharacterController.PlatformMovementSettings.platformLayers","Zigurous.CharacterController.PlatformMovementSettings.rotateCharacter"],"id":"PlatformMovementSettings","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementSettings","Zigurous.CharacterController.MovementBehaviorSettings","Zigurous.CharacterController.MovementBehaviorSettings{Zigurous.CharacterController.PlatformMovement}"],"inheritedMembers":["Zigurous.CharacterController.MovementSettings.active","Zigurous.CharacterController.MovementSettings.enabled","Zigurous.CharacterController.MovementSettings.isActiveAndEnabled","Zigurous.CharacterController.MovementSettings.OnActivate(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementSettings.OnDeactivate(Zigurous.CharacterController.MovementController)"],"name":"PlatformMovementSettings","nameWithType":"PlatformMovementSettings","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nSettings for platform movement.\n","syntax":{"content":"[Serializable]\npublic class PlatformMovementSettings : MovementBehaviorSettings<PlatformMovement>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.PlatformMovementSettings"},{"children":null,"id":"platformLayers","implements":null,"inheritance":null,"inheritedMembers":null,"name":"platformLayers","nameWithType":"PlatformMovementSettings.platformLayers","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.PlatformMovementSettings","remarks":null,"summary":"\nThe layer(s) for detecting moving platforms.\n","syntax":{"content":"public LayerMask platformLayers","parameters":null,"return":{"description":null,"type":"Global.LayerMask"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.PlatformMovementSettings.platformLayers"},{"children":null,"id":"rotateCharacter","implements":null,"inheritance":null,"inheritedMembers":null,"name":"rotateCharacter","nameWithType":"PlatformMovementSettings.rotateCharacter","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.PlatformMovementSettings","remarks":null,"summary":"\nWhether to rotate the character based on the platform&apos;s rotation.\nWhen turned off the character will still move from the rotation of a\nplatform, but they will remain facing the same direction.\n","syntax":{"content":"public bool rotateCharacter","parameters":null,"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.PlatformMovementSettings.rotateCharacter"}]},{"items":[{"children":["Zigurous.CharacterController.Ragdoll.behavioursToDisable","Zigurous.CharacterController.Ragdoll.changeLayer","Zigurous.CharacterController.Ragdoll.ragdollLayer","Zigurous.CharacterController.Ragdoll.Reset","Zigurous.CharacterController.Ragdoll.SetBehaviorEnabled``1(System.Boolean,System.Boolean)","Zigurous.CharacterController.Ragdoll.SetColliderEnabled(System.Boolean)","Zigurous.CharacterController.Ragdoll.SetKinematic(System.Boolean)","Zigurous.CharacterController.Ragdoll.SetRigidbodyEnabled(System.Boolean)"],"id":"Ragdoll","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"Ragdoll","nameWithType":"Ragdoll","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nEnables the ragdoll of a character.\n","syntax":{"content":"public class Ragdoll : MonoBehaviour","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Ragdoll"},{"children":null,"id":"behavioursToDisable","implements":null,"inheritance":null,"inheritedMembers":null,"name":"behavioursToDisable","nameWithType":"Ragdoll.behavioursToDisable","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.Ragdoll","remarks":null,"summary":"\nThe behaviors to disable when the ragdoll is enabled.\n","syntax":{"content":"public Behaviour[] behavioursToDisable","parameters":null,"return":{"description":null,"type":"Global.Behaviour[]"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Ragdoll.behavioursToDisable"},{"children":null,"id":"changeLayer","implements":null,"inheritance":null,"inheritedMembers":null,"name":"changeLayer","nameWithType":"Ragdoll.changeLayer","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.Ragdoll","remarks":null,"summary":"\nChanges the physics layer of the character when the ragdoll is enabled.\n","syntax":{"content":"public bool changeLayer","parameters":null,"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Ragdoll.changeLayer"},{"children":null,"id":"ragdollLayer","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ragdollLayer","nameWithType":"Ragdoll.ragdollLayer","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.Ragdoll","remarks":null,"summary":"\nThe layer to change to when the ragdoll is enabled.\n","syntax":{"content":"public string ragdollLayer","parameters":null,"return":{"description":null,"type":"System.String"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Ragdoll.ragdollLayer"},{"children":null,"id":"Reset","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Reset()","nameWithType":"Ragdoll.Reset()","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.Ragdoll","remarks":null,"summary":"\nA Unity lifecycle method called when the behavior is reset in the editor.\n","syntax":{"content":"protected virtual void Reset()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Ragdoll.Reset"},{"children":null,"id":"SetBehaviorEnabled``1(System.Boolean,System.Boolean)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SetBehaviorEnabled<T>(Boolean, Boolean)","nameWithType":"Ragdoll.SetBehaviorEnabled<T>(Boolean, Boolean)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.Ragdoll","remarks":null,"summary":null,"syntax":{"content":"protected void SetBehaviorEnabled<T>(bool enabled, bool inChildren = false)\n    where T : Behaviour","parameters":[{"description":null,"id":"enabled","type":"System.Boolean"},{"description":null,"id":"inChildren","type":"System.Boolean"}],"return":null,"typeParameters":[{"description":null,"id":"T"}]},"type":"Method","uid":"Zigurous.CharacterController.Ragdoll.SetBehaviorEnabled``1(System.Boolean,System.Boolean)"},{"children":null,"id":"SetRigidbodyEnabled(System.Boolean)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SetRigidbodyEnabled(Boolean)","nameWithType":"Ragdoll.SetRigidbodyEnabled(Boolean)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.Ragdoll","remarks":null,"summary":null,"syntax":{"content":"protected void SetRigidbodyEnabled(bool enabled)","parameters":[{"description":null,"id":"enabled","type":"System.Boolean"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Ragdoll.SetRigidbodyEnabled(System.Boolean)"},{"children":null,"id":"SetColliderEnabled(System.Boolean)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SetColliderEnabled(Boolean)","nameWithType":"Ragdoll.SetColliderEnabled(Boolean)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.Ragdoll","remarks":null,"summary":null,"syntax":{"content":"protected void SetColliderEnabled(bool enabled)","parameters":[{"description":null,"id":"enabled","type":"System.Boolean"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Ragdoll.SetColliderEnabled(System.Boolean)"},{"children":null,"id":"SetKinematic(System.Boolean)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SetKinematic(Boolean)","nameWithType":"Ragdoll.SetKinematic(Boolean)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.Ragdoll","remarks":null,"summary":null,"syntax":{"content":"protected void SetKinematic(bool kinematic)","parameters":[{"description":null,"id":"kinematic","type":"System.Boolean"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Ragdoll.SetKinematic(System.Boolean)"}]},{"items":[{"children":["Zigurous.CharacterController.RigidbodyPush.OnPostUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)"],"id":"RigidbodyPush","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementProcess","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.RigidbodyPushSettings}"],"inheritedMembers":["Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.RigidbodyPushSettings}.settings","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.RigidbodyPushSettings}.enabled","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.RigidbodyPushSettings}.OnPreUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.RigidbodyPushSettings}.OnEnable","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.RigidbodyPushSettings}.OnDisable","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.RigidbodyPushSettings}.StartCoroutine(System.Collections.IEnumerator)","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.RigidbodyPushSettings}.StopCoroutine(Coroutine)","Zigurous.CharacterController.MovementProcess.controller","Zigurous.CharacterController.MovementProcess.registered","Zigurous.CharacterController.MovementProcess.order","Zigurous.CharacterController.MovementProcess.id","Zigurous.CharacterController.MovementProcess.OnRegister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUnregister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementProcess.OnMovementProfileChanged(Zigurous.CharacterController.MovementProfile,Zigurous.CharacterController.MovementProfile)"],"name":"RigidbodyPush","nameWithType":"RigidbodyPush","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nPushes rigidbodies when a character comes into contact with them.\n","syntax":{"content":"public sealed class RigidbodyPush : MovementBehavior<RigidbodyPushSettings>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.RigidbodyPush"},{"children":null,"id":"OnPostUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnPostUpdate(MovementController, MovementState)","nameWithType":"RigidbodyPush.OnPostUpdate(MovementController, MovementState)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.RigidbodyPush","remarks":null,"summary":"\nChecks for any state changes after the process is handled.\n","syntax":{"content":"protected override void OnPostUpdate(MovementController controller, MovementState state)","parameters":[{"description":"The controller updating the process.","id":"controller","type":"Zigurous.CharacterController.MovementController"},{"description":"The current movement state of the character.","id":"state","type":"Zigurous.CharacterController.MovementState"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.RigidbodyPush.OnPostUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)"}]},{"items":[{"children":["Zigurous.CharacterController.RigidbodyPushSettings.factorCharacterSpeed","Zigurous.CharacterController.RigidbodyPushSettings.pushStrength","Zigurous.CharacterController.RigidbodyPushSettings.rigidbodyLayers"],"id":"RigidbodyPushSettings","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementSettings","Zigurous.CharacterController.MovementBehaviorSettings","Zigurous.CharacterController.MovementBehaviorSettings{Zigurous.CharacterController.RigidbodyPush}"],"inheritedMembers":["Zigurous.CharacterController.MovementSettings.active","Zigurous.CharacterController.MovementSettings.enabled","Zigurous.CharacterController.MovementSettings.isActiveAndEnabled","Zigurous.CharacterController.MovementSettings.OnActivate(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementSettings.OnDeactivate(Zigurous.CharacterController.MovementController)"],"name":"RigidbodyPushSettings","nameWithType":"RigidbodyPushSettings","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nSettings for rigidbody push.\n","syntax":{"content":"[Serializable]\npublic class RigidbodyPushSettings : MovementBehaviorSettings<RigidbodyPush>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.RigidbodyPushSettings"},{"children":null,"id":"rigidbodyLayers","implements":null,"inheritance":null,"inheritedMembers":null,"name":"rigidbodyLayers","nameWithType":"RigidbodyPushSettings.rigidbodyLayers","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.RigidbodyPushSettings","remarks":null,"summary":"\nThe layer(s) for detecting rigidbodies.\n","syntax":{"content":"public LayerMask rigidbodyLayers","parameters":null,"return":{"description":null,"type":"Global.LayerMask"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.RigidbodyPushSettings.rigidbodyLayers"},{"children":null,"id":"pushStrength","implements":null,"inheritance":null,"inheritedMembers":null,"name":"pushStrength","nameWithType":"RigidbodyPushSettings.pushStrength","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.RigidbodyPushSettings","remarks":null,"summary":"\nThe strength that the character pushes rigidbodies when coming into\ncontact with them.\n","syntax":{"content":"public float pushStrength","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.RigidbodyPushSettings.pushStrength"},{"children":null,"id":"factorCharacterSpeed","implements":null,"inheritance":null,"inheritedMembers":null,"name":"factorCharacterSpeed","nameWithType":"RigidbodyPushSettings.factorCharacterSpeed","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.RigidbodyPushSettings","remarks":null,"summary":"\nUses the character&apos;s speed as a multiplier to the push strength.\nThe faster the character is moving the stronger the push.\n","syntax":{"content":"public bool factorCharacterSpeed","parameters":null,"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.RigidbodyPushSettings.factorCharacterSpeed"}]},{"items":[{"children":["Zigurous.CharacterController.Settings.GeneralSettings.acceleration","Zigurous.CharacterController.Settings.GeneralSettings.accelerationModifiers","Zigurous.CharacterController.Settings.GeneralSettings.baseSpeed","Zigurous.CharacterController.Settings.GeneralSettings.deceleration","Zigurous.CharacterController.Settings.GeneralSettings.preventingTurnConditions","Zigurous.CharacterController.Settings.GeneralSettings.rotationSpeed","Zigurous.CharacterController.Settings.GeneralSettings.rotationSpeedModifiers","Zigurous.CharacterController.Settings.GeneralSettings.speedModifiers","Zigurous.CharacterController.Settings.GeneralSettings.turnSpeed","Zigurous.CharacterController.Settings.GeneralSettings.turnSpeedModifiers"],"id":"GeneralSettings","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementSettings"],"inheritedMembers":["Zigurous.CharacterController.MovementSettings.active","Zigurous.CharacterController.MovementSettings.enabled","Zigurous.CharacterController.MovementSettings.isActiveAndEnabled","Zigurous.CharacterController.MovementSettings.OnActivate(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementSettings.OnDeactivate(Zigurous.CharacterController.MovementController)"],"name":"GeneralSettings","nameWithType":"GeneralSettings","namespace":"Zigurous.CharacterController.Settings","parent":"Zigurous.CharacterController.Settings","remarks":null,"summary":"\nThe general movement settings for a movement controller.\n","syntax":{"content":"[Serializable]\npublic sealed class GeneralSettings : MovementSettings","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Settings.GeneralSettings"},{"children":null,"id":"baseSpeed","implements":null,"inheritance":null,"inheritedMembers":null,"name":"baseSpeed","nameWithType":"GeneralSettings.baseSpeed","namespace":"Zigurous.CharacterController.Settings","parent":"Zigurous.CharacterController.Settings.GeneralSettings","remarks":null,"summary":"\nThe base speed of the character.\n","syntax":{"content":"public float baseSpeed","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Settings.GeneralSettings.baseSpeed"},{"children":null,"id":"acceleration","implements":null,"inheritance":null,"inheritedMembers":null,"name":"acceleration","nameWithType":"GeneralSettings.acceleration","namespace":"Zigurous.CharacterController.Settings","parent":"Zigurous.CharacterController.Settings.GeneralSettings","remarks":null,"summary":"\nThe rate at which the character accelerates while on the ground.\n","syntax":{"content":"public float acceleration","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Settings.GeneralSettings.acceleration"},{"children":null,"id":"deceleration","implements":null,"inheritance":null,"inheritedMembers":null,"name":"deceleration","nameWithType":"GeneralSettings.deceleration","namespace":"Zigurous.CharacterController.Settings","parent":"Zigurous.CharacterController.Settings.GeneralSettings","remarks":null,"summary":"\nThe rate at which the character decelerates while on the ground.\n","syntax":{"content":"public float deceleration","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Settings.GeneralSettings.deceleration"},{"children":null,"id":"turnSpeed","implements":null,"inheritance":null,"inheritedMembers":null,"name":"turnSpeed","nameWithType":"GeneralSettings.turnSpeed","namespace":"Zigurous.CharacterController.Settings","parent":"Zigurous.CharacterController.Settings.GeneralSettings","remarks":null,"summary":"\nHow quickly the character can change direction. This is only\napplicable for the Third Person Adventure movement style.\n","syntax":{"content":"public float turnSpeed","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Settings.GeneralSettings.turnSpeed"},{"children":null,"id":"rotationSpeed","implements":null,"inheritance":null,"inheritedMembers":null,"name":"rotationSpeed","nameWithType":"GeneralSettings.rotationSpeed","namespace":"Zigurous.CharacterController.Settings","parent":"Zigurous.CharacterController.Settings.GeneralSettings","remarks":null,"summary":"\nHow quickly the character rotates to face the current direction. The\ncharacter&apos;s rotation is a visual indication of their direction but\ndoes not affect the actual movement. This is only applicable for\nthird person movement styles.\n","syntax":{"content":"public float rotationSpeed","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Settings.GeneralSettings.rotationSpeed"},{"children":null,"id":"speedModifiers","implements":null,"inheritance":null,"inheritedMembers":null,"name":"speedModifiers","nameWithType":"GeneralSettings.speedModifiers","namespace":"Zigurous.CharacterController.Settings","parent":"Zigurous.CharacterController.Settings.GeneralSettings","remarks":null,"summary":"\nThe modifiers applied to the character&apos;s speed when given movement\nstate conditions are met.\n","syntax":{"content":"public SpeedModifier[] speedModifiers","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.Settings.SpeedModifier[]"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Settings.GeneralSettings.speedModifiers"},{"children":null,"id":"accelerationModifiers","implements":null,"inheritance":null,"inheritedMembers":null,"name":"accelerationModifiers","nameWithType":"GeneralSettings.accelerationModifiers","namespace":"Zigurous.CharacterController.Settings","parent":"Zigurous.CharacterController.Settings.GeneralSettings","remarks":null,"summary":"\nThe modifiers applied to the character&apos;s acceleration/deceleration\nwhen given movement state conditions are met.\n","syntax":{"content":"public SpeedModifier[] accelerationModifiers","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.Settings.SpeedModifier[]"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Settings.GeneralSettings.accelerationModifiers"},{"children":null,"id":"turnSpeedModifiers","implements":null,"inheritance":null,"inheritedMembers":null,"name":"turnSpeedModifiers","nameWithType":"GeneralSettings.turnSpeedModifiers","namespace":"Zigurous.CharacterController.Settings","parent":"Zigurous.CharacterController.Settings.GeneralSettings","remarks":null,"summary":"\nThe modifiers applied to the character&apos;s turn speed when given\nmovement state conditions are met. This is only applicable for the\nThird Person Adventure movement style.\n","syntax":{"content":"public SpeedModifier[] turnSpeedModifiers","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.Settings.SpeedModifier[]"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Settings.GeneralSettings.turnSpeedModifiers"},{"children":null,"id":"rotationSpeedModifiers","implements":null,"inheritance":null,"inheritedMembers":null,"name":"rotationSpeedModifiers","nameWithType":"GeneralSettings.rotationSpeedModifiers","namespace":"Zigurous.CharacterController.Settings","parent":"Zigurous.CharacterController.Settings.GeneralSettings","remarks":null,"summary":"\nThe modifiers applied to the character&apos;s rotation speed when given\nmovement state conditions are met. This is only applicable for third\nperson movement styles.\n","syntax":{"content":"public SpeedModifier[] rotationSpeedModifiers","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.Settings.SpeedModifier[]"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Settings.GeneralSettings.rotationSpeedModifiers"},{"children":null,"id":"preventingTurnConditions","implements":null,"inheritance":null,"inheritedMembers":null,"name":"preventingTurnConditions","nameWithType":"GeneralSettings.preventingTurnConditions","namespace":"Zigurous.CharacterController.Settings","parent":"Zigurous.CharacterController.Settings.GeneralSettings","remarks":null,"summary":"\nThe movement state conditions that prevent the character from\nturning/rotating (depending on the movement style). This is only\napplicable for third person movement styles.\n","syntax":{"content":"public MovementFlags preventingTurnConditions","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Settings.GeneralSettings.preventingTurnConditions"}]},{"items":[{"children":["Zigurous.CharacterController.Settings.GravitySettings.gravityForce","Zigurous.CharacterController.Settings.GravitySettings.groundLayers","Zigurous.CharacterController.Settings.GravitySettings.stickToGround","Zigurous.CharacterController.Settings.GravitySettings.useCustomGravity"],"id":"GravitySettings","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementSettings"],"inheritedMembers":["Zigurous.CharacterController.MovementSettings.active","Zigurous.CharacterController.MovementSettings.enabled","Zigurous.CharacterController.MovementSettings.isActiveAndEnabled","Zigurous.CharacterController.MovementSettings.OnActivate(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementSettings.OnDeactivate(Zigurous.CharacterController.MovementController)"],"name":"GravitySettings","nameWithType":"GravitySettings","namespace":"Zigurous.CharacterController.Settings","parent":"Zigurous.CharacterController.Settings","remarks":null,"summary":"\nThe gravity settings for a movement controller.\n","syntax":{"content":"[Serializable]\npublic sealed class GravitySettings : MovementSettings","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Settings.GravitySettings"},{"children":null,"id":"groundLayers","implements":null,"inheritance":null,"inheritedMembers":null,"name":"groundLayers","nameWithType":"GravitySettings.groundLayers","namespace":"Zigurous.CharacterController.Settings","parent":"Zigurous.CharacterController.Settings.GravitySettings","remarks":null,"summary":"\nThe layer(s) to detect the ground.\n","syntax":{"content":"public LayerMask groundLayers","parameters":null,"return":{"description":null,"type":"Global.LayerMask"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Settings.GravitySettings.groundLayers"},{"children":null,"id":"stickToGround","implements":null,"inheritance":null,"inheritedMembers":null,"name":"stickToGround","nameWithType":"GravitySettings.stickToGround","namespace":"Zigurous.CharacterController.Settings","parent":"Zigurous.CharacterController.Settings.GravitySettings","remarks":null,"summary":"\nApplies a downward force to the character while on the ground so\nthey stick to the ground despite gravity.\n","syntax":{"content":"public bool stickToGround","parameters":null,"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Settings.GravitySettings.stickToGround"},{"children":null,"id":"useCustomGravity","implements":null,"inheritance":null,"inheritedMembers":null,"name":"useCustomGravity","nameWithType":"GravitySettings.useCustomGravity","namespace":"Zigurous.CharacterController.Settings","parent":"Zigurous.CharacterController.Settings.GravitySettings","remarks":null,"summary":"\nUses the custom gravity force when set to true or uses\nPhysics.gravity when set to false.\n","syntax":{"content":"public bool useCustomGravity","parameters":null,"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Settings.GravitySettings.useCustomGravity"},{"children":null,"id":"gravityForce","implements":null,"inheritance":null,"inheritedMembers":null,"name":"gravityForce","nameWithType":"GravitySettings.gravityForce","namespace":"Zigurous.CharacterController.Settings","parent":"Zigurous.CharacterController.Settings.GravitySettings","remarks":null,"summary":"\nThe custom gravity force direction.\n","syntax":{"content":"public Vector3 gravityForce","parameters":null,"return":{"description":null,"type":"Global.Vector3"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Settings.GravitySettings.gravityForce"}]},{"items":[{"children":["Zigurous.CharacterController.Settings.SpeedModifier.Type.Additive","Zigurous.CharacterController.Settings.SpeedModifier.Type.FixedValue","Zigurous.CharacterController.Settings.SpeedModifier.Type.Limiter","Zigurous.CharacterController.Settings.SpeedModifier.Type.Multiplier"],"id":"SpeedModifier.Type","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SpeedModifier.Type","nameWithType":"SpeedModifier.Type","namespace":"Zigurous.CharacterController.Settings","parent":"Zigurous.CharacterController.Settings","remarks":null,"summary":"\nA modification type that indicates how a value is factored into a\ncharacter&apos;s movement speed.\n","syntax":{"content":"public enum Type","parameters":null,"return":null,"typeParameters":null},"type":"Enum","uid":"Zigurous.CharacterController.Settings.SpeedModifier.Type"},{"children":null,"id":"Multiplier","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Multiplier","nameWithType":"SpeedModifier.Type.Multiplier","namespace":"Zigurous.CharacterController.Settings","parent":"Zigurous.CharacterController.Settings.SpeedModifier.Type","remarks":null,"summary":"\nThe speed is multiplied with the modifier value.\n","syntax":{"content":"Multiplier = 0","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.Settings.SpeedModifier.Type"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Settings.SpeedModifier.Type.Multiplier"},{"children":null,"id":"Additive","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Additive","nameWithType":"SpeedModifier.Type.Additive","namespace":"Zigurous.CharacterController.Settings","parent":"Zigurous.CharacterController.Settings.SpeedModifier.Type","remarks":null,"summary":"\nThe speed is added with the modifier value.\n","syntax":{"content":"Additive = 1","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.Settings.SpeedModifier.Type"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Settings.SpeedModifier.Type.Additive"},{"children":null,"id":"FixedValue","implements":null,"inheritance":null,"inheritedMembers":null,"name":"FixedValue","nameWithType":"SpeedModifier.Type.FixedValue","namespace":"Zigurous.CharacterController.Settings","parent":"Zigurous.CharacterController.Settings.SpeedModifier.Type","remarks":null,"summary":"\nThe speed is set to the modifier value.\n","syntax":{"content":"FixedValue = 2","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.Settings.SpeedModifier.Type"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Settings.SpeedModifier.Type.FixedValue"},{"children":null,"id":"Limiter","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Limiter","nameWithType":"SpeedModifier.Type.Limiter","namespace":"Zigurous.CharacterController.Settings","parent":"Zigurous.CharacterController.Settings.SpeedModifier.Type","remarks":null,"summary":"\nThe speed is limited to the modifier value.\n","syntax":{"content":"Limiter = 3","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.Settings.SpeedModifier.Type"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Settings.SpeedModifier.Type.Limiter"}]},{"items":[{"children":["Zigurous.CharacterController.Settings.SpeedModifier.#ctor(Zigurous.CharacterController.MovementFlags,Zigurous.CharacterController.Settings.SpeedModifier.Type,System.Single)","Zigurous.CharacterController.Settings.SpeedModifier.condition","Zigurous.CharacterController.Settings.SpeedModifier.type","Zigurous.CharacterController.Settings.SpeedModifier.value"],"id":"SpeedModifier","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SpeedModifier","nameWithType":"SpeedModifier","namespace":"Zigurous.CharacterController.Settings","parent":"Zigurous.CharacterController.Settings","remarks":null,"summary":"\nA modifier that alters a character&apos;s movement speed.\n","syntax":{"content":"[Serializable]\npublic struct SpeedModifier","parameters":null,"return":null,"typeParameters":null},"type":"Struct","uid":"Zigurous.CharacterController.Settings.SpeedModifier"},{"children":null,"id":"condition","implements":null,"inheritance":null,"inheritedMembers":null,"name":"condition","nameWithType":"SpeedModifier.condition","namespace":"Zigurous.CharacterController.Settings","parent":"Zigurous.CharacterController.Settings.SpeedModifier","remarks":null,"summary":"\nThe movement state condition that must be met for the speed modifier\nto be applied.\n","syntax":{"content":"public MovementFlags condition","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Settings.SpeedModifier.condition"},{"children":null,"id":"type","implements":null,"inheritance":null,"inheritedMembers":null,"name":"type","nameWithType":"SpeedModifier.type","namespace":"Zigurous.CharacterController.Settings","parent":"Zigurous.CharacterController.Settings.SpeedModifier","remarks":null,"summary":"\nHow the modifier value is factored into the character&apos;s movement speed.\n","syntax":{"content":"public SpeedModifier.Type type","parameters":null,"return":{"description":null,"type":"Zigurous.CharacterController.Settings.SpeedModifier.Type"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Settings.SpeedModifier.type"},{"children":null,"id":"value","implements":null,"inheritance":null,"inheritedMembers":null,"name":"value","nameWithType":"SpeedModifier.value","namespace":"Zigurous.CharacterController.Settings","parent":"Zigurous.CharacterController.Settings.SpeedModifier","remarks":null,"summary":"\nThe value factored into the character&apos;s movement speed when the\nmovement state condition is met.\n","syntax":{"content":"public float value","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Settings.SpeedModifier.value"},{"children":null,"id":"#ctor(Zigurous.CharacterController.MovementFlags,Zigurous.CharacterController.Settings.SpeedModifier.Type,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SpeedModifier(MovementFlags, SpeedModifier.Type, Single)","nameWithType":"SpeedModifier.SpeedModifier(MovementFlags, SpeedModifier.Type, Single)","namespace":"Zigurous.CharacterController.Settings","parent":"Zigurous.CharacterController.Settings.SpeedModifier","remarks":null,"summary":"\nConstructs a new speed modifier with the given parameters.\n","syntax":{"content":"public SpeedModifier(MovementFlags condition, SpeedModifier.Type type, float value)","parameters":[{"description":"The movement state condition that must be met for the speed modifier to be applied.","id":"condition","type":"Zigurous.CharacterController.MovementFlags"},{"description":"How the modifier value is factored into the character&apos;s movement speed.","id":"type","type":"Zigurous.CharacterController.Settings.SpeedModifier.Type"},{"description":"The value factored into the character&apos;s movement speed when the movement state condition is met.","id":"value","type":"System.Single"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.CharacterController.Settings.SpeedModifier.#ctor(Zigurous.CharacterController.MovementFlags,Zigurous.CharacterController.Settings.SpeedModifier.Type,System.Single)"}]},{"items":[{"children":["Zigurous.CharacterController.Settings.SpeedModifierExtensions.ApplyTo(Zigurous.CharacterController.Settings.SpeedModifier[],System.Single@,Zigurous.CharacterController.MovementFlags)","Zigurous.CharacterController.Settings.SpeedModifierExtensions.Limit(Zigurous.CharacterController.Settings.SpeedModifier[],System.Single,Zigurous.CharacterController.MovementFlags)"],"id":"SpeedModifierExtensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"SpeedModifierExtensions","nameWithType":"SpeedModifierExtensions","namespace":"Zigurous.CharacterController.Settings","parent":"Zigurous.CharacterController.Settings","remarks":null,"summary":"\nExtension methods for <xref href=\"Zigurous.CharacterController.Settings.SpeedModifier\" data-throw-if-not-resolved=\"false\"></xref>.\n","syntax":{"content":"public static class SpeedModifierExtensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Settings.SpeedModifierExtensions"},{"children":null,"id":"ApplyTo(Zigurous.CharacterController.Settings.SpeedModifier[],System.Single@,Zigurous.CharacterController.MovementFlags)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ApplyTo(SpeedModifier[], ref Single, MovementFlags)","nameWithType":"SpeedModifierExtensions.ApplyTo(SpeedModifier[], ref Single, MovementFlags)","namespace":"Zigurous.CharacterController.Settings","parent":"Zigurous.CharacterController.Settings.SpeedModifierExtensions","remarks":null,"summary":"\nApplies the speed modifiers to a value given a movement state.\n","syntax":{"content":"public static void ApplyTo(this SpeedModifier[] modifiers, ref float value, MovementFlags flags)","parameters":[{"description":"The speed modifiers to apply.","id":"modifiers","type":"Zigurous.CharacterController.Settings.SpeedModifier[]"},{"description":"The value to apply the speed modifiers to.","id":"value","type":"System.Single"},{"description":"The current movement flags.","id":"flags","type":"Zigurous.CharacterController.MovementFlags"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Settings.SpeedModifierExtensions.ApplyTo(Zigurous.CharacterController.Settings.SpeedModifier[],System.Single@,Zigurous.CharacterController.MovementFlags)"},{"children":null,"id":"Limit(Zigurous.CharacterController.Settings.SpeedModifier[],System.Single,Zigurous.CharacterController.MovementFlags)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Limit(SpeedModifier[], Single, MovementFlags)","nameWithType":"SpeedModifierExtensions.Limit(SpeedModifier[], Single, MovementFlags)","namespace":"Zigurous.CharacterController.Settings","parent":"Zigurous.CharacterController.Settings.SpeedModifierExtensions","remarks":null,"summary":"\nApplies the limiter speed modifiers to a value.\n","syntax":{"content":"public static float Limit(this SpeedModifier[] modifiers, float value, MovementFlags flags)","parameters":[{"description":"The speed modifiers to apply.","id":"modifiers","type":"Zigurous.CharacterController.Settings.SpeedModifier[]"},{"description":"The value to apply the speed modifiers to.","id":"value","type":"System.Single"},{"description":"The current movement flags.","id":"flags","type":"Zigurous.CharacterController.MovementFlags"}],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Settings.SpeedModifierExtensions.Limit(Zigurous.CharacterController.Settings.SpeedModifier[],System.Single,Zigurous.CharacterController.MovementFlags)"}]},{"items":[{"children":["Zigurous.CharacterController.Settings.GeneralSettings","Zigurous.CharacterController.Settings.GravitySettings","Zigurous.CharacterController.Settings.SpeedModifier","Zigurous.CharacterController.Settings.SpeedModifier.Type","Zigurous.CharacterController.Settings.SpeedModifierExtensions"],"id":"Zigurous.CharacterController.Settings","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Zigurous.CharacterController.Settings","nameWithType":"Zigurous.CharacterController.Settings","namespace":null,"parent":null,"remarks":null,"summary":null,"syntax":null,"type":"Namespace","uid":"Zigurous.CharacterController.Settings"}]},{"items":[{"children":["Zigurous.CharacterController.StaminaCost.#ctor(System.Single,System.Single,System.Boolean,System.Boolean)","Zigurous.CharacterController.StaminaCost.percentage","Zigurous.CharacterController.StaminaCost.requiredAmount","Zigurous.CharacterController.StaminaCost.timescaled","Zigurous.CharacterController.StaminaCost.useAmount"],"id":"StaminaCost","implements":null,"inheritance":null,"inheritedMembers":null,"name":"StaminaCost","nameWithType":"StaminaCost","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nA cost to perform a stamina action.\n","syntax":{"content":"[Serializable]\npublic struct StaminaCost","parameters":null,"return":null,"typeParameters":null},"type":"Struct","uid":"Zigurous.CharacterController.StaminaCost"},{"children":null,"id":"useAmount","implements":null,"inheritance":null,"inheritedMembers":null,"name":"useAmount","nameWithType":"StaminaCost.useAmount","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.StaminaCost","remarks":null,"summary":"\nThe amount of stamina drained.\n","syntax":{"content":"public float useAmount","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.StaminaCost.useAmount"},{"children":null,"id":"requiredAmount","implements":null,"inheritance":null,"inheritedMembers":null,"name":"requiredAmount","nameWithType":"StaminaCost.requiredAmount","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.StaminaCost","remarks":null,"summary":"\nThe minimum amount of stamina required to perform the action.\n","syntax":{"content":"public float requiredAmount","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.StaminaCost.requiredAmount"},{"children":null,"id":"percentage","implements":null,"inheritance":null,"inheritedMembers":null,"name":"percentage","nameWithType":"StaminaCost.percentage","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.StaminaCost","remarks":null,"summary":"\nWhether the stamina cost is a percentage or fixed value.\n","syntax":{"content":"public bool percentage","parameters":null,"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.StaminaCost.percentage"},{"children":null,"id":"timescaled","implements":null,"inheritance":null,"inheritedMembers":null,"name":"timescaled","nameWithType":"StaminaCost.timescaled","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.StaminaCost","remarks":null,"summary":"\nWhether the stamina cost is multiplied by <code>Time.deltaTime</code>.\n","syntax":{"content":"public bool timescaled","parameters":null,"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.StaminaCost.timescaled"},{"children":null,"id":"#ctor(System.Single,System.Single,System.Boolean,System.Boolean)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"StaminaCost(Single, Single, Boolean, Boolean)","nameWithType":"StaminaCost.StaminaCost(Single, Single, Boolean, Boolean)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.StaminaCost","remarks":null,"summary":"\nCreates a new stamina cost of the given amount.\n","syntax":{"content":"public StaminaCost(float useAmount, float requiredAmount = 0F, bool percentage = false, bool timescaled = false)","parameters":[{"description":"The amount of stamina drained.","id":"useAmount","type":"System.Single"},{"description":"The minimum amount of stamina required to perform the action.","id":"requiredAmount","type":"System.Single"},{"description":"Whether the stamina cost is a percentage or fixed value.","id":"percentage","type":"System.Boolean"},{"description":"Whether the stamina cost is multiplied by <code>Time.deltaTime</code>.","id":"timescaled","type":"System.Boolean"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.CharacterController.StaminaCost.#ctor(System.Single,System.Single,System.Boolean,System.Boolean)"}]},{"items":[{"children":["Zigurous.CharacterController.StaminaSettings.initialAmount","Zigurous.CharacterController.StaminaSettings.maxAmount","Zigurous.CharacterController.StaminaSettings.regenDelay","Zigurous.CharacterController.StaminaSettings.regenerate","Zigurous.CharacterController.StaminaSettings.regenRate"],"id":"StaminaSettings","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementSettings","Zigurous.CharacterController.MovementBehaviorSettings","Zigurous.CharacterController.MovementBehaviorSettings{Zigurous.CharacterController.Stamina}"],"inheritedMembers":["Zigurous.CharacterController.MovementSettings.active","Zigurous.CharacterController.MovementSettings.enabled","Zigurous.CharacterController.MovementSettings.isActiveAndEnabled","Zigurous.CharacterController.MovementSettings.OnActivate(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementSettings.OnDeactivate(Zigurous.CharacterController.MovementController)"],"name":"StaminaSettings","nameWithType":"StaminaSettings","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nSettings for a stamina behavior.\n","syntax":{"content":"[Serializable]\npublic class StaminaSettings : MovementBehaviorSettings<Stamina>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.StaminaSettings"},{"children":null,"id":"initialAmount","implements":null,"inheritance":null,"inheritedMembers":null,"name":"initialAmount","nameWithType":"StaminaSettings.initialAmount","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.StaminaSettings","remarks":null,"summary":"\nThe amount of stamina the character starts with.\n","syntax":{"content":"public float initialAmount","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.StaminaSettings.initialAmount"},{"children":null,"id":"maxAmount","implements":null,"inheritance":null,"inheritedMembers":null,"name":"maxAmount","nameWithType":"StaminaSettings.maxAmount","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.StaminaSettings","remarks":null,"summary":"\nThe maximum amount of stamina the character can have.\n","syntax":{"content":"public float maxAmount","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.StaminaSettings.maxAmount"},{"children":null,"id":"regenerate","implements":null,"inheritance":null,"inheritedMembers":null,"name":"regenerate","nameWithType":"StaminaSettings.regenerate","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.StaminaSettings","remarks":null,"summary":"\nWhether the stamina should regenerate over time.\n","syntax":{"content":"public bool regenerate","parameters":null,"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.StaminaSettings.regenerate"},{"children":null,"id":"regenRate","implements":null,"inheritance":null,"inheritedMembers":null,"name":"regenRate","nameWithType":"StaminaSettings.regenRate","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.StaminaSettings","remarks":null,"summary":"\nThe amount of stamina regenerated per second.\n","syntax":{"content":"public float regenRate","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.StaminaSettings.regenRate"},{"children":null,"id":"regenDelay","implements":null,"inheritance":null,"inheritedMembers":null,"name":"regenDelay","nameWithType":"StaminaSettings.regenDelay","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.StaminaSettings","remarks":null,"summary":"\nThe amount of seconds before regeneration begins, for example, after\nthe player is damaged.\n","syntax":{"content":"public float regenDelay","parameters":null,"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.StaminaSettings.regenDelay"}]},{"items":[{"children":["Zigurous.CharacterController.Utils.Extensions.BoxCast(UnityEngine.CharacterController,Vector3,RaycastHit@,System.Single,LayerMask)","Zigurous.CharacterController.Utils.Extensions.Contains(LayerMask,System.Int32)","Zigurous.CharacterController.Utils.Extensions.GetBounds(UnityEngine.CharacterController)","Zigurous.CharacterController.Utils.Extensions.GroundCheck(UnityEngine.CharacterController,RaycastHit@,LayerMask)","Zigurous.CharacterController.Utils.Extensions.Has(CollisionFlags,CollisionFlags)","Zigurous.CharacterController.Utils.Extensions.HasAny(CollisionFlags,CollisionFlags)","Zigurous.CharacterController.Utils.Extensions.SetHeight(UnityEngine.CharacterController,System.Single)","Zigurous.CharacterController.Utils.Extensions.SetLayerRecursively(GameObject,System.Int32)","Zigurous.CharacterController.Utils.Extensions.SphereCast(UnityEngine.CharacterController,Vector3,RaycastHit@,System.Single,LayerMask)","Zigurous.CharacterController.Utils.Extensions.StickDeadzone(Vector2@,System.Single,System.Single)"],"id":"Extensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"Extensions","nameWithType":"Extensions","namespace":"Zigurous.CharacterController.Utils","parent":"Zigurous.CharacterController.Utils","remarks":null,"summary":"\nUtility extension methods.\n","syntax":{"content":"public static class Extensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Utils.Extensions"},{"children":null,"id":"Has(CollisionFlags,CollisionFlags)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Has(CollisionFlags, CollisionFlags)","nameWithType":"Extensions.Has(CollisionFlags, CollisionFlags)","namespace":"Zigurous.CharacterController.Utils","parent":"Zigurous.CharacterController.Utils.Extensions","remarks":null,"summary":"\nChecks if the flags contain a specified flag.\n","syntax":{"content":"public static bool Has(this CollisionFlags flags, CollisionFlags flag)","parameters":[{"description":"The flags to check.","id":"flags","type":"Global.CollisionFlags"},{"description":"The other flag to check for.","id":"flag","type":"Global.CollisionFlags"}],"return":{"description":"True if the flags contain the specified flag, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Utils.Extensions.Has(CollisionFlags,CollisionFlags)"},{"children":null,"id":"HasAny(CollisionFlags,CollisionFlags)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"HasAny(CollisionFlags, CollisionFlags)","nameWithType":"Extensions.HasAny(CollisionFlags, CollisionFlags)","namespace":"Zigurous.CharacterController.Utils","parent":"Zigurous.CharacterController.Utils.Extensions","remarks":null,"summary":"\nChecks if the flags contain any of the other specified flags.\n","syntax":{"content":"public static bool HasAny(this CollisionFlags flags, CollisionFlags other)","parameters":[{"description":"The flags to check.","id":"flags","type":"Global.CollisionFlags"},{"description":"The other flags to check for.","id":"other","type":"Global.CollisionFlags"}],"return":{"description":"True if the flags contain any of the other specified flags, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Utils.Extensions.HasAny(CollisionFlags,CollisionFlags)"},{"children":null,"id":"Contains(LayerMask,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Contains(LayerMask, Int32)","nameWithType":"Extensions.Contains(LayerMask, Int32)","namespace":"Zigurous.CharacterController.Utils","parent":"Zigurous.CharacterController.Utils.Extensions","remarks":null,"summary":"\nChecks if the given layer is included in the mask.\n","syntax":{"content":"public static bool Contains(this LayerMask mask, int layer)","parameters":[{"description":"The mask to check.","id":"mask","type":"Global.LayerMask"},{"description":"The layer to check.","id":"layer","type":"System.Int32"}],"return":{"description":"True if the layer is included in the mask, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Utils.Extensions.Contains(LayerMask,System.Int32)"},{"children":null,"id":"SetHeight(UnityEngine.CharacterController,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SetHeight(UnityEngine.CharacterController, Single)","nameWithType":"Extensions.SetHeight(UnityEngine.CharacterController, Single)","namespace":"Zigurous.CharacterController.Utils","parent":"Zigurous.CharacterController.Utils.Extensions","remarks":null,"summary":"\nSets the character&apos;s height to the desired height.\n","syntax":{"content":"public static void SetHeight(this UnityEngine.CharacterController character, float height)","parameters":[{"description":"The character to change.","id":"character","type":"Global.UnityEngine.CharacterController"},{"description":"The desired height of the character.","id":"height","type":"System.Single"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Utils.Extensions.SetHeight(UnityEngine.CharacterController,System.Single)"},{"children":null,"id":"GetBounds(UnityEngine.CharacterController)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetBounds(UnityEngine.CharacterController)","nameWithType":"Extensions.GetBounds(UnityEngine.CharacterController)","namespace":"Zigurous.CharacterController.Utils","parent":"Zigurous.CharacterController.Utils.Extensions","remarks":null,"summary":"\nCalculates the world space bounding volume of the character.\n","syntax":{"content":"public static Bounds GetBounds(this UnityEngine.CharacterController character)","parameters":[{"description":"The character to get the bounds of.","id":"character","type":"Global.UnityEngine.CharacterController"}],"return":{"description":"The world space bounding volume of the character.","type":"Global.Bounds"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Utils.Extensions.GetBounds(UnityEngine.CharacterController)"},{"children":null,"id":"GroundCheck(UnityEngine.CharacterController,RaycastHit@,LayerMask)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GroundCheck(UnityEngine.CharacterController, out RaycastHit, LayerMask)","nameWithType":"Extensions.GroundCheck(UnityEngine.CharacterController, out RaycastHit, LayerMask)","namespace":"Zigurous.CharacterController.Utils","parent":"Zigurous.CharacterController.Utils.Extensions","remarks":null,"summary":"\nPerforms a raycast to see if the character is grounded.\n","syntax":{"content":"public static bool GroundCheck(this UnityEngine.CharacterController character, out RaycastHit hit, LayerMask layerMask)","parameters":[{"description":"The character to check.","id":"character","type":"Global.UnityEngine.CharacterController"},{"description":"The hit information.","id":"hit","type":"Global.RaycastHit"},{"description":"The layer mask to use.","id":"layerMask","type":"Global.LayerMask"}],"return":{"description":"True if the character is grounded, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Utils.Extensions.GroundCheck(UnityEngine.CharacterController,RaycastHit@,LayerMask)"},{"children":null,"id":"BoxCast(UnityEngine.CharacterController,Vector3,RaycastHit@,System.Single,LayerMask)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"BoxCast(UnityEngine.CharacterController, Vector3, out RaycastHit, Single, LayerMask)","nameWithType":"Extensions.BoxCast(UnityEngine.CharacterController, Vector3, out RaycastHit, Single, LayerMask)","namespace":"Zigurous.CharacterController.Utils","parent":"Zigurous.CharacterController.Utils.Extensions","remarks":null,"summary":"\nPerforms a box cast from the character&apos;s position.\n","syntax":{"content":"public static bool BoxCast(this UnityEngine.CharacterController character, Vector3 direction, out RaycastHit hit, float maxDistance, LayerMask layerMask)","parameters":[{"description":"The character to perform the cast from.","id":"character","type":"Global.UnityEngine.CharacterController"},{"description":"The direction to perform the cast.","id":"direction","type":"Global.Vector3"},{"description":"The resulting hit information.","id":"hit","type":"Global.RaycastHit"},{"description":"The max length of the cast.","id":"maxDistance","type":"System.Single"},{"description":"The layer mask to use.","id":"layerMask","type":"Global.LayerMask"}],"return":{"description":"True if any intersections were found.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Utils.Extensions.BoxCast(UnityEngine.CharacterController,Vector3,RaycastHit@,System.Single,LayerMask)"},{"children":null,"id":"SphereCast(UnityEngine.CharacterController,Vector3,RaycastHit@,System.Single,LayerMask)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SphereCast(UnityEngine.CharacterController, Vector3, out RaycastHit, Single, LayerMask)","nameWithType":"Extensions.SphereCast(UnityEngine.CharacterController, Vector3, out RaycastHit, Single, LayerMask)","namespace":"Zigurous.CharacterController.Utils","parent":"Zigurous.CharacterController.Utils.Extensions","remarks":null,"summary":"\nPerforms a sphere cast from the character&apos;s position.\n","syntax":{"content":"public static bool SphereCast(this UnityEngine.CharacterController character, Vector3 direction, out RaycastHit hit, float maxDistance, LayerMask layerMask)","parameters":[{"description":"The character to perform the cast from.","id":"character","type":"Global.UnityEngine.CharacterController"},{"description":"The direction to perform the cast.","id":"direction","type":"Global.Vector3"},{"description":"The resulting hit information.","id":"hit","type":"Global.RaycastHit"},{"description":"The max length of the cast.","id":"maxDistance","type":"System.Single"},{"description":"The layer mask to use.","id":"layerMask","type":"Global.LayerMask"}],"return":{"description":"True if any intersections were found.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Utils.Extensions.SphereCast(UnityEngine.CharacterController,Vector3,RaycastHit@,System.Single,LayerMask)"},{"children":null,"id":"StickDeadzone(Vector2@,System.Single,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"StickDeadzone(ref Vector2, Single, Single)","nameWithType":"Extensions.StickDeadzone(ref Vector2, Single, Single)","namespace":"Zigurous.CharacterController.Utils","parent":"Zigurous.CharacterController.Utils.Extensions","remarks":null,"summary":"\nClamps the input magnitude below min to zero and above max to one.\n","syntax":{"content":"public static void StickDeadzone(this ref Vector2 input, float min, float max)","parameters":[{"description":"The input value to clamp.","id":"input","type":"Global.Vector2"},{"description":"The minimum deadzone value.","id":"min","type":"System.Single"},{"description":"The maximum deadzone value.","id":"max","type":"System.Single"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Utils.Extensions.StickDeadzone(Vector2@,System.Single,System.Single)"},{"children":null,"id":"SetLayerRecursively(GameObject,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SetLayerRecursively(GameObject, Int32)","nameWithType":"Extensions.SetLayerRecursively(GameObject, Int32)","namespace":"Zigurous.CharacterController.Utils","parent":"Zigurous.CharacterController.Utils.Extensions","remarks":null,"summary":"\nSets the layer of the game object and all of its children to the\nspecified layer.\n","syntax":{"content":"public static void SetLayerRecursively(this GameObject parent, int layer)","parameters":[{"description":"The parent game object to recursively traverse through.","id":"parent","type":"Global.GameObject"},{"description":"The layer to set.","id":"layer","type":"System.Int32"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Utils.Extensions.SetLayerRecursively(GameObject,System.Int32)"}]},{"items":[{"children":["Zigurous.CharacterController.Utils.Log.enabled","Zigurous.CharacterController.Utils.Log.Error(System.String)","Zigurous.CharacterController.Utils.Log.Message(System.String)","Zigurous.CharacterController.Utils.Log.prefix","Zigurous.CharacterController.Utils.Log.Warning(System.String)"],"id":"Log","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"Log","nameWithType":"Log","namespace":"Zigurous.CharacterController.Utils","parent":"Zigurous.CharacterController.Utils","remarks":null,"summary":"\nLogs debug messages to the Unity console.\n","syntax":{"content":"public static class Log","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Utils.Log"},{"children":null,"id":"prefix","implements":null,"inheritance":null,"inheritedMembers":null,"name":"prefix","nameWithType":"Log.prefix","namespace":"Zigurous.CharacterController.Utils","parent":"Zigurous.CharacterController.Utils.Log","remarks":null,"summary":"\nThe prefix identifier displayed before every log message.\n","syntax":{"content":"public static string prefix","parameters":null,"return":{"description":null,"type":"System.String"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Utils.Log.prefix"},{"children":null,"id":"enabled","implements":null,"inheritance":null,"inheritedMembers":null,"name":"enabled","nameWithType":"Log.enabled","namespace":"Zigurous.CharacterController.Utils","parent":"Zigurous.CharacterController.Utils.Log","remarks":null,"summary":"\nWhether debug messages should be logged to the console.\n","syntax":{"content":"public static bool enabled","parameters":null,"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Utils.Log.enabled"},{"children":null,"id":"Message(System.String)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Message(String)","nameWithType":"Log.Message(String)","namespace":"Zigurous.CharacterController.Utils","parent":"Zigurous.CharacterController.Utils.Log","remarks":null,"summary":"\nLogs a message to the Unity console.\n","syntax":{"content":"public static void Message(string message)","parameters":[{"description":"The message to log.","id":"message","type":"System.String"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Utils.Log.Message(System.String)"},{"children":null,"id":"Warning(System.String)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Warning(String)","nameWithType":"Log.Warning(String)","namespace":"Zigurous.CharacterController.Utils","parent":"Zigurous.CharacterController.Utils.Log","remarks":null,"summary":"\nLogs a warning to the Unity console.\n","syntax":{"content":"public static void Warning(string warning)","parameters":[{"description":"The warning to log.","id":"warning","type":"System.String"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Utils.Log.Warning(System.String)"},{"children":null,"id":"Error(System.String)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Error(String)","nameWithType":"Log.Error(String)","namespace":"Zigurous.CharacterController.Utils","parent":"Zigurous.CharacterController.Utils.Log","remarks":null,"summary":"\nLogs an error to the Unity console.\n","syntax":{"content":"public static void Error(string error)","parameters":[{"description":"The error to log.","id":"error","type":"System.String"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Utils.Log.Error(System.String)"}]},{"items":[{"children":["Zigurous.CharacterController.Utils.Extensions","Zigurous.CharacterController.Utils.Log"],"id":"Zigurous.CharacterController.Utils","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Zigurous.CharacterController.Utils","nameWithType":"Zigurous.CharacterController.Utils","namespace":null,"parent":null,"remarks":null,"summary":null,"syntax":null,"type":"Namespace","uid":"Zigurous.CharacterController.Utils"}]},{"items":[{"children":["Zigurous.CharacterController.CharacterModelSwitcher","Zigurous.CharacterController.CharacterModelSwitcher.Model","Zigurous.CharacterController.EdgeSlip","Zigurous.CharacterController.EdgeSlipSettings","Zigurous.CharacterController.FallHeight","Zigurous.CharacterController.FallHeight.DamageEvent","Zigurous.CharacterController.FallHeightSettings","Zigurous.CharacterController.IgnoreCollisionEffect","Zigurous.CharacterController.IStaminaCostAction","Zigurous.CharacterController.MovementAbility`1","Zigurous.CharacterController.MovementAbilityCooldownMode","Zigurous.CharacterController.MovementAbilitySettings","Zigurous.CharacterController.MovementAbilitySettings`1","Zigurous.CharacterController.MovementBehavior`1","Zigurous.CharacterController.MovementBehaviorSettings","Zigurous.CharacterController.MovementBehaviorSettings`1","Zigurous.CharacterController.MovementControl`1","Zigurous.CharacterController.MovementControlInputStyle","Zigurous.CharacterController.MovementController","Zigurous.CharacterController.MovementControlSettings","Zigurous.CharacterController.MovementControlSettings`1","Zigurous.CharacterController.MovementEffect","Zigurous.CharacterController.MovementFlags","Zigurous.CharacterController.MovementFlagsExtensions","Zigurous.CharacterController.MovementHandler","Zigurous.CharacterController.MovementHandlerFirstPersonCombat","Zigurous.CharacterController.MovementHandlerNone","Zigurous.CharacterController.MovementHandlerThirdPersonAdventure","Zigurous.CharacterController.MovementHandlerThirdPersonCombat","Zigurous.CharacterController.MovementProcess","Zigurous.CharacterController.MovementProcessManager","Zigurous.CharacterController.MovementProfile","Zigurous.CharacterController.MovementSettings","Zigurous.CharacterController.MovementState","Zigurous.CharacterController.MovementStyle","Zigurous.CharacterController.PlatformMovement","Zigurous.CharacterController.PlatformMovementSettings","Zigurous.CharacterController.Ragdoll","Zigurous.CharacterController.RigidbodyPush","Zigurous.CharacterController.RigidbodyPushSettings","Zigurous.CharacterController.Stamina","Zigurous.CharacterController.StaminaCost","Zigurous.CharacterController.StaminaSettings"],"id":"Zigurous.CharacterController","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Zigurous.CharacterController","nameWithType":"Zigurous.CharacterController","namespace":null,"parent":null,"remarks":null,"summary":null,"syntax":null,"type":"Namespace","uid":"Zigurous.CharacterController"}]},{"items":[{"children":["Zigurous.CharacterController.Abilities.Crouch.isActive","Zigurous.CharacterController.Abilities.Crouch.movementFlags","Zigurous.CharacterController.Abilities.Crouch.OnAbilityActivated","Zigurous.CharacterController.Abilities.Crouch.OnAbilityDeactivated"],"id":"Crouch","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementProcess","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.CrouchSettings}","Zigurous.CharacterController.MovementControl{Zigurous.CharacterController.Abilities.CrouchSettings}","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.CrouchSettings}"],"inheritedMembers":["Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.CrouchSettings}.activated","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.CrouchSettings}.deactivated","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.CrouchSettings}.cooldown","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.CrouchSettings}.hasActiveCooldown","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.CrouchSettings}.Cancel","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.CrouchSettings}.CanAbilityBeActivated(Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.CrouchSettings}.CanAbilityStayActive(Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.CrouchSettings}.CanAbilityBeDeactivated(Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.CrouchSettings}.CanTransitionToSelf(Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.CrouchSettings}.StartCooldown","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.CrouchSettings}.StartCooldown(System.Single)","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.CrouchSettings}.OnCooldownFinished","Zigurous.CharacterController.MovementControl{Zigurous.CharacterController.Abilities.CrouchSettings}.isInputActive","Zigurous.CharacterController.MovementControl{Zigurous.CharacterController.Abilities.CrouchSettings}.OnPostUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.CrouchSettings}.settings","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.CrouchSettings}.enabled","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.CrouchSettings}.OnPreUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.CrouchSettings}.OnEnable","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.CrouchSettings}.OnDisable","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.CrouchSettings}.StartCoroutine(System.Collections.IEnumerator)","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.CrouchSettings}.StopCoroutine(Coroutine)","Zigurous.CharacterController.MovementProcess.controller","Zigurous.CharacterController.MovementProcess.registered","Zigurous.CharacterController.MovementProcess.order","Zigurous.CharacterController.MovementProcess.id","Zigurous.CharacterController.MovementProcess.OnRegister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUnregister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementProcess.OnMovementProfileChanged(Zigurous.CharacterController.MovementProfile,Zigurous.CharacterController.MovementProfile)"],"name":"Crouch","nameWithType":"Crouch","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities","remarks":null,"summary":"\nA movement ability that reduces the character&apos;s height and movement\nspeed while active.\n","syntax":{"content":"public sealed class Crouch : MovementAbility<CrouchSettings>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Abilities.Crouch"},{"children":null,"id":"movementFlags","implements":null,"inheritance":null,"inheritedMembers":null,"name":"movementFlags","nameWithType":"Crouch.movementFlags","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Crouch","remarks":null,"summary":"\nThe movement flag(s) associated with the ability. The flag(s) will\nbe set when the ability is turned on and unset when the ability is\nturned off.\n","syntax":{"content":"public override MovementFlags movementFlags { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Abilities.Crouch.movementFlags"},{"children":null,"id":"isActive","implements":null,"inheritance":null,"inheritedMembers":null,"name":"isActive","nameWithType":"Crouch.isActive","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Crouch","remarks":null,"summary":"\nWhether the movement ability is active. This may be different than\nthe input state depending on the type of control.\n","syntax":{"content":"public override bool isActive { protected set; }","parameters":[],"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Abilities.Crouch.isActive"},{"children":null,"id":"OnAbilityActivated","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnAbilityActivated()","nameWithType":"Crouch.OnAbilityActivated()","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Crouch","remarks":null,"summary":"\nA callback invoked when the ability is activated.\n","syntax":{"content":"protected override void OnAbilityActivated()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Abilities.Crouch.OnAbilityActivated"},{"children":null,"id":"OnAbilityDeactivated","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnAbilityDeactivated()","nameWithType":"Crouch.OnAbilityDeactivated()","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Crouch","remarks":null,"summary":"\nA callback invoked when the ability is deactivated.\n","syntax":{"content":"protected override void OnAbilityDeactivated()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Abilities.Crouch.OnAbilityDeactivated"}]},{"items":[{"children":["Zigurous.CharacterController.Abilities.Dash.available","Zigurous.CharacterController.Abilities.Dash.CanAbilityBeActivated(Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.Abilities.Dash.CanAbilityBeDeactivated(Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.Abilities.Dash.CanAbilityStayActive(Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.Abilities.Dash.dashesAvailable","Zigurous.CharacterController.Abilities.Dash.direction","Zigurous.CharacterController.Abilities.Dash.distanceTravelled","Zigurous.CharacterController.Abilities.Dash.movementFlags","Zigurous.CharacterController.Abilities.Dash.nextTimeAvailable","Zigurous.CharacterController.Abilities.Dash.OnAbilityActivated","Zigurous.CharacterController.Abilities.Dash.OnCooldownFinished","Zigurous.CharacterController.Abilities.Dash.speed"],"id":"Dash","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementProcess","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.DashSettings}","Zigurous.CharacterController.MovementControl{Zigurous.CharacterController.Abilities.DashSettings}","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.DashSettings}"],"inheritedMembers":["Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.DashSettings}.isActive","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.DashSettings}.activated","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.DashSettings}.deactivated","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.DashSettings}.cooldown","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.DashSettings}.hasActiveCooldown","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.DashSettings}.Cancel","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.DashSettings}.OnAbilityDeactivated","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.DashSettings}.CanTransitionToSelf(Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.DashSettings}.StartCooldown","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.DashSettings}.StartCooldown(System.Single)","Zigurous.CharacterController.MovementControl{Zigurous.CharacterController.Abilities.DashSettings}.isInputActive","Zigurous.CharacterController.MovementControl{Zigurous.CharacterController.Abilities.DashSettings}.OnPostUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.DashSettings}.settings","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.DashSettings}.enabled","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.DashSettings}.OnPreUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.DashSettings}.OnEnable","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.DashSettings}.OnDisable","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.DashSettings}.StartCoroutine(System.Collections.IEnumerator)","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.DashSettings}.StopCoroutine(Coroutine)","Zigurous.CharacterController.MovementProcess.controller","Zigurous.CharacterController.MovementProcess.registered","Zigurous.CharacterController.MovementProcess.order","Zigurous.CharacterController.MovementProcess.id","Zigurous.CharacterController.MovementProcess.OnRegister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUnregister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementProcess.OnMovementProfileChanged(Zigurous.CharacterController.MovementProfile,Zigurous.CharacterController.MovementProfile)"],"name":"Dash","nameWithType":"Dash","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities","remarks":null,"summary":"\nA movement ability to perform a quick dash in one direction.\n","syntax":{"content":"public sealed class Dash : MovementAbility<DashSettings>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Abilities.Dash"},{"children":null,"id":"movementFlags","implements":null,"inheritance":null,"inheritedMembers":null,"name":"movementFlags","nameWithType":"Dash.movementFlags","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Dash","remarks":null,"summary":"\nThe movement flag(s) associated with the ability. The flag(s) will\nbe set when the ability is turned on and unset when the ability is\nturned off.\n","syntax":{"content":"public override MovementFlags movementFlags { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Abilities.Dash.movementFlags"},{"children":null,"id":"direction","implements":null,"inheritance":null,"inheritedMembers":null,"name":"direction","nameWithType":"Dash.direction","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Dash","remarks":null,"summary":"\nThe dash direction input vector. This vector is set when the dash is\nactivated and is not changed while active (Read only).\n","syntax":{"content":"public Vector3 direction { get; }","parameters":[],"return":{"description":null,"type":"Global.Vector3"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Abilities.Dash.direction"},{"children":null,"id":"speed","implements":null,"inheritance":null,"inheritedMembers":null,"name":"speed","nameWithType":"Dash.speed","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Dash","remarks":null,"summary":"\nThe speed of the character when the dash is first activated (Read\nonly).\n","syntax":{"content":"public float speed { get; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Abilities.Dash.speed"},{"children":null,"id":"distanceTravelled","implements":null,"inheritance":null,"inheritedMembers":null,"name":"distanceTravelled","nameWithType":"Dash.distanceTravelled","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Dash","remarks":null,"summary":"\nThe amount of units the character has traveled in the current dash\n(Read only).\n","syntax":{"content":"public float distanceTravelled { get; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Abilities.Dash.distanceTravelled"},{"children":null,"id":"nextTimeAvailable","implements":null,"inheritance":null,"inheritedMembers":null,"name":"nextTimeAvailable","nameWithType":"Dash.nextTimeAvailable","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Dash","remarks":null,"summary":"\nThe time after which a consecutive dash can be performed (Read\nonly).\n","syntax":{"content":"public float nextTimeAvailable { get; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Abilities.Dash.nextTimeAvailable"},{"children":null,"id":"dashesAvailable","implements":null,"inheritance":null,"inheritedMembers":null,"name":"dashesAvailable","nameWithType":"Dash.dashesAvailable","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Dash","remarks":null,"summary":"\nThe number of dashes the character has available. This value will\nreset when the dash cooldown is finished (Read only).\n","syntax":{"content":"public int dashesAvailable { get; }","parameters":[],"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Abilities.Dash.dashesAvailable"},{"children":null,"id":"available","implements":null,"inheritance":null,"inheritedMembers":null,"name":"available","nameWithType":"Dash.available","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Dash","remarks":null,"summary":"\nWhether a dash can be performed at the current time (Read only).\n","syntax":{"content":"public bool available { get; }","parameters":[],"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Abilities.Dash.available"},{"children":null,"id":"OnAbilityActivated","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnAbilityActivated()","nameWithType":"Dash.OnAbilityActivated()","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Dash","remarks":null,"summary":"\nA callback invoked when the ability is activated.\n","syntax":{"content":"protected override void OnAbilityActivated()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Abilities.Dash.OnAbilityActivated"},{"children":null,"id":"CanAbilityBeActivated(Zigurous.CharacterController.MovementState)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"CanAbilityBeActivated(MovementState)","nameWithType":"Dash.CanAbilityBeActivated(MovementState)","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Dash","remarks":null,"summary":"\nDetermines if the ability can be activated given the current state\nof the character.\n","syntax":{"content":"protected override bool CanAbilityBeActivated(MovementState state)","parameters":[{"description":"The current state of the character.","id":"state","type":"Zigurous.CharacterController.MovementState"}],"return":{"description":"True if the ability can be activated.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Abilities.Dash.CanAbilityBeActivated(Zigurous.CharacterController.MovementState)"},{"children":null,"id":"CanAbilityStayActive(Zigurous.CharacterController.MovementState)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"CanAbilityStayActive(MovementState)","nameWithType":"Dash.CanAbilityStayActive(MovementState)","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Dash","remarks":null,"summary":"\nDetermines if the ability can stay active given the current state of\nthe character.\n","syntax":{"content":"protected override bool CanAbilityStayActive(MovementState state)","parameters":[{"description":"The current state of the character.","id":"state","type":"Zigurous.CharacterController.MovementState"}],"return":{"description":"True if the ability can stay active.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Abilities.Dash.CanAbilityStayActive(Zigurous.CharacterController.MovementState)"},{"children":null,"id":"CanAbilityBeDeactivated(Zigurous.CharacterController.MovementState)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"CanAbilityBeDeactivated(MovementState)","nameWithType":"Dash.CanAbilityBeDeactivated(MovementState)","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Dash","remarks":null,"summary":"\nDetermines if the ability can be deactivated given the current state\nof the character.\n","syntax":{"content":"protected override bool CanAbilityBeDeactivated(MovementState state)","parameters":[{"description":"The current state of the character.","id":"state","type":"Zigurous.CharacterController.MovementState"}],"return":{"description":"True if the ability can be deactivated.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Abilities.Dash.CanAbilityBeDeactivated(Zigurous.CharacterController.MovementState)"},{"children":null,"id":"OnCooldownFinished","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnCooldownFinished()","nameWithType":"Dash.OnCooldownFinished()","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Dash","remarks":null,"summary":"\nA callback invoked when the ability cooldown is finished.\n","syntax":{"content":"protected override void OnCooldownFinished()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Abilities.Dash.OnCooldownFinished"}]},{"items":[{"children":["Zigurous.CharacterController.Abilities.Dodge.available","Zigurous.CharacterController.Abilities.Dodge.CanAbilityBeActivated(Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.Abilities.Dodge.CanAbilityBeDeactivated(Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.Abilities.Dodge.CanAbilityStayActive(Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.Abilities.Dodge.direction","Zigurous.CharacterController.Abilities.Dodge.dodgesAvailable","Zigurous.CharacterController.Abilities.Dodge.elapsedTime","Zigurous.CharacterController.Abilities.Dodge.movementFlags","Zigurous.CharacterController.Abilities.Dodge.nextTimeAvailable","Zigurous.CharacterController.Abilities.Dodge.OnAbilityActivated","Zigurous.CharacterController.Abilities.Dodge.OnAbilityDeactivated","Zigurous.CharacterController.Abilities.Dodge.OnCooldownFinished","Zigurous.CharacterController.Abilities.Dodge.percentComplete","Zigurous.CharacterController.Abilities.Dodge.speed"],"id":"Dodge","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementProcess","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.DodgeSettings}","Zigurous.CharacterController.MovementControl{Zigurous.CharacterController.Abilities.DodgeSettings}","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.DodgeSettings}"],"inheritedMembers":["Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.DodgeSettings}.isActive","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.DodgeSettings}.activated","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.DodgeSettings}.deactivated","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.DodgeSettings}.cooldown","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.DodgeSettings}.hasActiveCooldown","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.DodgeSettings}.Cancel","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.DodgeSettings}.CanTransitionToSelf(Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.DodgeSettings}.StartCooldown","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.DodgeSettings}.StartCooldown(System.Single)","Zigurous.CharacterController.MovementControl{Zigurous.CharacterController.Abilities.DodgeSettings}.isInputActive","Zigurous.CharacterController.MovementControl{Zigurous.CharacterController.Abilities.DodgeSettings}.OnPostUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.DodgeSettings}.settings","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.DodgeSettings}.enabled","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.DodgeSettings}.OnPreUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.DodgeSettings}.OnEnable","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.DodgeSettings}.OnDisable","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.DodgeSettings}.StartCoroutine(System.Collections.IEnumerator)","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.DodgeSettings}.StopCoroutine(Coroutine)","Zigurous.CharacterController.MovementProcess.controller","Zigurous.CharacterController.MovementProcess.registered","Zigurous.CharacterController.MovementProcess.order","Zigurous.CharacterController.MovementProcess.id","Zigurous.CharacterController.MovementProcess.OnRegister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUnregister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementProcess.OnMovementProfileChanged(Zigurous.CharacterController.MovementProfile,Zigurous.CharacterController.MovementProfile)"],"name":"Dodge","nameWithType":"Dodge","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities","remarks":null,"summary":"\nA movement ability to perform a quick dodge roll. This ability is often\nassociated with invincibility frames.\n","syntax":{"content":"public sealed class Dodge : MovementAbility<DodgeSettings>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Abilities.Dodge"},{"children":null,"id":"movementFlags","implements":null,"inheritance":null,"inheritedMembers":null,"name":"movementFlags","nameWithType":"Dodge.movementFlags","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Dodge","remarks":null,"summary":"\nThe movement flag(s) associated with the ability. The flag(s) will\nbe set when the ability is turned on and unset when the ability is\nturned off.\n","syntax":{"content":"public override MovementFlags movementFlags { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Abilities.Dodge.movementFlags"},{"children":null,"id":"direction","implements":null,"inheritance":null,"inheritedMembers":null,"name":"direction","nameWithType":"Dodge.direction","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Dodge","remarks":null,"summary":"\nThe dodge direction input vector. This vector is set when the dodge\nis activated and is not changed while active (Read only).\n","syntax":{"content":"public Vector3 direction { get; }","parameters":[],"return":{"description":null,"type":"Global.Vector3"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Abilities.Dodge.direction"},{"children":null,"id":"speed","implements":null,"inheritance":null,"inheritedMembers":null,"name":"speed","nameWithType":"Dodge.speed","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Dodge","remarks":null,"summary":"\nThe speed of the character when the dodge is first activated\n(Read only).\n","syntax":{"content":"public float speed { get; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Abilities.Dodge.speed"},{"children":null,"id":"elapsedTime","implements":null,"inheritance":null,"inheritedMembers":null,"name":"elapsedTime","nameWithType":"Dodge.elapsedTime","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Dodge","remarks":null,"summary":"\nThe amount of seconds that have elapsed since the dodge was\nperformed (Read only).\n","syntax":{"content":"public float elapsedTime { get; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Abilities.Dodge.elapsedTime"},{"children":null,"id":"percentComplete","implements":null,"inheritance":null,"inheritedMembers":null,"name":"percentComplete","nameWithType":"Dodge.percentComplete","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Dodge","remarks":null,"summary":"\nThe completion percentage of the dodge being performed (Read only).\n","syntax":{"content":"public float percentComplete { get; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Abilities.Dodge.percentComplete"},{"children":null,"id":"nextTimeAvailable","implements":null,"inheritance":null,"inheritedMembers":null,"name":"nextTimeAvailable","nameWithType":"Dodge.nextTimeAvailable","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Dodge","remarks":null,"summary":"\nThe time after which a consecutive dodge can be performed\n(Read only).\n","syntax":{"content":"public float nextTimeAvailable { get; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Abilities.Dodge.nextTimeAvailable"},{"children":null,"id":"dodgesAvailable","implements":null,"inheritance":null,"inheritedMembers":null,"name":"dodgesAvailable","nameWithType":"Dodge.dodgesAvailable","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Dodge","remarks":null,"summary":"\nThe number of dodges the character has available. This value will\nreset when the dodge cooldown is finished (Read only).\n","syntax":{"content":"public int dodgesAvailable { get; }","parameters":[],"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Abilities.Dodge.dodgesAvailable"},{"children":null,"id":"available","implements":null,"inheritance":null,"inheritedMembers":null,"name":"available","nameWithType":"Dodge.available","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Dodge","remarks":null,"summary":"\nWhether a dodge can be performed at the current time (Read only).\n","syntax":{"content":"public bool available { get; }","parameters":[],"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Abilities.Dodge.available"},{"children":null,"id":"OnAbilityActivated","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnAbilityActivated()","nameWithType":"Dodge.OnAbilityActivated()","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Dodge","remarks":null,"summary":"\nA callback invoked when the ability is activated.\n","syntax":{"content":"protected override void OnAbilityActivated()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Abilities.Dodge.OnAbilityActivated"},{"children":null,"id":"OnAbilityDeactivated","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnAbilityDeactivated()","nameWithType":"Dodge.OnAbilityDeactivated()","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Dodge","remarks":null,"summary":"\nA callback invoked when the ability is deactivated.\n","syntax":{"content":"protected override void OnAbilityDeactivated()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Abilities.Dodge.OnAbilityDeactivated"},{"children":null,"id":"CanAbilityBeActivated(Zigurous.CharacterController.MovementState)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"CanAbilityBeActivated(MovementState)","nameWithType":"Dodge.CanAbilityBeActivated(MovementState)","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Dodge","remarks":null,"summary":"\nDetermines if the ability can be activated given the current state\nof the character.\n","syntax":{"content":"protected override bool CanAbilityBeActivated(MovementState state)","parameters":[{"description":"The current state of the character.","id":"state","type":"Zigurous.CharacterController.MovementState"}],"return":{"description":"True if the ability can be activated.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Abilities.Dodge.CanAbilityBeActivated(Zigurous.CharacterController.MovementState)"},{"children":null,"id":"CanAbilityStayActive(Zigurous.CharacterController.MovementState)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"CanAbilityStayActive(MovementState)","nameWithType":"Dodge.CanAbilityStayActive(MovementState)","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Dodge","remarks":null,"summary":"\nDetermines if the ability can stay active given the current state of\nthe character.\n","syntax":{"content":"protected override bool CanAbilityStayActive(MovementState state)","parameters":[{"description":"The current state of the character.","id":"state","type":"Zigurous.CharacterController.MovementState"}],"return":{"description":"True if the ability can stay active.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Abilities.Dodge.CanAbilityStayActive(Zigurous.CharacterController.MovementState)"},{"children":null,"id":"CanAbilityBeDeactivated(Zigurous.CharacterController.MovementState)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"CanAbilityBeDeactivated(MovementState)","nameWithType":"Dodge.CanAbilityBeDeactivated(MovementState)","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Dodge","remarks":null,"summary":"\nDetermines if the ability can be deactivated given the current state\nof the character.\n","syntax":{"content":"protected override bool CanAbilityBeDeactivated(MovementState state)","parameters":[{"description":"The current state of the character.","id":"state","type":"Zigurous.CharacterController.MovementState"}],"return":{"description":"True if the ability can be deactivated.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Abilities.Dodge.CanAbilityBeDeactivated(Zigurous.CharacterController.MovementState)"},{"children":null,"id":"OnCooldownFinished","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnCooldownFinished()","nameWithType":"Dodge.OnCooldownFinished()","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Dodge","remarks":null,"summary":"\nA callback invoked when the ability cooldown is finished.\n","syntax":{"content":"protected override void OnCooldownFinished()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Abilities.Dodge.OnCooldownFinished"}]},{"items":[{"children":["Zigurous.CharacterController.Abilities.Jetpack.CanAbilityBeActivated(Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.Abilities.Jetpack.CanAbilityStayActive(Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.Abilities.Jetpack.fuelRemaining","Zigurous.CharacterController.Abilities.Jetpack.movementFlags","Zigurous.CharacterController.Abilities.Jetpack.OnAbilityActivated","Zigurous.CharacterController.Abilities.Jetpack.OnAbilityDeactivated","Zigurous.CharacterController.Abilities.Jetpack.thrust"],"id":"Jetpack","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementProcess","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.JetpackSettings}","Zigurous.CharacterController.MovementControl{Zigurous.CharacterController.Abilities.JetpackSettings}","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.JetpackSettings}"],"inheritedMembers":["Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.JetpackSettings}.isActive","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.JetpackSettings}.activated","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.JetpackSettings}.deactivated","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.JetpackSettings}.cooldown","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.JetpackSettings}.hasActiveCooldown","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.JetpackSettings}.Cancel","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.JetpackSettings}.CanAbilityBeDeactivated(Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.JetpackSettings}.CanTransitionToSelf(Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.JetpackSettings}.StartCooldown","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.JetpackSettings}.StartCooldown(System.Single)","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.JetpackSettings}.OnCooldownFinished","Zigurous.CharacterController.MovementControl{Zigurous.CharacterController.Abilities.JetpackSettings}.isInputActive","Zigurous.CharacterController.MovementControl{Zigurous.CharacterController.Abilities.JetpackSettings}.OnPostUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.JetpackSettings}.settings","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.JetpackSettings}.enabled","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.JetpackSettings}.OnPreUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.JetpackSettings}.OnEnable","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.JetpackSettings}.OnDisable","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.JetpackSettings}.StartCoroutine(System.Collections.IEnumerator)","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.JetpackSettings}.StopCoroutine(Coroutine)","Zigurous.CharacterController.MovementProcess.controller","Zigurous.CharacterController.MovementProcess.registered","Zigurous.CharacterController.MovementProcess.order","Zigurous.CharacterController.MovementProcess.id","Zigurous.CharacterController.MovementProcess.OnRegister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUnregister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementProcess.OnMovementProfileChanged(Zigurous.CharacterController.MovementProfile,Zigurous.CharacterController.MovementProfile)"],"name":"Jetpack","nameWithType":"Jetpack","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities","remarks":null,"summary":"\nA movement ability that allows a character to fly around.\n","syntax":{"content":"public sealed class Jetpack : MovementAbility<JetpackSettings>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Abilities.Jetpack"},{"children":null,"id":"movementFlags","implements":null,"inheritance":null,"inheritedMembers":null,"name":"movementFlags","nameWithType":"Jetpack.movementFlags","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Jetpack","remarks":null,"summary":"\nThe movement flag(s) associated with the ability. The flag(s) will\nbe set when the ability is turned on and unset when the ability is\nturned off.\n","syntax":{"content":"public override MovementFlags movementFlags { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Abilities.Jetpack.movementFlags"},{"children":null,"id":"thrust","implements":null,"inheritance":null,"inheritedMembers":null,"name":"thrust","nameWithType":"Jetpack.thrust","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Jetpack","remarks":null,"summary":"\nThe current thrust vector of the jetpack.\n","syntax":{"content":"public Vector3 thrust { get; }","parameters":[],"return":{"description":null,"type":"Global.Vector3"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Abilities.Jetpack.thrust"},{"children":null,"id":"fuelRemaining","implements":null,"inheritance":null,"inheritedMembers":null,"name":"fuelRemaining","nameWithType":"Jetpack.fuelRemaining","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Jetpack","remarks":null,"summary":"\nThe current amount of fuel remaining.\n","syntax":{"content":"public float fuelRemaining { get; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Abilities.Jetpack.fuelRemaining"},{"children":null,"id":"OnAbilityActivated","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnAbilityActivated()","nameWithType":"Jetpack.OnAbilityActivated()","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Jetpack","remarks":null,"summary":"\nA callback invoked when the ability is activated.\n","syntax":{"content":"protected override void OnAbilityActivated()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Abilities.Jetpack.OnAbilityActivated"},{"children":null,"id":"OnAbilityDeactivated","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnAbilityDeactivated()","nameWithType":"Jetpack.OnAbilityDeactivated()","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Jetpack","remarks":null,"summary":"\nA callback invoked when the ability is deactivated.\n","syntax":{"content":"protected override void OnAbilityDeactivated()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Abilities.Jetpack.OnAbilityDeactivated"},{"children":null,"id":"CanAbilityBeActivated(Zigurous.CharacterController.MovementState)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"CanAbilityBeActivated(MovementState)","nameWithType":"Jetpack.CanAbilityBeActivated(MovementState)","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Jetpack","remarks":null,"summary":"\nDetermines if the ability can be activated given the current state\nof the character.\n","syntax":{"content":"protected override bool CanAbilityBeActivated(MovementState state)","parameters":[{"description":"The current state of the character.","id":"state","type":"Zigurous.CharacterController.MovementState"}],"return":{"description":"True if the ability can be activated.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Abilities.Jetpack.CanAbilityBeActivated(Zigurous.CharacterController.MovementState)"},{"children":null,"id":"CanAbilityStayActive(Zigurous.CharacterController.MovementState)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"CanAbilityStayActive(MovementState)","nameWithType":"Jetpack.CanAbilityStayActive(MovementState)","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Jetpack","remarks":null,"summary":"\nDetermines if the ability can stay active given the current state of\nthe character.\n","syntax":{"content":"protected override bool CanAbilityStayActive(MovementState state)","parameters":[{"description":"The current state of the character.","id":"state","type":"Zigurous.CharacterController.MovementState"}],"return":{"description":"True if the ability can stay active.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Abilities.Jetpack.CanAbilityStayActive(Zigurous.CharacterController.MovementState)"}]},{"items":[{"children":["Zigurous.CharacterController.Abilities.Jump.available","Zigurous.CharacterController.Abilities.Jump.CanAbilityBeActivated(Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.Abilities.Jump.CanAbilityBeDeactivated(Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.Abilities.Jump.CanTransitionToSelf(Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.Abilities.Jump.coyoteTimeExpiration","Zigurous.CharacterController.Abilities.Jump.jumpsAvailable","Zigurous.CharacterController.Abilities.Jump.movementFlags","Zigurous.CharacterController.Abilities.Jump.nextTimeAvailable","Zigurous.CharacterController.Abilities.Jump.OnAbilityActivated","Zigurous.CharacterController.Abilities.Jump.OnAbilityDeactivated","Zigurous.CharacterController.Abilities.Jump.OnCooldownFinished"],"id":"Jump","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementProcess","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.JumpSettings}","Zigurous.CharacterController.MovementControl{Zigurous.CharacterController.Abilities.JumpSettings}","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.JumpSettings}"],"inheritedMembers":["Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.JumpSettings}.isActive","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.JumpSettings}.activated","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.JumpSettings}.deactivated","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.JumpSettings}.cooldown","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.JumpSettings}.hasActiveCooldown","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.JumpSettings}.Cancel","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.JumpSettings}.CanAbilityStayActive(Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.JumpSettings}.StartCooldown","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.JumpSettings}.StartCooldown(System.Single)","Zigurous.CharacterController.MovementControl{Zigurous.CharacterController.Abilities.JumpSettings}.isInputActive","Zigurous.CharacterController.MovementControl{Zigurous.CharacterController.Abilities.JumpSettings}.OnPostUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.JumpSettings}.settings","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.JumpSettings}.enabled","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.JumpSettings}.OnPreUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.JumpSettings}.OnEnable","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.JumpSettings}.OnDisable","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.JumpSettings}.StartCoroutine(System.Collections.IEnumerator)","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.JumpSettings}.StopCoroutine(Coroutine)","Zigurous.CharacterController.MovementProcess.controller","Zigurous.CharacterController.MovementProcess.registered","Zigurous.CharacterController.MovementProcess.order","Zigurous.CharacterController.MovementProcess.id","Zigurous.CharacterController.MovementProcess.OnRegister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUnregister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementProcess.OnMovementProfileChanged(Zigurous.CharacterController.MovementProfile,Zigurous.CharacterController.MovementProfile)"],"name":"Jump","nameWithType":"Jump","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities","remarks":null,"summary":"\nA movement ability that allows the character to gain height by jumping.\n","syntax":{"content":"public sealed class Jump : MovementAbility<JumpSettings>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Abilities.Jump"},{"children":null,"id":"movementFlags","implements":null,"inheritance":null,"inheritedMembers":null,"name":"movementFlags","nameWithType":"Jump.movementFlags","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Jump","remarks":null,"summary":"\nThe movement flag(s) associated with the ability. The flag(s) will\nbe set when the ability is turned on and unset when the ability is\nturned off.\n","syntax":{"content":"public override MovementFlags movementFlags { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Abilities.Jump.movementFlags"},{"children":null,"id":"nextTimeAvailable","implements":null,"inheritance":null,"inheritedMembers":null,"name":"nextTimeAvailable","nameWithType":"Jump.nextTimeAvailable","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Jump","remarks":null,"summary":"\nThe time after which a consecutive jump can be performed (Read\nonly).\n","syntax":{"content":"public float nextTimeAvailable { get; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Abilities.Jump.nextTimeAvailable"},{"children":null,"id":"coyoteTimeExpiration","implements":null,"inheritance":null,"inheritedMembers":null,"name":"coyoteTimeExpiration","nameWithType":"Jump.coyoteTimeExpiration","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Jump","remarks":null,"summary":"\nThe time after which the &quot;Coyote Time&quot; expires (Read only).\n","syntax":{"content":"public float coyoteTimeExpiration { get; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Abilities.Jump.coyoteTimeExpiration"},{"children":null,"id":"jumpsAvailable","implements":null,"inheritance":null,"inheritedMembers":null,"name":"jumpsAvailable","nameWithType":"Jump.jumpsAvailable","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Jump","remarks":null,"summary":"\nThe number of jumps the character has available. This value will\nreset when the character is grounded and the jump cooldown is\nfinished (Read only).\n","syntax":{"content":"public int jumpsAvailable { get; }","parameters":[],"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Abilities.Jump.jumpsAvailable"},{"children":null,"id":"available","implements":null,"inheritance":null,"inheritedMembers":null,"name":"available","nameWithType":"Jump.available","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Jump","remarks":null,"summary":"\nWhether a jump is available to be performed at the current time\n(Read only).\n","syntax":{"content":"public bool available { get; }","parameters":[],"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Abilities.Jump.available"},{"children":null,"id":"OnAbilityActivated","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnAbilityActivated()","nameWithType":"Jump.OnAbilityActivated()","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Jump","remarks":null,"summary":"\nA callback invoked when the ability is activated.\n","syntax":{"content":"protected override void OnAbilityActivated()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Abilities.Jump.OnAbilityActivated"},{"children":null,"id":"OnAbilityDeactivated","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnAbilityDeactivated()","nameWithType":"Jump.OnAbilityDeactivated()","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Jump","remarks":null,"summary":"\nA callback invoked when the ability is deactivated.\n","syntax":{"content":"protected override void OnAbilityDeactivated()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Abilities.Jump.OnAbilityDeactivated"},{"children":null,"id":"CanAbilityBeActivated(Zigurous.CharacterController.MovementState)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"CanAbilityBeActivated(MovementState)","nameWithType":"Jump.CanAbilityBeActivated(MovementState)","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Jump","remarks":null,"summary":"\nDetermines if the ability can be activated given the current state\nof the character.\n","syntax":{"content":"protected override bool CanAbilityBeActivated(MovementState state)","parameters":[{"description":"The current state of the character.","id":"state","type":"Zigurous.CharacterController.MovementState"}],"return":{"description":"True if the ability can be activated.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Abilities.Jump.CanAbilityBeActivated(Zigurous.CharacterController.MovementState)"},{"children":null,"id":"CanAbilityBeDeactivated(Zigurous.CharacterController.MovementState)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"CanAbilityBeDeactivated(MovementState)","nameWithType":"Jump.CanAbilityBeDeactivated(MovementState)","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Jump","remarks":null,"summary":"\nDetermines if the ability can be deactivated given the current state\nof the character.\n","syntax":{"content":"protected override bool CanAbilityBeDeactivated(MovementState state)","parameters":[{"description":"The current state of the character.","id":"state","type":"Zigurous.CharacterController.MovementState"}],"return":{"description":"True if the ability can be deactivated.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Abilities.Jump.CanAbilityBeDeactivated(Zigurous.CharacterController.MovementState)"},{"children":null,"id":"CanTransitionToSelf(Zigurous.CharacterController.MovementState)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"CanTransitionToSelf(MovementState)","nameWithType":"Jump.CanTransitionToSelf(MovementState)","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Jump","remarks":null,"summary":"\nDetermines if the ability can be activated if it is already active.\n","syntax":{"content":"protected override bool CanTransitionToSelf(MovementState state)","parameters":[{"description":"The current state of the character.","id":"state","type":"Zigurous.CharacterController.MovementState"}],"return":{"description":"True if the ability can transition to itself.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Abilities.Jump.CanTransitionToSelf(Zigurous.CharacterController.MovementState)"},{"children":null,"id":"OnCooldownFinished","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnCooldownFinished()","nameWithType":"Jump.OnCooldownFinished()","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Jump","remarks":null,"summary":"\nA callback invoked when the ability cooldown is finished.\n","syntax":{"content":"protected override void OnCooldownFinished()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Abilities.Jump.OnCooldownFinished"}]},{"items":[{"children":["Zigurous.CharacterController.Abilities.NoClip.movementFlags","Zigurous.CharacterController.Abilities.NoClip.OnAbilityActivated","Zigurous.CharacterController.Abilities.NoClip.OnAbilityDeactivated"],"id":"NoClip","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementProcess","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.NoClipSettings}","Zigurous.CharacterController.MovementControl{Zigurous.CharacterController.Abilities.NoClipSettings}","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.NoClipSettings}"],"inheritedMembers":["Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.NoClipSettings}.isActive","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.NoClipSettings}.activated","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.NoClipSettings}.deactivated","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.NoClipSettings}.cooldown","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.NoClipSettings}.hasActiveCooldown","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.NoClipSettings}.Cancel","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.NoClipSettings}.CanAbilityBeActivated(Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.NoClipSettings}.CanAbilityStayActive(Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.NoClipSettings}.CanAbilityBeDeactivated(Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.NoClipSettings}.CanTransitionToSelf(Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.NoClipSettings}.StartCooldown","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.NoClipSettings}.StartCooldown(System.Single)","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.NoClipSettings}.OnCooldownFinished","Zigurous.CharacterController.MovementControl{Zigurous.CharacterController.Abilities.NoClipSettings}.isInputActive","Zigurous.CharacterController.MovementControl{Zigurous.CharacterController.Abilities.NoClipSettings}.OnPostUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.NoClipSettings}.settings","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.NoClipSettings}.enabled","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.NoClipSettings}.OnPreUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.NoClipSettings}.OnEnable","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.NoClipSettings}.OnDisable","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.NoClipSettings}.StartCoroutine(System.Collections.IEnumerator)","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.NoClipSettings}.StopCoroutine(Coroutine)","Zigurous.CharacterController.MovementProcess.controller","Zigurous.CharacterController.MovementProcess.registered","Zigurous.CharacterController.MovementProcess.order","Zigurous.CharacterController.MovementProcess.id","Zigurous.CharacterController.MovementProcess.OnRegister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUnregister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementProcess.OnMovementProfileChanged(Zigurous.CharacterController.MovementProfile,Zigurous.CharacterController.MovementProfile)"],"name":"NoClip","nameWithType":"NoClip","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities","remarks":null,"summary":"\nAllows the character to move around without obstruction due to\ncollisions being disabled.\n","syntax":{"content":"public sealed class NoClip : MovementAbility<NoClipSettings>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Abilities.NoClip"},{"children":null,"id":"movementFlags","implements":null,"inheritance":null,"inheritedMembers":null,"name":"movementFlags","nameWithType":"NoClip.movementFlags","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.NoClip","remarks":null,"summary":"\nThe movement flag(s) associated with the ability. The flag(s) will\nbe set when the ability is turned on and unset when the ability is\nturned off.\n","syntax":{"content":"public override MovementFlags movementFlags { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Abilities.NoClip.movementFlags"},{"children":null,"id":"OnAbilityActivated","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnAbilityActivated()","nameWithType":"NoClip.OnAbilityActivated()","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.NoClip","remarks":null,"summary":"\nA callback invoked when the ability is activated.\n","syntax":{"content":"protected override void OnAbilityActivated()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Abilities.NoClip.OnAbilityActivated"},{"children":null,"id":"OnAbilityDeactivated","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnAbilityDeactivated()","nameWithType":"NoClip.OnAbilityDeactivated()","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.NoClip","remarks":null,"summary":"\nA callback invoked when the ability is deactivated.\n","syntax":{"content":"protected override void OnAbilityDeactivated()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Abilities.NoClip.OnAbilityDeactivated"}]},{"items":[{"children":["Zigurous.CharacterController.Abilities.Sprint.movementFlags"],"id":"Sprint","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementProcess","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.SprintSettings}","Zigurous.CharacterController.MovementControl{Zigurous.CharacterController.Abilities.SprintSettings}","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.SprintSettings}"],"inheritedMembers":["Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.SprintSettings}.isActive","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.SprintSettings}.activated","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.SprintSettings}.deactivated","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.SprintSettings}.cooldown","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.SprintSettings}.hasActiveCooldown","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.SprintSettings}.Cancel","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.SprintSettings}.OnAbilityActivated","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.SprintSettings}.OnAbilityDeactivated","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.SprintSettings}.CanAbilityBeActivated(Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.SprintSettings}.CanAbilityStayActive(Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.SprintSettings}.CanAbilityBeDeactivated(Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.SprintSettings}.CanTransitionToSelf(Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.SprintSettings}.StartCooldown","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.SprintSettings}.StartCooldown(System.Single)","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.SprintSettings}.OnCooldownFinished","Zigurous.CharacterController.MovementControl{Zigurous.CharacterController.Abilities.SprintSettings}.isInputActive","Zigurous.CharacterController.MovementControl{Zigurous.CharacterController.Abilities.SprintSettings}.OnPostUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.SprintSettings}.settings","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.SprintSettings}.enabled","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.SprintSettings}.OnPreUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.SprintSettings}.OnEnable","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.SprintSettings}.OnDisable","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.SprintSettings}.StartCoroutine(System.Collections.IEnumerator)","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.SprintSettings}.StopCoroutine(Coroutine)","Zigurous.CharacterController.MovementProcess.controller","Zigurous.CharacterController.MovementProcess.registered","Zigurous.CharacterController.MovementProcess.order","Zigurous.CharacterController.MovementProcess.id","Zigurous.CharacterController.MovementProcess.OnRegister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUnregister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementProcess.OnMovementProfileChanged(Zigurous.CharacterController.MovementProfile,Zigurous.CharacterController.MovementProfile)"],"name":"Sprint","nameWithType":"Sprint","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities","remarks":null,"summary":"\nA movement ability that increases the character&apos;s speed while active.\n","syntax":{"content":"public sealed class Sprint : MovementAbility<SprintSettings>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Abilities.Sprint"},{"children":null,"id":"movementFlags","implements":null,"inheritance":null,"inheritedMembers":null,"name":"movementFlags","nameWithType":"Sprint.movementFlags","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Sprint","remarks":null,"summary":"\nThe movement flag(s) associated with the ability. The flag(s) will\nbe set when the ability is turned on and unset when the ability is\nturned off.\n","syntax":{"content":"public override MovementFlags movementFlags { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Abilities.Sprint.movementFlags"}]},{"items":[{"children":["Zigurous.CharacterController.Abilities.Walk.movementFlags"],"id":"Walk","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementProcess","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.WalkSettings}","Zigurous.CharacterController.MovementControl{Zigurous.CharacterController.Abilities.WalkSettings}","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.WalkSettings}"],"inheritedMembers":["Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.WalkSettings}.isActive","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.WalkSettings}.activated","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.WalkSettings}.deactivated","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.WalkSettings}.cooldown","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.WalkSettings}.hasActiveCooldown","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.WalkSettings}.Cancel","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.WalkSettings}.OnAbilityActivated","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.WalkSettings}.OnAbilityDeactivated","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.WalkSettings}.CanAbilityBeActivated(Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.WalkSettings}.CanAbilityStayActive(Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.WalkSettings}.CanAbilityBeDeactivated(Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.WalkSettings}.CanTransitionToSelf(Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.WalkSettings}.StartCooldown","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.WalkSettings}.StartCooldown(System.Single)","Zigurous.CharacterController.MovementAbility{Zigurous.CharacterController.Abilities.WalkSettings}.OnCooldownFinished","Zigurous.CharacterController.MovementControl{Zigurous.CharacterController.Abilities.WalkSettings}.isInputActive","Zigurous.CharacterController.MovementControl{Zigurous.CharacterController.Abilities.WalkSettings}.OnPostUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.WalkSettings}.settings","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.WalkSettings}.enabled","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.WalkSettings}.OnPreUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.WalkSettings}.OnEnable","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.WalkSettings}.OnDisable","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.WalkSettings}.StartCoroutine(System.Collections.IEnumerator)","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.Abilities.WalkSettings}.StopCoroutine(Coroutine)","Zigurous.CharacterController.MovementProcess.controller","Zigurous.CharacterController.MovementProcess.registered","Zigurous.CharacterController.MovementProcess.order","Zigurous.CharacterController.MovementProcess.id","Zigurous.CharacterController.MovementProcess.OnRegister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUnregister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementProcess.OnMovementProfileChanged(Zigurous.CharacterController.MovementProfile,Zigurous.CharacterController.MovementProfile)"],"name":"Walk","nameWithType":"Walk","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities","remarks":null,"summary":"\nA movement ability that decreases the character&apos;s speed while active.\n","syntax":{"content":"public sealed class Walk : MovementAbility<WalkSettings>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Abilities.Walk"},{"children":null,"id":"movementFlags","implements":null,"inheritance":null,"inheritedMembers":null,"name":"movementFlags","nameWithType":"Walk.movementFlags","namespace":"Zigurous.CharacterController.Abilities","parent":"Zigurous.CharacterController.Abilities.Walk","remarks":null,"summary":"\nThe movement flag(s) associated with the ability. The flag(s) will\nbe set when the ability is turned on and unset when the ability is\nturned off.\n","syntax":{"content":"public override MovementFlags movementFlags { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Abilities.Walk.movementFlags"}]},{"items":[{"children":["Zigurous.CharacterController.MovementAbility`1.activated","Zigurous.CharacterController.MovementAbility`1.CanAbilityBeActivated(Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementAbility`1.CanAbilityBeDeactivated(Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementAbility`1.CanAbilityStayActive(Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementAbility`1.Cancel","Zigurous.CharacterController.MovementAbility`1.CanTransitionToSelf(Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementAbility`1.cooldown","Zigurous.CharacterController.MovementAbility`1.deactivated","Zigurous.CharacterController.MovementAbility`1.hasActiveCooldown","Zigurous.CharacterController.MovementAbility`1.isActive","Zigurous.CharacterController.MovementAbility`1.movementFlags","Zigurous.CharacterController.MovementAbility`1.OnAbilityActivated","Zigurous.CharacterController.MovementAbility`1.OnAbilityDeactivated","Zigurous.CharacterController.MovementAbility`1.OnCooldownFinished","Zigurous.CharacterController.MovementAbility`1.StartCooldown","Zigurous.CharacterController.MovementAbility`1.StartCooldown(System.Single)"],"id":"MovementAbility`1","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementProcess","Zigurous.CharacterController.MovementBehavior{{T}}","Zigurous.CharacterController.MovementControl{{T}}"],"inheritedMembers":["Zigurous.CharacterController.MovementControl{{T}}.isInputActive","Zigurous.CharacterController.MovementControl{{T}}.OnPostUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementBehavior{{T}}.settings","Zigurous.CharacterController.MovementBehavior{{T}}.enabled","Zigurous.CharacterController.MovementBehavior{{T}}.OnPreUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementBehavior{{T}}.OnEnable","Zigurous.CharacterController.MovementBehavior{{T}}.OnDisable","Zigurous.CharacterController.MovementBehavior{{T}}.StartCoroutine(System.Collections.IEnumerator)","Zigurous.CharacterController.MovementBehavior{{T}}.StopCoroutine(Coroutine)","Zigurous.CharacterController.MovementProcess.controller","Zigurous.CharacterController.MovementProcess.registered","Zigurous.CharacterController.MovementProcess.order","Zigurous.CharacterController.MovementProcess.id","Zigurous.CharacterController.MovementProcess.OnRegister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUnregister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementProcess.OnMovementProfileChanged(Zigurous.CharacterController.MovementProfile,Zigurous.CharacterController.MovementProfile)"],"name":"MovementAbility<T>","nameWithType":"MovementAbility<T>","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nA type that performs a movement ability under given conditions.\n","syntax":{"content":"public abstract class MovementAbility<T> : MovementControl<T> where T : MovementAbilitySettings, new()","parameters":null,"return":null,"typeParameters":[{"description":null,"id":"T"}]},"type":"Class","uid":"Zigurous.CharacterController.MovementAbility`1"},{"children":null,"id":"movementFlags","implements":null,"inheritance":null,"inheritedMembers":null,"name":"movementFlags","nameWithType":"MovementAbility<T>.movementFlags","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementAbility`1","remarks":null,"summary":"\nThe movement flag(s) associated with the ability. The flag(s) will\nbe set when the ability is turned on and unset when the ability is\nturned off.\n","syntax":{"content":"public virtual MovementFlags movementFlags { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.CharacterController.MovementFlags"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementAbility`1.movementFlags"},{"children":null,"id":"isActive","implements":null,"inheritance":null,"inheritedMembers":null,"name":"isActive","nameWithType":"MovementAbility<T>.isActive","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementAbility`1","remarks":null,"summary":"\nWhether the movement ability is active. This may be different than\nthe input state depending on the type of control.\n","syntax":{"content":"public virtual bool isActive { get; protected set; }","parameters":[],"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementAbility`1.isActive"},{"children":null,"id":"activated","implements":null,"inheritance":null,"inheritedMembers":null,"name":"activated","nameWithType":"MovementAbility<T>.activated","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementAbility`1","remarks":null,"summary":"\nThe callback invoked when the movement ability is activated.\n","syntax":{"content":"public Action activated","parameters":null,"return":{"description":null,"type":"System.Action"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementAbility`1.activated"},{"children":null,"id":"deactivated","implements":null,"inheritance":null,"inheritedMembers":null,"name":"deactivated","nameWithType":"MovementAbility<T>.deactivated","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementAbility`1","remarks":null,"summary":"\nThe callback invoked when the movement ability is deactivated.\n","syntax":{"content":"public Action deactivated","parameters":null,"return":{"description":null,"type":"System.Action"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementAbility`1.deactivated"},{"children":null,"id":"cooldown","implements":null,"inheritance":null,"inheritedMembers":null,"name":"cooldown","nameWithType":"MovementAbility<T>.cooldown","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementAbility`1","remarks":null,"summary":"\nThe cooldown coroutine.\n","syntax":{"content":"protected Coroutine cooldown","parameters":null,"return":{"description":null,"type":"Global.Coroutine"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.MovementAbility`1.cooldown"},{"children":null,"id":"hasActiveCooldown","implements":null,"inheritance":null,"inheritedMembers":null,"name":"hasActiveCooldown","nameWithType":"MovementAbility<T>.hasActiveCooldown","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementAbility`1","remarks":null,"summary":"\nWhether the ability is currently on cooldown (Read only).\n","syntax":{"content":"public bool hasActiveCooldown { get; }","parameters":[],"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.MovementAbility`1.hasActiveCooldown"},{"children":null,"id":"Cancel","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Cancel()","nameWithType":"MovementAbility<T>.Cancel()","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementAbility`1","remarks":null,"summary":"\nCancels the movement ability if it is active without checking\nwhether the ability can be deactivated or not. This is essentially a\nforce stop.\n","syntax":{"content":"public void Cancel()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementAbility`1.Cancel"},{"children":null,"id":"OnAbilityActivated","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnAbilityActivated()","nameWithType":"MovementAbility<T>.OnAbilityActivated()","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementAbility`1","remarks":null,"summary":"\nA callback invoked when the ability is activated.\n","syntax":{"content":"protected virtual void OnAbilityActivated()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementAbility`1.OnAbilityActivated"},{"children":null,"id":"OnAbilityDeactivated","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnAbilityDeactivated()","nameWithType":"MovementAbility<T>.OnAbilityDeactivated()","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementAbility`1","remarks":null,"summary":"\nA callback invoked when the ability is deactivated.\n","syntax":{"content":"protected virtual void OnAbilityDeactivated()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementAbility`1.OnAbilityDeactivated"},{"children":null,"id":"CanAbilityBeActivated(Zigurous.CharacterController.MovementState)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"CanAbilityBeActivated(MovementState)","nameWithType":"MovementAbility<T>.CanAbilityBeActivated(MovementState)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementAbility`1","remarks":null,"summary":"\nDetermines if the ability can be activated given the current state\nof the character.\n","syntax":{"content":"protected virtual bool CanAbilityBeActivated(MovementState state)","parameters":[{"description":"The current state of the character.","id":"state","type":"Zigurous.CharacterController.MovementState"}],"return":{"description":"True if the ability can be activated.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementAbility`1.CanAbilityBeActivated(Zigurous.CharacterController.MovementState)"},{"children":null,"id":"CanAbilityStayActive(Zigurous.CharacterController.MovementState)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"CanAbilityStayActive(MovementState)","nameWithType":"MovementAbility<T>.CanAbilityStayActive(MovementState)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementAbility`1","remarks":null,"summary":"\nDetermines if the ability can stay active given the current state of\nthe character.\n","syntax":{"content":"protected virtual bool CanAbilityStayActive(MovementState state)","parameters":[{"description":"The current state of the character.","id":"state","type":"Zigurous.CharacterController.MovementState"}],"return":{"description":"True if the ability can stay active.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementAbility`1.CanAbilityStayActive(Zigurous.CharacterController.MovementState)"},{"children":null,"id":"CanAbilityBeDeactivated(Zigurous.CharacterController.MovementState)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"CanAbilityBeDeactivated(MovementState)","nameWithType":"MovementAbility<T>.CanAbilityBeDeactivated(MovementState)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementAbility`1","remarks":null,"summary":"\nDetermines if the ability can be deactivated given the current state\nof the character.\n","syntax":{"content":"protected virtual bool CanAbilityBeDeactivated(MovementState state)","parameters":[{"description":"The current state of the character.","id":"state","type":"Zigurous.CharacterController.MovementState"}],"return":{"description":"True if the ability can be deactivated.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementAbility`1.CanAbilityBeDeactivated(Zigurous.CharacterController.MovementState)"},{"children":null,"id":"CanTransitionToSelf(Zigurous.CharacterController.MovementState)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"CanTransitionToSelf(MovementState)","nameWithType":"MovementAbility<T>.CanTransitionToSelf(MovementState)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementAbility`1","remarks":null,"summary":"\nDetermines if the ability can be activated if it is already active.\n","syntax":{"content":"protected virtual bool CanTransitionToSelf(MovementState state)","parameters":[{"description":"The current state of the character.","id":"state","type":"Zigurous.CharacterController.MovementState"}],"return":{"description":"True if the ability can transition to itself.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementAbility`1.CanTransitionToSelf(Zigurous.CharacterController.MovementState)"},{"children":null,"id":"StartCooldown","implements":null,"inheritance":null,"inheritedMembers":null,"name":"StartCooldown()","nameWithType":"MovementAbility<T>.StartCooldown()","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementAbility`1","remarks":null,"summary":"\nStarts a cooldown for the ability.\n","syntax":{"content":"public void StartCooldown()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementAbility`1.StartCooldown"},{"children":null,"id":"StartCooldown(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"StartCooldown(Single)","nameWithType":"MovementAbility<T>.StartCooldown(Single)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementAbility`1","remarks":null,"summary":"\nStarts a cooldown for the ability.\n","syntax":{"content":"public void StartCooldown(float duration)","parameters":[{"description":"The duration of the cooldown.","id":"duration","type":"System.Single"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementAbility`1.StartCooldown(System.Single)"},{"children":null,"id":"OnCooldownFinished","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnCooldownFinished()","nameWithType":"MovementAbility<T>.OnCooldownFinished()","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.MovementAbility`1","remarks":null,"summary":"\nA callback invoked when the ability cooldown is finished.\n","syntax":{"content":"protected virtual void OnCooldownFinished()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.MovementAbility`1.OnCooldownFinished"}]},{"items":[{"children":["Zigurous.CharacterController.Stamina.changed","Zigurous.CharacterController.Stamina.decreasable","Zigurous.CharacterController.Stamina.Drain(System.Single)","Zigurous.CharacterController.Stamina.Drain(Zigurous.CharacterController.IStaminaCostAction)","Zigurous.CharacterController.Stamina.Drain(Zigurous.CharacterController.StaminaCost)","Zigurous.CharacterController.Stamina.DrainAll","Zigurous.CharacterController.Stamina.DrainPercent(System.Single)","Zigurous.CharacterController.Stamina.empty","Zigurous.CharacterController.Stamina.Fill(System.Single)","Zigurous.CharacterController.Stamina.FillFull","Zigurous.CharacterController.Stamina.FillPercent(System.Single)","Zigurous.CharacterController.Stamina.full","Zigurous.CharacterController.Stamina.HasAmount(System.Single)","Zigurous.CharacterController.Stamina.HasPercent(System.Single)","Zigurous.CharacterController.Stamina.HasRequired(Zigurous.CharacterController.IStaminaCostAction)","Zigurous.CharacterController.Stamina.HasRequired(Zigurous.CharacterController.StaminaCost)","Zigurous.CharacterController.Stamina.increasable","Zigurous.CharacterController.Stamina.percent","Zigurous.CharacterController.Stamina.regenerating","Zigurous.CharacterController.Stamina.value"],"id":"Stamina","implements":null,"inheritance":["System.Object","Zigurous.CharacterController.MovementProcess","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.StaminaSettings}"],"inheritedMembers":["Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.StaminaSettings}.settings","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.StaminaSettings}.enabled","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.StaminaSettings}.OnPreUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.StaminaSettings}.OnEnable","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.StaminaSettings}.OnDisable","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.StaminaSettings}.StartCoroutine(System.Collections.IEnumerator)","Zigurous.CharacterController.MovementBehavior{Zigurous.CharacterController.StaminaSettings}.StopCoroutine(Coroutine)","Zigurous.CharacterController.MovementProcess.controller","Zigurous.CharacterController.MovementProcess.registered","Zigurous.CharacterController.MovementProcess.order","Zigurous.CharacterController.MovementProcess.id","Zigurous.CharacterController.MovementProcess.OnRegister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUnregister(Zigurous.CharacterController.MovementController)","Zigurous.CharacterController.MovementProcess.OnUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementProcess.OnPostUpdate(Zigurous.CharacterController.MovementController,Zigurous.CharacterController.MovementState)","Zigurous.CharacterController.MovementProcess.OnMovementProfileChanged(Zigurous.CharacterController.MovementProfile,Zigurous.CharacterController.MovementProfile)"],"name":"Stamina","nameWithType":"Stamina","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController","remarks":null,"summary":"\nMaintains the character&apos;s stamina resource which can be used as a\nrequirement to perform abilities.\n","syntax":{"content":"public sealed class Stamina : MovementBehavior<StaminaSettings>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.CharacterController.Stamina"},{"children":null,"id":"value","implements":null,"inheritance":null,"inheritedMembers":null,"name":"value","nameWithType":"Stamina.value","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.Stamina","remarks":null,"summary":"\nThe amount of stamina the character currently has.\n","syntax":{"content":"public float value { get; set; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Stamina.value"},{"children":null,"id":"percent","implements":null,"inheritance":null,"inheritedMembers":null,"name":"percent","nameWithType":"Stamina.percent","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.Stamina","remarks":null,"summary":"\nThe percentage of stamina to the maximum amount (Read only).\n","syntax":{"content":"public float percent { get; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Stamina.percent"},{"children":null,"id":"full","implements":null,"inheritance":null,"inheritedMembers":null,"name":"full","nameWithType":"Stamina.full","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.Stamina","remarks":null,"summary":"\nWhether the character has full stamina (Read only).\n","syntax":{"content":"public bool full { get; }","parameters":[],"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Stamina.full"},{"children":null,"id":"empty","implements":null,"inheritance":null,"inheritedMembers":null,"name":"empty","nameWithType":"Stamina.empty","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.Stamina","remarks":null,"summary":"\nWhether the character has zero stamina (Read only).\n","syntax":{"content":"public bool empty { get; }","parameters":[],"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Stamina.empty"},{"children":null,"id":"regenerating","implements":null,"inheritance":null,"inheritedMembers":null,"name":"regenerating","nameWithType":"Stamina.regenerating","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.Stamina","remarks":null,"summary":"\nWhether the character is currently regenerating stamina (Read only).\n","syntax":{"content":"public bool regenerating { get; }","parameters":[],"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Stamina.regenerating"},{"children":null,"id":"increasable","implements":null,"inheritance":null,"inheritedMembers":null,"name":"increasable","nameWithType":"Stamina.increasable","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.Stamina","remarks":null,"summary":"\nAllows or disallows the stamina value to be increased.\n","syntax":{"content":"public bool increasable { get; set; }","parameters":[],"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Stamina.increasable"},{"children":null,"id":"decreasable","implements":null,"inheritance":null,"inheritedMembers":null,"name":"decreasable","nameWithType":"Stamina.decreasable","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.Stamina","remarks":null,"summary":"\nAllows or disallows the stamina value to be decreased.\n","syntax":{"content":"public bool decreasable { get; set; }","parameters":[],"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Property","uid":"Zigurous.CharacterController.Stamina.decreasable"},{"children":null,"id":"changed","implements":null,"inheritance":null,"inheritedMembers":null,"name":"changed","nameWithType":"Stamina.changed","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.Stamina","remarks":null,"summary":"\nA callback invoked when the stamina value changes.\n","syntax":{"content":"public Action<float, float> changed","parameters":null,"return":{"description":null,"type":"System.Action{System.Single,System.Single}"},"typeParameters":null},"type":"Field","uid":"Zigurous.CharacterController.Stamina.changed"},{"children":null,"id":"Fill(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Fill(Single)","nameWithType":"Stamina.Fill(Single)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.Stamina","remarks":null,"summary":"\nIncreases the character&apos;s stamina by a flat amount.\n","syntax":{"content":"public float Fill(float amount)","parameters":[{"description":"The amount to increase the character&apos;s stamina by.","id":"amount","type":"System.Single"}],"return":{"description":"The new amount of stamina.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Stamina.Fill(System.Single)"},{"children":null,"id":"FillPercent(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"FillPercent(Single)","nameWithType":"Stamina.FillPercent(Single)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.Stamina","remarks":null,"summary":"\nIncreases the character&apos;s stamina by a percent amount.\n","syntax":{"content":"public float FillPercent(float percent)","parameters":[{"description":"The percent amount to increase the character&apos;s stamina by.","id":"percent","type":"System.Single"}],"return":{"description":"The new amount of stamina.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Stamina.FillPercent(System.Single)"},{"children":null,"id":"FillFull","implements":null,"inheritance":null,"inheritedMembers":null,"name":"FillFull()","nameWithType":"Stamina.FillFull()","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.Stamina","remarks":null,"summary":"\nIncreases the character&apos;s stamina to the maximum amount.\n","syntax":{"content":"public float FillFull()","parameters":null,"return":{"description":"The new amount of stamina.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Stamina.FillFull"},{"children":null,"id":"Drain(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Drain(Single)","nameWithType":"Stamina.Drain(Single)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.Stamina","remarks":null,"summary":"\nDecreases the character&apos;s stamina by a flat amount.\n","syntax":{"content":"public float Drain(float amount)","parameters":[{"description":"The amount to decrease the character&apos;s stamina by.","id":"amount","type":"System.Single"}],"return":{"description":"The new amount of stamina.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Stamina.Drain(System.Single)"},{"children":null,"id":"DrainPercent(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"DrainPercent(Single)","nameWithType":"Stamina.DrainPercent(Single)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.Stamina","remarks":null,"summary":"\nDecreases the character&apos;s stamina by a percent amount.\n","syntax":{"content":"public float DrainPercent(float percent)","parameters":[{"description":"The percent amount to decrease the character&apos;s stamina by.","id":"percent","type":"System.Single"}],"return":{"description":"The new amount of stamina.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Stamina.DrainPercent(System.Single)"},{"children":null,"id":"DrainAll","implements":null,"inheritance":null,"inheritedMembers":null,"name":"DrainAll()","nameWithType":"Stamina.DrainAll()","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.Stamina","remarks":null,"summary":"\nDecreases all of the character&apos;s stamina.\n","syntax":{"content":"public float DrainAll()","parameters":null,"return":{"description":"The new amount of stamina.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Stamina.DrainAll"},{"children":null,"id":"Drain(Zigurous.CharacterController.IStaminaCostAction)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Drain(IStaminaCostAction)","nameWithType":"Stamina.Drain(IStaminaCostAction)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.Stamina","remarks":null,"summary":"\nDecreases the character&apos;s stamina by the amount described by an action.\n","syntax":{"content":"public void Drain(IStaminaCostAction action)","parameters":[{"description":"The stamina action being performed.","id":"action","type":"Zigurous.CharacterController.IStaminaCostAction"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Stamina.Drain(Zigurous.CharacterController.IStaminaCostAction)"},{"children":null,"id":"Drain(Zigurous.CharacterController.StaminaCost)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Drain(StaminaCost)","nameWithType":"Stamina.Drain(StaminaCost)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.Stamina","remarks":null,"summary":"\nDecreases the character&apos;s stamina by the amount described by a <xref href=\"Zigurous.CharacterController.StaminaCost\" data-throw-if-not-resolved=\"false\"></xref>.\n","syntax":{"content":"public void Drain(StaminaCost cost)","parameters":[{"description":"The stamina cost.","id":"cost","type":"Zigurous.CharacterController.StaminaCost"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Stamina.Drain(Zigurous.CharacterController.StaminaCost)"},{"children":null,"id":"HasAmount(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"HasAmount(Single)","nameWithType":"Stamina.HasAmount(Single)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.Stamina","remarks":null,"summary":"\nDetermines if the character has at least the given amount of stamina.\n","syntax":{"content":"public bool HasAmount(float amount)","parameters":[{"description":"The amount of stamina to check.","id":"amount","type":"System.Single"}],"return":{"description":"True if the character has at least the given amount.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Stamina.HasAmount(System.Single)"},{"children":null,"id":"HasPercent(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"HasPercent(Single)","nameWithType":"Stamina.HasPercent(Single)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.Stamina","remarks":null,"summary":"\nDetermines if the character has at least the given percent of stamina.\n","syntax":{"content":"public bool HasPercent(float percent)","parameters":[{"description":"The percent of stamina to check.","id":"percent","type":"System.Single"}],"return":{"description":"True if the character has at least the given percent.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Stamina.HasPercent(System.Single)"},{"children":null,"id":"HasRequired(Zigurous.CharacterController.IStaminaCostAction)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"HasRequired(IStaminaCostAction)","nameWithType":"Stamina.HasRequired(IStaminaCostAction)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.Stamina","remarks":null,"summary":"\nDetermines if there is enough stamina to perform a given action.\n","syntax":{"content":"public bool HasRequired(IStaminaCostAction action)","parameters":[{"description":"The stamina action to perform.","id":"action","type":"Zigurous.CharacterController.IStaminaCostAction"}],"return":{"description":"True if there is enough stamina, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Stamina.HasRequired(Zigurous.CharacterController.IStaminaCostAction)"},{"children":null,"id":"HasRequired(Zigurous.CharacterController.StaminaCost)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"HasRequired(StaminaCost)","nameWithType":"Stamina.HasRequired(StaminaCost)","namespace":"Zigurous.CharacterController","parent":"Zigurous.CharacterController.Stamina","remarks":null,"summary":"\nDetermines if there is enough stamina for a given cost.\n","syntax":{"content":"public bool HasRequired(StaminaCost cost)","parameters":[{"description":"The stamina cost of an action.","id":"cost","type":"Zigurous.CharacterController.StaminaCost"}],"return":{"description":"True if there is enough stamina, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.CharacterController.Stamina.HasRequired(Zigurous.CharacterController.StaminaCost)"}]}]}}}