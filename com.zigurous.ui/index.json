{
  "api/Zigurous.UI.html": {
    "href": "api/Zigurous.UI.html",
    "title": "Namespace Zigurous.UI | UI Toolkit",
    "keywords": "Namespace Zigurous.UI Classes NavigationStack Manages a stack of game objects for menu navigation purposes. This is especially useful to handle backwards navigation by simply popping off the last item in the stack. ScrollToSelection Handles scrolling a ScrollRect component to the selected child element. This is especially useful for controller support. ScrollWithInput Handles scrolling a ScrollRect component with user input. This is especially useful for controller support. Enums ScrollToSelection.ScrollDirection A scroll direction."
  },
  "api/Zigurous.UI.NavigationStack.html": {
    "href": "api/Zigurous.UI.NavigationStack.html",
    "title": "Class NavigationStack | UI Toolkit",
    "keywords": "Class NavigationStack Manages a stack of game objects for menu navigation purposes. This is especially useful to handle backwards navigation by simply popping off the last item in the stack. Inheritance System.Object NavigationStack Namespace : Zigurous.UI public class NavigationStack : MonoBehaviour Fields allowEmptyStack Allows for all items to be popped off the stack. Often times you want to maintain at least the root game object. public bool allowEmptyStack allowNullSelections Allows for null game objects to be pushed onto the stack. public bool allowNullSelections backNavigationInput The input action that handles backwards navigation by popping items off the stack. public InputAction backNavigationInput rootGameObject The root game object added to the bottom of the stack. public GameObject rootGameObject setActiveState Automatically sets the active state of game objects as they are pushed on and off the stack. public bool setActiveState Properties eventSystem The event system being tracked by the navigation stack. public EventSystem eventSystem { get; } items The game objects added to the stack. public Stack<GameObject> items { get; } Top The current selected game object at the top of the stack. public GameObject Top { get; } Methods Pop() Pops the last game object off the stack, effectively navigating backwards. public GameObject Pop() Returns Description GameObject The game object that was popped off the stack. Push(GameObject) Pushes a game object onto the stack, effectively navigating forwards. public void Push(GameObject selected) Parameter Description selected The game object to push onto the stack."
  },
  "api/Zigurous.UI.ScrollToSelection.html": {
    "href": "api/Zigurous.UI.ScrollToSelection.html",
    "title": "Class ScrollToSelection | UI Toolkit",
    "keywords": "Class ScrollToSelection Handles scrolling a ScrollRect component to the selected child element. This is especially useful for controller support. Inheritance System.Object ScrollToSelection Namespace : Zigurous.UI public class ScrollToSelection : MonoBehaviour Fields scrollDirection The direction to scroll the ScrollRect. public ScrollToSelection.ScrollDirection scrollDirection scrollSpeed How quickly the ScrollRect scrolls. public float scrollSpeed Properties manualScrolling Whether the ScrollRect is currently being scrolled manually. This allows the user to freely scroll with the mouse even when a child element is selected. public bool manualScrolling { get; } scrollRect The ScrollRect component being scrolled. public ScrollRect scrollRect { get; } scrollTransform The RectTransform component of the scroll rect. public RectTransform scrollTransform { get; } selectedGameObject The current selected game object. public GameObject selectedGameObject { get; } selectedTransform The RectTransform of the current selected game object. public RectTransform selectedTransform { get; }"
  },
  "api/Zigurous.UI.ScrollToSelection.ScrollDirection.html": {
    "href": "api/Zigurous.UI.ScrollToSelection.ScrollDirection.html",
    "title": "Enum ScrollToSelection.ScrollDirection | UI Toolkit",
    "keywords": "Enum ScrollToSelection.ScrollDirection A scroll direction. Namespace : Zigurous.UI public enum ScrollDirection Fields Name Description Both Scrolls in both the x-axis and the y-axis. Horizontal Scrolls in the x-axis. Vertical Scrolls in the y-axis."
  },
  "api/Zigurous.UI.ScrollWithInput.html": {
    "href": "api/Zigurous.UI.ScrollWithInput.html",
    "title": "Class ScrollWithInput | UI Toolkit",
    "keywords": "Class ScrollWithInput Handles scrolling a ScrollRect component with user input. This is especially useful for controller support. Inheritance System.Object ScrollWithInput Namespace : Zigurous.UI public class ScrollWithInput : MonoBehaviour Fields scrollInput The input action that handles scrolling. public InputAction scrollInput sensitivity The sensitivity multiplier applied to the input. public float sensitivity Properties scrollRect The ScrollRect component being scrolled. public ScrollRect scrollRect { get; }"
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "Changelog | UI Toolkit",
    "keywords": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [0.1.0] - 2021/07/05 Added NavigationStack ScrollToSelection ScrollWithInput"
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "License | UI Toolkit",
    "keywords": "License MIT License Copyright (c) 2021 Zigurous Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "UI Toolkit | UI Toolkit",
    "keywords": "UI Toolkit The UI Toolkit package contains scripts and utilities for creating UI in Unity projects. The package is intended to solve common problems that arise when developing UI and menus. The package is still early in development, and more scripts will be added over time. Reference Menus"
  },
  "manual/installation.html": {
    "href": "manual/installation.html",
    "title": "Installation | UI Toolkit",
    "keywords": "Installation Use the Unity Package Manager to install the UI Toolkit package. Open the Package Manager in Window > Package Manager Click the add ( + ) button in the status bar Select Add package from git URL from the add menu Enter the following Git URL in the text box and click Add: https://github.com/zigurous/unity-ui-toolkit.git For more information on the Package Manager and installing packages, see the following pages: Unity's Package Manager Installing from a Git URL Importing Import the package namespace in each script or file you want to use it. Note : You may need to regenerate project files/assemblies first. using Zigurous.UI; Source Code The source code for the UI Toolkit package is in the following repository: https://github.com/zigurous/unity-ui-toolkit"
  },
  "manual/menus.html": {
    "href": "manual/menus.html",
    "title": "Menus | UI Toolkit",
    "keywords": "Menus The UI Toolkit comes with a few scripts to assist in creating UI menus. There are several common problems that arise, especially in regards to menu navigation and controller-support. Generally speaking, basic navigation in menus across any input device can be achieved out-of-box using Unity's EventSystem component; however, this is not always the case. NavigationStack This script manages a stack of game objects (menus) that you can navigate between. As you navigate to another menu layer or sub-menu, you push the menu's game object onto the stack. Then, when you need to navigate back to the previous menu, you simply pop the game object off the top of the stack. The script can also automatically turn on/off the game objects as they are pushed and popped from the stack. The script also provides an InputAction to handle backwards navigation. ScrollToSelection This script works in conjunction with the EventSystem to handle scrolling a ScrollRect component to the selected game object. For example, when using a controller you usually do not freely scroll menus that display a list of buttons, such as a level select menu. Rather, you simply navigate up and down to the next or previous button, respectively. The ScrollRect will automatically be scrolled to whichever game object is selected. ScrollWithInput For other menus that use a ScrollRect component, you may just want to be able to freely scroll up and down. This may not be supported out of the box for controllers, so this script simply exposes an InputAction that you can bind controls to in order to scroll the menu. There is actually nothing specific to controllers in this script, so you can also use it with any kind of input, but generally mouse+keyboard already works with ScrollRect."
  }
}