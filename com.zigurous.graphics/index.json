{
  "api/Zigurous.Graphics.AnimatedShaderColorProperty.html": {
    "href": "api/Zigurous.Graphics.AnimatedShaderColorProperty.html",
    "title": "Class AnimatedShaderColorProperty | Graphics Utils",
    "keywords": "Class AnimatedShaderColorProperty A shader color property that can be animated. Inheritance System.Object AnimatedShaderProperty AnimatedShaderColorProperty Inherited Members AnimatedShaderProperty.property Namespace : Zigurous.Graphics [Serializable] public class AnimatedShaderColorProperty : AnimatedShaderProperty Constructors AnimatedShaderColorProperty(Gradient, String) Creates a new animated shader color property. public AnimatedShaderColorProperty(Gradient colorOverTime, string property) Parameter Description colorOverTime The color over time of the shader property. property The shader property to animate. Fields colorOverTime The color over time of the shader property. public Gradient colorOverTime Methods Animate(Material, Single) Animates the shader property. public override void Animate(Material material, float time) Parameter Description material The material to animate. time The time of the animation to evaluate. Overrides AnimatedShaderProperty.Animate(Material, Single)"
  },
  "api/Zigurous.Graphics.AnimatedShaderFloatProperty.html": {
    "href": "api/Zigurous.Graphics.AnimatedShaderFloatProperty.html",
    "title": "Class AnimatedShaderFloatProperty | Graphics Utils",
    "keywords": "Class AnimatedShaderFloatProperty A shader float property that can be animated. Inheritance System.Object AnimatedShaderProperty AnimatedShaderFloatProperty Inherited Members AnimatedShaderProperty.property Namespace : Zigurous.Graphics [Serializable] public class AnimatedShaderFloatProperty : AnimatedShaderProperty Constructors AnimatedShaderFloatProperty(AnimationCurve, String) Creates a new animated shader float property. public AnimatedShaderFloatProperty(AnimationCurve valueOverTime, string property) Parameter Description valueOverTime The value over time of the shader property. property The shader property to animate. Fields valueOverTime The value over time of the shader property. public AnimationCurve valueOverTime Methods Animate(Material, Single) Animates the shader property. public override void Animate(Material material, float time) Parameter Description material The material to animate. time The time of the animation to evaluate. Overrides AnimatedShaderProperty.Animate(Material, Single)"
  },
  "api/Zigurous.Graphics.AnimatedShaderIntProperty.html": {
    "href": "api/Zigurous.Graphics.AnimatedShaderIntProperty.html",
    "title": "Class AnimatedShaderIntProperty | Graphics Utils",
    "keywords": "Class AnimatedShaderIntProperty A shader int property that can be animated. Inheritance System.Object AnimatedShaderProperty AnimatedShaderIntProperty Inherited Members AnimatedShaderProperty.property Namespace : Zigurous.Graphics [Serializable] public class AnimatedShaderIntProperty : AnimatedShaderProperty Constructors AnimatedShaderIntProperty(AnimationCurve, String) Creates a new animated shader int property. public AnimatedShaderIntProperty(AnimationCurve valueOverTime, string property) Parameter Description valueOverTime The value over time of the shader property. property The shader property to animate. Fields valueOverTime The value over time of the shader property. public AnimationCurve valueOverTime Methods Animate(Material, Single) Animates the shader property. public override void Animate(Material material, float time) Parameter Description material The material to animate. time The time of the animation to evaluate. Overrides AnimatedShaderProperty.Animate(Material, Single)"
  },
  "api/Zigurous.Graphics.AnimatedShaderProperty.html": {
    "href": "api/Zigurous.Graphics.AnimatedShaderProperty.html",
    "title": "Class AnimatedShaderProperty | Graphics Utils",
    "keywords": "Class AnimatedShaderProperty A shader property that can be animated. Inheritance System.Object AnimatedShaderProperty AnimatedShaderColorProperty AnimatedShaderFloatProperty AnimatedShaderIntProperty Namespace : Zigurous.Graphics [Serializable] public abstract class AnimatedShaderProperty Constructors AnimatedShaderProperty(String) Creates a new animated shader property. public AnimatedShaderProperty(string property) Parameter Description property The shader property to animate. Fields property The shader property to animate. public ShaderProperty property Methods Animate(Material, Single) Animates the shader property. public abstract void Animate(Material material, float time) Parameter Description material The material to animate. time The time of the animation to evaluate."
  },
  "api/Zigurous.Graphics.AnimatedShaderPropertyExtensions.html": {
    "href": "api/Zigurous.Graphics.AnimatedShaderPropertyExtensions.html",
    "title": "Class AnimatedShaderPropertyExtensions | Graphics Utils",
    "keywords": "Class AnimatedShaderPropertyExtensions Extension methods for AnimatedShaderProperty . Inheritance System.Object AnimatedShaderPropertyExtensions Namespace : Zigurous.Graphics public static class AnimatedShaderPropertyExtensions Methods Animate(List<AnimatedShaderProperty>, Material, Single) Animates an array of shader properties. public static void Animate(this List<AnimatedShaderProperty> properties, Material material, float time) Parameter Description properties The shader properties to animate. material The material to animate. time The time of the animation to evaluate. Animate(AnimatedShaderProperty[], Material, Single) Animates an array of shader properties. public static void Animate(this AnimatedShaderProperty[] properties, Material material, float time) Parameter Description properties The shader properties to animate. material The material to animate. time The time of the animation to evaluate."
  },
  "api/Zigurous.Graphics.AutoTile.Axis.html": {
    "href": "api/Zigurous.Graphics.AutoTile.Axis.html",
    "title": "Enum AutoTile.Axis | Graphics Utils",
    "keywords": "Enum AutoTile.Axis An axis along which a texture is tiled. Namespace : Zigurous.Graphics public enum Axis Fields Name Description X_Neg Tiles an object along the x-axis in the negative direction. X_Pos Tiles an object along the x-axis in the positive direction. Y_Neg Tiles an object along the y-axis in the negative direction. Y_Pos Tiles an object along the y-axis in the positive direction. Z_Neg Tiles an object along the z-axis in the negative direction. Z_Pos Tiles an object along the z-axis in the positive direction."
  },
  "api/Zigurous.Graphics.AutoTile.html": {
    "href": "api/Zigurous.Graphics.AutoTile.html",
    "title": "Class AutoTile | Graphics Utils",
    "keywords": "Class AutoTile Automatically tiles the material textures based on the object's scale. Inheritance System.Object AutoTile Namespace : Zigurous.Graphics public sealed class AutoTile : MonoBehaviour Fields autoUpdate Whether the material texture(s) are tiled automatically when the transform changes. public bool autoUpdate submeshes The submeshes that are tiled on the renderer. public AutoTile.Submesh[] submeshes textureNames The names of the textures that are tiled on the material. public string[] textureNames Properties renderer The renderer component of the material being tiled. public Renderer renderer { get; } Methods Tile() Updates the tiling properties of the material(s) based on the current scale of the object. public void Tile()"
  },
  "api/Zigurous.Graphics.AutoTile.Submesh.html": {
    "href": "api/Zigurous.Graphics.AutoTile.Submesh.html",
    "title": "Class AutoTile.Submesh | Graphics Utils",
    "keywords": "Class AutoTile.Submesh A representation of a submesh that can be individually tiled. Inheritance System.Object AutoTile.Submesh Namespace : Zigurous.Graphics [Serializable] public sealed class Submesh Fields axis The axis along which the texture is tiled. public AutoTile.Axis axis submeshIndex The submesh index of the material being tiled. public int submeshIndex textureOffset The texture offset applied on the material. public Vector2 textureOffset unitScale The object's base unit scale. For example, planes have a unit scale of 10 compared to most other primitives. public Vector3 unitScale"
  },
  "api/Zigurous.Graphics.CheckerboardTextureDrawer.CheckerboardSettings.html": {
    "href": "api/Zigurous.Graphics.CheckerboardTextureDrawer.CheckerboardSettings.html",
    "title": "Struct CheckerboardTextureDrawer.CheckerboardSettings | Graphics Utils",
    "keywords": "Struct CheckerboardTextureDrawer.CheckerboardSettings The checkerboard settings of a CheckerboardTextureDrawer . Namespace : Zigurous.Graphics [Serializable] public struct CheckerboardSettings Constructors CheckerboardSettings(Int32, Int32, Color, Color) Creates new checkerboard settings with the specified values. public CheckerboardSettings(int rows, int columns, Color colorA, Color colorB) Parameter Description rows The number of rows in the checkerboard. columns The number of columns in the checkerboard. colorA The first color of the checkerboard. colorB The second color of the checkerboard. Fields colorA The first color of the checkerboard. public Color colorA colorB The second color of the checkerboard. public Color colorB columns The number of columns in the checkerboard. public int columns rows The number of rows in the checkerboard. public int rows"
  },
  "api/Zigurous.Graphics.CheckerboardTextureDrawer.html": {
    "href": "api/Zigurous.Graphics.CheckerboardTextureDrawer.html",
    "title": "Class CheckerboardTextureDrawer | Graphics Utils",
    "keywords": "Class CheckerboardTextureDrawer Draws a texture of a checkerboard pattern. Inheritance System.Object TextureDrawer CheckerboardTextureDrawer Inherited Members TextureDrawer.texture TextureDrawer.textureSettings TextureDrawer.renderer TextureDrawer.renderSettings TextureDrawer.invalidated TextureDrawer.Draw() Namespace : Zigurous.Graphics public sealed class CheckerboardTextureDrawer : TextureDrawer Fields checkerboard The checkerboard settings. public CheckerboardTextureDrawer.CheckerboardSettings checkerboard Methods SetPixels(Texture2D) Sets the pixels of the texture. protected override void SetPixels(Texture2D texture) Parameter Description texture The texture to set the pixels on. Overrides TextureDrawer.SetPixels(Texture2D)"
  },
  "api/Zigurous.Graphics.CombineChildrenMeshes.html": {
    "href": "api/Zigurous.Graphics.CombineChildrenMeshes.html",
    "title": "Class CombineChildrenMeshes | Graphics Utils",
    "keywords": "Class CombineChildrenMeshes Combines the meshes of the children of the game object into one mesh. Inheritance System.Object CombineChildrenMeshes Namespace : Zigurous.Graphics public sealed class CombineChildrenMeshes : MonoBehaviour Fields combineOnStart Combines the mesh on start, otherwise it needs to be called manually. public bool combineOnStart optimizeMesh Optimizes the combined mesh data to improve rendering performance. public bool optimizeMesh recalculateBounds Recalculates the bounding volume of the combined mesh. public bool recalculateBounds removeChildMeshes Removes the child meshes from the game object after combining. public bool removeChildMeshes Methods Combine() Combines the meshes of the children of this game object. public Mesh Combine() Returns Description Mesh A new combined mesh."
  },
  "api/Zigurous.Graphics.CubeMesh.html": {
    "href": "api/Zigurous.Graphics.CubeMesh.html",
    "title": "Class CubeMesh | Graphics Utils",
    "keywords": "Class CubeMesh Generates a new cube mesh and applies it to the mesh filter. Inheritance System.Object CubeMesh Namespace : Zigurous.Graphics public sealed class CubeMesh : MonoBehaviour Fields Corners The corners of the cube. public static readonly Vector3[] Corners Triangles The triangles of the cube. public static readonly int[] Triangles UV The UV coordinates of the cube. public static readonly Vector2[] UV Vertices The verticies of the cube. public static readonly Vector3[] Vertices Properties sharedMesh A cube mesh that can be shared across many objects. public static Mesh sharedMesh { get; } Methods Apply() Applies a new cube mesh to the mesh filter. public void Apply() Create() Creates a new cube mesh. public Mesh Create() Returns Description Mesh The new cube mesh."
  },
  "api/Zigurous.Graphics.CubeMesh3.html": {
    "href": "api/Zigurous.Graphics.CubeMesh3.html",
    "title": "Class CubeMesh3 | Graphics Utils",
    "keywords": "Class CubeMesh3 Generates a new cube mesh with 3 submeshes (one for each axis) and applies it to the mesh filter. Inheritance System.Object CubeMesh3 Namespace : Zigurous.Graphics public sealed class CubeMesh3 : MonoBehaviour Fields TrianglesX The triangles of the cube for the faces in the x-axis. public static readonly int[] TrianglesX TrianglesY The triangles of the cube for the faces in the y-axis. public static readonly int[] TrianglesY TrianglesZ The triangles of the cube for the faces in the z-axis. public static readonly int[] TrianglesZ Methods Apply() Applies a new cube mesh to the mesh filter. public void Apply() Create() Creates a new cube mesh with 3 submeshes (one for each axis). public Mesh Create() Returns Description Mesh The new cube mesh."
  },
  "api/Zigurous.Graphics.CubeMesh6.html": {
    "href": "api/Zigurous.Graphics.CubeMesh6.html",
    "title": "Class CubeMesh6 | Graphics Utils",
    "keywords": "Class CubeMesh6 Generates a new cube mesh with 6 submeshes (one for each face) and applies it to the mesh filter. Inheritance System.Object CubeMesh6 Namespace : Zigurous.Graphics public sealed class CubeMesh6 : MonoBehaviour Fields TrianglesBack The triangles of the cube for the back face. public static readonly int[] TrianglesBack TrianglesBottom The triangles of the cube for the bottom face. public static readonly int[] TrianglesBottom TrianglesFront The triangles of the cube for the front face. public static readonly int[] TrianglesFront TrianglesLeft The triangles of the cube for the left face. public static readonly int[] TrianglesLeft TrianglesRight The triangles of the cube for the right face. public static readonly int[] TrianglesRight TrianglesTop The triangles of the cube for the top face. public static readonly int[] TrianglesTop Methods Apply() Applies a new cube mesh to the mesh filter. public void Apply() Create() Creates a new cube mesh with 6 submeshes (one for each face). public Mesh Create() Returns Description Mesh The new cube mesh."
  },
  "api/Zigurous.Graphics.html": {
    "href": "api/Zigurous.Graphics.html",
    "title": "Namespace Zigurous.Graphics | Graphics Utils",
    "keywords": "Namespace Zigurous.Graphics Classes AnimatedShaderColorProperty A shader color property that can be animated. AnimatedShaderFloatProperty A shader float property that can be animated. AnimatedShaderIntProperty A shader int property that can be animated. AnimatedShaderProperty A shader property that can be animated. AnimatedShaderPropertyExtensions Extension methods for AnimatedShaderProperty . AutoTile Automatically tiles the material textures based on the object's scale. AutoTile.Submesh A representation of a submesh that can be individually tiled. CheckerboardTextureDrawer Draws a texture of a checkerboard pattern. CombineChildrenMeshes Combines the meshes of the children of the game object into one mesh. CubeMesh Generates a new cube mesh and applies it to the mesh filter. CubeMesh3 Generates a new cube mesh with 3 submeshes (one for each axis) and applies it to the mesh filter. CubeMesh6 Generates a new cube mesh with 6 submeshes (one for each face) and applies it to the mesh filter. Identifier Constant shader property identifiers. InvertMesh Inverts the normals and triangles of the mesh so it renders inside-out. MaterialExtensions Extension methods for materials. MeshExtensions Extension methods for meshes. SaveMesh Saves the mesh of a mesh filter into a project asset. TextureDrawer Draws a custom texture at runtime. Structs CheckerboardTextureDrawer.CheckerboardSettings The checkerboard settings of a CheckerboardTextureDrawer . ShaderProperty A shader property that can be set on a material. An id is automatically created for the property for optimal code. TextureDrawer.RenderSettings The render settings of a TextureDrawer . TextureDrawer.TextureSettings The texture settings of a TextureDrawer . Triangle A data structure of a mesh triangle comprised of 3 verticies. Enums AutoTile.Axis An axis along which a texture is tiled. RenderingMode A rendering blend mode of a material."
  },
  "api/Zigurous.Graphics.Identifier.html": {
    "href": "api/Zigurous.Graphics.Identifier.html",
    "title": "Class Identifier | Graphics Utils",
    "keywords": "Class Identifier Constant shader property identifiers. Inheritance System.Object Identifier Namespace : Zigurous.Graphics public static class Identifier Fields BumpMap Equivalent to Shader.PropertyToID(\"_BumpMap\") . public static readonly int BumpMap BumpScale Equivalent to Shader.PropertyToID(\"_BumpScale\") . public static readonly int BumpScale Color Equivalent to Shader.PropertyToID(\"_Color\") . public static readonly int Color Cubemap Equivalent to Shader.PropertyToID(\"_Cubemap\") . public static readonly int Cubemap Cutoff Equivalent to Shader.PropertyToID(\"_Cutoff\") . public static readonly int Cutoff DetailAlbedoMap Equivalent to Shader.PropertyToID(\"_DetailAlbedoMap\") . public static readonly int DetailAlbedoMap DetailMask Equivalent to Shader.PropertyToID(\"_DetailMask\") . public static readonly int DetailMask DetailNormalMap Equivalent to Shader.PropertyToID(\"_DetailNormalMap\") . public static readonly int DetailNormalMap DetailNormalMapScale Equivalent to Shader.PropertyToID(\"_DetailNormalMapScale\") . public static readonly int DetailNormalMapScale DstBlend Equivalent to Shader.PropertyToID(\"_DstBlend\") . public static readonly int DstBlend EmissionColor Equivalent to Shader.PropertyToID(\"_EmissionColor\") . public static readonly int EmissionColor EmissionMap Equivalent to Shader.PropertyToID(\"_EmissionMap\") . public static readonly int EmissionMap Exposure Equivalent to Shader.PropertyToID(\"_Exposure\") . public static readonly int Exposure Glossiness Equivalent to Shader.PropertyToID(\"_Glossiness\") . public static readonly int Glossiness GlossMapScale Equivalent to Shader.PropertyToID(\"_GlossMapScale\") . public static readonly int GlossMapScale GlossyReflections Equivalent to Shader.PropertyToID(\"_GlossyReflections\") . public static readonly int GlossyReflections MainTex Equivalent to Shader.PropertyToID(\"_MainTex\") . public static readonly int MainTex Metallic Equivalent to Shader.PropertyToID(\"_Metallic\") . public static readonly int Metallic MetallicGlossMap Equivalent to Shader.PropertyToID(\"_MetallicGlossMap\") . public static readonly int MetallicGlossMap Mode Equivalent to Shader.PropertyToID(\"_Mode\") . public static readonly int Mode OcclusionMap Equivalent to Shader.PropertyToID(\"_OcclusionMap\") . public static readonly int OcclusionMap OcclusionStrength Equivalent to Shader.PropertyToID(\"_OcclusionStrength\") . public static readonly int OcclusionStrength Parallax Equivalent to Shader.PropertyToID(\"_Parallax\") . public static readonly int Parallax ParallaxMap Equivalent to Shader.PropertyToID(\"_ParallaxMap\") . public static readonly int ParallaxMap Ramp Equivalent to Shader.PropertyToID(\"_Ramp\") . public static readonly int Ramp SmoothnessTextureChannel Equivalent to Shader.PropertyToID(\"_SmoothnessTextureChannel\") . public static readonly int SmoothnessTextureChannel SpecularColor Equivalent to Shader.PropertyToID(\"_SpecColor\") . public static readonly int SpecularColor SpecularGlossMap Equivalent to Shader.PropertyToID(\"_SpecGlossMap\") . public static readonly int SpecularGlossMap SpecularHighlights Equivalent to Shader.PropertyToID(\"_SpecularHighlights\") . public static readonly int SpecularHighlights SrcBlend Equivalent to Shader.PropertyToID(\"_SrcBlend\") . public static readonly int SrcBlend UVSec Equivalent to Shader.PropertyToID(\"_UVSec\") . public static readonly int UVSec ZWrite Equivalent to Shader.PropertyToID(\"_ZWrite\") . public static readonly int ZWrite"
  },
  "api/Zigurous.Graphics.InvertMesh.html": {
    "href": "api/Zigurous.Graphics.InvertMesh.html",
    "title": "Class InvertMesh | Graphics Utils",
    "keywords": "Class InvertMesh Inverts the normals and triangles of the mesh so it renders inside-out. Inheritance System.Object InvertMesh Namespace : Zigurous.Graphics public sealed class InvertMesh : MonoBehaviour Properties inverted Whether the mesh is currently inverted. public bool inverted { get; } Methods Invert() Inverts the normals and triangles of the mesh. public void Invert()"
  },
  "api/Zigurous.Graphics.MaterialExtensions.html": {
    "href": "api/Zigurous.Graphics.MaterialExtensions.html",
    "title": "Class MaterialExtensions | Graphics Utils",
    "keywords": "Class MaterialExtensions Extension methods for materials. Inheritance System.Object MaterialExtensions Namespace : Zigurous.Graphics public static class MaterialExtensions Methods GetRenderingMode(Material) Returns the rendering mode of the material, see RenderingMode . public static RenderingMode GetRenderingMode(this Material material) Parameter Description material The material to get the rendering mode from. SetRenderingMode(Material, RenderingMode) Sets the rendering mode of the material, see RenderingMode . public static void SetRenderingMode(this Material material, RenderingMode mode) Parameter Description material The material to set the rendering mode on. mode The rendering mode to set."
  },
  "api/Zigurous.Graphics.MeshExtensions.html": {
    "href": "api/Zigurous.Graphics.MeshExtensions.html",
    "title": "Class MeshExtensions | Graphics Utils",
    "keywords": "Class MeshExtensions Extension methods for meshes. Inheritance System.Object MeshExtensions Namespace : Zigurous.Graphics public static class MeshExtensions Methods Copy(Mesh) Returns a new copy of the mesh. public static Mesh Copy(this Mesh mesh) Parameter Description mesh The mesh to copy. InvertedNormals(Mesh) Returns an array of inverted normals of the mesh. public static Vector3[] InvertedNormals(this Mesh mesh) Parameter Description mesh The mesh to get the inverted normals from. InvertedTriangles(Mesh) Returns an array of inverted triangles of the mesh. public static int[] InvertedTriangles(this Mesh mesh) Parameter Description mesh The mesh to get the inverted triangles from. InvertedTriangles(Mesh, Int32) Returns an array of inverted triangles of a submesh of the mesh. public static int[] InvertedTriangles(this Mesh mesh, int submesh) Parameter Description mesh The mesh to get the inverted triangles from. submesh The submesh index. InvertNormals(Mesh) Inverts the normals of the mesh. public static void InvertNormals(this Mesh mesh) Parameter Description mesh The mesh to invert. InvertTriangles(Mesh, Boolean) Inverts the triangles of the mesh. public static void InvertTriangles(this Mesh mesh, bool calculateBounds = false) Parameter Description mesh The mesh to invert. calculateBounds Recalculates the bounds of the mesh after inversion."
  },
  "api/Zigurous.Graphics.RenderingMode.html": {
    "href": "api/Zigurous.Graphics.RenderingMode.html",
    "title": "Enum RenderingMode | Graphics Utils",
    "keywords": "Enum RenderingMode A rendering blend mode of a material. Namespace : Zigurous.Graphics public enum RenderingMode Fields Name Description Cutout Allows you to create a transparent effect that has hard edges between the opaque and transparent areas. In this mode, there are no semi-transparent areas, the texture is either 100% opaque, or invisible. This is useful when using transparency to create the shape of materials such as leaves, or cloth with holes and tatters. Fade Allows the transparency values to entirely fade an object out, including any specular highlights or reflections it may have. This mode is useful if you want to animate an object fading in or out. It is not suitable for rendering realistic transparent materials such as clear plastic or glass because the reflections and highlights will also be faded out. Opaque The default rendering mode, and suitable for normal solid objects with no transparent areas. Transparent Suitable for rendering realistic transparent materials such as clear plastic or glass. In this mode, the material itself will take on transparency values (based on the texture’s alpha channel and the alpha of the tint colour), however reflections and lighting highlights will remain visible at full clarity as is the case with real transparent materials."
  },
  "api/Zigurous.Graphics.SaveMesh.html": {
    "href": "api/Zigurous.Graphics.SaveMesh.html",
    "title": "Class SaveMesh | Graphics Utils",
    "keywords": "Class SaveMesh Saves the mesh of a mesh filter into a project asset. Inheritance System.Object SaveMesh Namespace : Zigurous.Graphics public sealed class SaveMesh : MonoBehaviour Fields assetName The name the asset is saved with. The mesh name will be used if not set. public string assetName saveOnStart Saves the mesh on start, otherwise it needs to be called manually. public bool saveOnStart Methods Save() Saves the mesh to a project asset. public void Save()"
  },
  "api/Zigurous.Graphics.ShaderProperty.html": {
    "href": "api/Zigurous.Graphics.ShaderProperty.html",
    "title": "Struct ShaderProperty | Graphics Utils",
    "keywords": "Struct ShaderProperty A shader property that can be set on a material. An id is automatically created for the property for optimal code. Namespace : Zigurous.Graphics [Serializable] public struct ShaderProperty Constructors ShaderProperty(String) Creates a new shader property with the given name. public ShaderProperty(string name) Parameter Description name The name of the shader property. Properties id The id of the shader property. public readonly int id { get; } name The name of the shader property. public string name { get; set; } Operators Implicit(String to ShaderProperty) Implicitly converts a name to a shader property. public static implicit operator ShaderProperty(string name) Parameter Description name The name of the shader property. Implicit(ShaderProperty to Int32) Implicitly converts a shader property to an id. public static implicit operator int (ShaderProperty property) Parameter Description property The shader property to convert to an id."
  },
  "api/Zigurous.Graphics.TextureDrawer.html": {
    "href": "api/Zigurous.Graphics.TextureDrawer.html",
    "title": "Class TextureDrawer | Graphics Utils",
    "keywords": "Class TextureDrawer Draws a custom texture at runtime. Inheritance System.Object TextureDrawer CheckerboardTextureDrawer Namespace : Zigurous.Graphics public abstract class TextureDrawer : MonoBehaviour Fields renderSettings The render settings. public TextureDrawer.RenderSettings renderSettings textureSettings The texture settings. public TextureDrawer.TextureSettings textureSettings Properties invalidated Whether the settings have changed since the texture was last drawn. public bool invalidated { get; } renderer The renderer component that holds the material the texture is added to. public Renderer renderer { get; } texture The drawn texture. public Texture2D texture { get; } Methods Draw() Draws the texture. public Texture2D Draw() Returns Description Texture2D The drawn texture. SetPixels(Texture2D) Sets the pixels of the texture. protected abstract void SetPixels(Texture2D texture) Parameter Description texture The texture to set the pixels on."
  },
  "api/Zigurous.Graphics.TextureDrawer.RenderSettings.html": {
    "href": "api/Zigurous.Graphics.TextureDrawer.RenderSettings.html",
    "title": "Struct TextureDrawer.RenderSettings | Graphics Utils",
    "keywords": "Struct TextureDrawer.RenderSettings The render settings of a TextureDrawer . Namespace : Zigurous.Graphics [Serializable] public struct RenderSettings Constructors RenderSettings(ShaderProperty, Single, Boolean) Creates new render settings with the specified values. public RenderSettings(ShaderProperty shaderTextureName, float scaleFactor = 1F, bool scaleTransform = false) Parameter Description shaderTextureName The shader property that holds the texture. scaleFactor The amount of scaling to apply to the transform (as a multiplier). scaleTransform Scales the transform of the object to match the texture size. Fields scaleFactor The amount of scaling to apply to the transform (as a multiplier). public float scaleFactor scaleTransform Scales the transform of the object to match the texture size. public bool scaleTransform shaderTextureName The shader property that holds the texture. public ShaderProperty shaderTextureName"
  },
  "api/Zigurous.Graphics.TextureDrawer.TextureSettings.html": {
    "href": "api/Zigurous.Graphics.TextureDrawer.TextureSettings.html",
    "title": "Struct TextureDrawer.TextureSettings | Graphics Utils",
    "keywords": "Struct TextureDrawer.TextureSettings The texture settings of a TextureDrawer . Namespace : Zigurous.Graphics [Serializable] public struct TextureSettings Constructors TextureSettings(Vector2Int, FilterMode, TextureWrapMode) Creates new texture settings with specified values. public TextureSettings(Vector2Int size, FilterMode filterMode, TextureWrapMode wrapMode) Parameter Description size The size of the texture. filterMode The filter mode of the texture. wrapMode The wrap mode of the texture. Fields filterMode The filter mode of the texture. public FilterMode filterMode size The width and height of the texture. public Vector2Int size wrapMode The wrap mode of the texture. public TextureWrapMode wrapMode"
  },
  "api/Zigurous.Graphics.Triangle.html": {
    "href": "api/Zigurous.Graphics.Triangle.html",
    "title": "Struct Triangle | Graphics Utils",
    "keywords": "Struct Triangle A data structure of a mesh triangle comprised of 3 verticies. Implements IEquatable < Triangle > Namespace : Zigurous.Graphics [Serializable] public struct Triangle : IEquatable<Triangle> Constructors Triangle(Vector3, Vector3, Vector3) Creates a new triangle with the specified verticies. public Triangle(Vector3 v1, Vector3 v2, Vector3 v3) Parameter Description v1 The first vertex of the triangle. v2 The second vertex of the triangle. v3 The third vertex of the triangle. Fields v1 The first vertex of the triangle. public Vector3 v1 v2 The second vertex of the triangle. public Vector3 v2 v3 The third vertex of the triangle. public Vector3 v3 Properties Item[Int32] Gets or sets a vertex of the triangle at the given index . public Vector3 this[int index] { get; set; } Parameter Description index The index of the vertex. Methods Equals(Object) Determines if the triangle is equal to other . public override bool Equals(object other) Parameter Description other The object to compare to. Overrides System.ValueType.Equals(System.Object) Equals(Triangle) Determines if the triangle is equal to other . public bool Equals(Triangle other) Parameter Description other The triangle to compare to. GetHashCode() Returns the hash code of the triangle. public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToString() Converts the triangle to a string. public override string ToString() Overrides System.ValueType.ToString() Operators Equality(Triangle, Triangle) Determines if two triangles are equal. public static bool operator ==(Triangle lhs, Triangle rhs) Parameter Description lhs The left hand side triangle to compare. rhs The right hand side triangle to compare. Inequality(Triangle, Triangle) Determines if two triangles are not equal. public static bool operator !=(Triangle lhs, Triangle rhs) Parameter Description lhs The left hand side triangle to compare. rhs The right hand side triangle to compare. Implements IEquatable<>"
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "Changelog | Graphics Utils",
    "keywords": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [0.2.0] - 2021/07/17 Added Data structure AnimatedShaderProperty Abstract class TextureDrawer Behavior CheckerboardTextureDrawer Behavior CombineChildrenMeshes Fixed ShaderProperty ids were not changing when the name was changed in the editor [0.1.0] - 2021/07/05 Added Meshes Cube-3 Cube-6 Cube-Inverted Cube-Tiling Behaviors AutoTile CubeMesh CubeMesh3 CubeMesh6 InvertMesh SaveMesh Other Identifier MaterialExtensions MeshExtensions RenderingMode ShaderProperty Triangle"
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "License | Graphics Utils",
    "keywords": "License MIT License Copyright (c) 2021 Zigurous Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "manual/auto-tiling.html": {
    "href": "manual/auto-tiling.html",
    "title": "Auto Tiling | Graphics Utils",
    "keywords": "Auto Tiling One of the most powerful features included in the Graphics Utils package is the ability to auto tile materials based on the object's scale. In doing so, new materials are created that are unique to the object. This makes the workflow of creating materials for tiled objects effortless. Without this feature, you often end up creating dozens of variants of a material just to change the tiling values for different objects. Add the AutoTile script to the object you want to tile. The main properties that are usually edited are the submeshes . Each element in the array indicates how a submesh of the mesh is tiled, such as which axis the object is tiled on, the unit scale of the object, the texture offset, etc. For example, a plane is usually tiled around the Y+ axis and has a unit scale of 10. See the Scripting API for more information. Cube Tiling When tiling cubes, the script gives the best results when used with the Cube-Tiling.mesh asset instead of Unity's default cube mesh. This mesh asset is split into 3 separate submeshes so you can tile each axis independently from the others. The mesh also has custom UV coordinates so the materials are tiled from the center of each axis."
  },
  "manual/custom-meshes.html": {
    "href": "manual/custom-meshes.html",
    "title": "Custom Meshes | Graphics Utils",
    "keywords": "Custom Meshes The Graphics Utils package includes a few custom cube meshes. Cube-3.mesh : cube mesh with 3 submeshes (one for each axis) Cube-6.mesh : cube mesh with 6 submeshes (one for each face) Cube-Inverted.mesh : cube mesh with inverted normals and triangles (inside-out) Cube-Tiling.mesh cube mesh designed specifically for Auto Tiling There are also 3 different scripts to generate cube meshes at runtime: CubeMesh CubeMesh3 CubeMesh6 Inverting Meshes Sometimes it is useful to invert a mesh so it renders inside out. This is especially useful for cubes. Inverting a mesh flips the triangles and the normals. The Graphics Utils package comes with an InvertMesh script that handles this automatically. You can also manually invert the normals and triangles of a mesh by using extension methods: mesh.InvertNormals(); mesh.InvertTriangles(); // Returns the inverted values without changing the actual mesh Vector3[] normals = mesh.InvertedNormals(); int[] triangles = mesh.InvertedTriangles(); Combining Meshes The Graphics Utils package includes a script to combine multiple meshes into a single mesh. This can sometimes be used to improve rendering performance, or as a way to create custom meshes and turn them into assets. Add the CombineChildrenMeshes script to a game object that includes an empty mesh filter. The script will combines the meshes of the children objects and apply the new combined mesh to the parent mesh filter. Saving Meshes Often when generating meshes at runtime, you may want to save that mesh as an asset for future use so you do not need to regenerate them over and over. The Graphics Utils package comes with a SaveMesh script that will save a mesh as an asset at runtime."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "Graphics Utils | Graphics Utils",
    "keywords": "Graphics Utils The Graphics Utils package provides scripts and utilities for graphics and rendering purposes in Unity projects. The package is still early in development, and more functionality will be added over time. Reference Auto Tiling Custom Meshes Shader Properties Texture Drawers"
  },
  "manual/installation.html": {
    "href": "manual/installation.html",
    "title": "Installation | Graphics Utils",
    "keywords": "Installation Use the Unity Package Manager to install the Graphics Utils package. Open the Package Manager in Window > Package Manager Click the add ( + ) button in the status bar Select Add package from git URL from the add menu Enter the following Git URL in the text box and click Add: https://github.com/zigurous/unity-graphics-utils.git For more information on the Package Manager and installing packages, see the following pages: Unity's Package Manager Installing from a Git URL Importing Import the package namespace in each script or file you want to use it. Note : You may need to regenerate project files/assemblies first. using Zigurous.Graphics; Source Code The source code for the Graphics Utils package is in the following repository: https://github.com/zigurous/unity-graphics-utils"
  },
  "manual/shader-properties.html": {
    "href": "manual/shader-properties.html",
    "title": "Shader Properties | Graphics Utils",
    "keywords": "Shader Properties When setting shader properties on materials, it is more efficient to use property ids instead of strings. The Graphics Utils package comes with a static class Identifier with predefined ids for common shader properties. private void Start() { Material material = GetComponent<MeshRenderer>().material; material.SetFloat(Identifier.Glossiness, 1.0f); } Automatic Property Ids The ShaderProperty struct included in the Graphics Utils package automatically creates a property id for a given shader property name. Anywhere you might declare a variable for a custom shader property name use ShaderProperty instead. It will still be serialized as a string in the editor, but you can use the id when getting or setting a shader property on a material. To learn more, see https://docs.unity3d.com/ScriptReference/Shader.PropertyToID.html . public ShaderProperty property = \"_Custom\"; public float propertyValue; private void Start() { Material material = GetComponent<MeshRenderer>().material; material.SetFloat(property.id, propertyValue); } Animated Properties Sometimes you want to animate a shader property over time. The Graphics Utils package includes a few data structures to accomplish this. You can declare any one of the following in a script: AnimatedShaderIntProperty AnimatedShaderFloatProperty AnimatedShaderColorProperty The structs provide a valueOverTime or colorOverTime variable that you can use to set the animated values. At this point your script can call Animate(material, time) to evaluate the value at the given time and apply it to the provided material."
  },
  "manual/texture-drawers.html": {
    "href": "manual/texture-drawers.html",
    "title": "Texture Drawers | Graphics Utils",
    "keywords": "Texture Drawers The Graphics Utils package includes a base class for drawing textures at runtime. It provides the boilerplate code for creating and drawing new textures programmatically. Create a new class that inherits from TextureDrawer and override the function SetPixels(Texture2D) to complete the implementation. Rendering The TextureDrawer script will automatically apply your texture to the renderer's main material on the object if a Renderer component is available. This is not required, but often is useful. There are additional customization options available in regards to the rendering, such as which shader property the texture is set to. Checkerboard The Graphics Utils package includes a script CheckerboardTextureDrawer as a sample implementation. It is, of course, a fully functional script that draws a checkerboard pattern. This can be used however you desire, and there are even a number of customization options available."
  }
}