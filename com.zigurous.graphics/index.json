{
  "api/Zigurous.Graphics.AutoTile.Axis.html": {
    "href": "api/Zigurous.Graphics.AutoTile.Axis.html",
    "title": "Enum AutoTile.Axis | Graphics Utils",
    "keywords": "Enum AutoTile.Axis An axis along which a texture is tiled. Namespace : Zigurous.Graphics Syntax public enum Axis Fields Name Description X_Neg X_Pos Y_Neg Y_Pos Z_Neg Z_Pos"
  },
  "api/Zigurous.Graphics.AutoTile.html": {
    "href": "api/Zigurous.Graphics.AutoTile.html",
    "title": "Class AutoTile | Graphics Utils",
    "keywords": "Class AutoTile Automatically tiles the material textures based on the object's scale. Inheritance System.Object AutoTile Namespace : Zigurous.Graphics Syntax public sealed class AutoTile : MonoBehaviour Fields autoUpdate Whether the material texture(s) are tiled automatically when the transform changes. Declaration public bool autoUpdate submeshes The submeshes that are tiled on the renderer. Declaration public AutoTile.Submesh[] submeshes textureNames The names of the textures that are tiled on the material. Declaration public string[] textureNames Properties renderer The renderer component of the material being tiled. Declaration public Renderer renderer { get; } Methods Tile() Declaration public void Tile()"
  },
  "api/Zigurous.Graphics.AutoTile.Submesh.html": {
    "href": "api/Zigurous.Graphics.AutoTile.Submesh.html",
    "title": "Class AutoTile.Submesh | Graphics Utils",
    "keywords": "Class AutoTile.Submesh A representation of a submesh that can be individually tiled. Inheritance System.Object AutoTile.Submesh Namespace : Zigurous.Graphics Syntax [Serializable] public sealed class Submesh Fields axis The axis along which the texture is tiled. Declaration public AutoTile.Axis axis submeshIndex The submesh index of the material being tiled. Declaration public int submeshIndex textureOffset The texture offset applied on the material. Declaration public Vector2 textureOffset unitScale The object's base unit scale. For example, planes have a unit scale of 10 compared to most other primitives. Declaration public Vector3 unitScale"
  },
  "api/Zigurous.Graphics.CubeMesh.html": {
    "href": "api/Zigurous.Graphics.CubeMesh.html",
    "title": "Class CubeMesh | Graphics Utils",
    "keywords": "Class CubeMesh Generates a new cube mesh and applies it to the mesh filter. Inheritance System.Object CubeMesh Namespace : Zigurous.Graphics Syntax public sealed class CubeMesh : MonoBehaviour Fields Corners Declaration public static readonly Vector3[] Corners Triangles Declaration public static readonly int[] Triangles UV Declaration public static readonly Vector2[] UV Vertices Declaration public static readonly Vector3[] Vertices Properties sharedMesh Declaration public static Mesh sharedMesh { get; } Methods Apply() Declaration public void Apply() Create() Declaration public Mesh Create() Returns Type Description Mesh"
  },
  "api/Zigurous.Graphics.CubeMesh3.html": {
    "href": "api/Zigurous.Graphics.CubeMesh3.html",
    "title": "Class CubeMesh3 | Graphics Utils",
    "keywords": "Class CubeMesh3 Generates a new cube mesh with 3 submeshes (one for each axis) and applies it to the mesh filter. Inheritance System.Object CubeMesh3 Namespace : Zigurous.Graphics Syntax public sealed class CubeMesh3 : MonoBehaviour Fields Triangles_X Declaration public static readonly int[] Triangles_X Triangles_Y Declaration public static readonly int[] Triangles_Y Triangles_Z Declaration public static readonly int[] Triangles_Z Methods Apply() Declaration public void Apply() Create() Declaration public Mesh Create() Returns Type Description Mesh"
  },
  "api/Zigurous.Graphics.CubeMesh6.html": {
    "href": "api/Zigurous.Graphics.CubeMesh6.html",
    "title": "Class CubeMesh6 | Graphics Utils",
    "keywords": "Class CubeMesh6 Generates a new cube mesh with 6 submeshes (one for each face) and applies it to the mesh filter. Inheritance System.Object CubeMesh6 Namespace : Zigurous.Graphics Syntax public sealed class CubeMesh6 : MonoBehaviour Fields Triangles_Back Declaration public static readonly int[] Triangles_Back Triangles_Bottom Declaration public static readonly int[] Triangles_Bottom Triangles_Front Declaration public static readonly int[] Triangles_Front Triangles_Left Declaration public static readonly int[] Triangles_Left Triangles_Right Declaration public static readonly int[] Triangles_Right Triangles_Top Declaration public static readonly int[] Triangles_Top Methods Apply() Declaration public void Apply() Create() Declaration public Mesh Create() Returns Type Description Mesh"
  },
  "api/Zigurous.Graphics.html": {
    "href": "api/Zigurous.Graphics.html",
    "title": "Namespace Zigurous.Graphics | Graphics Utils",
    "keywords": "Namespace Zigurous.Graphics Classes AutoTile Automatically tiles the material textures based on the object's scale. AutoTile.Submesh A representation of a submesh that can be individually tiled. CubeMesh Generates a new cube mesh and applies it to the mesh filter. CubeMesh3 Generates a new cube mesh with 3 submeshes (one for each axis) and applies it to the mesh filter. CubeMesh6 Generates a new cube mesh with 6 submeshes (one for each face) and applies it to the mesh filter. Identifier Constant shader property identifiers. InvertMesh Inverts the normals and triangles of the mesh so it renders inside-out. MaterialExtensions MeshExtensions Structs ShaderProperty A shader property that can be set on a material. An id is automatically created for the property for optimal code. Triangle A data structure of a mesh triangle comprised of 3 verticies. Enums AutoTile.Axis An axis along which a texture is tiled. RenderingMode A rendering blend mode of a material."
  },
  "api/Zigurous.Graphics.Identifier.html": {
    "href": "api/Zigurous.Graphics.Identifier.html",
    "title": "Class Identifier | Graphics Utils",
    "keywords": "Class Identifier Constant shader property identifiers. Inheritance System.Object Identifier Namespace : Zigurous.Graphics Syntax public static class Identifier Fields BumpMap Shader.PropertyToID(\"_BumpMap\") Declaration public static readonly int BumpMap BumpScale Shader.PropertyToID(\"_BumpScale\") Declaration public static readonly int BumpScale Color Shader.PropertyToID(\"_Color\") Declaration public static readonly int Color Cubemap Shader.PropertyToID(\"_Cubemap\") Declaration public static readonly int Cubemap Cutoff Shader.PropertyToID(\"_Cutoff\") Declaration public static readonly int Cutoff DetailAlbedoMap Shader.PropertyToID(\"_DetailAlbedoMap\") Declaration public static readonly int DetailAlbedoMap DetailMask Shader.PropertyToID(\"_DetailMask\") Declaration public static readonly int DetailMask DetailNormalMap Shader.PropertyToID(\"_DetailNormalMap\") Declaration public static readonly int DetailNormalMap DetailNormalMapScale Shader.PropertyToID(\"_DetailNormalMapScale\") Declaration public static readonly int DetailNormalMapScale DstBlend Shader.PropertyToID(\"_DstBlend\") Declaration public static readonly int DstBlend EmissionColor Shader.PropertyToID(\"_EmissionColor\") Declaration public static readonly int EmissionColor EmissionMap Shader.PropertyToID(\"_EmissionMap\") Declaration public static readonly int EmissionMap Exposure Shader.PropertyToID(\"_Exposure\") Declaration public static readonly int Exposure Glossiness Shader.PropertyToID(\"_Glossiness\") Declaration public static readonly int Glossiness GlossMapScale Shader.PropertyToID(\"_GlossMapScale\") Declaration public static readonly int GlossMapScale GlossyReflections Shader.PropertyToID(\"_GlossyReflections\") Declaration public static readonly int GlossyReflections MainTex Shader.PropertyToID(\"_MainTex\") Declaration public static readonly int MainTex Metallic Shader.PropertyToID(\"_Metallic\") Declaration public static readonly int Metallic MetallicGlossMap Shader.PropertyToID(\"_MetallicGlossMap\") Declaration public static readonly int MetallicGlossMap Mode Shader.PropertyToID(\"_Mode\") Declaration public static readonly int Mode OcclusionMap Shader.PropertyToID(\"_OcclusionMap\") Declaration public static readonly int OcclusionMap OcclusionStrength Shader.PropertyToID(\"_OcclusionStrength\") Declaration public static readonly int OcclusionStrength Parallax Shader.PropertyToID(\"_Parallax\") Declaration public static readonly int Parallax ParallaxMap Shader.PropertyToID(\"_ParallaxMap\") Declaration public static readonly int ParallaxMap Ramp Shader.PropertyToID(\"_Ramp\") Declaration public static readonly int Ramp SmoothnessTextureChannel Shader.PropertyToID(\"_SmoothnessTextureChannel\") Declaration public static readonly int SmoothnessTextureChannel SpecularColor Shader.PropertyToID(\"_SpecColor\") Declaration public static readonly int SpecularColor SpecularGlossMap Shader.PropertyToID(\"_SpecGlossMap\") Declaration public static readonly int SpecularGlossMap SpecularHighlights Shader.PropertyToID(\"_SpecularHighlights\") Declaration public static readonly int SpecularHighlights SrcBlend Shader.PropertyToID(\"_SrcBlend\") Declaration public static readonly int SrcBlend UVSec Shader.PropertyToID(\"_UVSec\") Declaration public static readonly int UVSec ZWrite Shader.PropertyToID(\"_ZWrite\") Declaration public static readonly int ZWrite"
  },
  "api/Zigurous.Graphics.InvertMesh.html": {
    "href": "api/Zigurous.Graphics.InvertMesh.html",
    "title": "Class InvertMesh | Graphics Utils",
    "keywords": "Class InvertMesh Inverts the normals and triangles of the mesh so it renders inside-out. Inheritance System.Object InvertMesh Namespace : Zigurous.Graphics Syntax public sealed class InvertMesh : MonoBehaviour Properties inverted Whether the mesh is currently inverted. Declaration public bool inverted { get; } Methods Invert() Declaration public void Invert()"
  },
  "api/Zigurous.Graphics.MaterialExtensions.html": {
    "href": "api/Zigurous.Graphics.MaterialExtensions.html",
    "title": "Class MaterialExtensions | Graphics Utils",
    "keywords": "Class MaterialExtensions Inheritance System.Object MaterialExtensions Namespace : Zigurous.Graphics Syntax public static class MaterialExtensions Methods GetRenderingMode(Material) Declaration public static RenderingMode GetRenderingMode(this Material material) Parameters Type Name Description Material material Returns Type Description RenderingMode SetRenderingMode(Material, RenderingMode) Declaration public static void SetRenderingMode(this Material material, RenderingMode renderingMode) Parameters Type Name Description Material material RenderingMode renderingMode"
  },
  "api/Zigurous.Graphics.MeshExtensions.html": {
    "href": "api/Zigurous.Graphics.MeshExtensions.html",
    "title": "Class MeshExtensions | Graphics Utils",
    "keywords": "Class MeshExtensions Inheritance System.Object MeshExtensions Namespace : Zigurous.Graphics Syntax public static class MeshExtensions Methods Copy(Mesh) Declaration public static Mesh Copy(this Mesh mesh) Parameters Type Name Description Mesh mesh Returns Type Description Mesh InvertedNormals(Mesh) Declaration public static Vector3[] InvertedNormals(this Mesh mesh) Parameters Type Name Description Mesh mesh Returns Type Description Vector3 [] InvertedTriangles(Mesh) Declaration public static int[] InvertedTriangles(this Mesh mesh) Parameters Type Name Description Mesh mesh Returns Type Description System.Int32 [] InvertedTriangles(Mesh, Int32) Declaration public static int[] InvertedTriangles(this Mesh mesh, int submesh) Parameters Type Name Description Mesh mesh System.Int32 submesh Returns Type Description System.Int32 [] InvertNormals(Mesh) Declaration public static void InvertNormals(this Mesh mesh) Parameters Type Name Description Mesh mesh InvertTriangles(Mesh, Boolean) Declaration public static void InvertTriangles(this Mesh mesh, bool calculateBounds = false) Parameters Type Name Description Mesh mesh System.Boolean calculateBounds"
  },
  "api/Zigurous.Graphics.RenderingMode.html": {
    "href": "api/Zigurous.Graphics.RenderingMode.html",
    "title": "Enum RenderingMode | Graphics Utils",
    "keywords": "Enum RenderingMode A rendering blend mode of a material. Namespace : Zigurous.Graphics Syntax public enum RenderingMode Fields Name Description Cutout Allows you to create a transparent effect that has hard edges between the opaque and transparent areas. In this mode, there are no semi-transparent areas, the texture is either 100% opaque, or invisible. This is useful when using transparency to create the shape of materials such as leaves, or cloth with holes and tatters. Fade Allows the transparency values to entirely fade an object out, including any specular highlights or reflections it may have. This mode is useful if you want to animate an object fading in or out. It is not suitable for rendering realistic transparent materials such as clear plastic or glass because the reflections and highlights will also be faded out. Opaque Is the default, and suitable for normal solid objects with no transparent areas. Transparent Suitable for rendering realistic transparent materials such as clear plastic or glass. In this mode, the material itself will take on transparency values (based on the texture’s alpha channel and the alpha of the tint colour), however reflections and lighting highlights will remain visible at full clarity as is the case with real transparent materials."
  },
  "api/Zigurous.Graphics.ShaderProperty.html": {
    "href": "api/Zigurous.Graphics.ShaderProperty.html",
    "title": "Struct ShaderProperty | Graphics Utils",
    "keywords": "Struct ShaderProperty A shader property that can be set on a material. An id is automatically created for the property for optimal code. Namespace : Zigurous.Graphics Syntax [Serializable] public struct ShaderProperty Constructors ShaderProperty(String) Constructs a new shader property with the given name. Declaration public ShaderProperty(string name) Parameters Type Name Description System.String name Properties id The id of the shader property. Declaration public readonly int id { get; } name The name of the shader property. Declaration public string name { get; set; } Operators Implicit(String to ShaderProperty) Declaration public static implicit operator ShaderProperty(string name) Parameters Type Name Description System.String name Returns Type Description ShaderProperty"
  },
  "api/Zigurous.Graphics.Triangle.html": {
    "href": "api/Zigurous.Graphics.Triangle.html",
    "title": "Struct Triangle | Graphics Utils",
    "keywords": "Struct Triangle A data structure of a mesh triangle comprised of 3 verticies. Implements IEquatable < Triangle > Namespace : Zigurous.Graphics Syntax [Serializable] public struct Triangle : IEquatable<Triangle> Fields a Declaration public Vector3 a b Declaration public Vector3 b c Declaration public Vector3 c Properties Item[Int32] Declaration public readonly Vector3 this[int i] { get; } Parameters Type Name Description System.Int32 i Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) Equals(Triangle) Declaration public bool Equals(Triangle other) Parameters Type Name Description Triangle other Returns Type Description System.Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() Operators Equality(Triangle, Triangle) Declaration public static bool operator ==(Triangle lhs, Triangle rhs) Parameters Type Name Description Triangle lhs Triangle rhs Returns Type Description System.Boolean Inequality(Triangle, Triangle) Declaration public static bool operator !=(Triangle lhs, Triangle rhs) Parameters Type Name Description Triangle lhs Triangle rhs Returns Type Description System.Boolean Implements IEquatable<>"
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "Changelog | Graphics Utils",
    "keywords": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [0.1.0] - 2021/07/05 Added Meshes Cube-3 Cube-6 Cube-Inverted Cube-Tiling Behaviors AutoTile CubeMesh CubeMesh3 CubeMesh6 InvertMesh SaveMesh Other Identifier MaterialExtensions MeshExtensions RenderingMode ShaderProperty Triangle"
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "License | Graphics Utils",
    "keywords": "License MIT License Copyright (c) 2021 Zigurous Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "Graphics Utils | Graphics Utils",
    "keywords": "Graphics Utils The Graphics Utils package provides scripts and utilities for graphics and rendering purposes in Unity projects."
  },
  "manual/installation.html": {
    "href": "manual/installation.html",
    "title": "Installation | Graphics Utils",
    "keywords": "Installation Use the Unity Package Manager to install the Graphics Utils package. Open the Package Manager in Window > Package Manager Click the add ( + ) button in the status bar Select Add package from git URL from the add menu Enter the following Git URL in the text box and click Add: https://github.com/zigurous/unity-graphics-utils.git For more information on the Package Manager and installing packages, see the following pages: Unity's Package Manager Installing from a Git URL Importing Import the package namespace in each script or file you want to use it. Note : You may need to regenerate project files/assemblies first. using Zigurous.Graphics; Source Code The source code for the Graphics Utils package is in the following repository: https://github.com/zigurous/unity-graphics-utils"
  }
}