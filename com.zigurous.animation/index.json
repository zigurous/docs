{
  "api/Zigurous.Animation.AnimatedSprite.html": {
    "href": "api/Zigurous.Animation.AnimatedSprite.html",
    "title": "Class AnimatedSprite | Animation Library",
    "keywords": "Class AnimatedSprite Animates a series of sprites over time. Inheritance System.Object AnimatedSprite Namespace : Zigurous.Animation public sealed class AnimatedSprite : MonoBehaviour Fields frameRate The amount of frames per second that are rendered. public float frameRate loop Whether the animation should loop back to the start after cycling through each sprite. public bool loop reversed Animates the sprites in reverse order. public bool reversed sprites The sprites that are rendered throughout the animation, in order. public Sprite[] sprites Properties frame The current frame index. public int frame { get; } nextFrameTime The time at which the next frame will begin. public float nextFrameTime { get; } spriteRenderer The sprite renderer component for the animation. public SpriteRenderer spriteRenderer { get; } Methods Restart() Restarts the animation to the first frame. public void Restart()"
  },
  "api/Zigurous.Animation.AnimatorParameter.html": {
    "href": "api/Zigurous.Animation.AnimatorParameter.html",
    "title": "Struct AnimatorParameter | Animation Library",
    "keywords": "Struct AnimatorParameter An animation parameter that can be set on an Animator. Namespace : Zigurous.Animation [Serializable] public struct AnimatorParameter Remarks A hash id is automatically created for the parameter. Ids are used for optimized setters and getters on Animator parameters. Constructors AnimatorParameter(String) Creates a new animation parameter with the given name . public AnimatorParameter(string name) Parameter Description name The name of the animation parameter. Properties hash The hash id of the animation parameter. public readonly int hash { get; } name The name of the animation parameter. public string name { get; set; } Operators Implicit(String to AnimatorParameter) Implicitly converts a name to an animator parameter. public static implicit operator AnimatorParameter(string name) Parameter Description name The name of the animator parameter. Implicit(AnimatorParameter to Int32) Implicitly converts an animator parameter to a hash id. public static implicit operator int (AnimatorParameter property) Parameter Description property The animator parameter to convert to an id."
  },
  "api/Zigurous.Animation.Blink.html": {
    "href": "api/Zigurous.Animation.Blink.html",
    "title": "Class Blink | Animation Library",
    "keywords": "Class Blink Switches a material on and off on an object at a variable rate. Inheritance System.Object Blink Namespace : Zigurous.Animation public sealed class Blink : MonoBehaviour Fields blinkChance The random chance that the object will blink. public float blinkChance blinkCooldown The amount of seconds before the material can blink a subsequent time. public TimingRange blinkCooldown blinkDuration The amount of seconds the material stays blinking. public TimingRange blinkDuration blinkingMaterial The material applied to the object when blinking. public Material blinkingMaterial notBlinkingMaterial The material applied to the object when not blinking. public Material notBlinkingMaterial sharedRenderers An array of other renderers whos material will be changed to match the blinking object. public Renderer[] sharedRenderers updateInterval How frequently in seconds the script will execute as a way to optimize the code performance. public float updateInterval Properties blinking Whether the object is currently blinking. public bool blinking { get; } cooldown Whether the blinking is currently on cooldown. public bool cooldown { get; } nextUpdateTime The time the next update will be performed. public float nextUpdateTime { get; } renderer A reference to the main blinking object's renderer. public Renderer renderer { get; } Methods BlinkOnce() Blinks the material for one cycle. public void BlinkOnce()"
  },
  "api/Zigurous.Animation.FollowPath.html": {
    "href": "api/Zigurous.Animation.FollowPath.html",
    "title": "Class FollowPath | Animation Library",
    "keywords": "Class FollowPath Moves an object along a predefined path. Inheritance System.Object FollowPath Namespace : Zigurous.Animation public sealed class FollowPath : MonoBehaviour Fields damping How quickly the object moves between nodes. Small numbers make the object more responsive. Larger numbers make the object respond more slowly. public float damping looping The looping behavior, if desired. public FollowPath.LoopType looping maxSpeed The maximum speed the object can move between nodes. public float maxSpeed minProximity Once the object is less than this distance to the current node, then it will advance to the next one. public float minProximity path The object follows the path comprised of all the children of this transform. public Transform path reversed Moves the object between nodes in reverse. public bool reversed Properties currentIndex The index of the node that the object is currently moving to. public int currentIndex { get; } nodeFrom The transform of the node that the object is currently moving from. public Transform nodeFrom { get; } nodeTo The transform of the node that the object is currently moving to. public Transform nodeTo { get; } Methods Restart() Restarts the path at the first node. public void Restart()"
  },
  "api/Zigurous.Animation.FollowPath.LoopType.html": {
    "href": "api/Zigurous.Animation.FollowPath.LoopType.html",
    "title": "Enum FollowPath.LoopType | Animation Library",
    "keywords": "Enum FollowPath.LoopType A type of looping behavior. Namespace : Zigurous.Animation public enum LoopType Fields Name Description Circular After reaching the end of the path, the object will traverse back to the first node and continue with the next loop. None Turns off looping. PingPong The object traverses along the path forwards then backwards then forwards then backwards, etc. Restart Restarts the object from the beginning of the path after it reaches the end. The object will jump to the position of the first node."
  },
  "api/Zigurous.Animation.html": {
    "href": "api/Zigurous.Animation.html",
    "title": "Namespace Zigurous.Animation | Animation Library",
    "keywords": "Namespace Zigurous.Animation Classes AnimatedSprite Animates a series of sprites over time. Blink Switches a material on and off on an object at a variable rate. FollowPath Moves an object along a predefined path. Move Moves an object in space by a given speed. Orbit Orbits an object around another object with a given speed and radius. Parameter Constant animator parameter hash ids. Rotate Rotates an object in space by a given speed. RotateAround Rotates an object around a point by a given speed. Scale Scales an object over time by a given speed. SmoothDamp<T> Gradually changes a value over time using a spring-damper function, which will never overshoot. SmoothDampFloat Gradually changes a float over time using a spring-damper function, which will never overshoot. SmoothDampVector2 Gradually changes a Vector2 over time using a spring-damper function, which will never overshoot. SmoothDampVector3 Gradually changes a Vector3 over time using a spring-damper function, which will never overshoot. SmoothFollow Moves toward the position of another transform using a smooth damping function. SmoothLookAt Rotates toward the position of another transform using a smooth damping function. Vector2AnimationCurve Stores a collection of keyframes that can be evaluated over time as a Vector2. Vector3AnimationCurve Stores a collection of keyframes that can be evaluated over time as a Vector3. Vector4AnimationCurve Stores a collection of keyframes that can be evaluated over time as a Vector4. Structs AnimatorParameter An animation parameter that can be set on an Animator. Timing The start and end time of an animation. Timing01 The start and end time of an animation normalized between 0 and 1. TimingRange An animation timing range between a lower and upper bound. TimingRange01 An animation timing range normalized between 0 and 1. Interfaces IAnimationCurve<T> A type that can be represented with animation curves. Enums FollowPath.LoopType A type of looping behavior. UpdateMode An update mode during which an animation behavior can run."
  },
  "api/Zigurous.Animation.IAnimationCurve-1.html": {
    "href": "api/Zigurous.Animation.IAnimationCurve-1.html",
    "title": "Interface IAnimationCurve<T> | Animation Library",
    "keywords": "Interface IAnimationCurve<T> A type that can be represented with animation curves. Namespace : Zigurous.Animation public interface IAnimationCurve<T> Type Parameter Description T The type evaluated by the animation curve. Methods AddKey(Single, T) Adds a new key to the curve. void AddKey(float time, T value) Parameter Description time The time at which to add the key (horizontal axis in the curve graph). value The value for the key (vertical axis in the curve graph). Evaluate(Single) Evaluate the curve at time . T Evaluate(float time) Parameter Description time The time within the curve you want to evaluate (the horizontal axis in the curve graph). Returns Description T The value of the curve, at the point in time specified. RemoveKey(Int32) Removes a key. void RemoveKey(int index) Parameter Description index The index of the key to remove."
  },
  "api/Zigurous.Animation.Move.html": {
    "href": "api/Zigurous.Animation.Move.html",
    "title": "Class Move | Animation Library",
    "keywords": "Class Move Moves an object in space by a given speed. Inheritance System.Object Move Namespace : Zigurous.Animation public sealed class Move : MonoBehaviour Fields space The coordinate space in which the object moves. public Space space speed The speed at which the object moves. public Vector3 speed updateMode The update mode during which the object moves. public UpdateMode updateMode"
  },
  "api/Zigurous.Animation.Orbit.html": {
    "href": "api/Zigurous.Animation.Orbit.html",
    "title": "Class Orbit | Animation Library",
    "keywords": "Class Orbit Orbits an object around another object with a given speed and radius. Inheritance System.Object Orbit Namespace : Zigurous.Animation public sealed class Orbit : MonoBehaviour Fields center The transform the object orbits around. public Transform center radius The distance from the center of the object being orbited. public float radius speed The speed at which the object orbits. public float speed startAngle The initial angle in degrees of the orbiting object. public float startAngle updateMode The update mode during which the object orbits. public UpdateMode updateMode Properties angle The current angle in degrees of the orbiting object. public float angle { get; }"
  },
  "api/Zigurous.Animation.Parameter.html": {
    "href": "api/Zigurous.Animation.Parameter.html",
    "title": "Class Parameter | Animation Library",
    "keywords": "Class Parameter Constant animator parameter hash ids. Inheritance System.Object Parameter Namespace : Zigurous.Animation public static class Parameter Fields Aim Equivalent to Animator.StringToHash(\"Aim\") . public static readonly int Aim Airborne Equivalent to Animator.StringToHash(\"Airborne\") . public static readonly int Airborne Attack Equivalent to Animator.StringToHash(\"Attack\") . public static readonly int Attack Backward Equivalent to Animator.StringToHash(\"Backward\") . public static readonly int Backward Block Equivalent to Animator.StringToHash(\"Block\") . public static readonly int Block Break Equivalent to Animator.StringToHash(\"Break\") . public static readonly int Break Cast Equivalent to Animator.StringToHash(\"Cast\") . public static readonly int Cast Catch Equivalent to Animator.StringToHash(\"Catch\") . public static readonly int Catch Climb Equivalent to Animator.StringToHash(\"Climb\") . public static readonly int Climb Close Equivalent to Animator.StringToHash(\"Close\") . public static readonly int Close Combo Equivalent to Animator.StringToHash(\"Combo\") . public static readonly int Combo Cover Equivalent to Animator.StringToHash(\"Cover\") . public static readonly int Cover Crawl Equivalent to Animator.StringToHash(\"Crawl\") . public static readonly int Crawl Crouch Equivalent to Animator.StringToHash(\"Crouch\") . public static readonly int Crouch Dance Equivalent to Animator.StringToHash(\"Dance\") . public static readonly int Dance Dash Equivalent to Animator.StringToHash(\"Dash\") . public static readonly int Dash Death Equivalent to Animator.StringToHash(\"Death\") . public static readonly int Death Defeat Equivalent to Animator.StringToHash(\"Defeat\") . public static readonly int Defeat Defend Equivalent to Animator.StringToHash(\"Defend\") . public static readonly int Defend Die Equivalent to Animator.StringToHash(\"Die\") . public static readonly int Die DirectionX Equivalent to Animator.StringToHash(\"DirectionX\") . public static readonly int DirectionX DirectionY Equivalent to Animator.StringToHash(\"DirectionY\") . public static readonly int DirectionY Disarm Equivalent to Animator.StringToHash(\"Disarm\") . public static readonly int Disarm Dodge Equivalent to Animator.StringToHash(\"Dodge\") . public static readonly int Dodge Down Equivalent to Animator.StringToHash(\"Down\") . public static readonly int Down Drop Equivalent to Animator.StringToHash(\"Drop\") . public static readonly int Drop Enter Equivalent to Animator.StringToHash(\"Enter\") . public static readonly int Enter Equip Equivalent to Animator.StringToHash(\"Equip\") . public static readonly int Equip Evade Equivalent to Animator.StringToHash(\"Evade\") . public static readonly int Evade Examine Equivalent to Animator.StringToHash(\"Examine\") . public static readonly int Examine Exit Equivalent to Animator.StringToHash(\"Exit\") . public static readonly int Exit Fall Equivalent to Animator.StringToHash(\"Fall\") . public static readonly int Fall Fight Equivalent to Animator.StringToHash(\"Fight\") . public static readonly int Fight Fire Equivalent to Animator.StringToHash(\"Fire\") . public static readonly int Fire Flip Equivalent to Animator.StringToHash(\"Flip\") . public static readonly int Flip Focus Equivalent to Animator.StringToHash(\"Focus\") . public static readonly int Focus Forward Equivalent to Animator.StringToHash(\"Forward\") . public static readonly int Forward Gather Equivalent to Animator.StringToHash(\"Gather\") . public static readonly int Gather Grab Equivalent to Animator.StringToHash(\"Grab\") . public static readonly int Grab Grounded Equivalent to Animator.StringToHash(\"Grounded\") . public static readonly int Grounded Hang Equivalent to Animator.StringToHash(\"Hang\") . public static readonly int Hang Heal Equivalent to Animator.StringToHash(\"Heal\") . public static readonly int Heal Hide Equivalent to Animator.StringToHash(\"Hide\") . public static readonly int Hide Hit Equivalent to Animator.StringToHash(\"Hit\") . public static readonly int Hit Hook Equivalent to Animator.StringToHash(\"Hook\") . public static readonly int Hook Idle Equivalent to Animator.StringToHash(\"Idle\") . public static readonly int Idle Inspect Equivalent to Animator.StringToHash(\"Inspect\") . public static readonly int Inspect Jab Equivalent to Animator.StringToHash(\"Jab\") . public static readonly int Jab Jog Equivalent to Animator.StringToHash(\"Jog\") . public static readonly int Jog Jump Equivalent to Animator.StringToHash(\"Jump\") . public static readonly int Jump Kick Equivalent to Animator.StringToHash(\"Kick\") . public static readonly int Kick Kneel Equivalent to Animator.StringToHash(\"Kneel\") . public static readonly int Kneel Land Equivalent to Animator.StringToHash(\"Land\") . public static readonly int Land Lay Equivalent to Animator.StringToHash(\"Lay\") . public static readonly int Lay Left Equivalent to Animator.StringToHash(\"Left\") . public static readonly int Left Lift Equivalent to Animator.StringToHash(\"Lift\") . public static readonly int Lift Look Equivalent to Animator.StringToHash(\"Look\") . public static readonly int Look Loop Equivalent to Animator.StringToHash(\"Loop\") . public static readonly int Loop Move Equivalent to Animator.StringToHash(\"Move\") . public static readonly int Move Open Equivalent to Animator.StringToHash(\"Open\") . public static readonly int Open Pass Equivalent to Animator.StringToHash(\"Pass\") . public static readonly int Pass Peek Equivalent to Animator.StringToHash(\"Peek\") . public static readonly int Peek Pickup Equivalent to Animator.StringToHash(\"Pickup\") . public static readonly int Pickup Pivot Equivalent to Animator.StringToHash(\"Pivot\") . public static readonly int Pivot Prone Equivalent to Animator.StringToHash(\"Prone\") . public static readonly int Prone Pull Equivalent to Animator.StringToHash(\"Pull\") . public static readonly int Pull Punch Equivalent to Animator.StringToHash(\"Punch\") . public static readonly int Punch Push Equivalent to Animator.StringToHash(\"Push\") . public static readonly int Push Reaction Equivalent to Animator.StringToHash(\"Reaction\") . public static readonly int Reaction Ready Equivalent to Animator.StringToHash(\"Ready\") . public static readonly int Ready Receive Equivalent to Animator.StringToHash(\"Receive\") . public static readonly int Receive Reload Equivalent to Animator.StringToHash(\"Reload\") . public static readonly int Reload Right Equivalent to Animator.StringToHash(\"Right\") . public static readonly int Right Roll Equivalent to Animator.StringToHash(\"Roll\") . public static readonly int Roll Run Equivalent to Animator.StringToHash(\"Run\") . public static readonly int Run Sheath Equivalent to Animator.StringToHash(\"Sheath\") . public static readonly int Sheath Shimmy Equivalent to Animator.StringToHash(\"Shimmy\") . public static readonly int Shimmy Shoot Equivalent to Animator.StringToHash(\"Shoot\") . public static readonly int Shoot Sit Equivalent to Animator.StringToHash(\"Sit\") . public static readonly int Sit Slide Equivalent to Animator.StringToHash(\"Slide\") . public static readonly int Slide Smash Equivalent to Animator.StringToHash(\"Smash\") . public static readonly int Smash Sneak Equivalent to Animator.StringToHash(\"Sneak\") . public static readonly int Sneak Speed Equivalent to Animator.StringToHash(\"Speed\") . public static readonly int Speed Sprint Equivalent to Animator.StringToHash(\"Sprint\") . public static readonly int Sprint Stab Equivalent to Animator.StringToHash(\"Stab\") . public static readonly int Stab Stand Equivalent to Animator.StringToHash(\"Stand\") . public static readonly int Stand Start Equivalent to Animator.StringToHash(\"Start\") . public static readonly int Start Stop Equivalent to Animator.StringToHash(\"Stop\") . public static readonly int Stop Strafe Equivalent to Animator.StringToHash(\"Strafe\") . public static readonly int Strafe Swim Equivalent to Animator.StringToHash(\"Swim\") . public static readonly int Swim Swing Equivalent to Animator.StringToHash(\"Swing\") . public static readonly int Swing Take Equivalent to Animator.StringToHash(\"Take\") . public static readonly int Take Taunt Equivalent to Animator.StringToHash(\"Taunt\") . public static readonly int Taunt Throw Equivalent to Animator.StringToHash(\"Throw\") . public static readonly int Throw Transition Equivalent to Animator.StringToHash(\"Transition\") . public static readonly int Transition Turn Equivalent to Animator.StringToHash(\"Turn\") . public static readonly int Turn Twist Equivalent to Animator.StringToHash(\"Twist\") . public static readonly int Twist Unequip Equivalent to Animator.StringToHash(\"Unequip\") . public static readonly int Unequip Up Equivalent to Animator.StringToHash(\"Up\") . public static readonly int Up Vault Equivalent to Animator.StringToHash(\"Vault\") . public static readonly int Vault Velocity Equivalent to Animator.StringToHash(\"Velocity\") . public static readonly int Velocity Walk Equivalent to Animator.StringToHash(\"Walk\") . public static readonly int Walk"
  },
  "api/Zigurous.Animation.Rotate.html": {
    "href": "api/Zigurous.Animation.Rotate.html",
    "title": "Class Rotate | Animation Library",
    "keywords": "Class Rotate Rotates an object in space by a given speed. Inheritance System.Object Rotate Namespace : Zigurous.Animation public sealed class Rotate : MonoBehaviour Fields axis The axis in which the object rotates. public Vector3 axis space The coordinate space in which the object rotates. public Space space speed The speed at which the object rotates. public float speed updateMode The update mode during which the object rotates. public UpdateMode updateMode"
  },
  "api/Zigurous.Animation.RotateAround.html": {
    "href": "api/Zigurous.Animation.RotateAround.html",
    "title": "Class RotateAround | Animation Library",
    "keywords": "Class RotateAround Rotates an object around a point by a given speed. Inheritance System.Object RotateAround Namespace : Zigurous.Animation public sealed class RotateAround : MonoBehaviour Fields axis The axis in which the object rotates. public Vector3 axis point The point to rotate around. public Transform point speed The speed at which the object rotates. public float speed updateMode The update mode during which the object rotates. public UpdateMode updateMode"
  },
  "api/Zigurous.Animation.Scale.html": {
    "href": "api/Zigurous.Animation.Scale.html",
    "title": "Class Scale | Animation Library",
    "keywords": "Class Scale Scales an object over time by a given speed. Inheritance System.Object Scale Namespace : Zigurous.Animation public sealed class Scale : MonoBehaviour Fields speed The speed at which the object's scale changes. public Vector3 speed updateMode The update mode during which the object's scale changes. public UpdateMode updateMode"
  },
  "api/Zigurous.Animation.SmoothDamp-1.html": {
    "href": "api/Zigurous.Animation.SmoothDamp-1.html",
    "title": "Class SmoothDamp<T> | Animation Library",
    "keywords": "Class SmoothDamp<T> Gradually changes a value over time using a spring-damper function, which will never overshoot. Inheritance System.Object SmoothDamp<T> SmoothDampFloat SmoothDampVector2 SmoothDampVector3 Namespace : Zigurous.Animation [Serializable] public abstract class SmoothDamp<T> Type Parameter Description T The type of value to be animated. Fields maxSpeed Optionally allows you to clamp the maximum speed. public float maxSpeed smoothTime Approximately the time it will take to reach the target. A smaller value will reach the target faster. public float smoothTime Properties value The current value. public T value { get; protected set; } velocity The current velocity, this value is modified by the function every time you call it. public T velocity { get; protected set; } Methods Update(T) Smoothes the current value to the target value. public abstract T Update(T target) Parameter Description target The target value. Returns Description T The new current value. Update(T, Single) Smoothes the current value to the target value. public abstract T Update(T target, float deltaTime) Parameter Description target The target value. deltaTime The time since the last call to this function. Returns Description T The new current value."
  },
  "api/Zigurous.Animation.SmoothDampFloat.html": {
    "href": "api/Zigurous.Animation.SmoothDampFloat.html",
    "title": "Class SmoothDampFloat | Animation Library",
    "keywords": "Class SmoothDampFloat Gradually changes a float over time using a spring-damper function, which will never overshoot. Inheritance System.Object SmoothDamp < System.Single > SmoothDampFloat Inherited Members SmoothDamp<Single>.value SmoothDamp<Single>.velocity SmoothDamp<Single>.smoothTime SmoothDamp<Single>.maxSpeed Namespace : Zigurous.Animation [Serializable] public class SmoothDampFloat : SmoothDamp<float> Methods Update(Single) Smoothes the current value to the target value. public override float Update(float target) Parameter Description target The target value. Returns Description System.Single The new current value. Overrides Zigurous.Animation.SmoothDamp<System.Single>.Update(System.Single) Update(Single, Single) Smoothes the current value to the target value. public override float Update(float target, float deltaTime) Parameter Description target The target value. deltaTime The time since the last call to this function. Returns Description System.Single The new current value. Overrides Zigurous.Animation.SmoothDamp<System.Single>.Update(System.Single, System.Single)"
  },
  "api/Zigurous.Animation.SmoothDampVector2.html": {
    "href": "api/Zigurous.Animation.SmoothDampVector2.html",
    "title": "Class SmoothDampVector2 | Animation Library",
    "keywords": "Class SmoothDampVector2 Gradually changes a Vector2 over time using a spring-damper function, which will never overshoot. Inheritance System.Object SmoothDamp < Vector2 > SmoothDampVector2 Inherited Members SmoothDamp<Vector2>.value SmoothDamp<Vector2>.velocity SmoothDamp<Vector2>.smoothTime SmoothDamp<Vector2>.maxSpeed Namespace : Zigurous.Animation [Serializable] public class SmoothDampVector2 : SmoothDamp<Vector2> Methods Update(Vector2) Smoothes the current value to the target value. public override Vector2 Update(Vector2 target) Parameter Description target The target value. Returns Description Vector2 The new current value. Overrides Zigurous.Animation.SmoothDamp<Vector2>.Update(Vector2) Update(Vector2, Single) Smoothes the current value to the target value. public override Vector2 Update(Vector2 target, float deltaTime) Parameter Description target The target value. deltaTime The time since the last call to this function. Returns Description Vector2 The new current value. Overrides Zigurous.Animation.SmoothDamp<Vector2>.Update(Vector2, System.Single)"
  },
  "api/Zigurous.Animation.SmoothDampVector3.html": {
    "href": "api/Zigurous.Animation.SmoothDampVector3.html",
    "title": "Class SmoothDampVector3 | Animation Library",
    "keywords": "Class SmoothDampVector3 Gradually changes a Vector3 over time using a spring-damper function, which will never overshoot. Inheritance System.Object SmoothDamp < Vector3 > SmoothDampVector3 Inherited Members SmoothDamp<Vector3>.value SmoothDamp<Vector3>.velocity SmoothDamp<Vector3>.smoothTime SmoothDamp<Vector3>.maxSpeed Namespace : Zigurous.Animation [Serializable] public class SmoothDampVector3 : SmoothDamp<Vector3> Methods Update(Vector3) Smoothes the current value to the target value. public override Vector3 Update(Vector3 target) Parameter Description target The target value. Returns Description Vector3 The new current value. Overrides Zigurous.Animation.SmoothDamp<Vector3>.Update(Vector3) Update(Vector3, Single) Smoothes the current value to the target value. public override Vector3 Update(Vector3 target, float deltaTime) Parameter Description target The target value. deltaTime The time since the last call to this function. Returns Description Vector3 The new current value. Overrides Zigurous.Animation.SmoothDamp<Vector3>.Update(Vector3, System.Single)"
  },
  "api/Zigurous.Animation.SmoothFollow.html": {
    "href": "api/Zigurous.Animation.SmoothFollow.html",
    "title": "Class SmoothFollow | Animation Library",
    "keywords": "Class SmoothFollow Moves toward the position of another transform using a smooth damping function. Inheritance System.Object SmoothFollow Namespace : Zigurous.Animation public sealed class SmoothFollow : MonoBehaviour Fields damping How quickly the transform moves toward the target's position. Small numbers make the transform more responsive. Larger numbers make the transform respond more slowly. public float damping maxSpeed The maximum amount of units the transform can move per tick. public float maxSpeed offset The local offset position from the target's position that the camera moves toward. public Vector3 offset target The transform to follow. public Transform target"
  },
  "api/Zigurous.Animation.SmoothLookAt.html": {
    "href": "api/Zigurous.Animation.SmoothLookAt.html",
    "title": "Class SmoothLookAt | Animation Library",
    "keywords": "Class SmoothLookAt Rotates toward the position of another transform using a smooth damping function. Inheritance System.Object SmoothLookAt Namespace : Zigurous.Animation public sealed class SmoothLookAt : MonoBehaviour Fields damping How quickly the transform rotates toward the target's position. Small numbers make the transform more responsive. Larger numbers make the transform respond more slowly. public float damping maxSpeed The maximum amount of degrees the transform can rotate per update. public float maxSpeed offset The local offset position from the target's position that the camera looks at. public Vector3 offset target The transform to look at. public Transform target"
  },
  "api/Zigurous.Animation.Timing.html": {
    "href": "api/Zigurous.Animation.Timing.html",
    "title": "Struct Timing | Animation Library",
    "keywords": "Struct Timing The start and end time of an animation. Namespace : Zigurous.Animation [Serializable] public struct Timing Constructors Timing(Single, Single) Creates a new timing with the specified values. public Timing(float start, float end) Parameter Description start The start time of the animation. end The end time of the animation. Fields end The end time of the animation. public float end start The start time of the animation. public float start Methods Includes(Single) Checks if time is within the start and end time. public bool Includes(float time) Parameter Description time The time to check. Random() Returns a random time within the start and end time. public float Random()"
  },
  "api/Zigurous.Animation.Timing01.html": {
    "href": "api/Zigurous.Animation.Timing01.html",
    "title": "Struct Timing01 | Animation Library",
    "keywords": "Struct Timing01 The start and end time of an animation normalized between 0 and 1. Namespace : Zigurous.Animation [Serializable] public struct Timing01 Constructors Timing01(Single, Single) Creates a new timing with the specified values. public Timing01(float start, float end) Parameter Description start The start time of the animation, between 0 and 1. end The end time of the animation, between 0 and 1. Properties end The end time of the animation, between 0 and 1. public float end { get; set; } start The start time of the animation, between 0 and 1. public float start { get; set; } Methods Includes(Single) Checks if time is within the start and end time. public bool Includes(float time) Parameter Description time The time to check. Random() Returns a random time within the start and end time. public float Random()"
  },
  "api/Zigurous.Animation.TimingRange.html": {
    "href": "api/Zigurous.Animation.TimingRange.html",
    "title": "Struct TimingRange | Animation Library",
    "keywords": "Struct TimingRange An animation timing range between a lower and upper bound. Namespace : Zigurous.Animation [Serializable] public struct TimingRange Constructors TimingRange(Single, Single) Creates a new timing range with the specified values. public TimingRange(float min, float max) Parameter Description min The lower bound of the timing range. max The upper bound of the timing range. Fields max The upper bound of the timing range. public float max min The lower bound of the timing range. public float min Methods Includes(Single) Checks if time is within the min and max time. public bool Includes(float time) Parameter Description time The time to check. Random() Returns a random time within the min and max time. public float Random()"
  },
  "api/Zigurous.Animation.TimingRange01.html": {
    "href": "api/Zigurous.Animation.TimingRange01.html",
    "title": "Struct TimingRange01 | Animation Library",
    "keywords": "Struct TimingRange01 An animation timing range normalized between 0 and 1. Namespace : Zigurous.Animation [Serializable] public struct TimingRange01 Constructors TimingRange01(Single, Single) Creates a new timing range with the specified values. public TimingRange01(float min, float max) Parameter Description min The lower bound of the timing range, between 0 and 1. max The upper bound of the timing range, between 0 and 1. Properties max The upper bound of the timing range, between 0 and 1. public float max { get; set; } min The lower bound of the timing range, between 0 and 1. public float min { get; set; } Methods Includes(Single) Checks if time is within the min and max time. public bool Includes(float time) Parameter Description time The time to check. Random() Returns a random time within the min and max time. public float Random()"
  },
  "api/Zigurous.Animation.UpdateMode.html": {
    "href": "api/Zigurous.Animation.UpdateMode.html",
    "title": "Enum UpdateMode | Animation Library",
    "keywords": "Enum UpdateMode An update mode during which an animation behavior can run. Namespace : Zigurous.Animation public enum UpdateMode Fields Name Description FixedUpdate Updates during the physics loop at a fixed timestep. LateUpdate Updates after all other update functions, once every frame. Update Updates during the normal loop, once every frame."
  },
  "api/Zigurous.Animation.Vector2AnimationCurve.html": {
    "href": "api/Zigurous.Animation.Vector2AnimationCurve.html",
    "title": "Class Vector2AnimationCurve | Animation Library",
    "keywords": "Class Vector2AnimationCurve Stores a collection of keyframes that can be evaluated over time as a Vector2. Inheritance System.Object Vector2AnimationCurve Implements IAnimationCurve < Vector2 > Namespace : Zigurous.Animation [Serializable] public sealed class Vector2AnimationCurve : IAnimationCurve<Vector2> Fields x The collection of keyframes for the x-axis of a Vector2. public AnimationCurve x y The collection of keyframes for the y-axis of a Vector2. public AnimationCurve y Methods AddKey(Single, Vector2) Adds a new key to the curve. public void AddKey(float time, Vector2 value) Parameter Description time The time at which to add the key (horizontal axis in the curve graph). value The value for the key (vertical axis in the curve graph). Evaluate(Single) Evaluate the curve at time . public Vector2 Evaluate(float time) Parameter Description time The time within the curve you want to evaluate (the horizontal axis in the curve graph). Returns Description Vector2 The value of the curve, at the point in time specified. RemoveKey(Int32) Removes a key. public void RemoveKey(int index) Parameter Description index The index of the key to remove. Implements IAnimationCurve<T>"
  },
  "api/Zigurous.Animation.Vector3AnimationCurve.html": {
    "href": "api/Zigurous.Animation.Vector3AnimationCurve.html",
    "title": "Class Vector3AnimationCurve | Animation Library",
    "keywords": "Class Vector3AnimationCurve Stores a collection of keyframes that can be evaluated over time as a Vector3. Inheritance System.Object Vector3AnimationCurve Implements IAnimationCurve < Vector3 > Namespace : Zigurous.Animation [Serializable] public sealed class Vector3AnimationCurve : IAnimationCurve<Vector3> Fields x The collection of keyframes for the x-axis of a Vector3. public AnimationCurve x y The collection of keyframes for the y-axis of a Vector3. public AnimationCurve y z The collection of keyframes for the z-axis of a Vector3. public AnimationCurve z Methods AddKey(Single, Vector3) Adds a new key to the curve. public void AddKey(float time, Vector3 value) Parameter Description time The time at which to add the key (horizontal axis in the curve graph). value The value for the key (vertical axis in the curve graph). Evaluate(Single) Evaluate the curve at time . public Vector3 Evaluate(float time) Parameter Description time The time within the curve you want to evaluate (the horizontal axis in the curve graph). Returns Description Vector3 The value of the curve, at the point in time specified. RemoveKey(Int32) Removes a key. public void RemoveKey(int index) Parameter Description index The index of the key to remove. Implements IAnimationCurve<T>"
  },
  "api/Zigurous.Animation.Vector4AnimationCurve.html": {
    "href": "api/Zigurous.Animation.Vector4AnimationCurve.html",
    "title": "Class Vector4AnimationCurve | Animation Library",
    "keywords": "Class Vector4AnimationCurve Stores a collection of keyframes that can be evaluated over time as a Vector4. Inheritance System.Object Vector4AnimationCurve Implements IAnimationCurve < Vector4 > Namespace : Zigurous.Animation [Serializable] public sealed class Vector4AnimationCurve : IAnimationCurve<Vector4> Fields w The collection of keyframes for the w-axis of a Vector4. public AnimationCurve w x The collection of keyframes for the x-axis of a Vector4. public AnimationCurve x y The collection of keyframes for the y-axis of a Vector4. public AnimationCurve y z The collection of keyframes for the z-axis of a Vector4. public AnimationCurve z Methods AddKey(Single, Vector4) Adds a new key to the curve. public void AddKey(float time, Vector4 value) Parameter Description time The time at which to add the key (horizontal axis in the curve graph). value The value for the key (vertical axis in the curve graph). Evaluate(Single) Evaluate the curve at time . public Vector4 Evaluate(float time) Parameter Description time The time within the curve you want to evaluate (the horizontal axis in the curve graph). Returns Description Vector4 The value of the curve, at the point in time specified. RemoveKey(Int32) Removes a key. public void RemoveKey(int index) Parameter Description index The index of the key to remove. Implements IAnimationCurve<T>"
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "Changelog | Animation Library",
    "keywords": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [1.6.0] - 2021/07/18 Added New Parameter static class with predefined hash ids New SmoothDamp<T> abstract class New SmoothDampFloat data structure New SmoothDampVector2 data structure New SmoothDampVector3 data structure Fixed Hash ids on AnimatorParameter were not updating when the name was changed in the editor [1.5.0] - 2021/07/07 Added New Timing01 struct New TimingRange01 struct New IAnimationCurve<T> interface Changed Removed root bone from avatar masks Updated documentation comments Updated package metadata [1.4.2] - 2021/07/01 Changed Hash ids on AnimatorParameter are now generated automatically without ever having to call a function [1.4.1] - 2021/06/28 Changed Attribute [AddComponentMenu] added to all behaviors [1.4.0] - 2021/06/27 Added Support for different update modes on common animation scripts New RotateAround script Changed Increased default speed values Separated speed from rotation axis [1.3.1] - 2021/06/22 Added Editor property drawer for AnimatorParameter [1.3.0] - 2021/06/22 Added New AnimatorParameter data structure Restart function added to AnimatedSprite [1.2.0] - 2021/06/10 Added New FollowPath script Support for reversed AnimatedSprite [1.1.0] - 2021/05/19 Added New AnimatedSprite behavior [1.0.1] - 2021/04/13 Changed Package description Fixed Set Editor assembly to only compile for the Editor platform Moved non-compiled assets outside of the Runtime directory [1.0.0] - 2021/03/24 Added 16 Humanoid Animation Masks Animation Scripts SmoothFollow SmoothLookAt Blink Move Orbit Rotate Scale Data Structures Timing TimingRange Vector2AnimationCurve Vector3AnimationCurve Vector4AnimationCurve"
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "License | Animation Library",
    "keywords": "License MIT License Copyright (c) 2021 Zigurous Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "manual/animator-parameters.html": {
    "href": "manual/animator-parameters.html",
    "title": "Animator Parameters | Animation Library",
    "keywords": "Animator Parameters When setting animator parameters in code, it is more efficient to use hash ids instead of strings. The Animation Library package comes with a static class Parameter with predefined ids for common animator parameters. private void Foo() { animator.SetBool(Parameter.Grounded, false); animator.SetTrigger(Parameter.Jump, true); animator.SetFloat(Parameter.Speed, 4.0f); } Automatic Hash Ids The AnimatorParameter struct included in the Animation Library package automatically creates a hash id for a given animator parameter name. Anywhere you might declare a variable for a custom animator paramter name use AnimatorParameter instead. It will still be serialized as a string in the editor, but you can use the id when getting or setting an animator parameter. To learn more, see https://docs.unity3d.com/ScriptReference/Animator.StringToHash.html . public AnimatorParameter parameter = \"Time\"; public float time; private void Update() { animator.SetFloat(parameter.id, time); }"
  },
  "manual/avatar-masks.html": {
    "href": "manual/avatar-masks.html",
    "title": "Avatar Masks | Animation Library",
    "keywords": "Avatar Masks Masking allows you to discard some of the animation data within a clip, allowing the clip to animate only parts of the object or character rather than the entire thing. For example, you may have a standard walking animation that includes both arm and leg motion, but if a character is carrying a large object with both hands then you wouldn’t want their arms to swing to the side as they walk. However, you could still use the standard walking animation while carrying the object by using a mask to only play the upper body portion of the carrying animation over the top of the walking animation. Mask assets can be used in Animator Controllers, when specifying Animation Layers to apply masking at runtime, or in the import settings of your animation files to apply masking during the import animation. A benefit of using Masks is that they tend to reduce memory overheads since body parts that are not active do not need their associated animation curves. Also, the unused curves need not be calculated during playback which will tend to reduce the CPU overhead of the animation. Included Assets The Animation Library package contains 16+ avatar masks to represent different humanoid body parts: Arms FullBody Hands Head LeftArm LeftHand LeftLeg Legs LowerBody RightArm RightHand RightLeg Root Torso TorsoHead UpperBody"
  },
  "manual/behaviors.html": {
    "href": "manual/behaviors.html",
    "title": "Behaviors | Animation Library",
    "keywords": "Behaviors The Animation Library package includes several MonoBehaviour for animating objects in different ways. Add any of the following to a game object in your scene to get started: AnimatedSprite Animates a series of sprites over time. Blink Switches a material on and off on an object at a variable rate. FollowPath Moves an object along a predefined path. Move Moves an object in space by a given speed. Orbit Orbits an object around another object with a given speed and radius. Rotate Rotates an object in space by a given speed. RotateAround Rotates an object around a point by a given speed. Scale Scales an object over time by a given speed. SmoothFollow Moves toward the position of another transform using a smooth damping function. SmoothLookAt Rotates toward the position of another transform using a smooth damping function."
  },
  "manual/data-structures.html": {
    "href": "manual/data-structures.html",
    "title": "Data Structures | Animation Library",
    "keywords": "Data Structures The Animation Library package includes several data structures to assist in animation-related purposes, mainly when writing custom scripts. AnimatorParameter An animation parameter that can be set on an Animator. A hash id is automatically created for the parameter. Ids are used for optimized setters and getters on Animator parameters. SmoothDampFloat Gradually changes a float over time using a spring-damper function, which will never overshoot. SmoothDampVector2 Gradually changes a Vector2 over time using a spring-damper function, which will never overshoot. SmoothDampVector3 Gradually changes a Vector3 over time using a spring-damper function, which will never overshoot. Timing The start and end time of an animation. Timing01 The start and end time of an animation normalized between 0 and 1. TimingRange An animation timing range between a lower and upper bound. TimingRange01 An animation timing range normalized between 0 and 1. Vector2AnimationCurve Stores a collection of keyframes that can be evaluated over time as a Vector2. Vector3AnimationCurve Stores a collection of keyframes that can be evaluated over time as a Vector3. Vector4AnimationCurve Stores a collection of keyframes that can be evaluated over time as a Vector4."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "Animation Library | Animation Library",
    "keywords": "Animation Library The Animation Library package contains assets and scripts for animating Unity objects. Animation behaviors include Blink, FollowPath, Move, Orbit, Rotate, Scale, SmoothFollow, SmoothLookAt, and more. The package also contains several animation-related data structures and predefined avatar masks. Reference Behaviors Data Structures Animator Parameters Avatar Masks"
  },
  "manual/installation.html": {
    "href": "manual/installation.html",
    "title": "Installation | Animation Library",
    "keywords": "Installation Use the Unity Package Manager to install the Animation Library package. Open the Package Manager in Window > Package Manager Click the add ( + ) button in the status bar Select Add package from git URL from the add menu Enter the following Git URL in the text box and click Add: https://github.com/zigurous/unity-animation-library.git For more information on the Package Manager and installing packages, see the following pages: Unity's Package Manager Installing from a Git URL Importing Import the package namespace in each script or file you want to use it. Note : You may need to regenerate project files/assemblies first. using Zigurous.Animation; Source Code The source code for the Animation Library package is in the following repository: https://github.com/zigurous/unity-animation-library"
  }
}