{
  "api/Zigurous.Animation.AnimatedSprite.html": {
    "href": "api/Zigurous.Animation.AnimatedSprite.html",
    "title": "Class AnimatedSprite | Animation Library",
    "keywords": "Class AnimatedSprite Animates a series of sprites over time. Inheritance System.Object AnimatedSprite Namespace : Zigurous.Animation Syntax public sealed class AnimatedSprite : MonoBehaviour Fields frameRate The amount of frames per second that are rendered. Declaration public float frameRate loop Whether the animation should loop back to the start after cycling through each sprite. Declaration public bool loop reversed Animates the sprites in reverse order. Declaration public bool reversed sprites The sprites that are rendered throughout the animation, in order. Declaration public Sprite[] sprites Properties frame The current frame index. Declaration public int frame { get; } nextFrameTime The time at which the next frame will begin. Declaration public float nextFrameTime { get; } spriteRenderer The sprite renderer component for the animation. Declaration public SpriteRenderer spriteRenderer { get; } Methods Restart() Restarts the animation to the first frame. Declaration public void Restart()"
  },
  "api/Zigurous.Animation.AnimatorParameter.html": {
    "href": "api/Zigurous.Animation.AnimatorParameter.html",
    "title": "Struct AnimatorParameter | Animation Library",
    "keywords": "Struct AnimatorParameter An animation parameter that can be set on an Animator. Namespace : Zigurous.Animation Syntax [Serializable] public struct AnimatorParameter Remarks A hash id is automatically created for the parameter. Ids are used for optimized setters and getters on Animator parameters. Constructors AnimatorParameter(String) Constructs a new animation parameter with the given name . Declaration public AnimatorParameter(string name) Parameters Type Name Description System.String name The name of the animation parameter. Properties hash The hash id of the animation parameter. Declaration public readonly int hash { get; } name The name of the animation parameter. Declaration public string name { get; set; } Operators Implicit(String to AnimatorParameter) Declaration public static implicit operator AnimatorParameter(string name) Parameters Type Name Description System.String name Returns Type Description AnimatorParameter"
  },
  "api/Zigurous.Animation.Blink.html": {
    "href": "api/Zigurous.Animation.Blink.html",
    "title": "Class Blink | Animation Library",
    "keywords": "Class Blink Switches a material on and off on an object at a variable rate. Inheritance System.Object Blink Namespace : Zigurous.Animation Syntax public sealed class Blink : MonoBehaviour Fields blinkChance The random chance that the object will blink. Declaration public float blinkChance blinkCooldown The amount of seconds before the material can blink a subsequent time. Declaration public TimingRange blinkCooldown blinkDuration The amount of seconds the material stays blinking. Declaration public TimingRange blinkDuration blinkingMaterial The material applied to the object when blinking. Declaration public Material blinkingMaterial notBlinkingMaterial The material applied to the object when not blinking. Declaration public Material notBlinkingMaterial sharedRenderers An array of other renderers whos material will be changed to match the blinking object. Declaration public Renderer[] sharedRenderers updateInterval How frequently in seconds the script will execute as a way to optimize the code performance. Declaration public float updateInterval Properties blinking Whether the object is currently blinking. Declaration public bool blinking { get; } cooldown Whether the blinking is currently on cooldown. Declaration public bool cooldown { get; } nextUpdateTime The time the next update will be performed. Declaration public float nextUpdateTime { get; } renderer A reference to the main blinking object's renderer. Declaration public Renderer renderer { get; } Methods BlinkOnce() Blinks the material for one cycle. Declaration public void BlinkOnce()"
  },
  "api/Zigurous.Animation.FollowPath.html": {
    "href": "api/Zigurous.Animation.FollowPath.html",
    "title": "Class FollowPath | Animation Library",
    "keywords": "Class FollowPath Moves an object along a predefined path. Inheritance System.Object FollowPath Namespace : Zigurous.Animation Syntax public sealed class FollowPath : MonoBehaviour Fields damping How quickly the object moves between nodes. Small numbers make the object more responsive. Larger numbers make the object respond more slowly. Declaration public float damping looping The looping behavior, if desired. Declaration public FollowPath.LoopType looping maxSpeed The maximum speed the object can move between nodes. Declaration public float maxSpeed minProximity Once the object is less than this distance to the current node, then it will advance to the next one. Declaration public float minProximity path The object follows the path comprised of all the children of this transform. Declaration public Transform path reversed Moves the object between nodes in reverse. Declaration public bool reversed Properties currentIndex The index of the node that the object is currently moving to. Declaration public int currentIndex { get; } nodeFrom The transform of the node that the object is currently moving from. Declaration public Transform nodeFrom { get; } nodeTo The transform of the node that the object is currently moving to. Declaration public Transform nodeTo { get; } Methods Restart() Restarts the path at the first node. Declaration public void Restart()"
  },
  "api/Zigurous.Animation.FollowPath.LoopType.html": {
    "href": "api/Zigurous.Animation.FollowPath.LoopType.html",
    "title": "Enum FollowPath.LoopType | Animation Library",
    "keywords": "Enum FollowPath.LoopType A type of looping behavior. Namespace : Zigurous.Animation Syntax public enum LoopType Fields Name Description Circular After reaching the end of the path, the object will traverse back to the first node and continue with the next loop. None Turns off looping. PingPong The object traverses along the path forwards then backwards then forwards then backwards, etc. Restart Restarts the object from the beginning of the path after it reaches the end. The object will jump to the position of the first node."
  },
  "api/Zigurous.Animation.html": {
    "href": "api/Zigurous.Animation.html",
    "title": "Namespace Zigurous.Animation | Animation Library",
    "keywords": "Namespace Zigurous.Animation Classes AnimatedSprite Animates a series of sprites over time. Blink Switches a material on and off on an object at a variable rate. FollowPath Moves an object along a predefined path. Move Moves an object in space by a given speed. Orbit Orbits an object around another object with a given speed and radius. Rotate Rotates an object in space by a given speed. RotateAround Rotates an object around a point by a given speed. Scale Scales an object over time by a given speed. SmoothFollow Moves toward the position of another transform using a smooth damping function. SmoothLookAt Rotates toward the position of another transform using a smooth damping function. Vector2AnimationCurve Stores a collection of keyframes that can be evaluated over time as a Vector2. Vector3AnimationCurve Stores a collection of keyframes that can be evaluated over time as a Vector3. Vector4AnimationCurve Stores a collection of keyframes that can be evaluated over time as a Vector4. Structs AnimatorParameter An animation parameter that can be set on an Animator. Timing Represents the start and end time of an animation. Timing01 Represents the start and end time of an animation normalized between 0 and 1. TimingRange Represents an animation timing range between a lower and upper bound. TimingRange01 Represents an animation timing range between a lower and upper bound normalized between 0 and 1. Interfaces IAnimationCurve<T> A type that can be represented with animation curves. Enums FollowPath.LoopType A type of looping behavior. UpdateMode An update mode during which an animation behavior can run."
  },
  "api/Zigurous.Animation.IAnimationCurve-1.html": {
    "href": "api/Zigurous.Animation.IAnimationCurve-1.html",
    "title": "Interface IAnimationCurve<T> | Animation Library",
    "keywords": "Interface IAnimationCurve<T> A type that can be represented with animation curves. Namespace : Zigurous.Animation Syntax public interface IAnimationCurve<T> Type Parameters Name Description T The type evaluated by the animation curve. Methods AddKey(Single, T) Add a new key to the curve. Declaration void AddKey(float time, T value) Parameters Type Name Description System.Single time The time at which to add the key (horizontal axis in the curve graph). T value The value for the key (vertical axis in the curve graph). Evaluate(Single) Evaluate the curve at time . Declaration T Evaluate(float time) Parameters Type Name Description System.Single time The time within the curve you want to evaluate (the horizontal axis in the curve graph). Returns Type Description T The value of the curve, at the point in time specified. RemoveKey(Int32) Removes a key. Declaration void RemoveKey(int index) Parameters Type Name Description System.Int32 index The index of the key to remove."
  },
  "api/Zigurous.Animation.Move.html": {
    "href": "api/Zigurous.Animation.Move.html",
    "title": "Class Move | Animation Library",
    "keywords": "Class Move Moves an object in space by a given speed. Inheritance System.Object Move Namespace : Zigurous.Animation Syntax public sealed class Move : MonoBehaviour Fields space The coordinate space in which the object moves. Declaration public Space space speed The speed at which the object moves. Declaration public Vector3 speed updateMode The update mode during which the object moves. Declaration public UpdateMode updateMode"
  },
  "api/Zigurous.Animation.Orbit.html": {
    "href": "api/Zigurous.Animation.Orbit.html",
    "title": "Class Orbit | Animation Library",
    "keywords": "Class Orbit Orbits an object around another object with a given speed and radius. Inheritance System.Object Orbit Namespace : Zigurous.Animation Syntax public sealed class Orbit : MonoBehaviour Fields center The transform the object orbits around. Declaration public Transform center radius The distance from the center of the object being orbited. Declaration public float radius speed The speed at which the object orbits. Declaration public float speed startAngle The initial angle in degrees of the orbiting object. Declaration public float startAngle updateMode The update mode during which the object orbits. Declaration public UpdateMode updateMode Properties angle The current angle in degrees of the orbiting object. Declaration public float angle { get; }"
  },
  "api/Zigurous.Animation.Rotate.html": {
    "href": "api/Zigurous.Animation.Rotate.html",
    "title": "Class Rotate | Animation Library",
    "keywords": "Class Rotate Rotates an object in space by a given speed. Inheritance System.Object Rotate Namespace : Zigurous.Animation Syntax public sealed class Rotate : MonoBehaviour Fields axis The axis in which the object rotates. Declaration public Vector3 axis space The coordinate space in which the object rotates. Declaration public Space space speed The speed at which the object rotates. Declaration public float speed updateMode The update mode during which the object rotates. Declaration public UpdateMode updateMode"
  },
  "api/Zigurous.Animation.RotateAround.html": {
    "href": "api/Zigurous.Animation.RotateAround.html",
    "title": "Class RotateAround | Animation Library",
    "keywords": "Class RotateAround Rotates an object around a point by a given speed. Inheritance System.Object RotateAround Namespace : Zigurous.Animation Syntax public sealed class RotateAround : MonoBehaviour Fields axis The axis in which the object rotates. Declaration public Vector3 axis point The point to rotate around. Declaration public Transform point speed The speed at which the object rotates. Declaration public float speed updateMode The update mode during which the object rotates. Declaration public UpdateMode updateMode"
  },
  "api/Zigurous.Animation.Scale.html": {
    "href": "api/Zigurous.Animation.Scale.html",
    "title": "Class Scale | Animation Library",
    "keywords": "Class Scale Scales an object over time by a given speed. Inheritance System.Object Scale Namespace : Zigurous.Animation Syntax public sealed class Scale : MonoBehaviour Fields speed The speed at which the object's scale changes. Declaration public Vector3 speed updateMode The update mode during which the object's scale changes. Declaration public UpdateMode updateMode"
  },
  "api/Zigurous.Animation.SmoothFollow.html": {
    "href": "api/Zigurous.Animation.SmoothFollow.html",
    "title": "Class SmoothFollow | Animation Library",
    "keywords": "Class SmoothFollow Moves toward the position of another transform using a smooth damping function. Inheritance System.Object SmoothFollow Namespace : Zigurous.Animation Syntax public sealed class SmoothFollow : MonoBehaviour Fields damping How quickly the transform moves toward the target's position. Small numbers make the transform more responsive. Larger numbers make the transform respond more slowly. Declaration public float damping maxSpeed The maximum amount of units the transform can move per tick. Declaration public float maxSpeed offset The local offset position from the target's position that the camera moves toward. Declaration public Vector3 offset target The transform to follow. Declaration public Transform target"
  },
  "api/Zigurous.Animation.SmoothLookAt.html": {
    "href": "api/Zigurous.Animation.SmoothLookAt.html",
    "title": "Class SmoothLookAt | Animation Library",
    "keywords": "Class SmoothLookAt Rotates toward the position of another transform using a smooth damping function. Inheritance System.Object SmoothLookAt Namespace : Zigurous.Animation Syntax public sealed class SmoothLookAt : MonoBehaviour Fields damping How quickly the transform rotates toward the target's position. Small numbers make the transform more responsive. Larger numbers make the transform respond more slowly. Declaration public float damping maxSpeed The maximum amount of degrees the transform can rotate per update. Declaration public float maxSpeed offset The local offset position from the target's position that the camera looks at. Declaration public Vector3 offset target The transform to look at. Declaration public Transform target"
  },
  "api/Zigurous.Animation.Timing.html": {
    "href": "api/Zigurous.Animation.Timing.html",
    "title": "Struct Timing | Animation Library",
    "keywords": "Struct Timing Represents the start and end time of an animation. Namespace : Zigurous.Animation Syntax [Serializable] public struct Timing Constructors Timing(Single, Single) Constructs a new timing with the given start and end . Declaration public Timing(float start, float end) Parameters Type Name Description System.Single start The start time of the animation. System.Single end The end time of the animation. Fields end The end time of the animation. Declaration public float end start The start time of the animation. Declaration public float start Methods Includes(Single) Declaration public bool Includes(float time) Parameters Type Name Description System.Single time The time to check. Returns Type Description System.Boolean Whether the given time is within the start and end time. Random() Declaration public float Random() Returns Type Description System.Single A random time within the start and end time."
  },
  "api/Zigurous.Animation.Timing01.html": {
    "href": "api/Zigurous.Animation.Timing01.html",
    "title": "Struct Timing01 | Animation Library",
    "keywords": "Struct Timing01 Represents the start and end time of an animation normalized between 0 and 1. Namespace : Zigurous.Animation Syntax [Serializable] public struct Timing01 Constructors Timing01(Single, Single) Constructs a new timing with the given start and end . Declaration public Timing01(float start, float end) Parameters Type Name Description System.Single start The start time of the animation, between 0 and 1. System.Single end The end time of the animation, between 0 and 1. Properties end The end time of the animation, between 0 and 1. Declaration public float end { get; set; } start The start time of the animation, between 0 and 1. Declaration public float start { get; set; } Methods Includes(Single) Declaration public bool Includes(float time) Parameters Type Name Description System.Single time The time to check. Returns Type Description System.Boolean Whether the given time is within the start and end time. Random() Declaration public float Random() Returns Type Description System.Single A random time within the start and end time."
  },
  "api/Zigurous.Animation.TimingRange.html": {
    "href": "api/Zigurous.Animation.TimingRange.html",
    "title": "Struct TimingRange | Animation Library",
    "keywords": "Struct TimingRange Represents an animation timing range between a lower and upper bound. Namespace : Zigurous.Animation Syntax [Serializable] public struct TimingRange Constructors TimingRange(Single, Single) Constructs a new timing range with the given min and max . Declaration public TimingRange(float min, float max) Parameters Type Name Description System.Single min The lower bound of the timing range. System.Single max The upper bound of the timing range. Fields max The upper bound of the timing range. Declaration public float max min The lower bound of the timing range. Declaration public float min Methods Includes(Single) Declaration public bool Includes(float time) Parameters Type Name Description System.Single time The time to check. Returns Type Description System.Boolean Whether the given time is within the min and max time. Random() Declaration public float Random() Returns Type Description System.Single A random time within the min and max time."
  },
  "api/Zigurous.Animation.TimingRange01.html": {
    "href": "api/Zigurous.Animation.TimingRange01.html",
    "title": "Struct TimingRange01 | Animation Library",
    "keywords": "Struct TimingRange01 Represents an animation timing range between a lower and upper bound normalized between 0 and 1. Namespace : Zigurous.Animation Syntax [Serializable] public struct TimingRange01 Constructors TimingRange01(Single, Single) Constructs a new timing range with the given min and max . Declaration public TimingRange01(float min, float max) Parameters Type Name Description System.Single min The lower bound of the timing range, between 0 and 1. System.Single max The upper bound of the timing range, between 0 and 1. Properties max The upper bound of the timing range, between 0 and 1. Declaration public float max { get; set; } min The lower bound of the timing range, between 0 and 1. Declaration public float min { get; set; } Methods Includes(Single) Declaration public bool Includes(float time) Parameters Type Name Description System.Single time The time to check. Returns Type Description System.Boolean Whether the given time is within the min and max time. Random() Declaration public float Random() Returns Type Description System.Single A random time within the min and max time."
  },
  "api/Zigurous.Animation.UpdateMode.html": {
    "href": "api/Zigurous.Animation.UpdateMode.html",
    "title": "Enum UpdateMode | Animation Library",
    "keywords": "Enum UpdateMode An update mode during which an animation behavior can run. Namespace : Zigurous.Animation Syntax public enum UpdateMode Fields Name Description FixedUpdate Updates during the physics loop at a fixed timestep. LateUpdate Updates after all other update functions, once every frame. Update Updates during the normal loop, once every frame."
  },
  "api/Zigurous.Animation.Vector2AnimationCurve.html": {
    "href": "api/Zigurous.Animation.Vector2AnimationCurve.html",
    "title": "Class Vector2AnimationCurve | Animation Library",
    "keywords": "Class Vector2AnimationCurve Stores a collection of keyframes that can be evaluated over time as a Vector2. Inheritance System.Object Vector2AnimationCurve Implements IAnimationCurve < Vector2 > Namespace : Zigurous.Animation Syntax [Serializable] public sealed class Vector2AnimationCurve : IAnimationCurve<Vector2> Fields x The collection of keyframes for the x-axis of a Vector2. Declaration public AnimationCurve x y The collection of keyframes for the y-axis of a Vector2. Declaration public AnimationCurve y Methods AddKey(Single, Vector2) Add a new key to the curve. Declaration public void AddKey(float time, Vector2 value) Parameters Type Name Description System.Single time The time at which to add the key (horizontal axis in the curve graph). Vector2 value The value for the key (vertical axis in the curve graph). Evaluate(Single) Evaluate the curve at time . Declaration public Vector2 Evaluate(float time) Parameters Type Name Description System.Single time The time within the curve you want to evaluate (the horizontal axis in the curve graph). Returns Type Description Vector2 The value of the curve, at the point in time specified. RemoveKey(Int32) Removes a key. Declaration public void RemoveKey(int index) Parameters Type Name Description System.Int32 index The index of the key to remove. Implements IAnimationCurve<T>"
  },
  "api/Zigurous.Animation.Vector3AnimationCurve.html": {
    "href": "api/Zigurous.Animation.Vector3AnimationCurve.html",
    "title": "Class Vector3AnimationCurve | Animation Library",
    "keywords": "Class Vector3AnimationCurve Stores a collection of keyframes that can be evaluated over time as a Vector3. Inheritance System.Object Vector3AnimationCurve Implements IAnimationCurve < Vector3 > Namespace : Zigurous.Animation Syntax [Serializable] public sealed class Vector3AnimationCurve : IAnimationCurve<Vector3> Fields x The collection of keyframes for the x-axis of a Vector3. Declaration public AnimationCurve x y The collection of keyframes for the y-axis of a Vector3. Declaration public AnimationCurve y z The collection of keyframes for the z-axis of a Vector3. Declaration public AnimationCurve z Methods AddKey(Single, Vector3) Add a new key to the curve. Declaration public void AddKey(float time, Vector3 value) Parameters Type Name Description System.Single time The time at which to add the key (horizontal axis in the curve graph). Vector3 value The value for the key (vertical axis in the curve graph). Evaluate(Single) Evaluate the curve at time . Declaration public Vector3 Evaluate(float time) Parameters Type Name Description System.Single time The time within the curve you want to evaluate (the horizontal axis in the curve graph). Returns Type Description Vector3 The value of the curve, at the point in time specified. RemoveKey(Int32) Removes a key. Declaration public void RemoveKey(int index) Parameters Type Name Description System.Int32 index The index of the key to remove. Implements IAnimationCurve<T>"
  },
  "api/Zigurous.Animation.Vector4AnimationCurve.html": {
    "href": "api/Zigurous.Animation.Vector4AnimationCurve.html",
    "title": "Class Vector4AnimationCurve | Animation Library",
    "keywords": "Class Vector4AnimationCurve Stores a collection of keyframes that can be evaluated over time as a Vector4. Inheritance System.Object Vector4AnimationCurve Implements IAnimationCurve < Vector4 > Namespace : Zigurous.Animation Syntax [Serializable] public sealed class Vector4AnimationCurve : IAnimationCurve<Vector4> Fields w The collection of keyframes for the w-axis of a Vector4. Declaration public AnimationCurve w x The collection of keyframes for the x-axis of a Vector4. Declaration public AnimationCurve x y The collection of keyframes for the y-axis of a Vector4. Declaration public AnimationCurve y z The collection of keyframes for the z-axis of a Vector4. Declaration public AnimationCurve z Methods AddKey(Single, Vector4) Add a new key to the curve. Declaration public void AddKey(float time, Vector4 value) Parameters Type Name Description System.Single time The time at which to add the key (horizontal axis in the curve graph). Vector4 value The value for the key (vertical axis in the curve graph). Evaluate(Single) Evaluate the curve at time . Declaration public Vector4 Evaluate(float time) Parameters Type Name Description System.Single time The time within the curve you want to evaluate (the horizontal axis in the curve graph). Returns Type Description Vector4 The value of the curve, at the point in time specified. RemoveKey(Int32) Removes a key. Declaration public void RemoveKey(int index) Parameters Type Name Description System.Int32 index The index of the key to remove. Implements IAnimationCurve<T>"
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "Changelog | Animation Library",
    "keywords": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [1.5.0] - 2021/07/07 Added New Timing01 struct New TimingRange01 struct New IAnimationCurve<T> interface Changed Removed root bone from avatar masks Updated documentation comments Updated package metadata [1.4.2] - 2021/07/01 Changed Animator parameter ids are now generated automatically without ever having to call a function [1.4.1] - 2021/06/28 Changed [AddComponentMenu] attribute added to all behaviors [1.4.0] - 2021/06/27 Added Support for different update modes on common animation scripts New RotateAround script Changed Increased default speed values Separated speed from rotation axis [1.3.1] - 2021/06/22 Added Editor property drawer for AnimatorParameter [1.3.0] - 2021/06/22 Added AnimatorParameter - new serializable data structure that manages parameter hashes Restart function added to AnimatedSprite [1.2.0] - 2021/06/10 Added New FollowPath script Support for reversed AnimatedSprite [1.1.0] - 2021/05/19 Added AnimatedSprite [1.0.1] - 2021/04/13 Changed Package description Fixed Set Editor assembly to only compile for the Editor platform Moved non-compiled assets outside of the Runtime directory [1.0.0] - 2021/03/24 Added 16 Humanoid Animation Masks Animation Scripts SmoothFollow SmoothLookAt Blink Move Orbit Rotate Scale Data Structures Timing TimingRange Vector2AnimationCurve Vector3AnimationCurve Vector4AnimationCurve"
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "License | Animation Library",
    "keywords": "License MIT License Copyright (c) 2021 Zigurous Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "manual/avatar-masks.html": {
    "href": "manual/avatar-masks.html",
    "title": "Avatar Masks | Animation Library",
    "keywords": "Avatar Masks Masking allows you to discard some of the animation data within a clip, allowing the clip to animate only parts of the object or character rather than the entire thing. For example, you may have a standard walking animation that includes both arm and leg motion, but if a character is carrying a large object with both hands then you wouldn’t want their arms to swing to the side as they walk. However, you could still use the standard walking animation while carrying the object by using a mask to only play the upper body portion of the carrying animation over the top of the walking animation. Mask assets can be used in Animator Controllers, when specifying Animation Layers to apply masking at runtime, or in the import settings of your animation files to apply masking during the import animation. A benefit of using Masks is that they tend to reduce memory overheads since body parts that are not active do not need their associated animation curves. Also, the unused curves need not be calculated during playback which will tend to reduce the CPU overhead of the animation. Included Assets The Animation Library package contains 16+ avatar masks to represent different humanoid body parts: Arms FullBody Hands Head LeftArm LeftHand LeftLeg Legs LowerBody RightArm RightHand RightLeg Root Torso TorsoHead UpperBody"
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "Animation Library | Animation Library",
    "keywords": "Animation Library The Animation Library package contains assets and scripts for animating Unity objects. Animation behaviors include Blink, FollowPath, Move, Orbit, Rotate, Scale, SmoothFollow, SmoothLookAt, and more. The package also contains several animation-related data structures and predefined avatar masks. Behaviors AnimatedSprite Blink FollowPath Move Orbit Rotate RotateAround Scale SmoothFollow SmoothLookAt Data Structures AnimatorParameter Timing Timing01 TimingRange TimingRange01 Vector2AnimationCurve Vector3AnimationCurve Vector4AnimationCurve"
  },
  "manual/installation.html": {
    "href": "manual/installation.html",
    "title": "Installation | Animation Library",
    "keywords": "Installation Use the Unity Package Manager to install the Animation Library package. Open the Package Manager in Window > Package Manager Click the add ( + ) button in the status bar Select Add package from git URL from the add menu Enter the following Git URL in the text box and click Add: https://github.com/zigurous/unity-animation-library.git For more information on the Package Manager and installing packages, see the following pages: Unity's Package Manager Installing from a Git URL Importing Import the package namespace in each script or file you want to use it. Note : You may need to regenerate project files/assemblies first. using Zigurous.Animation; Source Code The source code for the Animation Library package is in the following repository: https://github.com/zigurous/unity-animation-library"
  }
}