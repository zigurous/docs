{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-js","path":"/manual/events","result":{"data":{"markdownRemark":{"html":"<h1>Events</h1>\n<p>Various events are invoked throughout the tween lifecycle. A <a href=\"/com.zigurous.tweening@3.0.0/api/Zigurous.Tweening/TweenCallback\">TweenCallback</a> function delegate can be used to respond to the following events:</p>\n<ul>\n<li><a href=\"/com.zigurous.tweening@3.0.0/api/Zigurous.Tweening/Tween/onUpdate\">onUpdate</a>: Invoked every time the tween is updated</li>\n<li><a href=\"/com.zigurous.tweening@3.0.0/api/Zigurous.Tweening/Tween/onStart\">onStart</a>: Invoked when the tween is started</li>\n<li><a href=\"/com.zigurous.tweening@3.0.0/api/Zigurous.Tweening/Tween/onStop\">onStop</a>: Invoked when the tween is stopped</li>\n<li><a href=\"/com.zigurous.tweening@3.0.0/api/Zigurous.Tweening/Tween/onLoop\">onLoop</a>: Invoked when the tween is looped</li>\n<li><a href=\"/com.zigurous.tweening@3.0.0/api/Zigurous.Tweening/Tween/onComplete\">onComplete</a>: Invoked when the tween is completed</li>\n<li><a href=\"/com.zigurous.tweening@3.0.0/api/Zigurous.Tweening/Tween/onKill\">onKill</a>: Invoked when the tween is killed</li>\n</ul>\n<hr/>\n<h2>üó£Ô∏è Assigning callbacks</h2>\n<p>Tween callbacks can be assigned with delegates or lambdas. They have no parameters or return types. You can also use <a href=\"/com.zigurous.tweening@3.0.0/manual/property-chaining\">property chaining</a> to make it easier to set multiple callbacks.</p>\n<pre><code class=\"language-csharp\">// assigning callbacks with functions\r\ntween.onUpdate += OnTweenUpdated\r\ntween.onStart += OnTweenStarted;\r\ntween.onStop += OnTweenStopped;\r\ntween.onLoop += OnTweenLooped;\r\ntween.onComplete += OnTweenCompleted;\r\ntween.onKill += OnTweenKilled;\n</code></pre>\n<pre><code class=\"language-csharp\">// assigning callbacks with lambdas\r\ntween.onUpdate += () => Debug.Log(\"Updated\");\r\ntween.onStart += () => Debug.Log(\"Started\");\r\ntween.onStop += () => Debug.Log(\"Stopped\");\r\ntween.onLoop += () => Debug.Log(\"Looped\");\r\ntween.onComplete += () => Debug.Log(\"Completed\");\r\ntween.onKill += () => Debug.Log(\"Killed\");\n</code></pre>\n<pre><code class=\"language-csharp\">// assigning callbacks with property chaining\r\ntransform.TweenPosition(Vector3.zero, 1f)\r\n         .OnUpdate(OnTweenUpdated)\r\n         .OnStart(OnTweenStarted)\r\n         .OnStop(OnTweenStopped)\r\n         .OnLoop(OnTweenLooped)\r\n         .OnComplete(OnTweenCompleted)\r\n         .OnKill(OnTweenKilled);\n</code></pre>\n<h2>üé´ Event Handler</h2>\n<p>One drawback of using delegates is that it produces GC allocations. If you are highly concerned about performance, you can use the <a href=\"/com.zigurous.tweening@3.0.0/api/Zigurous.Tweening/ITweenEventHandler\">ITweenEventHandler</a> interface to avoid allocations.</p>\n<pre><code class=\"language-csharp\">public class Example : MonoBehaviour, ITweenEventHandler\r\n{\r\n    private void Start()\r\n    {\r\n        transform.TweenPosition(Vector3.zero, 1f)\r\n                 .SetEventHandler(this);\r\n    }\r\n\r\n    public void OnTweenUpdate(Tween tween)\r\n    {\r\n        Debug.Log(\"Updated\");\r\n    }\r\n\r\n    public void OnTweenStart(Tween tween)\r\n    {\r\n        Debug.Log(\"Started\");\r\n    }\r\n\r\n    public void OnTweenStop(Tween tween)\r\n    {\r\n        Debug.Log(\"Stopped\");\r\n    }\r\n\r\n    public void OnTweenLoop(Tween tween)\r\n    {\r\n        Debug.Log(\"Looped\");\r\n    }\r\n\r\n    public void OnTweenComplete(Tween tween)\r\n    {\r\n        Debug.Log(\"Completed\");\r\n    }\r\n\r\n    public void OnTweenKill(Tween tween)\r\n    {\r\n        Debug.Log(\"Killed\");\r\n    }\r\n}\n</code></pre>","frontmatter":{"slug":"/manual/events","class":null,"title":""}}},"pageContext":{"id":"badaa07a-b8ef-51fb-8114-4db929aa99f0","frontmatter__slug":"/manual/events","__params":{"frontmatter__slug":"manual"}}},"staticQueryHashes":["1654257956","2011016986","3218290725"]}