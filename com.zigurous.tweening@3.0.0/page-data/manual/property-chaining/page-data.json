{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-js","path":"/manual/property-chaining","result":{"data":{"markdownRemark":{"html":"<h1>Property Chaining</h1>\n<p>Property/method chaining is a technique that allows multiple properties to be assigned in a single statement without requiring a variable to store the intermediate results. This is most useful when creating new tweens. See the <a href=\"/com.zigurous.tweening@3.0.0/api/Zigurous.Tweening/PropertyChaining\">PropertyChaining</a> Scripting API for a full list of properties that can be chained.</p>\n<hr/>\n<h2>⛓️ Examples</h2>\n<pre><code class=\"language-csharp\">// using a tween shortcut\r\ntransform.TweenPosition(Vector3.zero, 1f)\r\n         .SetDelay(3f)\r\n         .SetReversed()\r\n         .SetEase(Ease.CubicInOut)\r\n         .SetLoops(-1, LoopType.PingPong)\r\n         .OnLoop(() => Debug.Log(\"looped!\"));\n</code></pre>\n<pre><code class=\"language-csharp\">// building from scratch\r\nTween tween = new Tweener&#x3C;Transform, Vector3>(transform)\r\n     .SetGetter((target) => target.position)\r\n     .SetSetter((target, value) => target.position = value)\r\n     .SetEndValue(Vector3.zero)\r\n     .SetDuration(1f)\r\n     .SetEase(Ease.QuadOut)\r\n     .OnComplete(() => Debug.Log(\"complete!\"));\n</code></pre>","frontmatter":{"slug":"/manual/property-chaining","class":null,"title":""}}},"pageContext":{"id":"7e8ed3dd-6f17-57de-a2cb-b9abd72436af","frontmatter__slug":"/manual/property-chaining","__params":{"frontmatter__slug":"manual"}}},"staticQueryHashes":["1654257956","2011016986","3218290725"]}