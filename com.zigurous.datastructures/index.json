{
  "api/Zigurous.DataStructures.ArrayExtensions.html": {
    "href": "api/Zigurous.DataStructures.ArrayExtensions.html",
    "title": "Class ArrayExtensions | Data Structures",
    "keywords": "Class ArrayExtensions Exposes extension methods for arrays. Inheritance System.Object ArrayExtensions Namespace : Zigurous.DataStructures Syntax public static class ArrayExtensions Methods Concat<T>(T[], T) Appends an element to the end of an array. Declaration public static T[] Concat<T>(this T[] array, T element) Parameters Type Name Description T[] array The array to add the element to. T element The element to add. Returns Type Description T[] A new array with the added element . Type Parameters Name Description T The type of the array. Concat<T>(T[], T[]) Appends an array of elements to the end of an array. Declaration public static T[] Concat<T>(this T[] array, T[] elements) Parameters Type Name Description T[] array The array to add the elements to. T[] elements The elements to add. Returns Type Description T[] A new array with the added elements . Type Parameters Name Description T The type of the array. Contains<T>(T[], T) Declaration public static bool Contains<T>(this T[] array, T element) where T : IEquatable<T> Parameters Type Name Description T[] array The array to search in. T element The element to search for. Returns Type Description System.Boolean True if the array contains the element . Type Parameters Name Description T The type of the array. ElementAt<T>(T[], Int32) Declaration public static T ElementAt<T>(this T[] array, int index) Parameters Type Name Description T[] array The array to search in. System.Int32 index The index of the element to return. Returns Type Description T The element at the specified index . Type Parameters Name Description T The type of the array. Filter<T>(T[], Predicate<T>) Filters the array to only contain elements that satisfy the predicate . Declaration public static T[] Filter<T>(this T[] array, Predicate<T> predicate) Parameters Type Name Description T[] array The array to filter. System.Predicate <T> predicate The predicate to use. Returns Type Description T[] A new array with the filtered elements removed. Type Parameters Name Description T The type of the array. First<T>(T[]) Declaration public static T First<T>(this T[] array) Parameters Type Name Description T[] array The array to get the element from. Returns Type Description T The first element in the array. Type Parameters Name Description T The type of the array. First<T>(T[], Predicate<T>) Declaration public static T First<T>(this T[] array, Predicate<T> predicate) Parameters Type Name Description T[] array The array to get the element from. System.Predicate <T> predicate The predicate to use. Returns Type Description T The first element in the array that satisfies the predicate . Type Parameters Name Description T The type of the array. FirstNonNull<T>(T[]) Declaration public static T FirstNonNull<T>(this T[] array) where T : class Parameters Type Name Description T[] array The array to get the element from. Returns Type Description T The first non-null element in the array. Type Parameters Name Description T The type of the array. Flatten<T>(T[,,]) Flattens a three-dimensional array into a new one-dimensional array. Declaration public static T[] Flatten<T>(this T[,, ] array) Parameters Type Name Description T[,,] array The three-dimensional array to flatten. Returns Type Description T[] A one-dimensional array that contains all the elements of the three-dimensional array. Type Parameters Name Description T The type of the array. Flatten<T>(T[,]) Flattens a two-dimensional array into a new one-dimensional array. Declaration public static T[] Flatten<T>(this T[, ] array) Parameters Type Name Description T[,] array The two-dimensional array to flatten. Returns Type Description T[] A one-dimensional array that contains all the elements of the two-dimensional array. Type Parameters Name Description T The type of the array. For<T>(T[], Action<(T element, Int32 index)>) Invokes an System.Action<T> for each element in the array. Declaration public static void For<T>(this T[] array, Action<(T element, int index)> action) Parameters Type Name Description T[] array The array to iterate over. System.Action < System.ValueTuple <T, System.Int32 >> action The action to invoke. Type Parameters Name Description T The type of the array. ForEach<T>(T[], Action<T>) Invokes an System.Action<T> for each element in the array. Declaration public static void ForEach<T>(this T[] array, Action<T> action) Parameters Type Name Description T[] array The array to iterate over. System.Action <T> action The action to invoke. Type Parameters Name Description T The type of the array. IndexOf<T>(T[], T) Declaration public static int IndexOf<T>(this T[] array, T element) where T : IEquatable<T> Parameters Type Name Description T[] array The array to search in. T element The element to search for. Returns Type Description System.Int32 The index of the element in the array. Type Parameters Name Description T The type of the array. IsAny<T>(T[], Predicate<T>) Declaration public static bool IsAny<T>(this T[] array, Predicate<T> predicate) Parameters Type Name Description T[] array The array to search in. System.Predicate <T> predicate The predicate to use. Returns Type Description System.Boolean True if any element in the array satisfies the predicate . Type Parameters Name Description T The type of the array. IsEach<T>(T[], Predicate<T>) Declaration public static bool IsEach<T>(this T[] array, Predicate<T> predicate) Parameters Type Name Description T[] array The array to search in. System.Predicate <T> predicate The predicate to use. Returns Type Description System.Boolean True if each element in the array satisfies the predicate . Type Parameters Name Description T The type of the array. IsEmpty(Array) Declaration public static bool IsEmpty(this Array array) Parameters Type Name Description System.Array array The array to check. Returns Type Description System.Boolean True if the array is empty. IsInBounds(Array, Int32) Declaration public static bool IsInBounds(this Array array, int index) Parameters Type Name Description System.Array array The array to check. System.Int32 index The index to check. Returns Type Description System.Boolean True if the index is within the bounds of the array. IsNotEmpty(Array) Declaration public static bool IsNotEmpty(this Array array) Parameters Type Name Description System.Array array The array to check. Returns Type Description System.Boolean True if the array is not empty. IsNotInBounds(Array, Int32) Declaration public static bool IsNotInBounds(this Array array, int index) Parameters Type Name Description System.Array array The array to check. System.Int32 index The index to check. Returns Type Description System.Boolean True if the index is out of bounds of the array. Join<T>(T[], String, Int32, Int32) Joins the elements of the array into a string. Declaration public static string Join<T>(this T[] array, string delimiter, int startIndex = 0, int endIndex = 2147483647) Parameters Type Name Description T[] array The array to join. System.String delimiter The delimiter to use. System.Int32 startIndex The index to start at. System.Int32 endIndex The index to end at. Returns Type Description System.String A string that contains the elements of the array separated by the delimiter . Type Parameters Name Description T The type of the array. Last<T>(T[]) Declaration public static T Last<T>(this T[] array) Parameters Type Name Description T[] array The array to get the element from. Returns Type Description T The last element in the array. Type Parameters Name Description T The type of the array. Last<T>(T[], Predicate<T>) Declaration public static T Last<T>(this T[] array, Predicate<T> predicate) Parameters Type Name Description T[] array The array to get the element from. System.Predicate <T> predicate The predicate to use. Returns Type Description T The last element in the array that satisfies the predicate . Type Parameters Name Description T The type of the array. LastNonNull<T>(T[]) Declaration public static T LastNonNull<T>(this T[] array) where T : class Parameters Type Name Description T[] array The array to get the element from. Returns Type Description T The last non-null element from the end of the array. Type Parameters Name Description T The type of the array. Map<TInput, TOutput>(TInput[], Converter<TInput, TOutput>) Maps the elements of the array to a new array using a given converter . Declaration public static TOutput[] Map<TInput, TOutput>(this TInput[] array, Converter<TInput, TOutput> converter) Parameters Type Name Description TInput[] array The array to map. System.Converter <TInput, TOutput> converter The converter to use. Returns Type Description TOutput[] A new array with the converted elements. Type Parameters Name Description TInput The type of the input array. TOutput The type of the output array. NonNull<T>(T[]) Filters out all null elements from the array. Declaration public static T[] NonNull<T>(this T[] array) where T : class Parameters Type Name Description T[] array The array to filter. Returns Type Description T[] A new array with all null elements removed. Type Parameters Name Description T The type of the array. Random<T>(T[]) Declaration public static T Random<T>(this T[] array) Parameters Type Name Description T[] array The array to get the random element from. Returns Type Description T A random element from the array. Type Parameters Name Description T The type of the array. Reduce<TElement, TSum>(TElement[], TSum, ArrayExtensions.Reducer<TSum, TElement>) Reduces the elements of the array to a single value. Declaration public static TSum Reduce<TElement, TSum>(this TElement[] array, TSum initialValue, ArrayExtensions.Reducer<TSum, TElement> reducer) Parameters Type Name Description TElement[] array The array to reduce. TSum initialValue The initial value to use. ArrayExtensions.Reducer <TSum, TElement> reducer The reducer to use. Returns Type Description TSum The reduced value. Type Parameters Name Description TElement The type of elements in the array. TSum The type of the reduced value. RemoveAt<T>(T[], Int32) Removes the element at the specified index from the array. Declaration public static T[] RemoveAt<T>(this T[] array, int index) Parameters Type Name Description T[] array The array to remove the element from. System.Int32 index The index of the element to remove. Returns Type Description T[] A new array with the element removed. Type Parameters Name Description T The type of the array. Reverse<T>(T[]) Reverses the order of the elements in the array. Declaration public static void Reverse<T>(this T[] array) Parameters Type Name Description T[] array The array to reverse. Type Parameters Name Description T The type of the array. Reversed<T>(T[]) Reverses the order of the elements in the array. Declaration public static T[] Reversed<T>(this T[] array) Parameters Type Name Description T[] array The array to reverse. Returns Type Description T[] A new array with the order of the elements reversed. Type Parameters Name Description T The type of the array. Slice<T>(T[], Int32) Declaration public static T[] Slice<T>(this T[] array, int amount) Parameters Type Name Description T[] array The array to slice. System.Int32 amount The amount of elements to slice. Returns Type Description T[] A slice of the array with the specified amount of elements. Type Parameters Name Description T The type of the array. Sort<T>(T[], Comparison<T>) Sorts the elements of the array. Declaration public static void Sort<T>(this T[] array, Comparison<T> comparison) Parameters Type Name Description T[] array The array to sort. System.Comparison <T> comparison The comparison to use. Type Parameters Name Description T The type of the array. Where<T>(T[], Predicate<T>) Filters the array to only contain elements that satisfy the predicate . Declaration public static T[] Where<T>(this T[] array, Predicate<T> predicate) Parameters Type Name Description T[] array The array to filter. System.Predicate <T> predicate The predicate to use. Returns Type Description T[] A new array with the filtered elements removed. Type Parameters Name Description T The type of the array. WrapIndex(Array, Int32) Wraps the index in the array to the other end. Declaration public static int WrapIndex(this Array array, int index) Parameters Type Name Description System.Array array The array to wrap. System.Int32 index The index to wrap. Returns Type Description System.Int32 The wrapped index."
  },
  "api/Zigurous.DataStructures.ArrayExtensions.Reducer-2.html": {
    "href": "api/Zigurous.DataStructures.ArrayExtensions.Reducer-2.html",
    "title": "Delegate ArrayExtensions.Reducer<TSum, TElement> | Data Structures",
    "keywords": "Delegate ArrayExtensions.Reducer<TSum, TElement> A function delegate that reduces an array into a single value. Namespace : Zigurous.DataStructures Syntax public delegate TSum Reducer<TSum, TElement>(TSum sum, TElement element); Parameters Type Name Description TSum sum The current sum. TElement element The current element being reduced. Returns Type Description TSum The reduced value. Type Parameters Name Description TSum The type of the reduced value. TElement The type of elements in the array."
  },
  "api/Zigurous.DataStructures.Bitmask.html": {
    "href": "api/Zigurous.DataStructures.Bitmask.html",
    "title": "Struct Bitmask | Data Structures",
    "keywords": "Struct Bitmask A bitmask representation that can be used for bitwise operations. A bitmask is a set of bits that can be set or cleared. Namespace : Zigurous.DataStructures Syntax [Serializable] public struct Bitmask : IEquatable<Bitmask>, IEquatable<int> Constructors Bitmask(Int32) Creates a new Bitmask from the given 32-bit integer. Declaration public Bitmask(int mask) Parameters Type Name Description System.Int32 mask The 32-bit integer to represent as a bitmask. Methods Change(Int32, Int32) Sets the nth bit of the bitmask to x. Declaration public void Change(int n, int x) Parameters Type Name Description System.Int32 n The nth bit to set. System.Int32 x The value to set the bit to. Clear(Int32) Sets the nth bit of the bitmask to 0. Declaration public void Clear(int n) Parameters Type Name Description System.Int32 n The nth bit to clear. Equals(Int32) Declaration public bool Equals(int other) Parameters Type Name Description System.Int32 other The bitmask to compare to. Returns Type Description System.Boolean True if the bitmask is equal to the other . Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other The object to compare to. Returns Type Description System.Boolean True if the bitmask is equal to the other . Overrides System.ValueType.Equals(System.Object) Equals(Bitmask) Declaration public bool Equals(Bitmask other) Parameters Type Name Description Bitmask other The bitmask to compare to. Returns Type Description System.Boolean True if the bitmask is equal to the other . Get(Int32) Declaration public int Get(int n) Parameters Type Name Description System.Int32 n The nth bit to get. Returns Type Description System.Int32 The nth bit of the bitmask. GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 The hash code of the bitmask. Overrides System.ValueType.GetHashCode() Has(Int32) Declaration public bool Has(int n) Parameters Type Name Description System.Int32 n The nth bit to check for. Returns Type Description System.Boolean True if the nth bit of the bitmask is set. HasAnyFlag(Int32) Declaration public bool HasAnyFlag(int flags) Parameters Type Name Description System.Int32 flags The flags to check for. Returns Type Description System.Boolean True if the bitmask contains any of the flags . (mask & flags) != 0 HasFlag(Int32) Declaration public bool HasFlag(int flag) Parameters Type Name Description System.Int32 flag The flag to check for. Returns Type Description System.Boolean True if the bitmask contains the flag . (mask & flag) == flag HasOnlyFlags(Int32) Declaration public bool HasOnlyFlags(int flags) Parameters Type Name Description System.Int32 flags The flags to check for. Returns Type Description System.Boolean True if the bitmask contains only the given flags and no other flags. ((mask ^ flags) & flags) == 0 Set(Int32) Sets the nth bit of the bitmask to 1. Declaration public void Set(int n) Parameters Type Name Description System.Int32 n The nth bit to set. Toggle(Int32) Toggles the nth bit of the bitmask. Declaration public void Toggle(int n) Parameters Type Name Description System.Int32 n The nth bit to toggle. ToString() Declaration public override string ToString() Returns Type Description System.String The string representation of the bitmask. Overrides System.ValueType.ToString() Operators BitwiseAnd(Bitmask, Bitmask) Declaration public static Bitmask operator &(Bitmask a, Bitmask b) Parameters Type Name Description Bitmask a Bitmask b Returns Type Description Bitmask BitwiseOr(Bitmask, Bitmask) Declaration public static Bitmask operator |(Bitmask a, Bitmask b) Parameters Type Name Description Bitmask a Bitmask b Returns Type Description Bitmask Equality(Int32, Bitmask) Declaration public static bool operator ==(int lhs, Bitmask rhs) Parameters Type Name Description System.Int32 lhs Bitmask rhs Returns Type Description System.Boolean Equality(Bitmask, Int32) Declaration public static bool operator ==(Bitmask lhs, int rhs) Parameters Type Name Description Bitmask lhs System.Int32 rhs Returns Type Description System.Boolean Equality(Bitmask, Bitmask) Declaration public static bool operator ==(Bitmask lhs, Bitmask rhs) Parameters Type Name Description Bitmask lhs Bitmask rhs Returns Type Description System.Boolean ExclusiveOr(Bitmask, Bitmask) Declaration public static Bitmask operator ^(Bitmask a, Bitmask b) Parameters Type Name Description Bitmask a Bitmask b Returns Type Description Bitmask Implicit(Int32 to Bitmask) Declaration public static implicit operator Bitmask(int value) Parameters Type Name Description System.Int32 value Returns Type Description Bitmask Implicit(Bitmask to Int32) Declaration public static implicit operator int (Bitmask value) Parameters Type Name Description Bitmask value Returns Type Description System.Int32 Inequality(Int32, Bitmask) Declaration public static bool operator !=(int lhs, Bitmask rhs) Parameters Type Name Description System.Int32 lhs Bitmask rhs Returns Type Description System.Boolean Inequality(Bitmask, Int32) Declaration public static bool operator !=(Bitmask lhs, int rhs) Parameters Type Name Description Bitmask lhs System.Int32 rhs Returns Type Description System.Boolean Inequality(Bitmask, Bitmask) Declaration public static bool operator !=(Bitmask lhs, Bitmask rhs) Parameters Type Name Description Bitmask lhs Bitmask rhs Returns Type Description System.Boolean LeftShift(Bitmask, Int32) Declaration public static Bitmask operator <<(Bitmask a, int b) Parameters Type Name Description Bitmask a System.Int32 b Returns Type Description Bitmask OnesComplement(Bitmask) Declaration public static Bitmask operator ~(Bitmask a) Parameters Type Name Description Bitmask a Returns Type Description Bitmask RightShift(Bitmask, Int32) Declaration public static Bitmask operator >>(Bitmask a, int b) Parameters Type Name Description Bitmask a System.Int32 b Returns Type Description Bitmask"
  },
  "api/Zigurous.DataStructures.Bool3.html": {
    "href": "api/Zigurous.DataStructures.Bool3.html",
    "title": "Struct Bool3 | Data Structures",
    "keywords": "Struct Bool3 Stores a tuple of 3 booleans. Namespace : Zigurous.DataStructures Syntax [Serializable] public struct Bool3 : IEquatable<Bool3> Constructors Bool3(Boolean, Boolean, Boolean) Creates a new Bool3 with the specified values. Declaration public Bool3(bool x = false, bool y = false, bool z = false) Parameters Type Name Description System.Boolean x The X component. System.Boolean y The Y component. System.Boolean z The Z component. Fields x The X component. Declaration public bool x y The Y component. Declaration public bool y z The Z component. Declaration public bool z Properties False Shorthand for writing Bool3(false, false, false). Declaration public static readonly Bool3 False { get; } Item[Int32] Declaration public bool this[int index] { get; set; } Parameters Type Name Description System.Int32 index True Shorthand for writing Bool3(true, true, true). Declaration public static readonly Bool3 True { get; } X Shorthand for writing Bool3(true, false, false). Declaration public static readonly Bool3 X { get; } Y Shorthand for writing Bool3(false, true, false). Declaration public static readonly Bool3 Y { get; } Z Shorthand for writing Bool3(false, false, true). Declaration public static readonly Bool3 Z { get; } Methods Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other The object to compare to. Returns Type Description System.Boolean True if the tuple is equal to the other . Overrides System.ValueType.Equals(System.Object) Equals(Bool3) Declaration public bool Equals(Bool3 other) Parameters Type Name Description Bool3 other The tuple to compare to. Returns Type Description System.Boolean True if the tuple is equal to the other . GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 The hash code of the tuple. Overrides System.ValueType.GetHashCode() ToString() Declaration public override string ToString() Returns Type Description System.String The string representation of the tuple. Overrides System.ValueType.ToString() Operators BitwiseAnd(Bool3, Bool3) Declaration public static Bool3 operator &(Bool3 a, Bool3 b) Parameters Type Name Description Bool3 a Bool3 b Returns Type Description Bool3 BitwiseOr(Bool3, Bool3) Declaration public static Bool3 operator |(Bool3 a, Bool3 b) Parameters Type Name Description Bool3 a Bool3 b Returns Type Description Bool3 Equality(Bool3, Bool3) Declaration public static bool operator ==(Bool3 lhs, Bool3 rhs) Parameters Type Name Description Bool3 lhs Bool3 rhs Returns Type Description System.Boolean ExclusiveOr(Bool3, Bool3) Declaration public static Bool3 operator ^(Bool3 a, Bool3 b) Parameters Type Name Description Bool3 a Bool3 b Returns Type Description Bool3 Inequality(Bool3, Bool3) Declaration public static bool operator !=(Bool3 lhs, Bool3 rhs) Parameters Type Name Description Bool3 lhs Bool3 rhs Returns Type Description System.Boolean LogicalNot(Bool3) Declaration public static Bool3 operator !(Bool3 a) Parameters Type Name Description Bool3 a Returns Type Description Bool3"
  },
  "api/Zigurous.DataStructures.ClampedRange.html": {
    "href": "api/Zigurous.DataStructures.ClampedRange.html",
    "title": "Struct ClampedRange | Data Structures",
    "keywords": "Struct ClampedRange A range of values clamped between a lower and upper bound. Implements INumberRange < System.Single > IRange < System.Single > Namespace : Zigurous.DataStructures Syntax [Serializable] public struct ClampedRange : INumberRange<float>, IRange<float> Constructors ClampedRange(Single, Single, Single, Single) Creates a new clamped range with the specified values. Declaration public ClampedRange(float min = 0F, float max = 1F, float clampLower = 0F, float clampUpper = 1F) Parameters Type Name Description System.Single min The lower bound of the range. System.Single max The upper bound of the range. System.Single clampLower The lower clamping bound of the range. System.Single clampUpper The upper clamping bound of the range. Fields clamp The clamping values of the range. Declaration public FloatRange clamp Properties Delta Declaration public readonly float Delta { get; } Property Value Type Description System.Single The difference between the maximum and minimum values. max The upper bound of the range. Declaration public float max { get; set; } Median Declaration public readonly float Median { get; } Property Value Type Description System.Single The median value of the range. min The lower bound of the range. Declaration public float min { get; set; } Methods Clamp(Single) Declaration public float Clamp(float value) Parameters Type Name Description System.Single value The value to clamp. Returns Type Description System.Single The value clamped to the range. Includes(Single) Declaration public bool Includes(float value) Parameters Type Name Description System.Single value The value to check. Returns Type Description System.Boolean True if the value is in the range. Includes(Single, Boolean, Boolean) Declaration public bool Includes(float value, bool includeMin, bool includeMax) Parameters Type Name Description System.Single value The value to check. System.Boolean includeMin The minimum value is inclusive if true, exclusive if false. System.Boolean includeMax The maximum value is inclusive if true, exclusive if false. Returns Type Description System.Boolean True if the value is in the range. Random() Declaration public float Random() Returns Type Description System.Single A random value in the range. Implements INumberRange<T> IRange<T>"
  },
  "api/Zigurous.DataStructures.ColorRange.html": {
    "href": "api/Zigurous.DataStructures.ColorRange.html",
    "title": "Struct ColorRange | Data Structures",
    "keywords": "Struct ColorRange A range of Color values. Implements INumberRange < Color > IRange < Color > Namespace : Zigurous.DataStructures Syntax [Serializable] public struct ColorRange : INumberRange<Color>, IRange<Color> Constructors ColorRange(Color, Color) Creates a new color range with the specified values. Declaration public ColorRange(Color min, Color max) Parameters Type Name Description Color min The lower bound of the range. Color max The upper bound of the range. Properties black Shorthand for writing ColorRange(Color.black, Color.black). Declaration public static readonly ColorRange black { get; } blackToWhite Shorthand for writing ColorRange(Color.black, Color.white). Declaration public static readonly ColorRange blackToWhite { get; } Delta Declaration public readonly Color Delta { get; } Property Value Type Description Color The difference between the maximum and minimum values. fadeIn Shorthand for writing ColorRange(Color(0,0,0,0), Color(0,0,0,1)). Declaration public static readonly ColorRange fadeIn { get; } fadeOut Shorthand for writing ColorRange(Color(0,0,0,1), Color(0,0,0,0)). Declaration public static readonly ColorRange fadeOut { get; } max The upper bound of the range. Declaration public Color max { get; set; } Median Declaration public readonly Color Median { get; } Property Value Type Description Color The median value of the range. min The lower bound of the range. Declaration public Color min { get; set; } transparent Shorthand for writing ColorRange(Color(0,0,0,0), Color(0,0,0,0)). Declaration public static readonly ColorRange transparent { get; } white Shorthand for writing ColorRange(Color.white, Color.white). Declaration public static readonly ColorRange white { get; } whiteToBlack Shorthand for writing ColorRange(Color.white, Color.black). Declaration public static readonly ColorRange whiteToBlack { get; } Methods Clamp(Color) Declaration public Color Clamp(Color value) Parameters Type Name Description Color value The value to clamp. Returns Type Description Color The value clamped to the range. Includes(Color) Declaration public bool Includes(Color value) Parameters Type Name Description Color value The value to check. Returns Type Description System.Boolean True if the value is in the range. Includes(Color, Boolean, Boolean) Declaration public bool Includes(Color value, bool includeMin, bool includeMax) Parameters Type Name Description Color value The value to check. System.Boolean includeMin The minimum value is inclusive if true, exclusive if false. System.Boolean includeMax The maximum value is inclusive if true, exclusive if false. Returns Type Description System.Boolean True if the value is in the range. Random() Declaration public Color Random() Returns Type Description Color A random value in the range. Implements INumberRange<T> IRange<T>"
  },
  "api/Zigurous.DataStructures.ComparableExtensions.html": {
    "href": "api/Zigurous.DataStructures.ComparableExtensions.html",
    "title": "Class ComparableExtensions | Data Structures",
    "keywords": "Class ComparableExtensions Exposes extension methods for System.IComparable`1 . Inheritance System.Object ComparableExtensions Namespace : Zigurous.DataStructures Syntax public static class ComparableExtensions Methods IsBetween<T>(T, T, T, Boolean, Boolean) Declaration public static bool IsBetween<T>(this T value, T min, T max, bool includeMin, bool includeMax) where T : IComparable<T> Parameters Type Name Description T value The value to check. T min The minimum value. T max The maximum value. System.Boolean includeMin The minimum value is inclusive if true, exclusive if false. System.Boolean includeMax The maximum value is inclusive if true, exclusive if false. Returns Type Description System.Boolean True if the value is between the min and max . Type Parameters Name Description T The type of value to check."
  },
  "api/Zigurous.DataStructures.DictionaryExtensions.html": {
    "href": "api/Zigurous.DataStructures.DictionaryExtensions.html",
    "title": "Class DictionaryExtensions | Data Structures",
    "keywords": "Class DictionaryExtensions Exposes extension methods for dictionaries. Inheritance System.Object DictionaryExtensions Namespace : Zigurous.DataStructures Syntax public static class DictionaryExtensions Methods Where<TKey, TValue>(Dictionary<TKey, TValue>, Predicate<KeyValuePair<TKey, TValue>>) Declaration public static Dictionary<TKey, TValue> Where<TKey, TValue>(this Dictionary<TKey, TValue> dictionary, Predicate<KeyValuePair<TKey, TValue>> predicate) Parameters Type Name Description Dictionary <TKey, TValue> dictionary The dictionary to filter. System.Predicate < KeyValuePair <TKey, TValue>> predicate The predicate to use. Returns Type Description Dictionary <TKey, TValue> A new dictionary containing only the key-value pairs that match the predicate . Type Parameters Name Description TKey The type of the keys in the dictionary. TValue The type of the values in the dictionary. Where<TKey, TValue>(Dictionary<TKey, TValue>.KeyCollection, Predicate<TKey>) Declaration public static List<TKey> Where<TKey, TValue>(this Dictionary<TKey, TValue>.KeyCollection keys, Predicate<TKey> predicate) Parameters Type Name Description Dictionary.KeyCollection <> keys The keys to filter. System.Predicate <TKey> predicate The predicate to use. Returns Type Description List <TKey> A new list containing only the keys that match the predicate . Type Parameters Name Description TKey The type of the keys in the dictionary. TValue The type of the values in the dictionary. Where<TKey, TValue>(Dictionary<TKey, TValue>.ValueCollection, Predicate<TValue>) Declaration public static List<TValue> Where<TKey, TValue>(this Dictionary<TKey, TValue>.ValueCollection values, Predicate<TValue> predicate) Parameters Type Name Description Dictionary.ValueCollection <> values The values to filter. System.Predicate <TValue> predicate The predicate to use. Returns Type Description List <TValue> A new list containing only the values that match the predicate . Type Parameters Name Description TKey The type of the keys in the dictionary. TValue The type of the values in the dictionary."
  },
  "api/Zigurous.DataStructures.DoubleAccumulator.html": {
    "href": "api/Zigurous.DataStructures.DoubleAccumulator.html",
    "title": "Class DoubleAccumulator | Data Structures",
    "keywords": "Class DoubleAccumulator Accumulates double values into a single total value. Inheritance System.Object ValueAccumulator < System.Double > DoubleAccumulator Inherited Members ValueAccumulator<Double>.values ValueAccumulator<Double>.total ValueAccumulator<Double>.Count ValueAccumulator<Double>.GetValue(Int32) ValueAccumulator<Double>.SetValue(Double, Int32) ValueAccumulator<Double>.RemoveValue(Int32) ValueAccumulator<Double>.Clear() Namespace : Zigurous.DataStructures Syntax public sealed class DoubleAccumulator : ValueAccumulator<double> Methods Add(Double) Increases the accumulated total by a given value. Declaration protected override double Add(double value) Parameters Type Name Description System.Double value The value to add to the total. Returns Type Description System.Double The new total value. Overrides Zigurous.DataStructures.ValueAccumulator<System.Double>.Add(System.Double) Subtract(Double) Decreases the accumulated total by a given value. Declaration protected override double Subtract(double value) Parameters Type Name Description System.Double value The value to subtract from the total. Returns Type Description System.Double The new total value. Overrides Zigurous.DataStructures.ValueAccumulator<System.Double>.Subtract(System.Double)"
  },
  "api/Zigurous.DataStructures.EulerRange.html": {
    "href": "api/Zigurous.DataStructures.EulerRange.html",
    "title": "Struct EulerRange | Data Structures",
    "keywords": "Struct EulerRange A range of euler values. Implements INumberRange < System.Single > IRange < System.Single > Namespace : Zigurous.DataStructures Syntax [Serializable] public struct EulerRange : INumberRange<float>, IRange<float> Constructors EulerRange(Single, Single) Creates a new euler range with the specified values. Declaration public EulerRange(float min = -360F, float max = 360F) Parameters Type Name Description System.Single min The lower bound of the range. System.Single max The upper bound of the range. Properties Delta Declaration public readonly float Delta { get; } Property Value Type Description System.Single The difference between the maximum and minimum values. fullRange Shorthand for writing EulerRange(-360.0f, 360.0f). Declaration public static readonly EulerRange fullRange { get; } halfRange Shorthand for writing EulerRange(-180.0f, 180.0f). Declaration public static readonly EulerRange halfRange { get; } max The upper bound of the range. Declaration public float max { get; set; } Median Declaration public readonly float Median { get; } Property Value Type Description System.Single The median value of the range. min The lower bound of the range. Declaration public float min { get; set; } pi Shorthand for writing EulerRange(0.0f, 180.0f). Declaration public static readonly EulerRange pi { get; } pi2 Shorthand for writing EulerRange(0.0f, 360.0f). Declaration public static readonly EulerRange pi2 { get; } zero Shorthand for writing EulerRange(0.0f, 0.0f). Declaration public static readonly EulerRange zero { get; } Methods Clamp(Single) Declaration public float Clamp(float value) Parameters Type Name Description System.Single value The value to clamp. Returns Type Description System.Single The value clamped to the range. Includes(Single) Declaration public bool Includes(float value) Parameters Type Name Description System.Single value The value to check. Returns Type Description System.Boolean True if the value is in the range. Includes(Single, Boolean, Boolean) Declaration public bool Includes(float value, bool includeMin, bool includeMax) Parameters Type Name Description System.Single value The value to check. System.Boolean includeMin The minimum value is inclusive if true, exclusive if false. System.Boolean includeMax The maximum value is inclusive if true, exclusive if false. Returns Type Description System.Boolean True if the value is in the range. Random() Declaration public float Random() Returns Type Description System.Single A random value in the range. Wrap(Single) Declaration public float Wrap(float value) Parameters Type Name Description System.Single value The value to wrap. Returns Type Description System.Single The value wrapped in the range. Implements INumberRange<T> IRange<T>"
  },
  "api/Zigurous.DataStructures.FloatAccumulator.html": {
    "href": "api/Zigurous.DataStructures.FloatAccumulator.html",
    "title": "Class FloatAccumulator | Data Structures",
    "keywords": "Class FloatAccumulator Accumulates float values into a single total value. Inheritance System.Object ValueAccumulator < System.Single > FloatAccumulator Inherited Members ValueAccumulator<Single>.values ValueAccumulator<Single>.total ValueAccumulator<Single>.Count ValueAccumulator<Single>.GetValue(Int32) ValueAccumulator<Single>.SetValue(Single, Int32) ValueAccumulator<Single>.RemoveValue(Int32) ValueAccumulator<Single>.Clear() Namespace : Zigurous.DataStructures Syntax public sealed class FloatAccumulator : ValueAccumulator<float> Methods Add(Single) Increases the accumulated total by a given value. Declaration protected override float Add(float value) Parameters Type Name Description System.Single value The value to add to the total. Returns Type Description System.Single The new total value. Overrides Zigurous.DataStructures.ValueAccumulator<System.Single>.Add(System.Single) Subtract(Single) Decreases the accumulated total by a given value. Declaration protected override float Subtract(float value) Parameters Type Name Description System.Single value The value to subtract from the total. Returns Type Description System.Single The new total value. Overrides Zigurous.DataStructures.ValueAccumulator<System.Single>.Subtract(System.Single)"
  },
  "api/Zigurous.DataStructures.FloatRange.html": {
    "href": "api/Zigurous.DataStructures.FloatRange.html",
    "title": "Struct FloatRange | Data Structures",
    "keywords": "Struct FloatRange A range of float values. Implements INumberRange < System.Single > IRange < System.Single > Namespace : Zigurous.DataStructures Syntax [Serializable] public struct FloatRange : INumberRange<float>, IRange<float> Constructors FloatRange(Single, Single) Creates a new float range with the specified values. Declaration public FloatRange(float min = 0F, float max = 1F) Parameters Type Name Description System.Single min The lower bound of the range. System.Single max The upper bound of the range. Properties Delta Declaration public readonly float Delta { get; } Property Value Type Description System.Single The difference between the maximum and minimum values. max The upper bound of the range. Declaration public float max { get; set; } Median Declaration public readonly float Median { get; } Property Value Type Description System.Single The median value of the range. min The lower bound of the range. Declaration public float min { get; set; } minMax Shorthand for writing FloatRange(float.MinValue, float.MaxValue). Declaration public static readonly FloatRange minMax { get; } negative Shorthand for writing FloatRange(float.MinValue, 0.0f). Declaration public static readonly FloatRange negative { get; } one Shorthand for writing FloatRange(1.0f, 1.0f). Declaration public static readonly FloatRange one { get; } percent Shorthand for writing FloatRange(0.0f, 1.0f). Declaration public static readonly FloatRange percent { get; } positive Shorthand for writing FloatRange(0.0f, float.MaxValue). Declaration public static readonly FloatRange positive { get; } zero Shorthand for writing FloatRange(0.0f, 0.0f). Declaration public static readonly FloatRange zero { get; } Methods Clamp(Single) Declaration public float Clamp(float value) Parameters Type Name Description System.Single value The value to clamp. Returns Type Description System.Single The value clamped to the range. Includes(Single) Declaration public bool Includes(float value) Parameters Type Name Description System.Single value The value to check. Returns Type Description System.Boolean True if the value is in the range. Includes(Single, Boolean, Boolean) Declaration public bool Includes(float value, bool includeMin, bool includeMax) Parameters Type Name Description System.Single value The value to check. System.Boolean includeMin The minimum value is inclusive if true, exclusive if false. System.Boolean includeMax The maximum value is inclusive if true, exclusive if false. Returns Type Description System.Boolean True if the value is in the range. Random() Declaration public float Random() Returns Type Description System.Single A random value in the range. Implements INumberRange<T> IRange<T>"
  },
  "api/Zigurous.DataStructures.GridSize.html": {
    "href": "api/Zigurous.DataStructures.GridSize.html",
    "title": "Struct GridSize | Data Structures",
    "keywords": "Struct GridSize Stores the size of a grid. Namespace : Zigurous.DataStructures Syntax [Serializable] public struct GridSize : IEquatable<GridSize>, IComparable<GridSize> Constructors GridSize(Int32) Creates a new grid size with uniform rows and columns. Declaration public GridSize(int size) Parameters Type Name Description System.Int32 size The uniform size of the grid. GridSize(Int32, Int32) Creates a new grid size with the given rows and columns . Declaration public GridSize(int rows = 0, int columns = 0) Parameters Type Name Description System.Int32 rows The number of rows in the grid. System.Int32 columns The number of columns in the grid. Fields columns The number of columns in the grid. Declaration public int columns rows The number of rows in the grid. Declaration public int rows Properties Area Declaration public readonly int Area { get; } Property Value Type Description System.Int32 The area of the grid (rows * columns). max Shorthand for writing GridSize(int.MaxValue, int.MaxValue). Declaration public static readonly GridSize max { get; } one Shorthand for writing GridSize(1, 1). Declaration public static readonly GridSize one { get; } sq1024 Shorthand for writing GridSize(1024). Declaration public static readonly GridSize sq1024 { get; } sq128 Shorthand for writing GridSize(128). Declaration public static readonly GridSize sq128 { get; } sq16 Shorthand for writing GridSize(16). Declaration public static readonly GridSize sq16 { get; } sq2 Shorthand for writing GridSize(2). Declaration public static readonly GridSize sq2 { get; } sq2048 Shorthand for writing GridSize(2048). Declaration public static readonly GridSize sq2048 { get; } sq256 Shorthand for writing GridSize(256). Declaration public static readonly GridSize sq256 { get; } sq32 Shorthand for writing GridSize(32). Declaration public static readonly GridSize sq32 { get; } sq4 Shorthand for writing GridSize(4). Declaration public static readonly GridSize sq4 { get; } sq4096 Shorthand for writing GridSize(4096). Declaration public static readonly GridSize sq4096 { get; } sq512 Shorthand for writing GridSize(512). Declaration public static readonly GridSize sq512 { get; } sq64 Shorthand for writing GridSize(64). Declaration public static readonly GridSize sq64 { get; } sq8 Shorthand for writing GridSize(8). Declaration public static readonly GridSize sq8 { get; } sq8192 Shorthand for writing GridSize(8192). Declaration public static readonly GridSize sq8192 { get; } zero Shorthand for writing GridSize(0, 0). Declaration public static readonly GridSize zero { get; } Methods CompareTo(GridSize) System.IComparable`1.CompareTo(`0) . Declaration public int CompareTo(GridSize other) Parameters Type Name Description GridSize other The grid size to compare to. Returns Type Description System.Int32 Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other The object to compare to. Returns Type Description System.Boolean True if the grid size is equal to the other . Overrides System.ValueType.Equals(System.Object) Equals(GridSize) Declaration public bool Equals(GridSize other) Parameters Type Name Description GridSize other The grid size to compare to. Returns Type Description System.Boolean True if the grid size is equal to the other . GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 The hash code of the grid size. Overrides System.ValueType.GetHashCode() ToString() Declaration public override string ToString() Returns Type Description System.String The string representation of the grid size. Overrides System.ValueType.ToString() Operators Equality(GridSize, GridSize) Declaration public static bool operator ==(GridSize lhs, GridSize rhs) Parameters Type Name Description GridSize lhs GridSize rhs Returns Type Description System.Boolean Inequality(GridSize, GridSize) Declaration public static bool operator !=(GridSize lhs, GridSize rhs) Parameters Type Name Description GridSize lhs GridSize rhs Returns Type Description System.Boolean"
  },
  "api/Zigurous.DataStructures.HashCode.html": {
    "href": "api/Zigurous.DataStructures.HashCode.html",
    "title": "Class HashCode | Data Structures",
    "keywords": "Class HashCode Combines multiple hash codes into a single value. Inheritance System.Object HashCode Namespace : Zigurous.DataStructures Syntax public static class HashCode Methods Combine(Int32, Int32) Combines two hash codes into one unique hash. Declaration public static int Combine(int hash1, int hash2) Parameters Type Name Description System.Int32 hash1 The first hash. System.Int32 hash2 The second hash. Returns Type Description System.Int32 The combined hash code. Combine(Int32, Int32, Int32) Combines three hash codes into one unique hash. Declaration public static int Combine(int hash1, int hash2, int hash3) Parameters Type Name Description System.Int32 hash1 The first hash. System.Int32 hash2 The second hash. System.Int32 hash3 The third hash. Returns Type Description System.Int32 The combined hash code. Combine(Int32, Int32, Int32, Int32) Combines four hash codes into one unique hash. Declaration public static int Combine(int hash1, int hash2, int hash3, int hash4) Parameters Type Name Description System.Int32 hash1 The first hash. System.Int32 hash2 The second hash. System.Int32 hash3 The third hash. System.Int32 hash4 The fourth hash. Returns Type Description System.Int32 The combined hash code."
  },
  "api/Zigurous.DataStructures.HashSetExtensions.html": {
    "href": "api/Zigurous.DataStructures.HashSetExtensions.html",
    "title": "Class HashSetExtensions | Data Structures",
    "keywords": "Class HashSetExtensions Exposes extension methods for hash sets. Inheritance System.Object HashSetExtensions Namespace : Zigurous.DataStructures Syntax public static class HashSetExtensions Methods First<T>(HashSet<T>, Predicate<T>) Declaration public static T First<T>(this HashSet<T> set, Predicate<T> predicate) Parameters Type Name Description HashSet <T> set The hash set to get the element from. System.Predicate <T> predicate The predicate to use. Returns Type Description T The first element in the hash set that satisfies the predicate . Type Parameters Name Description T The type of the elements in the hash set. ForEach<T>(HashSet<T>, Action<T>) Invokes an action on each element in the hash set. Declaration public static void ForEach<T>(this HashSet<T> set, Action<T> action) Parameters Type Name Description HashSet <T> set The hash set to iterate over. System.Action <T> action The action to invoke on each element. Type Parameters Name Description T The type of the elements in the hash set. IsAny<T>(HashSet<T>, Predicate<T>) Declaration public static bool IsAny<T>(this HashSet<T> set, Predicate<T> predicate) Parameters Type Name Description HashSet <T> set The hash set to check. System.Predicate <T> predicate The predicate to use. Returns Type Description System.Boolean True if any element in the hash set satisfies the predicate . Type Parameters Name Description T The type of the elements in the hash set. IsEach<T>(HashSet<T>, Predicate<T>) Declaration public static bool IsEach<T>(this HashSet<T> set, Predicate<T> predicate) Parameters Type Name Description HashSet <T> set The hash set to check. System.Predicate <T> predicate The predicate to use. Returns Type Description System.Boolean True if each element in the hash set satisfies the predicate . Type Parameters Name Description T The type of the elements in the hash set."
  },
  "api/Zigurous.DataStructures.html": {
    "href": "api/Zigurous.DataStructures.html",
    "title": "Namespace Zigurous.DataStructures | Data Structures",
    "keywords": "Namespace Zigurous.DataStructures Classes ArrayExtensions Exposes extension methods for arrays. ComparableExtensions Exposes extension methods for System.IComparable`1 . DictionaryExtensions Exposes extension methods for dictionaries. DoubleAccumulator Accumulates double values into a single total value. FloatAccumulator Accumulates float values into a single total value. HashCode Combines multiple hash codes into a single value. HashSetExtensions Exposes extension methods for hash sets. Identifier Generates identifiers. IntAccumulator Accumulates int values into a single total value. ListExtensions Exposes extension methods for lists. Modules<T> Manages a list of registered entity modules. ObjectPool<T> Reuses objects from a shared pool to prevent instantiating new objects. The object pool can have a set capacity or it can grow in size. Optionally, objects that are currently active can be reused when the pool has reached capacity. QuaternionAccumulator Accumulates Quaternion values into a single total value. SingletonBehavior<T> A singleton behavior that can be used to ensure that only one instance of a class is created. SortedSetExtensions Exposes extension methods for sorted sets. StringExtensions Exposes extension methods for strings. ValueAccumulator<T> Accumulates a set of stored values into a single total value. Vector2Accumulator Accumulates Vector2 values into a single total value. Vector2IntAccumulator Accumulates Vector2Int values into a single total value. Vector3Accumulator Accumulates Vector3 values into a single total value. Vector3IntAccumulator Accumulates Vector3Int values into a single total value. Vector4Accumulator Accumulates Vector4 values into a single total value. Structs Bitmask A bitmask representation that can be used for bitwise operations. A bitmask is a set of bits that can be set or cleared. Bool3 Stores a tuple of 3 booleans. ClampedRange A range of values clamped between a lower and upper bound. ColorRange A range of Color values. EulerRange A range of euler values. FloatRange A range of float values. GridSize Stores the size of a grid. IntRange A range of int values. Quantity<T> Stores a quantity of a given entity type. Range<T> A range of values. Size Stores the size of an entity. StringExtensions.NumberAbbreviation Represents how a number is abbreviated to a string. UIntRange A range of uint values. UnitIntervalRange A range of values between zero and one. Vector2Range A range of Vector2 values. Vector3Range A range of Vector3 values. Vector4Range A range of Vector4 values. Interfaces IModular<T> A type that can register and unregister modules. INumberRange<T> A generic interface for a range of number values. IObjectPool<T> A type that can retrieve and recycle objects from a shared pool. IRange<T> A generic interface for a range of values. Delegates ArrayExtensions.Reducer<TSum, TElement> A function delegate that reduces an array into a single value. ListExtensions.Reducer<TSum, TItem> A function delegate that reduces a list into a single value. ObjectPool<T>.Generator A function delegate that creates a new instance of an object."
  },
  "api/Zigurous.DataStructures.Identifier.html": {
    "href": "api/Zigurous.DataStructures.Identifier.html",
    "title": "Class Identifier | Data Structures",
    "keywords": "Class Identifier Generates identifiers. Inheritance System.Object Identifier Namespace : Zigurous.DataStructures Syntax public static class Identifier Methods Temporal() Creates a identifier based on unix time. Since time is always increasing, this value will be different than generations made in previous cycles. Declaration public static long Temporal() Returns Type Description System.Int64 The temporal identifier. Remarks This should not be used to guarentee uniqueness since ids generated within the same cycle will usually be identical."
  },
  "api/Zigurous.DataStructures.IModular-1.html": {
    "href": "api/Zigurous.DataStructures.IModular-1.html",
    "title": "Interface IModular<T> | Data Structures",
    "keywords": "Interface IModular<T> A type that can register and unregister modules. Namespace : Zigurous.DataStructures Syntax public interface IModular<T> where T : class Type Parameters Name Description T The type of module that can be registered. Methods IsRegistered(T) Declaration bool IsRegistered(T module) Parameters Type Name Description T module The module to check for registration. Returns Type Description System.Boolean True if the module is registered, false if the module is not registered. Register(T) Registers a module to the entity. Declaration bool Register(T module) Parameters Type Name Description T module The module to register. Returns Type Description System.Boolean True if the module was registered, false if the module cannot be registered. Unregister(T) Unregisters a module from the entity. Declaration bool Unregister(T module) Parameters Type Name Description T module The module to unregister. Returns Type Description System.Boolean True if the module was unregistered, false if the module cannot be unregistered."
  },
  "api/Zigurous.DataStructures.IntAccumulator.html": {
    "href": "api/Zigurous.DataStructures.IntAccumulator.html",
    "title": "Class IntAccumulator | Data Structures",
    "keywords": "Class IntAccumulator Accumulates int values into a single total value. Inheritance System.Object ValueAccumulator < System.Int32 > IntAccumulator Inherited Members ValueAccumulator<Int32>.values ValueAccumulator<Int32>.total ValueAccumulator<Int32>.Count ValueAccumulator<Int32>.GetValue(Int32) ValueAccumulator<Int32>.SetValue(Int32, Int32) ValueAccumulator<Int32>.RemoveValue(Int32) ValueAccumulator<Int32>.Clear() Namespace : Zigurous.DataStructures Syntax public sealed class IntAccumulator : ValueAccumulator<int> Methods Add(Int32) Increases the accumulated total by a given value. Declaration protected override int Add(int value) Parameters Type Name Description System.Int32 value The value to add to the total. Returns Type Description System.Int32 The new total value. Overrides Zigurous.DataStructures.ValueAccumulator<System.Int32>.Add(System.Int32) Subtract(Int32) Decreases the accumulated total by a given value. Declaration protected override int Subtract(int value) Parameters Type Name Description System.Int32 value The value to subtract from the total. Returns Type Description System.Int32 The new total value. Overrides Zigurous.DataStructures.ValueAccumulator<System.Int32>.Subtract(System.Int32)"
  },
  "api/Zigurous.DataStructures.IntRange.html": {
    "href": "api/Zigurous.DataStructures.IntRange.html",
    "title": "Struct IntRange | Data Structures",
    "keywords": "Struct IntRange A range of int values. Implements INumberRange < System.Int32 > IRange < System.Int32 > Namespace : Zigurous.DataStructures Syntax [Serializable] public struct IntRange : INumberRange<int>, IRange<int> Constructors IntRange(Int32, Int32) Creates a new int range with the specified values. Declaration public IntRange(int min, int max) Parameters Type Name Description System.Int32 min The lower bound of the range. System.Int32 max The upper bound of the range. Properties Delta Declaration public readonly int Delta { get; } Property Value Type Description System.Int32 The difference between the maximum and minimum values. max The upper bound of the range. Declaration public int max { get; set; } Median Declaration public readonly int Median { get; } Property Value Type Description System.Int32 The median value of the range. min The lower bound of the range. Declaration public int min { get; set; } minMax Shorthand for writing IntRange(int.MinValue, int.MaxValue). Declaration public static readonly IntRange minMax { get; } negative Shorthand for writing IntRange(int.MinValue, 0). Declaration public static readonly IntRange negative { get; } one Shorthand for writing IntRange(1, 1). Declaration public static readonly IntRange one { get; } positive Shorthand for writing IntRange(0, int.MaxValue). Declaration public static readonly IntRange positive { get; } zero Shorthand for writing IntRange(0, 0). Declaration public static readonly IntRange zero { get; } Methods Clamp(Int32) Declaration public int Clamp(int value) Parameters Type Name Description System.Int32 value The value to clamp. Returns Type Description System.Int32 The value clamped to the range. Includes(Int32) Declaration public bool Includes(int value) Parameters Type Name Description System.Int32 value The value to check. Returns Type Description System.Boolean True if the value is in the range. Includes(Int32, Boolean, Boolean) Declaration public bool Includes(int value, bool includeMin, bool includeMax) Parameters Type Name Description System.Int32 value The value to check. System.Boolean includeMin The minimum value is inclusive if true, exclusive if false. System.Boolean includeMax The maximum value is inclusive if true, exclusive if false. Returns Type Description System.Boolean True if the value is in the range. Random() Declaration public int Random() Returns Type Description System.Int32 A random value in the range [inclusive, exclusive). RandomInclusive() Declaration public int RandomInclusive() Returns Type Description System.Int32 A random value in the range [inclusive, inclusive]. Implements INumberRange<T> IRange<T>"
  },
  "api/Zigurous.DataStructures.INumberRange-1.html": {
    "href": "api/Zigurous.DataStructures.INumberRange-1.html",
    "title": "Interface INumberRange<T> | Data Structures",
    "keywords": "Interface INumberRange<T> A generic interface for a range of number values. Inherited Members IRange<T>.min IRange<T>.max IRange<T>.Includes(T) IRange<T>.Includes(T, Boolean, Boolean) Namespace : Zigurous.DataStructures Syntax public interface INumberRange<T> : IRange<T> Type Parameters Name Description T The type of values in the range. Properties Delta Declaration T Delta { get; } Property Value Type Description T The difference between the maximum and minimum values. Median Declaration T Median { get; } Property Value Type Description T The median value of the range. Methods Clamp(T) Declaration T Clamp(T value) Parameters Type Name Description T value The value to clamp. Returns Type Description T The value clamped to the range. Random() Declaration T Random() Returns Type Description T A random value in the range."
  },
  "api/Zigurous.DataStructures.IObjectPool-1.html": {
    "href": "api/Zigurous.DataStructures.IObjectPool-1.html",
    "title": "Interface IObjectPool<T> | Data Structures",
    "keywords": "Interface IObjectPool<T> A type that can retrieve and recycle objects from a shared pool. Namespace : Zigurous.DataStructures Syntax public interface IObjectPool<T> : IDisposable where T : class Type Parameters Name Description T The type of object to be pooled. Methods Empty() Empties the object pool of all objects. Declaration void Empty() Recycle(T) Adds an item back to the object pool so it can be reused. Declaration void Recycle(T item) Parameters Type Name Description T item The item to recycle. Retrieve() Declaration T Retrieve() Returns Type Description T An item from the object pool."
  },
  "api/Zigurous.DataStructures.IRange-1.html": {
    "href": "api/Zigurous.DataStructures.IRange-1.html",
    "title": "Interface IRange<T> | Data Structures",
    "keywords": "Interface IRange<T> A generic interface for a range of values. Namespace : Zigurous.DataStructures Syntax public interface IRange<T> Type Parameters Name Description T The type of values in the range. Properties max The upper bound of the range. Declaration T max { get; set; } min The lower bound of the range. Declaration T min { get; set; } Methods Includes(T) Declaration bool Includes(T value) Parameters Type Name Description T value The value to check. Returns Type Description System.Boolean True if the value is in the range. Includes(T, Boolean, Boolean) Declaration bool Includes(T value, bool includeMin, bool includeMax) Parameters Type Name Description T value The value to check. System.Boolean includeMin The minimum value is inclusive if true, exclusive if false. System.Boolean includeMax The maximum value is inclusive if true, exclusive if false. Returns Type Description System.Boolean True if the value is in the range."
  },
  "api/Zigurous.DataStructures.ListExtensions.html": {
    "href": "api/Zigurous.DataStructures.ListExtensions.html",
    "title": "Class ListExtensions | Data Structures",
    "keywords": "Class ListExtensions Exposes extension methods for lists. Inheritance System.Object ListExtensions Namespace : Zigurous.DataStructures Syntax public static class ListExtensions Methods Add<T>(List<T>, T, Int32) Adds a value to the end of a list n number of times specified by count . Declaration public static void Add<T>(this List<T> list, T value, int count) Parameters Type Name Description List <T> list The list to add to. T value The value to add. System.Int32 count The number of times to add the value. Type Parameters Name Description T The type of the list. CombinedWith<T>(List<T>, List<T>) Combines the list with another. Declaration public static List<T> CombinedWith<T>(this List<T> list, List<T> other) Parameters Type Name Description List <T> list The first list. List <T> other The second list. Returns Type Description List <T> A new list containing all the items of list and other . Type Parameters Name Description T The type of the list. Filter<T>(List<T>, Predicate<T>) Filters the list to only contain items that satisfy the predicate . Declaration public static List<T> Filter<T>(this List<T> list, Predicate<T> predicate) Parameters Type Name Description List <T> list The list to filter. System.Predicate <T> predicate The predicate to use. Returns Type Description List <T> A new list with the filtered items removed. Type Parameters Name Description T The type of the list. First<T>(List<T>) Declaration public static T First<T>(this List<T> list) Parameters Type Name Description List <T> list The list to get the item from. Returns Type Description T The first item in the list. Type Parameters Name Description T The type of the list. First<T>(List<T>, Predicate<T>) Declaration public static T First<T>(this List<T> list, Predicate<T> predicate) Parameters Type Name Description List <T> list The list to get the item from. System.Predicate <T> predicate The predicate to use. Returns Type Description T The first item in the list that satisfies the predicate . Type Parameters Name Description T The type of the list. FirstNonNull<T>(List<T>) Declaration public static T FirstNonNull<T>(this List<T> list) where T : class Parameters Type Name Description List <T> list The list to get the item from. Returns Type Description T The first non-null item in the list. Type Parameters Name Description T The type of the list. For<T>(List<T>, Action<(T item, Int32 index)>) Invokes an System.Action<T> for each item in the list. Declaration public static void For<T>(this List<T> list, Action<(T item, int index)> action) Parameters Type Name Description List <T> list The list to iterate over. System.Action < System.ValueTuple <T, System.Int32 >> action The action to invoke. Type Parameters Name Description T The type of the list. IsAny<T>(List<T>, Predicate<T>) Declaration public static bool IsAny<T>(this List<T> list, Predicate<T> predicate) Parameters Type Name Description List <T> list The list to search in. System.Predicate <T> predicate The predicate to use. Returns Type Description System.Boolean True if any item in the list satisfies the predicate . Type Parameters Name Description T The type of the list. IsEach<T>(List<T>, Predicate<T>) Declaration public static bool IsEach<T>(this List<T> list, Predicate<T> predicate) Parameters Type Name Description List <T> list The list to search in. System.Predicate <T> predicate The predicate to use. Returns Type Description System.Boolean True if each item in the list satisfies the predicate . Type Parameters Name Description T The type of the list. IsEmpty<T>(List<T>) Declaration public static bool IsEmpty<T>(this List<T> list) Parameters Type Name Description List <T> list The list to check. Returns Type Description System.Boolean True if the list is empty. Type Parameters Name Description T The type of the list. IsInBounds<T>(List<T>, Int32) Declaration public static bool IsInBounds<T>(this List<T> list, int index) Parameters Type Name Description List <T> list The list to check. System.Int32 index The index to check. Returns Type Description System.Boolean True if the index is within the bounds of the list. Type Parameters Name Description T The type of the list. IsNotEmpty<T>(List<T>) Declaration public static bool IsNotEmpty<T>(this List<T> list) Parameters Type Name Description List <T> list The list to check. Returns Type Description System.Boolean True if the list is not empty. Type Parameters Name Description T The type of the list. IsNotInBounds<T>(List<T>, Int32) Declaration public static bool IsNotInBounds<T>(this List<T> list, int index) Parameters Type Name Description List <T> list The list to check. System.Int32 index The index to check. Returns Type Description System.Boolean True if the index is out of bounds of the list. Type Parameters Name Description T The type of the list. ItemAt<T>(List<T>, Int32) Declaration public static T ItemAt<T>(this List<T> list, int index) Parameters Type Name Description List <T> list The list to get the item from. System.Int32 index The index of the item to get. Returns Type Description T The item at the specified index . Type Parameters Name Description T The type of the list. Join<T>(List<T>, String, Int32, Int32) Joins the items of the list into a string. Declaration public static string Join<T>(this List<T> list, string delimiter, int startIndex = 0, int endIndex = 2147483647) Parameters Type Name Description List <T> list The list to join. System.String delimiter The delimiter to use. System.Int32 startIndex The index to start at. System.Int32 endIndex The index to end at. Returns Type Description System.String A string that contains the items of the list separated by the delimiter . Type Parameters Name Description T The type of the list. Last<T>(List<T>) Declaration public static T Last<T>(this List<T> list) Parameters Type Name Description List <T> list The list to get the item from. Returns Type Description T The last item in the list. Type Parameters Name Description T The type of the list. Last<T>(List<T>, Predicate<T>) Declaration public static T Last<T>(this List<T> list, Predicate<T> predicate) Parameters Type Name Description List <T> list The list to get the item from. System.Predicate <T> predicate The predicate to use. Returns Type Description T The last item in the list that satisfies the predicate . Type Parameters Name Description T The type of the list. LastNonNull<T>(List<T>) Declaration public static T LastNonNull<T>(this List<T> list) where T : class Parameters Type Name Description List <T> list The list to get the item from. Returns Type Description T The last non-null item from the end of the list. Type Parameters Name Description T The type of the list. Map<TInput, TOutput>(List<TInput>, Converter<TInput, TOutput>) Maps the items of the list to a new list using a given converter . Declaration public static List<TOutput> Map<TInput, TOutput>(this List<TInput> list, Converter<TInput, TOutput> converter) Parameters Type Name Description List <TInput> list The list to map. System.Converter <TInput, TOutput> converter The converter to use. Returns Type Description List <TOutput> A new list with the converted items. Type Parameters Name Description TInput The type of the input list. TOutput The type of the output list. NonNull<T>(List<T>) Filters out all null items from the list. Declaration public static List<T> NonNull<T>(this List<T> list) where T : class Parameters Type Name Description List <T> list The list to filter. Returns Type Description List <T> A new list with all null items removed. Type Parameters Name Description T The type of the list. Random<T>(List<T>) Declaration public static T Random<T>(this List<T> list) Parameters Type Name Description List <T> list The list to get the random item from. Returns Type Description T A random item from the list. Type Parameters Name Description T The type of the list. Reduce<TItem, TSum>(List<TItem>, TSum, ListExtensions.Reducer<TSum, TItem>) Reduces the items of the list to a single value. Declaration public static TSum Reduce<TItem, TSum>(this List<TItem> list, TSum initialValue, ListExtensions.Reducer<TSum, TItem> reducer) Parameters Type Name Description List <TItem> list The list to reduce. TSum initialValue The initial value to use. ListExtensions.Reducer <TSum, TItem> reducer The reducer to use. Returns Type Description TSum The reduced value. Type Parameters Name Description TItem The type of items in the list. TSum The type of the reduced value. RemoveFirst<T>(List<T>) Removes the first item in the list. Declaration public static void RemoveFirst<T>(this List<T> list) Parameters Type Name Description List <T> list The list to remove from. Type Parameters Name Description T The type of the list. RemoveLast<T>(List<T>) Removes the last item in the list. Declaration public static void RemoveLast<T>(this List<T> list) Parameters Type Name Description List <T> list The list to remove from. Type Parameters Name Description T The type of the list. Reversed<T>(List<T>) Reverses the order of the items in the list. Declaration public static List<T> Reversed<T>(this List<T> list) Parameters Type Name Description List <T> list The list to reverse. Returns Type Description List <T> A new list with the order of the items reversed. Type Parameters Name Description T The type of the list. Where<T>(List<T>, Predicate<T>) Filters the list to only contain items that satisfy the predicate . Declaration public static List<T> Where<T>(this List<T> list, Predicate<T> predicate) Parameters Type Name Description List <T> list The list to filter. System.Predicate <T> predicate The predicate to use. Returns Type Description List <T> A new list with the filtered items removed. Type Parameters Name Description T The type of the list. WrapIndex<T>(List<T>, Int32) Wraps the index in the list to the other end. Declaration public static int WrapIndex<T>(this List<T> list, int index) Parameters Type Name Description List <T> list The list to wrap. System.Int32 index The index to wrap. Returns Type Description System.Int32 The wrapped index. Type Parameters Name Description T The type of the list."
  },
  "api/Zigurous.DataStructures.ListExtensions.Reducer-2.html": {
    "href": "api/Zigurous.DataStructures.ListExtensions.Reducer-2.html",
    "title": "Delegate ListExtensions.Reducer<TSum, TItem> | Data Structures",
    "keywords": "Delegate ListExtensions.Reducer<TSum, TItem> A function delegate that reduces a list into a single value. Namespace : Zigurous.DataStructures Syntax public delegate TSum Reducer<TSum, TItem>(TSum sum, TItem item); Parameters Type Name Description TSum sum The current sum. TItem item The current item being reduced. Returns Type Description TSum The reduced value. Type Parameters Name Description TSum The type of the reduced value. TItem The type of items in the list."
  },
  "api/Zigurous.DataStructures.Modules-1.html": {
    "href": "api/Zigurous.DataStructures.Modules-1.html",
    "title": "Class Modules<T> | Data Structures",
    "keywords": "Class Modules<T> Manages a list of registered entity modules. Inheritance System.Object Modules<T> Implements IModular <T> Namespace : Zigurous.DataStructures Syntax public sealed class Modules<T> : IModular<T> where T : class Type Parameters Name Description T The type of entity to manage. Constructors Modules(T[], Action<T>, Action<T>) Creates a new module collection and pre-registers a list of given items. Declaration public Modules(T[] items, Action<T> registered = null, Action<T> unregistered = null) Parameters Type Name Description T[] items The items to pre-register. System.Action <T> registered A callback invoked when a module is registered. System.Action <T> unregistered A callback invoked when a module is unregistered. Modules(Int32, Action<T>, Action<T>) Creates a new module collection with a set capacity. Declaration public Modules(int capacity, Action<T> registered = null, Action<T> unregistered = null) Parameters Type Name Description System.Int32 capacity The initial capacity of the collection. System.Action <T> registered A callback invoked when a module is registered. System.Action <T> unregistered A callback invoked when a module is unregistered. Fields registered A callback invoked when a module is registered. Declaration public Action<T> registered unregistered A callback invoked when a module is unregistered. Declaration public Action<T> unregistered Properties Count Declaration public int Count { get; } Property Value Type Description System.Int32 The amount of modules registered to the entity. Item[Int32] Declaration public T this[int index] { get; } Parameters Type Name Description System.Int32 index The index of the module to return. Property Value Type Description T The module at the given index. items The modules registered to the entity. Declaration public List<T> items { get; } Methods IsRegistered(T) Declaration public bool IsRegistered(T module) Parameters Type Name Description T module The module to check for registration. Returns Type Description System.Boolean True if the module is registered, false if the module is not registered. Register(T) Registers a module to the entity. Declaration public bool Register(T module) Parameters Type Name Description T module The module to register. Returns Type Description System.Boolean True if the module was registered, false if the module cannot be registered. Unregister(T) Unregisters a module from the entity. Declaration public bool Unregister(T module) Parameters Type Name Description T module The module to unregister. Returns Type Description System.Boolean True if the module was unregistered, false if the module cannot be unregistered. Implements IModular<T>"
  },
  "api/Zigurous.DataStructures.ObjectPool-1.Generator.html": {
    "href": "api/Zigurous.DataStructures.ObjectPool-1.Generator.html",
    "title": "Delegate ObjectPool<T>.Generator | Data Structures",
    "keywords": "Delegate ObjectPool<T>.Generator A function delegate that creates a new instance of an object. Namespace : Zigurous.DataStructures Syntax public delegate T Generator(); Returns Type Description T A new instance of an object."
  },
  "api/Zigurous.DataStructures.ObjectPool-1.html": {
    "href": "api/Zigurous.DataStructures.ObjectPool-1.html",
    "title": "Class ObjectPool<T> | Data Structures",
    "keywords": "Class ObjectPool<T> Reuses objects from a shared pool to prevent instantiating new objects. The object pool can have a set capacity or it can grow in size. Optionally, objects that are currently active can be reused when the pool has reached capacity. Inheritance System.Object ObjectPool<T> Implements IObjectPool <T> Namespace : Zigurous.DataStructures Syntax public sealed class ObjectPool<T> : IObjectPool<T>, IDisposable where T : class, IDisposable Type Parameters Name Description T The type of object to pool. Constructors ObjectPool(Int32) Creates a new object pool with an initial capacity. New objects are created as needed using the object type default value. Declaration public ObjectPool(int initialCapacity) Parameters Type Name Description System.Int32 initialCapacity The initial capacity of the pool. ObjectPool(Int32, Int32, Boolean) Creates a new object pool with an initial capacity and max capacity. Optionally active objects can be reused when the pool has reached max capacity. New objects are created as needed using the object type default value. Declaration public ObjectPool(int initialCapacity, int maxCapacity, bool reuseActive = false) Parameters Type Name Description System.Int32 initialCapacity The initial capacity of the pool. System.Int32 maxCapacity The maximum number of objects that can be generated. System.Boolean reuseActive Whether active objects should be reused when the object pool has reached max capacity. ObjectPool(ObjectPool<T>.Generator, Int32) Creates a new object pool with a given generator function and initial capacity. New objects are created as needed with no max capacity. Declaration public ObjectPool(ObjectPool<T>.Generator generator, int initialCapacity) Parameters Type Name Description ObjectPool.Generator <> generator The function delegate that generates a new object. System.Int32 initialCapacity The initial capacity of the pool. ObjectPool(ObjectPool<T>.Generator, Int32, Int32, Boolean) Creates a new object pool with a given generator function and set capacity limits. Optionally active objects can be reused when the pool has reached max capacity. Declaration public ObjectPool(ObjectPool<T>.Generator generator, int initialCapacity, int maxCapacity, bool reuseActive = false) Parameters Type Name Description ObjectPool.Generator <> generator The function delegate that generates a new object. System.Int32 initialCapacity The initial capacity of the pool. System.Int32 maxCapacity The maximum number of objects that can be generated. System.Boolean reuseActive Whether active objects should be reused when the object pool has reached max capacity. Properties ActiveCount Declaration public int ActiveCount { get; } Property Value Type Description System.Int32 The number of objects currently being used. AvailableCount Declaration public int AvailableCount { get; } Property Value Type Description System.Int32 The number of objects available to be reused. maxCapacity The maximum number of objects that can be generated. Declaration public int maxCapacity { get; } reuseActive Whether active objects should be reused when the object pool has reached capacity. Declaration public bool reuseActive { get; } Methods Dispose() Disposes of all class resources. Declaration public void Dispose() Dispose(Action<T>) Disposes of all class resources and invokes a cleanup function on each object in the pool. This is useful, for example, if you want to destroy the objects when the pool is disposed. Declaration public void Dispose(Action<T> cleanup) Parameters Type Name Description System.Action <T> cleanup The cleanup function to invoke on each object. Empty() Empties the object pool of all objects. Declaration public void Empty() Empty(Action<T>) Empties the object pool of all objects and invokes a cleanup function on each object. This is useful, for example, if you want to destroy the objects when the pool is emptied. Declaration public void Empty(Action<T> cleanup) Parameters Type Name Description System.Action <T> cleanup The cleanup function to invoke on each object. Recycle(T) Adds an item back to the object pool so it can be reused. Declaration public void Recycle(T item) Parameters Type Name Description T item The item to add to the pool. Retrieve() Declaration public T Retrieve() Returns Type Description T An item from the object pool. If there are no available objects in the pool, either a new object will be generated or the oldest object will be reused depending upon how the object pool was created. Implements IObjectPool<T>"
  },
  "api/Zigurous.DataStructures.Quantity-1.html": {
    "href": "api/Zigurous.DataStructures.Quantity-1.html",
    "title": "Struct Quantity<T> | Data Structures",
    "keywords": "Struct Quantity<T> Stores a quantity of a given entity type. Namespace : Zigurous.DataStructures Syntax [Serializable] public struct Quantity<T> : IEquatable<Quantity<T>> where T : IEquatable<T> Type Parameters Name Description T The type of entity being counted. Constructors Quantity(T, Int32) Creates a new Quantity with the given amount of entity . Declaration public Quantity(T entity, int amount) Parameters Type Name Description T entity The entity being counted. System.Int32 amount The amount of entities. Fields amount The number of entities. Declaration public int amount entity The entity being counted. Declaration public T entity Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean True if the quantity is equal to the other . Overrides System.ValueType.Equals(System.Object) Equals(Quantity<T>) Declaration public bool Equals(Quantity<T> other) Parameters Type Name Description Quantity <T> other The quantity to compare to. Returns Type Description System.Boolean True if the quantity is equal to the other . GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 The hash code of the quantity. Overrides System.ValueType.GetHashCode() ToString() Declaration public override string ToString() Returns Type Description System.String The string representation of the quantity. Overrides System.ValueType.ToString() Operators Equality(Quantity<T>, Quantity<T>) Declaration public static bool operator ==(Quantity<T> lhs, Quantity<T> rhs) Parameters Type Name Description Quantity <T> lhs Quantity <T> rhs Returns Type Description System.Boolean Inequality(Quantity<T>, Quantity<T>) Declaration public static bool operator !=(Quantity<T> lhs, Quantity<T> rhs) Parameters Type Name Description Quantity <T> lhs Quantity <T> rhs Returns Type Description System.Boolean"
  },
  "api/Zigurous.DataStructures.QuaternionAccumulator.html": {
    "href": "api/Zigurous.DataStructures.QuaternionAccumulator.html",
    "title": "Class QuaternionAccumulator | Data Structures",
    "keywords": "Class QuaternionAccumulator Accumulates Quaternion values into a single total value. Inheritance System.Object ValueAccumulator < Quaternion > QuaternionAccumulator Inherited Members ValueAccumulator<Quaternion>.values ValueAccumulator<Quaternion>.total ValueAccumulator<Quaternion>.Count ValueAccumulator<Quaternion>.GetValue(Int32) ValueAccumulator<Quaternion>.SetValue(Quaternion, Int32) ValueAccumulator<Quaternion>.RemoveValue(Int32) ValueAccumulator<Quaternion>.Clear() Namespace : Zigurous.DataStructures Syntax public sealed class QuaternionAccumulator : ValueAccumulator<Quaternion> Constructors QuaternionAccumulator() Default constructor. Declaration public QuaternionAccumulator() Methods Add(Quaternion) Increases the accumulated total by a given value. Declaration protected override Quaternion Add(Quaternion value) Parameters Type Name Description Quaternion value The value to add to the total. Returns Type Description Quaternion The new total value. Overrides Zigurous.DataStructures.ValueAccumulator<Quaternion>.Add(Quaternion) Subtract(Quaternion) Decreases the accumulated total by a given value. Declaration protected override Quaternion Subtract(Quaternion value) Parameters Type Name Description Quaternion value The value to subtract from the total. Returns Type Description Quaternion The new total value. Overrides Zigurous.DataStructures.ValueAccumulator<Quaternion>.Subtract(Quaternion)"
  },
  "api/Zigurous.DataStructures.Range-1.html": {
    "href": "api/Zigurous.DataStructures.Range-1.html",
    "title": "Struct Range<T> | Data Structures",
    "keywords": "Struct Range<T> A range of values. Implements IRange <T> Namespace : Zigurous.DataStructures Syntax public struct Range<T> : IRange<T> where T : IComparable<T> Type Parameters Name Description T The type of values in the range. Constructors Range(T, T) Creates a new range with the given min and max values. Declaration public Range(T min = null, T max = null) Parameters Type Name Description T min The lower bound of the range. T max The upper bound of the range. Properties max The upper bound of the range. Declaration public T max { get; set; } min The lower bound of the range. Declaration public T min { get; set; } Methods Includes(T) Declaration public bool Includes(T value) Parameters Type Name Description T value The value to check. Returns Type Description System.Boolean True if the value is in the range. Includes(T, Boolean, Boolean) Declaration public bool Includes(T value, bool includeMin, bool includeMax) Parameters Type Name Description T value The value to check. System.Boolean includeMin Whether to include the minimum value. System.Boolean includeMax Whether to include the maximum value. Returns Type Description System.Boolean True if the value is in the range. Implements IRange<T>"
  },
  "api/Zigurous.DataStructures.SingletonBehavior-1.html": {
    "href": "api/Zigurous.DataStructures.SingletonBehavior-1.html",
    "title": "Class SingletonBehavior<T> | Data Structures",
    "keywords": "Class SingletonBehavior<T> A singleton behavior that can be used to ensure that only one instance of a class is created. Inheritance System.Object SingletonBehavior<T> Namespace : Zigurous.DataStructures Syntax public abstract class SingletonBehavior<T> : MonoBehaviour where T : Component Type Parameters Name Description T The type of the singleton class. Constructors SingletonBehavior() Declaration protected SingletonBehavior() Properties HasInstance Declaration public static bool HasInstance { get; } Property Value Type Description System.Boolean True if the singleton has been initialized and an instance is available to use. Instance The current instance of the class. The instance will be created if it does not already exist. Declaration public static T Instance { get; } Methods Awake() Declaration protected virtual void Awake() OnDestroy() Declaration protected virtual void OnDestroy() OnSingletonInitialized() A callback invoked when the singleton is first initialized. Declaration protected virtual void OnSingletonInitialized()"
  },
  "api/Zigurous.DataStructures.Size.html": {
    "href": "api/Zigurous.DataStructures.Size.html",
    "title": "Struct Size | Data Structures",
    "keywords": "Struct Size Stores the size of an entity. Namespace : Zigurous.DataStructures Syntax [Serializable] public struct Size : IEquatable<Size>, IComparable<Size> Constructors Size(Int32) Creates a new size with uniform width and height. Declaration public Size(int size) Parameters Type Name Description System.Int32 size The uniform size of the entity. Size(Int32, Int32) Creates a new size of the given width and height . Declaration public Size(int width = 0, int height = 0) Parameters Type Name Description System.Int32 width The width of the entity. System.Int32 height The height of the entity. Fields height The height of the entity. Declaration public int height width The width of the entity. Declaration public int width Properties Area Declaration public readonly int Area { get; } Property Value Type Description System.Int32 The area of the entity (width * height). max Shorthand for writing Size(int.MaxValue, int.MaxValue). Declaration public static readonly Size max { get; } one Shorthand for writing Size(1, 1). Declaration public static readonly Size one { get; } sq1024 Shorthand for writing Size(1024). Declaration public static readonly Size sq1024 { get; } sq128 Shorthand for writing Size(128). Declaration public static readonly Size sq128 { get; } sq16 Shorthand for writing Size(16). Declaration public static readonly Size sq16 { get; } sq2 Shorthand for writing Size(2). Declaration public static readonly Size sq2 { get; } sq2048 Shorthand for writing Size(2048). Declaration public static readonly Size sq2048 { get; } sq256 Shorthand for writing Size(256). Declaration public static readonly Size sq256 { get; } sq32 Shorthand for writing Size(32). Declaration public static readonly Size sq32 { get; } sq4 Shorthand for writing Size(4). Declaration public static readonly Size sq4 { get; } sq4096 Shorthand for writing Size(4096). Declaration public static readonly Size sq4096 { get; } sq512 Shorthand for writing Size(512). Declaration public static readonly Size sq512 { get; } sq64 Shorthand for writing Size(64). Declaration public static readonly Size sq64 { get; } sq8 Shorthand for writing Size(8). Declaration public static readonly Size sq8 { get; } sq8192 Shorthand for writing Size(8192). Declaration public static readonly Size sq8192 { get; } zero Shorthand for writing Size(0, 0). Declaration public static readonly Size zero { get; } Methods CompareTo(Size) System.IComparable`1.CompareTo(`0) . Declaration public int CompareTo(Size other) Parameters Type Name Description Size other The size to compare to. Returns Type Description System.Int32 Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other The object to compare to. Returns Type Description System.Boolean True if the size is equal to the other . Overrides System.ValueType.Equals(System.Object) Equals(Size) Declaration public bool Equals(Size other) Parameters Type Name Description Size other The size to compare to. Returns Type Description System.Boolean True if the size is equal to the other . GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 The hash code of the size. Overrides System.ValueType.GetHashCode() ToString() Declaration public override string ToString() Returns Type Description System.String The string representation of the size. Overrides System.ValueType.ToString() Operators Equality(Size, Size) Declaration public static bool operator ==(Size lhs, Size rhs) Parameters Type Name Description Size lhs Size rhs Returns Type Description System.Boolean Inequality(Size, Size) Declaration public static bool operator !=(Size lhs, Size rhs) Parameters Type Name Description Size lhs Size rhs Returns Type Description System.Boolean"
  },
  "api/Zigurous.DataStructures.SortedSetExtensions.html": {
    "href": "api/Zigurous.DataStructures.SortedSetExtensions.html",
    "title": "Class SortedSetExtensions | Data Structures",
    "keywords": "Class SortedSetExtensions Exposes extension methods for sorted sets. Inheritance System.Object SortedSetExtensions Namespace : Zigurous.DataStructures Syntax public static class SortedSetExtensions Methods First<T>(SortedSet<T>, Predicate<T>) Declaration public static T First<T>(this SortedSet<T> set, Predicate<T> predicate) Parameters Type Name Description SortedSet <T> set The sorted set to get the element from. System.Predicate <T> predicate The predicate to use. Returns Type Description T The first element in the sorted set that satisfies the predicate . Type Parameters Name Description T The type of the elements in the sorted set. ForEach<T>(SortedSet<T>, Action<T>) Invokes an action on each element in the sorted set. Declaration public static void ForEach<T>(this SortedSet<T> set, Action<T> action) Parameters Type Name Description SortedSet <T> set The sorted set to iterate over. System.Action <T> action The action to invoke on each element. Type Parameters Name Description T The type of the elements in the sorted set. IsAny<T>(SortedSet<T>, Predicate<T>) Declaration public static bool IsAny<T>(this SortedSet<T> set, Predicate<T> predicate) Parameters Type Name Description SortedSet <T> set The sorted set to check. System.Predicate <T> predicate The predicate to use. Returns Type Description System.Boolean True if any element in the sorted set satisfies the predicate . Type Parameters Name Description T The type of the elements in the sorted set. IsEach<T>(SortedSet<T>, Predicate<T>) Declaration public static bool IsEach<T>(this SortedSet<T> set, Predicate<T> predicate) Parameters Type Name Description SortedSet <T> set The sorted set to check. System.Predicate <T> predicate The predicate to use. Returns Type Description System.Boolean True if each element in the sorted set satisfies the predicate . Type Parameters Name Description T The type of the elements in the sorted set."
  },
  "api/Zigurous.DataStructures.StringExtensions.html": {
    "href": "api/Zigurous.DataStructures.StringExtensions.html",
    "title": "Class StringExtensions | Data Structures",
    "keywords": "Class StringExtensions Exposes extension methods for strings. Inheritance System.Object StringExtensions Namespace : Zigurous.DataStructures Syntax public static class StringExtensions Methods IsEmpty(String) Declaration public static bool IsEmpty(this string str) Parameters Type Name Description System.String str The string to test. Returns Type Description System.Boolean True if the string is null or empty. IsNotEmpty(String) Declaration public static bool IsNotEmpty(this string str) Parameters Type Name Description System.String str The string to test. Returns Type Description System.Boolean True if the string is not null and not empty. Repeat(String, Int32) Repeats the string n times. Declaration public static string Repeat(this string str, int n) Parameters Type Name Description System.String str The string to repeat. System.Int32 n The number of times to repeat the string. Returns Type Description System.String The repeated string. ToAbbreviatedString(Single) Converts the number to an abbreviated string. Declaration public static string ToAbbreviatedString(this float number) Parameters Type Name Description System.Single number The number to abbreviate. Returns Type Description System.String The abbreviated string. ToAbbreviatedString(Single, StringExtensions.NumberAbbreviation[]) Converts the number to an abbreviated string using a set of abbreviations . Declaration public static string ToAbbreviatedString(this float number, StringExtensions.NumberAbbreviation[] abbreviations) Parameters Type Name Description System.Single number The number to abbreviate. StringExtensions.NumberAbbreviation [] abbreviations The abbreviations that can be applied to the number. Returns Type Description System.String The abbreviated string."
  },
  "api/Zigurous.DataStructures.StringExtensions.NumberAbbreviation.html": {
    "href": "api/Zigurous.DataStructures.StringExtensions.NumberAbbreviation.html",
    "title": "Struct StringExtensions.NumberAbbreviation | Data Structures",
    "keywords": "Struct StringExtensions.NumberAbbreviation Represents how a number is abbreviated to a string. Namespace : Zigurous.DataStructures Syntax [Serializable] public struct NumberAbbreviation Constructors NumberAbbreviation(Single, String) Creates a new number abbreviation with the given factor and format . Declaration public NumberAbbreviation(float factor, string format) Parameters Type Name Description System.Single factor The number factor after which the abbreviation is applied. System.String format The string format of the abbreviated number. Fields factor The number factor after which the abbreviation is applied. Declaration public float factor format The string format of the abbreviated number. Declaration public string format"
  },
  "api/Zigurous.DataStructures.UIntRange.html": {
    "href": "api/Zigurous.DataStructures.UIntRange.html",
    "title": "Struct UIntRange | Data Structures",
    "keywords": "Struct UIntRange A range of uint values. Implements INumberRange < System.UInt32 > IRange < System.UInt32 > Namespace : Zigurous.DataStructures Syntax [Serializable] public struct UIntRange : INumberRange<uint>, IRange<uint> Constructors UIntRange(UInt32, UInt32) Creates a new uint range with the specified values. Declaration public UIntRange(uint min, uint max) Parameters Type Name Description System.UInt32 min The lower bound of the range. System.UInt32 max The upper bound of the range. Properties Delta Declaration public readonly uint Delta { get; } Property Value Type Description System.UInt32 The difference between the maximum and minimum values. max The upper bound of the range. Declaration public uint max { get; set; } Median Declaration public readonly uint Median { get; } Property Value Type Description System.UInt32 The median value of the range. min The lower bound of the range. Declaration public uint min { get; set; } minMax Shorthand for writing UIntRange(uint.MinValue, uint.MaxValue). Declaration public static readonly UIntRange minMax { get; } one Shorthand for writing UIntRange(1, 1). Declaration public static readonly UIntRange one { get; } zero Shorthand for writing UIntRange(0, 0). Declaration public static readonly UIntRange zero { get; } Methods Clamp(UInt32) Declaration public uint Clamp(uint value) Parameters Type Name Description System.UInt32 value The value to clamp. Returns Type Description System.UInt32 The value clamped to the range. Includes(UInt32) Declaration public bool Includes(uint value) Parameters Type Name Description System.UInt32 value The value to check. Returns Type Description System.Boolean True if the value is in the range. Includes(UInt32, Boolean, Boolean) Declaration public bool Includes(uint value, bool includeMin, bool includeMax) Parameters Type Name Description System.UInt32 value The value to check. System.Boolean includeMin The minimum value is inclusive if true, exclusive if false. System.Boolean includeMax The maximum value is inclusive if true, exclusive if false. Returns Type Description System.Boolean True if the value is in the range. Random() Declaration public uint Random() Returns Type Description System.UInt32 A random value in the range [inclusive, exclusive). RandomInclusive() Declaration public uint RandomInclusive() Returns Type Description System.UInt32 A random value in the range [inclusive, inclusive]. Implements INumberRange<T> IRange<T>"
  },
  "api/Zigurous.DataStructures.UnitIntervalRange.html": {
    "href": "api/Zigurous.DataStructures.UnitIntervalRange.html",
    "title": "Struct UnitIntervalRange | Data Structures",
    "keywords": "Struct UnitIntervalRange A range of values between zero and one. Implements INumberRange < System.Single > IRange < System.Single > Namespace : Zigurous.DataStructures Syntax [Serializable] public struct UnitIntervalRange : INumberRange<float>, IRange<float> Constructors UnitIntervalRange(Single, Single) Creates a new unit interval range with the specified values. Declaration public UnitIntervalRange(float min = 0F, float max = 1F) Parameters Type Name Description System.Single min The lower bound of the range. System.Single max The upper bound of the range. Properties Delta Declaration public readonly float Delta { get; } Property Value Type Description System.Single The difference between the maximum and minimum values. max The upper bound of the range. Declaration public float max { get; set; } Median Declaration public readonly float Median { get; } Property Value Type Description System.Single The median value of the range. min The lower bound of the range. Declaration public float min { get; set; } minMax Shorthand for writing UnitIntervalRange(0.0f, 1.0f). Declaration public static readonly UnitIntervalRange minMax { get; } one Shorthand for writing UnitIntervalRange(1.0f, 1.0f). Declaration public static readonly UnitIntervalRange one { get; } zero Shorthand for writing UnitIntervalRange(0.0f, 0.0f). Declaration public static readonly UnitIntervalRange zero { get; } Methods Clamp(Single) Declaration public float Clamp(float value) Parameters Type Name Description System.Single value The value to clamp. Returns Type Description System.Single The value clamped to the range. Includes(Single) Declaration public bool Includes(float value) Parameters Type Name Description System.Single value The value to check. Returns Type Description System.Boolean True if the value is in the range. Includes(Single, Boolean, Boolean) Declaration public bool Includes(float value, bool includeMin, bool includeMax) Parameters Type Name Description System.Single value The value to check. System.Boolean includeMin The minimum value is inclusive if true, exclusive if false. System.Boolean includeMax The maximum value is inclusive if true, exclusive if false. Returns Type Description System.Boolean True if the value is in the range. Random() Declaration public float Random() Returns Type Description System.Single A random value in the range. Implements INumberRange<T> IRange<T>"
  },
  "api/Zigurous.DataStructures.ValueAccumulator-1.html": {
    "href": "api/Zigurous.DataStructures.ValueAccumulator-1.html",
    "title": "Class ValueAccumulator<T> | Data Structures",
    "keywords": "Class ValueAccumulator<T> Accumulates a set of stored values into a single total value. Inheritance System.Object ValueAccumulator<T> DoubleAccumulator FloatAccumulator IntAccumulator QuaternionAccumulator Vector2Accumulator Vector2IntAccumulator Vector3Accumulator Vector3IntAccumulator Vector4Accumulator Namespace : Zigurous.DataStructures Syntax public abstract class ValueAccumulator<T> Type Parameters Name Description T The type of value to accumulate. Properties Count Declaration public int Count { get; } Property Value Type Description System.Int32 The number of unique values being accumulated. total The total accumulated value. Declaration public T total { get; protected set; } values Keeps track of all accumulated values. Values are stored with unique identifiers. Declaration public Dictionary<int, T> values { get; protected set; } Methods Add(T) Increases the accumulated total by a given value. Declaration protected abstract T Add(T value) Parameters Type Name Description T value The value to add to the total. Returns Type Description T The new total value. Clear() Removes all stored values and resets the total accumulated value. Declaration public void Clear() GetValue(Int32) Declaration public T GetValue(int identifier) Parameters Type Name Description System.Int32 identifier Returns Type Description T The stored value with the given identifier . RemoveValue(Int32) Removes the value stored with the given identifier and updates the total accumulated value. Declaration public void RemoveValue(int identifier) Parameters Type Name Description System.Int32 identifier The identifier of the stored value to remove. SetValue(T, Int32) Stores a given value with the identifier . The total accumulated value is updated based on the difference between the new and old value. Declaration public void SetValue(T value, int identifier) Parameters Type Name Description T value The value to set. System.Int32 identifier The identifier of the value. Subtract(T) Decreases the accumulated total by a given value. Declaration protected abstract T Subtract(T value) Parameters Type Name Description T value The value to subtract from the total. Returns Type Description T The new total value."
  },
  "api/Zigurous.DataStructures.Vector2Accumulator.html": {
    "href": "api/Zigurous.DataStructures.Vector2Accumulator.html",
    "title": "Class Vector2Accumulator | Data Structures",
    "keywords": "Class Vector2Accumulator Accumulates Vector2 values into a single total value. Inheritance System.Object ValueAccumulator < Vector2 > Vector2Accumulator Inherited Members ValueAccumulator<Vector2>.values ValueAccumulator<Vector2>.total ValueAccumulator<Vector2>.Count ValueAccumulator<Vector2>.GetValue(Int32) ValueAccumulator<Vector2>.SetValue(Vector2, Int32) ValueAccumulator<Vector2>.RemoveValue(Int32) ValueAccumulator<Vector2>.Clear() Namespace : Zigurous.DataStructures Syntax public sealed class Vector2Accumulator : ValueAccumulator<Vector2> Methods Add(Vector2) Increases the accumulated total by a given value. Declaration protected override Vector2 Add(Vector2 value) Parameters Type Name Description Vector2 value The value to add to the total. Returns Type Description Vector2 The new total value. Overrides Zigurous.DataStructures.ValueAccumulator<Vector2>.Add(Vector2) Subtract(Vector2) Decreases the accumulated total by a given value. Declaration protected override Vector2 Subtract(Vector2 value) Parameters Type Name Description Vector2 value The value to subtract from the total. Returns Type Description Vector2 The new total value. Overrides Zigurous.DataStructures.ValueAccumulator<Vector2>.Subtract(Vector2)"
  },
  "api/Zigurous.DataStructures.Vector2IntAccumulator.html": {
    "href": "api/Zigurous.DataStructures.Vector2IntAccumulator.html",
    "title": "Class Vector2IntAccumulator | Data Structures",
    "keywords": "Class Vector2IntAccumulator Accumulates Vector2Int values into a single total value. Inheritance System.Object ValueAccumulator < Vector2Int > Vector2IntAccumulator Inherited Members ValueAccumulator<Vector2Int>.values ValueAccumulator<Vector2Int>.total ValueAccumulator<Vector2Int>.Count ValueAccumulator<Vector2Int>.GetValue(Int32) ValueAccumulator<Vector2Int>.SetValue(Vector2Int, Int32) ValueAccumulator<Vector2Int>.RemoveValue(Int32) ValueAccumulator<Vector2Int>.Clear() Namespace : Zigurous.DataStructures Syntax public sealed class Vector2IntAccumulator : ValueAccumulator<Vector2Int> Methods Add(Vector2Int) Increases the accumulated total by a given value. Declaration protected override Vector2Int Add(Vector2Int value) Parameters Type Name Description Vector2Int value The value to add to the total. Returns Type Description Vector2Int The new total value. Overrides Zigurous.DataStructures.ValueAccumulator<Vector2Int>.Add(Vector2Int) Subtract(Vector2Int) Decreases the accumulated total by a given value. Declaration protected override Vector2Int Subtract(Vector2Int value) Parameters Type Name Description Vector2Int value The value to subtract from the total. Returns Type Description Vector2Int The new total value. Overrides Zigurous.DataStructures.ValueAccumulator<Vector2Int>.Subtract(Vector2Int)"
  },
  "api/Zigurous.DataStructures.Vector2Range.html": {
    "href": "api/Zigurous.DataStructures.Vector2Range.html",
    "title": "Struct Vector2Range | Data Structures",
    "keywords": "Struct Vector2Range A range of Vector2 values. Implements INumberRange < Vector2 > IRange < Vector2 > Namespace : Zigurous.DataStructures Syntax [Serializable] public struct Vector2Range : INumberRange<Vector2>, IRange<Vector2> Constructors Vector2Range(Vector2, Vector2) Creates a new Vector2 range with the specified values. Declaration public Vector2Range(Vector2 min, Vector2 max) Parameters Type Name Description Vector2 min The lower bound of the range. Vector2 max The upper bound of the range. Properties Delta Declaration public readonly Vector2 Delta { get; } Property Value Type Description Vector2 The difference between the maximum and minimum values. max The upper bound of the range. Declaration public Vector2 max { get; set; } Median Declaration public readonly Vector2 Median { get; } Property Value Type Description Vector2 The median value of the range. min The lower bound of the range. Declaration public Vector2 min { get; set; } Methods Clamp(Vector2) Declaration public Vector2 Clamp(Vector2 value) Parameters Type Name Description Vector2 value The value to clamp. Returns Type Description Vector2 The value clamped to the range. Includes(Vector2) Declaration public bool Includes(Vector2 value) Parameters Type Name Description Vector2 value The value to check. Returns Type Description System.Boolean True if the value is in the range. Includes(Vector2, Boolean, Boolean) Declaration public bool Includes(Vector2 value, bool includeMin, bool includeMax) Parameters Type Name Description Vector2 value The value to check. System.Boolean includeMin The minimum value is inclusive if true, exclusive if false. System.Boolean includeMax The maximum value is inclusive if true, exclusive if false. Returns Type Description System.Boolean True if the value is in the range. Random() Declaration public Vector2 Random() Returns Type Description Vector2 A random value in the range. Implements INumberRange<T> IRange<T>"
  },
  "api/Zigurous.DataStructures.Vector3Accumulator.html": {
    "href": "api/Zigurous.DataStructures.Vector3Accumulator.html",
    "title": "Class Vector3Accumulator | Data Structures",
    "keywords": "Class Vector3Accumulator Accumulates Vector3 values into a single total value. Inheritance System.Object ValueAccumulator < Vector3 > Vector3Accumulator Inherited Members ValueAccumulator<Vector3>.values ValueAccumulator<Vector3>.total ValueAccumulator<Vector3>.Count ValueAccumulator<Vector3>.GetValue(Int32) ValueAccumulator<Vector3>.SetValue(Vector3, Int32) ValueAccumulator<Vector3>.RemoveValue(Int32) ValueAccumulator<Vector3>.Clear() Namespace : Zigurous.DataStructures Syntax public sealed class Vector3Accumulator : ValueAccumulator<Vector3> Methods Add(Vector3) Increases the accumulated total by a given value. Declaration protected override Vector3 Add(Vector3 value) Parameters Type Name Description Vector3 value The value to add to the total. Returns Type Description Vector3 The new total value. Overrides Zigurous.DataStructures.ValueAccumulator<Vector3>.Add(Vector3) Subtract(Vector3) Decreases the accumulated total by a given value. Declaration protected override Vector3 Subtract(Vector3 value) Parameters Type Name Description Vector3 value The value to subtract from the total. Returns Type Description Vector3 The new total value. Overrides Zigurous.DataStructures.ValueAccumulator<Vector3>.Subtract(Vector3)"
  },
  "api/Zigurous.DataStructures.Vector3IntAccumulator.html": {
    "href": "api/Zigurous.DataStructures.Vector3IntAccumulator.html",
    "title": "Class Vector3IntAccumulator | Data Structures",
    "keywords": "Class Vector3IntAccumulator Accumulates Vector3Int values into a single total value. Inheritance System.Object ValueAccumulator < Vector3Int > Vector3IntAccumulator Inherited Members ValueAccumulator<Vector3Int>.values ValueAccumulator<Vector3Int>.total ValueAccumulator<Vector3Int>.Count ValueAccumulator<Vector3Int>.GetValue(Int32) ValueAccumulator<Vector3Int>.SetValue(Vector3Int, Int32) ValueAccumulator<Vector3Int>.RemoveValue(Int32) ValueAccumulator<Vector3Int>.Clear() Namespace : Zigurous.DataStructures Syntax public sealed class Vector3IntAccumulator : ValueAccumulator<Vector3Int> Methods Add(Vector3Int) Increases the accumulated total by a given value. Declaration protected override Vector3Int Add(Vector3Int value) Parameters Type Name Description Vector3Int value The value to add to the total. Returns Type Description Vector3Int The new total value. Overrides Zigurous.DataStructures.ValueAccumulator<Vector3Int>.Add(Vector3Int) Subtract(Vector3Int) Decreases the accumulated total by a given value. Declaration protected override Vector3Int Subtract(Vector3Int value) Parameters Type Name Description Vector3Int value The value to subtract from the total. Returns Type Description Vector3Int The new total value. Overrides Zigurous.DataStructures.ValueAccumulator<Vector3Int>.Subtract(Vector3Int)"
  },
  "api/Zigurous.DataStructures.Vector3Range.html": {
    "href": "api/Zigurous.DataStructures.Vector3Range.html",
    "title": "Struct Vector3Range | Data Structures",
    "keywords": "Struct Vector3Range A range of Vector3 values. Implements INumberRange < Vector3 > IRange < Vector3 > Namespace : Zigurous.DataStructures Syntax [Serializable] public struct Vector3Range : INumberRange<Vector3>, IRange<Vector3> Constructors Vector3Range(Vector3, Vector3) Creates a new Vector3 range with the specified values. Declaration public Vector3Range(Vector3 min, Vector3 max) Parameters Type Name Description Vector3 min The lower bound of the range. Vector3 max The upper bound of the range. Properties Delta Declaration public readonly Vector3 Delta { get; } Property Value Type Description Vector3 The difference between the maximum and minimum values. max The upper bound of the range. Declaration public Vector3 max { get; set; } Median Declaration public readonly Vector3 Median { get; } Property Value Type Description Vector3 The median value of the range. min The lower bound of the range. Declaration public Vector3 min { get; set; } Methods Clamp(Vector3) Declaration public Vector3 Clamp(Vector3 value) Parameters Type Name Description Vector3 value The value to clamp. Returns Type Description Vector3 The value clamped to the range. Includes(Vector3) Declaration public bool Includes(Vector3 value) Parameters Type Name Description Vector3 value The value to check. Returns Type Description System.Boolean True if the value is in the range. Includes(Vector3, Boolean, Boolean) Declaration public bool Includes(Vector3 value, bool includeMin, bool includeMax) Parameters Type Name Description Vector3 value The value to check. System.Boolean includeMin The minimum value is inclusive if true, exclusive if false. System.Boolean includeMax The maximum value is inclusive if true, exclusive if false. Returns Type Description System.Boolean True if the value is in the range. Random() Declaration public Vector3 Random() Returns Type Description Vector3 A random value in the range. Implements INumberRange<T> IRange<T>"
  },
  "api/Zigurous.DataStructures.Vector4Accumulator.html": {
    "href": "api/Zigurous.DataStructures.Vector4Accumulator.html",
    "title": "Class Vector4Accumulator | Data Structures",
    "keywords": "Class Vector4Accumulator Accumulates Vector4 values into a single total value. Inheritance System.Object ValueAccumulator < Vector4 > Vector4Accumulator Inherited Members ValueAccumulator<Vector4>.values ValueAccumulator<Vector4>.total ValueAccumulator<Vector4>.Count ValueAccumulator<Vector4>.GetValue(Int32) ValueAccumulator<Vector4>.SetValue(Vector4, Int32) ValueAccumulator<Vector4>.RemoveValue(Int32) ValueAccumulator<Vector4>.Clear() Namespace : Zigurous.DataStructures Syntax public sealed class Vector4Accumulator : ValueAccumulator<Vector4> Methods Add(Vector4) Increases the accumulated total by a given value. Declaration protected override Vector4 Add(Vector4 value) Parameters Type Name Description Vector4 value The value to add to the total. Returns Type Description Vector4 The new total value. Overrides Zigurous.DataStructures.ValueAccumulator<Vector4>.Add(Vector4) Subtract(Vector4) Decreases the accumulated total by a given value. Declaration protected override Vector4 Subtract(Vector4 value) Parameters Type Name Description Vector4 value The value to subtract from the total. Returns Type Description Vector4 The new total value. Overrides Zigurous.DataStructures.ValueAccumulator<Vector4>.Subtract(Vector4)"
  },
  "api/Zigurous.DataStructures.Vector4Range.html": {
    "href": "api/Zigurous.DataStructures.Vector4Range.html",
    "title": "Struct Vector4Range | Data Structures",
    "keywords": "Struct Vector4Range A range of Vector4 values. Implements INumberRange < Vector4 > IRange < Vector4 > Namespace : Zigurous.DataStructures Syntax [Serializable] public struct Vector4Range : INumberRange<Vector4>, IRange<Vector4> Constructors Vector4Range(Vector4, Vector4) Creates a new Vector4 range with the specified values. Declaration public Vector4Range(Vector4 min, Vector4 max) Parameters Type Name Description Vector4 min The lower bound of the range. Vector4 max The upper bound of the range. Properties Delta Declaration public readonly Vector4 Delta { get; } Property Value Type Description Vector4 The difference between the maximum and minimum values. max The upper bound of the range. Declaration public Vector4 max { get; set; } Median Declaration public readonly Vector4 Median { get; } Property Value Type Description Vector4 The median value of the range. min The lower bound of the range. Declaration public Vector4 min { get; set; } Methods Clamp(Vector4) Declaration public Vector4 Clamp(Vector4 value) Parameters Type Name Description Vector4 value The value to clamp. Returns Type Description Vector4 The value clamped to the range. Includes(Vector4) Declaration public bool Includes(Vector4 value) Parameters Type Name Description Vector4 value The value to check. Returns Type Description System.Boolean True if the value is in the range. Includes(Vector4, Boolean, Boolean) Declaration public bool Includes(Vector4 value, bool includeMin, bool includeMax) Parameters Type Name Description Vector4 value The value to check. System.Boolean includeMin The minimum value is inclusive if true, exclusive if false. System.Boolean includeMax The maximum value is inclusive if true, exclusive if false. Returns Type Description System.Boolean True if the value is in the range. Random() Declaration public Vector4 Random() Returns Type Description Vector4 A random value in the range. Implements INumberRange<T> IRange<T>"
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "Changelog | Data Structures",
    "keywords": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [1.3.0] - 2021/07/10 Added Vector4Range data structure New extension methods for List<T> , HashSet<T> , and SortedSet<T> Changed Package description Documentation comments Small memory optimizations Renamed Identifier.GenerateFromTime to Identifier.Temporal Renamed List<T>.ElementAt to List<T>.ItemAt [1.2.1] - 2021/06/25 Added Readme namespace import instructions Changed Code cleanup [1.2.0] - 2021/06/06 Added DoubleAccumulator IntAccumulator QuaternionAccumulator Vector2IntAccumulator Vector3IntAccumulator Vector4Accumulator [1.1.0] - 2021/05/23 Added Implicit conversion operators between Bitmask and int Changed Code cleanup and formatting [1.0.1] - 2021/04/13 Removed ConditionalShowAttribute ConditionalHideAttribute Fixed Set Editor assembly to only compile for the Editor platform Size and GridSize were not printing the correct info in ToString() [1.0.0] - 2021/03/24 Added ArrayExtensions Bitmask Bool3 ClampedRange ColorRange ComparableExtensions DictionaryExtensions FloatAccumulator FloatRange GridSize HashCode HashSetExtensions Identifier IntRange ListExtensions Modules ObjectPool Quantity SingletonBehavior Size SortedSetExtensions StringExtensions UIntRange UnitIntervalRange Vector2Accumulator Vector2Range Vector3Accumulator Vector3Range"
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "License | Data Structures",
    "keywords": "License MIT License Copyright (c) 2021 Zigurous Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "Data Structures | Data Structures",
    "keywords": "Data Structures The Data Structures package contains common data structures and design pattern implementations for Unity projects. It also contains dozens of class extensions for common collection types and interfaces. Structs Bool3 Bitmask Quantity Size GridSize Range ClampedRange ColorRange EulerRange FloatRange IntRange UIntRange UnitIntervalRange Vector2Range Vector3Range Vector4Range Patterns SingletonBehavior ValueAccumulator ObjectPool Modules Extensions ArrayExtensions ComparableExtensions DictionaryExtensions HashSetExtensions ListExtensions SortedSetExtensions StringExtensions Utilities HashCode Identifier"
  },
  "manual/installation.html": {
    "href": "manual/installation.html",
    "title": "Installation | Data Structures",
    "keywords": "Installation Use the Unity Package Manager to install the Data Structures package. Open the Package Manager in Window > Package Manager Click the add ( + ) button in the status bar Select Add package from git URL from the add menu Enter the following Git URL in the text box and click Add: https://github.com/zigurous/unity-data-structures.git For more information on the Package Manager and installing packages, see the following pages: Unity's Package Manager Installing from a Git URL Importing Import the package namespace in each script or file you want to use it. Note : You may need to regenerate project files/assemblies first. using Zigurous.DataStructures; Source Code The source code for the Data Structures package is in the following repository: https://github.com/zigurous/unity-data-structures"
  }
}