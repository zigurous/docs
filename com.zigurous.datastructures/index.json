{
  "api/Zigurous.DataStructures.ArrayExtensions.html": {
    "href": "api/Zigurous.DataStructures.ArrayExtensions.html",
    "title": "Class ArrayExtensions | Data Structures",
    "keywords": "Class ArrayExtensions Inheritance System.Object ArrayExtensions Namespace : Zigurous.DataStructures Syntax public static class ArrayExtensions Methods Concat<T>(T[], T) Declaration public static T[] Concat<T>(this T[] array, T element) Parameters Type Name Description T[] array T element Returns Type Description T[] Type Parameters Name Description T Concat<T>(T[], T[]) Declaration public static T[] Concat<T>(this T[] array, T[] elements) Parameters Type Name Description T[] array T[] elements Returns Type Description T[] Type Parameters Name Description T Contains<T>(T[], T) Declaration public static bool Contains<T>(this T[] array, T match) where T : IEquatable<T> Parameters Type Name Description T[] array T match Returns Type Description System.Boolean Type Parameters Name Description T ContainsType<T>(T[], Type) Declaration public static bool ContainsType<T>(this T[] array, Type type) Parameters Type Name Description T[] array System.Type type Returns Type Description System.Boolean Type Parameters Name Description T ElementAt<T>(T[], Int32) Declaration public static T ElementAt<T>(this T[] array, int index) Parameters Type Name Description T[] array System.Int32 index Returns Type Description T Type Parameters Name Description T Filter<T>(T[], Predicate<T>) Declaration public static T[] Filter<T>(this T[] array, Predicate<T> filter) Parameters Type Name Description T[] array System.Predicate <T> filter Returns Type Description T[] Type Parameters Name Description T First<T>(T[]) Declaration public static T First<T>(this T[] array) Parameters Type Name Description T[] array Returns Type Description T Type Parameters Name Description T First<T>(T[], Predicate<T>) Declaration public static T First<T>(this T[] array, Predicate<T> where) Parameters Type Name Description T[] array System.Predicate <T> where Returns Type Description T Type Parameters Name Description T FirstNonNull<T>(T[]) Declaration public static T FirstNonNull<T>(this T[] array) where T : class Parameters Type Name Description T[] array Returns Type Description T Type Parameters Name Description T Flatten<T>(T[,,]) Declaration public static T[] Flatten<T>(this T[,, ] array) Parameters Type Name Description T[,,] array Returns Type Description T[] Type Parameters Name Description T Flatten<T>(T[,]) Declaration public static T[] Flatten<T>(this T[, ] array) Parameters Type Name Description T[,] array Returns Type Description T[] Type Parameters Name Description T For<T>(T[], Action<(T element, Int32 index)>) Declaration public static void For<T>(this T[] array, Action<(T element, int index)> action) Parameters Type Name Description T[] array System.Action < System.ValueTuple <T, System.Int32 >> action Type Parameters Name Description T ForEach<T>(T[], Action<T>) Declaration public static void ForEach<T>(this T[] array, Action<T> action) Parameters Type Name Description T[] array System.Action <T> action Type Parameters Name Description T IndexOf<T>(T[], T) Declaration public static int IndexOf<T>(this T[] array, T element) where T : IEquatable<T> Parameters Type Name Description T[] array T element Returns Type Description System.Int32 Type Parameters Name Description T IsAny<T>(T[], Predicate<T>) Declaration public static bool IsAny<T>(this T[] array, Predicate<T> predicate) Parameters Type Name Description T[] array System.Predicate <T> predicate Returns Type Description System.Boolean Type Parameters Name Description T IsEach<T>(T[], Predicate<T>) Declaration public static bool IsEach<T>(this T[] array, Predicate<T> predicate) Parameters Type Name Description T[] array System.Predicate <T> predicate Returns Type Description System.Boolean Type Parameters Name Description T IsEmpty(Array) Declaration public static bool IsEmpty(this Array array) Parameters Type Name Description System.Array array Returns Type Description System.Boolean IsInBounds(Array, Int32) Declaration public static bool IsInBounds(this Array array, int index) Parameters Type Name Description System.Array array System.Int32 index Returns Type Description System.Boolean IsNotEmpty(Array) Declaration public static bool IsNotEmpty(this Array array) Parameters Type Name Description System.Array array Returns Type Description System.Boolean IsNotInBounds(Array, Int32) Declaration public static bool IsNotInBounds(this Array array, int index) Parameters Type Name Description System.Array array System.Int32 index Returns Type Description System.Boolean Join<T>(T[], String, Int32, Int32) Declaration public static string Join<T>(this T[] array, string delimiter, int startIndex = 0, int endIndex = 2147483647) Parameters Type Name Description T[] array System.String delimiter System.Int32 startIndex System.Int32 endIndex Returns Type Description System.String Type Parameters Name Description T Last<T>(T[]) Declaration public static T Last<T>(this T[] array) Parameters Type Name Description T[] array Returns Type Description T Type Parameters Name Description T Last<T>(T[], Predicate<T>) Declaration public static T Last<T>(this T[] array, Predicate<T> where) Parameters Type Name Description T[] array System.Predicate <T> where Returns Type Description T Type Parameters Name Description T LastNonNull<T>(T[]) Declaration public static T LastNonNull<T>(this T[] array) where T : class Parameters Type Name Description T[] array Returns Type Description T Type Parameters Name Description T Map<TInput, TOutput>(TInput[], Converter<TInput, TOutput>) Declaration public static TOutput[] Map<TInput, TOutput>(this TInput[] array, Converter<TInput, TOutput> converter) Parameters Type Name Description TInput[] array System.Converter <TInput, TOutput> converter Returns Type Description TOutput[] Type Parameters Name Description TInput TOutput NonNull<T>(T[]) Declaration public static T[] NonNull<T>(this T[] array) where T : class Parameters Type Name Description T[] array Returns Type Description T[] Type Parameters Name Description T Random<T>(T[]) Declaration public static T Random<T>(this T[] array) Parameters Type Name Description T[] array Returns Type Description T Type Parameters Name Description T Reduce<TElement, TSum>(TElement[], TSum, ArrayExtensions.Reducer<TSum, TElement>) Declaration public static TSum Reduce<TElement, TSum>(this TElement[] array, TSum initialValue, ArrayExtensions.Reducer<TSum, TElement> reducer) Parameters Type Name Description TElement[] array TSum initialValue ArrayExtensions.Reducer <TSum, TElement> reducer Returns Type Description TSum Type Parameters Name Description TElement TSum RemoveAt<T>(T[], Int32) Declaration public static T[] RemoveAt<T>(this T[] array, int index) Parameters Type Name Description T[] array System.Int32 index Returns Type Description T[] Type Parameters Name Description T Reverse<T>(T[]) Declaration public static void Reverse<T>(this T[] array) Parameters Type Name Description T[] array Type Parameters Name Description T Reversed<T>(T[]) Declaration public static T[] Reversed<T>(this T[] array) Parameters Type Name Description T[] array Returns Type Description T[] Type Parameters Name Description T Slice<T>(T[], Int32) Declaration public static T[] Slice<T>(this T[] array, int amount) Parameters Type Name Description T[] array System.Int32 amount Returns Type Description T[] Type Parameters Name Description T Sort<T>(T[], Comparison<T>) Declaration public static void Sort<T>(this T[] array, Comparison<T> comparison) Parameters Type Name Description T[] array System.Comparison <T> comparison Type Parameters Name Description T Where<T>(T[], Predicate<T>) Declaration public static T[] Where<T>(this T[] array, Predicate<T> match) Parameters Type Name Description T[] array System.Predicate <T> match Returns Type Description T[] Type Parameters Name Description T WrapIndex(Array, Int32) Declaration public static int WrapIndex(this Array array, int index) Parameters Type Name Description System.Array array System.Int32 index Returns Type Description System.Int32"
  },
  "api/Zigurous.DataStructures.ArrayExtensions.Reducer-2.html": {
    "href": "api/Zigurous.DataStructures.ArrayExtensions.Reducer-2.html",
    "title": "Delegate ArrayExtensions.Reducer<TSum, TElement> | Data Structures",
    "keywords": "Delegate ArrayExtensions.Reducer<TSum, TElement> Namespace : Zigurous.DataStructures Syntax public delegate TSum Reducer<TSum, TElement>(TSum sum, TElement element); Parameters Type Name Description TSum sum TElement element Returns Type Description TSum Type Parameters Name Description TSum TElement"
  },
  "api/Zigurous.DataStructures.Bitmask.html": {
    "href": "api/Zigurous.DataStructures.Bitmask.html",
    "title": "Struct Bitmask | Data Structures",
    "keywords": "Struct Bitmask Namespace : Zigurous.DataStructures Syntax public struct Bitmask : IEquatable<Bitmask>, IEquatable<int> Constructors Bitmask(Int32) Creates a new Bitmask from a 32-bit integer. Declaration public Bitmask(int mask) Parameters Type Name Description System.Int32 mask Methods Change(Int32, Int32) Sets the nth bit of the bitmask to x. Declaration public void Change(int n, int x) Parameters Type Name Description System.Int32 n System.Int32 x Clear(Int32) Sets the nth bit of the bitmask to 0. Declaration public void Clear(int n) Parameters Type Name Description System.Int32 n ContainsMaskExclusive(Int32) Returns true if the bitmask contains another mask and there no flags set on the other mask that are not set on the bitmask. Declaration public bool ContainsMaskExclusive(int other) Parameters Type Name Description System.Int32 other Returns Type Description System.Boolean Equals(Int32) Declaration public bool Equals(int other) Parameters Type Name Description System.Int32 other Returns Type Description System.Boolean Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) Equals(Bitmask) Declaration public bool Equals(Bitmask other) Parameters Type Name Description Bitmask other Returns Type Description System.Boolean Get(Int32) Returns the nth bit of the bitmask. Declaration public int Get(int n) Parameters Type Name Description System.Int32 n Returns Type Description System.Int32 GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() Has(Int32) Returns true if the nth bit of the bitmask is set. Declaration public bool Has(int n) Parameters Type Name Description System.Int32 n Returns Type Description System.Boolean HasAnyFlag(Int32) Returns true if the bitmask contains any of the flags. (mask & flags) != 0 Declaration public bool HasAnyFlag(int flags) Parameters Type Name Description System.Int32 flags Returns Type Description System.Boolean HasFlag(Int32) Returns true if the bitmask contains the flag. (mask & flag) == flag Declaration public bool HasFlag(int flag) Parameters Type Name Description System.Int32 flag Returns Type Description System.Boolean Set(Int32) Sets the nth bit of the bitmask to 1. Declaration public void Set(int n) Parameters Type Name Description System.Int32 n Toggle(Int32) Toggles the nth bit of the bitmask. Declaration public void Toggle(int n) Parameters Type Name Description System.Int32 n ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators BitwiseAnd(Bitmask, Bitmask) Declaration public static Bitmask operator &(Bitmask a, Bitmask b) Parameters Type Name Description Bitmask a Bitmask b Returns Type Description Bitmask BitwiseOr(Bitmask, Bitmask) Declaration public static Bitmask operator |(Bitmask a, Bitmask b) Parameters Type Name Description Bitmask a Bitmask b Returns Type Description Bitmask Equality(Int32, Bitmask) Declaration public static bool operator ==(int lhs, Bitmask rhs) Parameters Type Name Description System.Int32 lhs Bitmask rhs Returns Type Description System.Boolean Equality(Bitmask, Int32) Declaration public static bool operator ==(Bitmask lhs, int rhs) Parameters Type Name Description Bitmask lhs System.Int32 rhs Returns Type Description System.Boolean Equality(Bitmask, Bitmask) Declaration public static bool operator ==(Bitmask lhs, Bitmask rhs) Parameters Type Name Description Bitmask lhs Bitmask rhs Returns Type Description System.Boolean ExclusiveOr(Bitmask, Bitmask) Declaration public static Bitmask operator ^(Bitmask a, Bitmask b) Parameters Type Name Description Bitmask a Bitmask b Returns Type Description Bitmask Implicit(Int32 to Bitmask) Declaration public static implicit operator Bitmask(int value) Parameters Type Name Description System.Int32 value Returns Type Description Bitmask Implicit(Bitmask to Int32) Declaration public static implicit operator int (Bitmask value) Parameters Type Name Description Bitmask value Returns Type Description System.Int32 Inequality(Int32, Bitmask) Declaration public static bool operator !=(int lhs, Bitmask rhs) Parameters Type Name Description System.Int32 lhs Bitmask rhs Returns Type Description System.Boolean Inequality(Bitmask, Int32) Declaration public static bool operator !=(Bitmask lhs, int rhs) Parameters Type Name Description Bitmask lhs System.Int32 rhs Returns Type Description System.Boolean Inequality(Bitmask, Bitmask) Declaration public static bool operator !=(Bitmask lhs, Bitmask rhs) Parameters Type Name Description Bitmask lhs Bitmask rhs Returns Type Description System.Boolean LeftShift(Bitmask, Int32) Declaration public static Bitmask operator <<(Bitmask a, int b) Parameters Type Name Description Bitmask a System.Int32 b Returns Type Description Bitmask OnesComplement(Bitmask) Declaration public static Bitmask operator ~(Bitmask a) Parameters Type Name Description Bitmask a Returns Type Description Bitmask RightShift(Bitmask, Int32) Declaration public static Bitmask operator >>(Bitmask a, int b) Parameters Type Name Description Bitmask a System.Int32 b Returns Type Description Bitmask"
  },
  "api/Zigurous.DataStructures.Bool3.html": {
    "href": "api/Zigurous.DataStructures.Bool3.html",
    "title": "Struct Bool3 | Data Structures",
    "keywords": "Struct Bool3 Namespace : Zigurous.DataStructures Syntax [Serializable] public struct Bool3 : IEquatable<Bool3> Constructors Bool3(Boolean, Boolean, Boolean) Creates a new Bool3 with given x, y, z components. Declaration public Bool3(bool x = false, bool y = false, bool z = false) Parameters Type Name Description System.Boolean x System.Boolean y System.Boolean z Fields x The X component. Declaration public bool x y The Y component. Declaration public bool y z The Z component. Declaration public bool z Properties False Shorthand for writing Bool3(false, false, false). Declaration public static readonly Bool3 False { get; } Item[Int32] Declaration public bool this[int index] { get; set; } Parameters Type Name Description System.Int32 index True Shorthand for writing Bool3(true, true, true). Declaration public static readonly Bool3 True { get; } X Shorthand for writing Bool3(true, false, false). Declaration public static readonly Bool3 X { get; } Y Shorthand for writing Bool3(false, true, false). Declaration public static readonly Bool3 Y { get; } Z Shorthand for writing Bool3(false, false, true). Declaration public static readonly Bool3 Z { get; } Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) Equals(Bool3) Declaration public bool Equals(Bool3 other) Parameters Type Name Description Bool3 other Returns Type Description System.Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() Operators BitwiseAnd(Bool3, Bool3) Declaration public static Bool3 operator &(Bool3 a, Bool3 b) Parameters Type Name Description Bool3 a Bool3 b Returns Type Description Bool3 BitwiseOr(Bool3, Bool3) Declaration public static Bool3 operator |(Bool3 a, Bool3 b) Parameters Type Name Description Bool3 a Bool3 b Returns Type Description Bool3 Equality(Bool3, Bool3) Declaration public static bool operator ==(Bool3 lhs, Bool3 rhs) Parameters Type Name Description Bool3 lhs Bool3 rhs Returns Type Description System.Boolean ExclusiveOr(Bool3, Bool3) Declaration public static Bool3 operator ^(Bool3 a, Bool3 b) Parameters Type Name Description Bool3 a Bool3 b Returns Type Description Bool3 Inequality(Bool3, Bool3) Declaration public static bool operator !=(Bool3 lhs, Bool3 rhs) Parameters Type Name Description Bool3 lhs Bool3 rhs Returns Type Description System.Boolean LogicalNot(Bool3) Declaration public static Bool3 operator !(Bool3 a) Parameters Type Name Description Bool3 a Returns Type Description Bool3"
  },
  "api/Zigurous.DataStructures.ClampedRange.html": {
    "href": "api/Zigurous.DataStructures.ClampedRange.html",
    "title": "Struct ClampedRange | Data Structures",
    "keywords": "Struct ClampedRange Implements INumberRange < System.Single > IRange < System.Single > Namespace : Zigurous.DataStructures Syntax [Serializable] public struct ClampedRange : INumberRange<float>, IRange<float> Constructors ClampedRange(Single, Single, Single, Single) Creates a new ClampedRange with given min and max values and a lower and upper clamp. Declaration public ClampedRange(float min = 0F, float max = 1F, float clampLower = 0F, float clampUpper = 1F) Parameters Type Name Description System.Single min System.Single max System.Single clampLower System.Single clampUpper Fields clamp The clamping values of the range. Declaration public FloatRange clamp Properties Delta The difference between the range min and max. Declaration public readonly float Delta { get; } max The upper bound of the range. Declaration public float max { get; set; } Median The number in the middle of the range min and max. Declaration public readonly float Median { get; } min The lower bound of the range. Declaration public float min { get; set; } Methods Clamp(Single) Clamps the given value between the range. Declaration public float Clamp(float value) Parameters Type Name Description System.Single value Returns Type Description System.Single Includes(Single) Determines if the given value is between the range [inclusive, inclusive]. Declaration public bool Includes(float value) Parameters Type Name Description System.Single value Returns Type Description System.Boolean Random() Returns a random value between the range [inclusive, inclusive]. Declaration public float Random() Returns Type Description System.Single Implements INumberRange<T> IRange<T>"
  },
  "api/Zigurous.DataStructures.ColorRange.html": {
    "href": "api/Zigurous.DataStructures.ColorRange.html",
    "title": "Struct ColorRange | Data Structures",
    "keywords": "Struct ColorRange Implements INumberRange < Color > IRange < Color > Namespace : Zigurous.DataStructures Syntax [Serializable] public struct ColorRange : INumberRange<Color>, IRange<Color> Constructors ColorRange(Color, Color) Creates a new ColorRange with given min and max colors. Declaration public ColorRange(Color min, Color max) Parameters Type Name Description Color min Color max Properties black Shorthand for writing ColorRange(Color.black, Color.black). Declaration public static readonly ColorRange black { get; } blackToWhite Shorthand for writing ColorRange(Color.black, Color.white). Declaration public static readonly ColorRange blackToWhite { get; } Delta The difference between the range min and max. Declaration public readonly Color Delta { get; } fadeIn Shorthand for writing ColorRange(Color(0,0,0,0), Color(0,0,0,1)). Declaration public static readonly ColorRange fadeIn { get; } fadeOut Shorthand for writing ColorRange(Color(0,0,0,1), Color(0,0,0,0)). Declaration public static readonly ColorRange fadeOut { get; } max The upper bound of the range. Declaration public Color max { get; set; } Median The color in the middle of the range min and max. Declaration public readonly Color Median { get; } min The lower bound of the range. Declaration public Color min { get; set; } transparent Shorthand for writing ColorRange(Color(0,0,0,0), Color(0,0,0,0)). Declaration public static readonly ColorRange transparent { get; } white Shorthand for writing ColorRange(Color.white, Color.white). Declaration public static readonly ColorRange white { get; } whiteToBlack Shorthand for writing ColorRange(Color.black, Color.white). Declaration public static readonly ColorRange whiteToBlack { get; } Methods Clamp(Color) Clamps the given color between the range min and max. Declaration public Color Clamp(Color value) Parameters Type Name Description Color value Returns Type Description Color Includes(Color) Determines if the given color is between the range min [inclusive] and max [inclusive]. Declaration public bool Includes(Color value) Parameters Type Name Description Color value Returns Type Description System.Boolean Random() Returns a random color between the range min [inclusive] and max [inclusive]. Declaration public Color Random() Returns Type Description Color Implements INumberRange<T> IRange<T>"
  },
  "api/Zigurous.DataStructures.ComparableExtensions.html": {
    "href": "api/Zigurous.DataStructures.ComparableExtensions.html",
    "title": "Class ComparableExtensions | Data Structures",
    "keywords": "Class ComparableExtensions Inheritance System.Object ComparableExtensions Namespace : Zigurous.DataStructures Syntax public static class ComparableExtensions Methods IsBetween<T>(T, T, T, Boolean, Boolean) Declaration public static bool IsBetween<T>(this T value, T min, T max, bool includeMin, bool includeMax) where T : IComparable<T> Parameters Type Name Description T value T min T max System.Boolean includeMin System.Boolean includeMax Returns Type Description System.Boolean Type Parameters Name Description T"
  },
  "api/Zigurous.DataStructures.DictionaryExtensions.html": {
    "href": "api/Zigurous.DataStructures.DictionaryExtensions.html",
    "title": "Class DictionaryExtensions | Data Structures",
    "keywords": "Class DictionaryExtensions Inheritance System.Object DictionaryExtensions Namespace : Zigurous.DataStructures Syntax public static class DictionaryExtensions Methods Where<TKey, TValue>(Dictionary<TKey, TValue>, Predicate<KeyValuePair<TKey, TValue>>) Declaration public static Dictionary<TKey, TValue> Where<TKey, TValue>(this Dictionary<TKey, TValue> dictionary, Predicate<KeyValuePair<TKey, TValue>> match) Parameters Type Name Description Dictionary <TKey, TValue> dictionary System.Predicate < KeyValuePair <TKey, TValue>> match Returns Type Description Dictionary <TKey, TValue> Type Parameters Name Description TKey TValue Where<TKey, TValue>(Dictionary<TKey, TValue>.KeyCollection, Predicate<TKey>) Declaration public static List<TKey> Where<TKey, TValue>(this Dictionary<TKey, TValue>.KeyCollection keys, Predicate<TKey> match) Parameters Type Name Description Dictionary.KeyCollection <> keys System.Predicate <TKey> match Returns Type Description List <TKey> Type Parameters Name Description TKey TValue Where<TKey, TValue>(Dictionary<TKey, TValue>.ValueCollection, Predicate<TValue>) Declaration public static List<TValue> Where<TKey, TValue>(this Dictionary<TKey, TValue>.ValueCollection values, Predicate<TValue> match) Parameters Type Name Description Dictionary.ValueCollection <> values System.Predicate <TValue> match Returns Type Description List <TValue> Type Parameters Name Description TKey TValue"
  },
  "api/Zigurous.DataStructures.DoubleAccumulator.html": {
    "href": "api/Zigurous.DataStructures.DoubleAccumulator.html",
    "title": "Class DoubleAccumulator | Data Structures",
    "keywords": "Class DoubleAccumulator Accumulates double values into a single total value. Inheritance System.Object ValueAccumulator < System.Double > DoubleAccumulator Inherited Members ValueAccumulator<Double>.values ValueAccumulator<Double>.total ValueAccumulator<Double>.Count ValueAccumulator<Double>.GetValue(Int32) ValueAccumulator<Double>.SetValue(Double, Int32) ValueAccumulator<Double>.RemoveValue(Int32) ValueAccumulator<Double>.Clear() Namespace : Zigurous.DataStructures Syntax public sealed class DoubleAccumulator : ValueAccumulator<double> Methods Add(Double) Declaration protected override double Add(double value) Parameters Type Name Description System.Double value Returns Type Description System.Double Overrides Zigurous.DataStructures.ValueAccumulator<System.Double>.Add(System.Double) Subtract(Double) Declaration protected override double Subtract(double value) Parameters Type Name Description System.Double value Returns Type Description System.Double Overrides Zigurous.DataStructures.ValueAccumulator<System.Double>.Subtract(System.Double)"
  },
  "api/Zigurous.DataStructures.EulerRange.html": {
    "href": "api/Zigurous.DataStructures.EulerRange.html",
    "title": "Struct EulerRange | Data Structures",
    "keywords": "Struct EulerRange Implements INumberRange < System.Single > IRange < System.Single > Namespace : Zigurous.DataStructures Syntax [Serializable] public struct EulerRange : INumberRange<float>, IRange<float> Constructors EulerRange(Single, Single) Creates a new EulerRange with given min and max values. Declaration public EulerRange(float min = -360F, float max = 360F) Parameters Type Name Description System.Single min System.Single max Properties Delta The difference between the range min and max. Declaration public readonly float Delta { get; } fullRange Shorthand for writing EulerRange(-360.0f, 360.0f). Declaration public static readonly EulerRange fullRange { get; } halfRange Shorthand for writing EulerRange(-180.0f, 180.0f). Declaration public static readonly EulerRange halfRange { get; } max The upper bound of the range. Declaration public float max { get; set; } Median The number in the middle of the range min and max. Declaration public readonly float Median { get; } min The lower bound of the range. Declaration public float min { get; set; } pi Shorthand for writing EulerRange(0.0f, 180.0f). Declaration public static readonly EulerRange pi { get; } pi2 Shorthand for writing EulerRange(0.0f, 360.0f). Declaration public static readonly EulerRange pi2 { get; } zero Shorthand for writing EulerRange(0.0f, 0.0f). Declaration public static readonly EulerRange zero { get; } Methods Clamp(Single) Clamps the given value between the range. Declaration public float Clamp(float value) Parameters Type Name Description System.Single value Returns Type Description System.Single Includes(Single) Determines if the given value is between the range [inclusive, inclusive]. Declaration public bool Includes(float value) Parameters Type Name Description System.Single value Returns Type Description System.Boolean Random() Returns a random value between the range [inclusive, inclusive]. Declaration public float Random() Returns Type Description System.Single Wrap(Single) Wraps the given value between the range. Declaration public float Wrap(float value) Parameters Type Name Description System.Single value Returns Type Description System.Single Implements INumberRange<T> IRange<T>"
  },
  "api/Zigurous.DataStructures.FloatAccumulator.html": {
    "href": "api/Zigurous.DataStructures.FloatAccumulator.html",
    "title": "Class FloatAccumulator | Data Structures",
    "keywords": "Class FloatAccumulator Accumulates float values into a single total value. Inheritance System.Object ValueAccumulator < System.Single > FloatAccumulator Inherited Members ValueAccumulator<Single>.values ValueAccumulator<Single>.total ValueAccumulator<Single>.Count ValueAccumulator<Single>.GetValue(Int32) ValueAccumulator<Single>.SetValue(Single, Int32) ValueAccumulator<Single>.RemoveValue(Int32) ValueAccumulator<Single>.Clear() Namespace : Zigurous.DataStructures Syntax public sealed class FloatAccumulator : ValueAccumulator<float> Methods Add(Single) Declaration protected override float Add(float value) Parameters Type Name Description System.Single value Returns Type Description System.Single Overrides Zigurous.DataStructures.ValueAccumulator<System.Single>.Add(System.Single) Subtract(Single) Declaration protected override float Subtract(float value) Parameters Type Name Description System.Single value Returns Type Description System.Single Overrides Zigurous.DataStructures.ValueAccumulator<System.Single>.Subtract(System.Single)"
  },
  "api/Zigurous.DataStructures.FloatRange.html": {
    "href": "api/Zigurous.DataStructures.FloatRange.html",
    "title": "Struct FloatRange | Data Structures",
    "keywords": "Struct FloatRange Implements INumberRange < System.Single > IRange < System.Single > Namespace : Zigurous.DataStructures Syntax [Serializable] public struct FloatRange : INumberRange<float>, IRange<float> Constructors FloatRange(Single, Single) Creates a new FloatRange with given min and max values. Declaration public FloatRange(float min = 0F, float max = 1F) Parameters Type Name Description System.Single min System.Single max Properties Delta The difference between the range min and max. Declaration public readonly float Delta { get; } max The upper bound of the range. Declaration public float max { get; set; } Median The number in the middle of the range min and max. Declaration public readonly float Median { get; } min The lower bound of the range. Declaration public float min { get; set; } minMax Shorthand for writing FloatRange(float.MinValue, float.MaxValue). Declaration public static readonly FloatRange minMax { get; } negative Shorthand for writing FloatRange(float.MinValue, 0.0f). Declaration public static readonly FloatRange negative { get; } one Shorthand for writing FloatRange(1.0f, 1.0f). Declaration public static readonly FloatRange one { get; } percent Shorthand for writing FloatRange(0.0f, 1.0f). Declaration public static readonly FloatRange percent { get; } positive Shorthand for writing FloatRange(0.0f, float.MaxValue). Declaration public static readonly FloatRange positive { get; } zero Shorthand for writing FloatRange(0.0f, 0.0f). Declaration public static readonly FloatRange zero { get; } Methods Clamp(Single) Clamps the given value between the range. Declaration public float Clamp(float value) Parameters Type Name Description System.Single value Returns Type Description System.Single Includes(Single) Determines if the given value is between the range [inclusive, inclusive]. Declaration public bool Includes(float value) Parameters Type Name Description System.Single value Returns Type Description System.Boolean Random() Returns a random value between the range [inclusive, inclusive]. Declaration public float Random() Returns Type Description System.Single Implements INumberRange<T> IRange<T>"
  },
  "api/Zigurous.DataStructures.GridSize.html": {
    "href": "api/Zigurous.DataStructures.GridSize.html",
    "title": "Struct GridSize | Data Structures",
    "keywords": "Struct GridSize Namespace : Zigurous.DataStructures Syntax [Serializable] public struct GridSize : IEquatable<GridSize>, IComparable<GridSize> Constructors GridSize(Int32) Creates a new GridSize with uniform rows and columns. Declaration public GridSize(int size) Parameters Type Name Description System.Int32 size GridSize(Int32, Int32) Creates a new GridSize with given rows and columns. Declaration public GridSize(int rows = 0, int columns = 0) Parameters Type Name Description System.Int32 rows System.Int32 columns Fields columns The number of columns in the grid. Declaration public int columns rows The number of rows in the grid. Declaration public int rows Properties Area Calculates the area of the grid (rows * columns). Declaration public readonly int Area { get; } max Shorthand for writing GridSize(int.MaxValue, int.MaxValue). Declaration public static readonly GridSize max { get; } one Shorthand for writing GridSize(1, 1). Declaration public static readonly GridSize one { get; } sq1024 Shorthand for writing GridSize(1024). Declaration public static readonly GridSize sq1024 { get; } sq128 Shorthand for writing GridSize(128). Declaration public static readonly GridSize sq128 { get; } sq16 Shorthand for writing GridSize(16). Declaration public static readonly GridSize sq16 { get; } sq2 Shorthand for writing GridSize(2). Declaration public static readonly GridSize sq2 { get; } sq2048 Shorthand for writing GridSize(2048). Declaration public static readonly GridSize sq2048 { get; } sq256 Shorthand for writing GridSize(256). Declaration public static readonly GridSize sq256 { get; } sq32 Shorthand for writing GridSize(32). Declaration public static readonly GridSize sq32 { get; } sq4 Shorthand for writing GridSize(4). Declaration public static readonly GridSize sq4 { get; } sq4096 Shorthand for writing GridSize(4096). Declaration public static readonly GridSize sq4096 { get; } sq512 Shorthand for writing GridSize(512). Declaration public static readonly GridSize sq512 { get; } sq64 Shorthand for writing GridSize(64). Declaration public static readonly GridSize sq64 { get; } sq8 Shorthand for writing GridSize(8). Declaration public static readonly GridSize sq8 { get; } sq8192 Shorthand for writing GridSize(8192). Declaration public static readonly GridSize sq8192 { get; } zero Shorthand for writing GridSize(0, 0). Declaration public static readonly GridSize zero { get; } Methods CompareTo(GridSize) Declaration public int CompareTo(GridSize other) Parameters Type Name Description GridSize other Returns Type Description System.Int32 Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) Equals(GridSize) Declaration public bool Equals(GridSize other) Parameters Type Name Description GridSize other Returns Type Description System.Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators Equality(GridSize, GridSize) Declaration public static bool operator ==(GridSize lhs, GridSize rhs) Parameters Type Name Description GridSize lhs GridSize rhs Returns Type Description System.Boolean Inequality(GridSize, GridSize) Declaration public static bool operator !=(GridSize lhs, GridSize rhs) Parameters Type Name Description GridSize lhs GridSize rhs Returns Type Description System.Boolean"
  },
  "api/Zigurous.DataStructures.HashCode.html": {
    "href": "api/Zigurous.DataStructures.HashCode.html",
    "title": "Class HashCode | Data Structures",
    "keywords": "Class HashCode Inheritance System.Object HashCode Namespace : Zigurous.DataStructures Syntax public static class HashCode Methods Combine(Int32, Int32) Combines two hash codes into one unique hash. Declaration public static int Combine(int hash1, int hash2) Parameters Type Name Description System.Int32 hash1 System.Int32 hash2 Returns Type Description System.Int32 Combine(Int32, Int32, Int32) Combines three hash codes into one unique hash. Declaration public static int Combine(int hash1, int hash2, int hash3) Parameters Type Name Description System.Int32 hash1 System.Int32 hash2 System.Int32 hash3 Returns Type Description System.Int32 Combine(Int32, Int32, Int32, Int32) Combines four hash codes into one unique hash. Declaration public static int Combine(int hash1, int hash2, int hash3, int hash4) Parameters Type Name Description System.Int32 hash1 System.Int32 hash2 System.Int32 hash3 System.Int32 hash4 Returns Type Description System.Int32"
  },
  "api/Zigurous.DataStructures.HashSetExtensions.html": {
    "href": "api/Zigurous.DataStructures.HashSetExtensions.html",
    "title": "Class HashSetExtensions | Data Structures",
    "keywords": "Class HashSetExtensions Inheritance System.Object HashSetExtensions Namespace : Zigurous.DataStructures Syntax public static class HashSetExtensions Methods First<T>(HashSet<T>, Predicate<T>) Declaration public static T First<T>(this HashSet<T> set, Predicate<T> where) Parameters Type Name Description HashSet <T> set System.Predicate <T> where Returns Type Description T Type Parameters Name Description T ForEach<T>(HashSet<T>, Action<T>) Declaration public static void ForEach<T>(this HashSet<T> set, Action<T> action) Parameters Type Name Description HashSet <T> set System.Action <T> action Type Parameters Name Description T IsFalseForEach<T>(HashSet<T>, Predicate<T>) Declaration public static bool IsFalseForEach<T>(this HashSet<T> set, Predicate<T> predicate) Parameters Type Name Description HashSet <T> set System.Predicate <T> predicate Returns Type Description System.Boolean Type Parameters Name Description T IsTrueForEach<T>(HashSet<T>, Predicate<T>) Declaration public static bool IsTrueForEach<T>(this HashSet<T> set, Predicate<T> predicate) Parameters Type Name Description HashSet <T> set System.Predicate <T> predicate Returns Type Description System.Boolean Type Parameters Name Description T"
  },
  "api/Zigurous.DataStructures.html": {
    "href": "api/Zigurous.DataStructures.html",
    "title": "Namespace Zigurous.DataStructures | Data Structures",
    "keywords": "Namespace Zigurous.DataStructures Classes ArrayExtensions ComparableExtensions DictionaryExtensions DoubleAccumulator Accumulates double values into a single total value. FloatAccumulator Accumulates float values into a single total value. HashCode HashSetExtensions Identifier IntAccumulator Accumulates int values into a single total value. ListExtensions Modules<T> Manages a list of registered entity modules. ObjectPool<T> Reuses objects from a shared pool to prevent instantiating new objects. The object pool can have a set capacity or it can grow in size. Optionally, objects that are currently active can be reused when the pool has reached capacity. QuaternionAccumulator Accumulates Quaternion values into a single total value. SingletonBehavior<T> SortedSetExtensions StringExtensions ValueAccumulator<T> Accumulates a set of stored values into a single total value. Vector2Accumulator Accumulates Vector2 values into a single total value. Vector2IntAccumulator Accumulates Vector2Int values into a single total value. Vector3Accumulator Accumulates Vector3 values into a single total value. Vector3IntAccumulator Accumulates Vector3Int values into a single total value. Vector4Accumulator Accumulates Vector4 values into a single total value. Structs Bitmask Bool3 ClampedRange ColorRange EulerRange FloatRange GridSize IntRange Quantity<T> Range<T> Size StringExtensions.NumberAbbreviation UIntRange UnitIntervalRange Vector2Range Vector3Range Interfaces IModular<T> A type that can register and unregister modules. INumberRange<T> IObjectPool<T> A type that can retrieve and recycle objects from a shared pool. IRange<T> Delegates ArrayExtensions.Reducer<TSum, TElement> ListExtensions.Reducer<TSum, TItem> ObjectPool<T>.Generator A function type that creates a new instance of an object."
  },
  "api/Zigurous.DataStructures.Identifier.html": {
    "href": "api/Zigurous.DataStructures.Identifier.html",
    "title": "Class Identifier | Data Structures",
    "keywords": "Class Identifier Inheritance System.Object Identifier Namespace : Zigurous.DataStructures Syntax public static class Identifier Methods GenerateFromTime() Creates a unique identifier based on unix time. Since time is always increasing, this value will always be different than previous generations. Declaration public static long GenerateFromTime() Returns Type Description System.Int64"
  },
  "api/Zigurous.DataStructures.IModular-1.html": {
    "href": "api/Zigurous.DataStructures.IModular-1.html",
    "title": "Interface IModular<T> | Data Structures",
    "keywords": "Interface IModular<T> A type that can register and unregister modules. Namespace : Zigurous.DataStructures Syntax public interface IModular<T> where T : class Type Parameters Name Description T Methods IsRegistered(T) Determines if the provided module is registered. Declaration bool IsRegistered(T module) Parameters Type Name Description T module Returns Type Description System.Boolean Register(T) Registers a module to the entity. Returns false if the module cannot be registered. Declaration bool Register(T module) Parameters Type Name Description T module Returns Type Description System.Boolean Unregister(T) Unregisters a module from the entity. Returns true if the module is unregistered. Declaration bool Unregister(T module) Parameters Type Name Description T module Returns Type Description System.Boolean"
  },
  "api/Zigurous.DataStructures.IntAccumulator.html": {
    "href": "api/Zigurous.DataStructures.IntAccumulator.html",
    "title": "Class IntAccumulator | Data Structures",
    "keywords": "Class IntAccumulator Accumulates int values into a single total value. Inheritance System.Object ValueAccumulator < System.Int32 > IntAccumulator Inherited Members ValueAccumulator<Int32>.values ValueAccumulator<Int32>.total ValueAccumulator<Int32>.Count ValueAccumulator<Int32>.GetValue(Int32) ValueAccumulator<Int32>.SetValue(Int32, Int32) ValueAccumulator<Int32>.RemoveValue(Int32) ValueAccumulator<Int32>.Clear() Namespace : Zigurous.DataStructures Syntax public sealed class IntAccumulator : ValueAccumulator<int> Methods Add(Int32) Declaration protected override int Add(int value) Parameters Type Name Description System.Int32 value Returns Type Description System.Int32 Overrides Zigurous.DataStructures.ValueAccumulator<System.Int32>.Add(System.Int32) Subtract(Int32) Declaration protected override int Subtract(int value) Parameters Type Name Description System.Int32 value Returns Type Description System.Int32 Overrides Zigurous.DataStructures.ValueAccumulator<System.Int32>.Subtract(System.Int32)"
  },
  "api/Zigurous.DataStructures.IntRange.html": {
    "href": "api/Zigurous.DataStructures.IntRange.html",
    "title": "Struct IntRange | Data Structures",
    "keywords": "Struct IntRange Implements INumberRange < System.Int32 > IRange < System.Int32 > Namespace : Zigurous.DataStructures Syntax [Serializable] public struct IntRange : INumberRange<int>, IRange<int> Constructors IntRange(Int32, Int32) Creates a new IntRange with given min and max values. Declaration public IntRange(int min, int max) Parameters Type Name Description System.Int32 min System.Int32 max Properties Delta The difference between the range min and max. Declaration public readonly int Delta { get; } max The upper bound of the range. Declaration public int max { get; set; } Median The number in the middle of the range min and max. Declaration public readonly int Median { get; } min The lower bound of the range. Declaration public int min { get; set; } minMax Shorthand for writing IntRange(int.MinValue, int.MaxValue). Declaration public static readonly IntRange minMax { get; } negative Shorthand for writing IntRange(int.MinValue, 0). Declaration public static readonly IntRange negative { get; } one Shorthand for writing IntRange(1, 1). Declaration public static readonly IntRange one { get; } positive Shorthand for writing IntRange(0, int.MaxValue). Declaration public static readonly IntRange positive { get; } zero Shorthand for writing IntRange(0, 0). Declaration public static readonly IntRange zero { get; } Methods Clamp(Int32) Clamps the given value between the range. Declaration public int Clamp(int value) Parameters Type Name Description System.Int32 value Returns Type Description System.Int32 Includes(Int32) Determines if the given value is between the range [inclusive, exclusive). Declaration public bool Includes(int value) Parameters Type Name Description System.Int32 value Returns Type Description System.Boolean Includes(Int32, Boolean, Boolean) Determines if the given value is between the range using a custom inclusive/exclusive combination. Declaration public bool Includes(int value, bool includeMin, bool includeMax) Parameters Type Name Description System.Int32 value System.Boolean includeMin System.Boolean includeMax Returns Type Description System.Boolean Random() Returns a random value between the range [inclusive, exclusive). Declaration public int Random() Returns Type Description System.Int32 RandomInclusive() Returns a random value between the range [inclusive, inclusive]. Declaration public int RandomInclusive() Returns Type Description System.Int32 Implements INumberRange<T> IRange<T>"
  },
  "api/Zigurous.DataStructures.INumberRange-1.html": {
    "href": "api/Zigurous.DataStructures.INumberRange-1.html",
    "title": "Interface INumberRange<T> | Data Structures",
    "keywords": "Interface INumberRange<T> Inherited Members IRange<T>.min IRange<T>.max IRange<T>.Includes(T) Namespace : Zigurous.DataStructures Syntax public interface INumberRange<T> : IRange<T> Type Parameters Name Description T Properties Delta Declaration T Delta { get; } Median Declaration T Median { get; } Methods Clamp(T) Declaration T Clamp(T value) Parameters Type Name Description T value Returns Type Description T Random() Declaration T Random() Returns Type Description T"
  },
  "api/Zigurous.DataStructures.IObjectPool-1.html": {
    "href": "api/Zigurous.DataStructures.IObjectPool-1.html",
    "title": "Interface IObjectPool<T> | Data Structures",
    "keywords": "Interface IObjectPool<T> A type that can retrieve and recycle objects from a shared pool. Namespace : Zigurous.DataStructures Syntax public interface IObjectPool<T> : IDisposable where T : class Type Parameters Name Description T Methods Empty() Empties the object pool of all objects. Declaration void Empty() Recycle(T) Adds an item back to the object pool so it can be reused. Declaration void Recycle(T item) Parameters Type Name Description T item Retrieve() Retrieves an item from the object pool. Declaration T Retrieve() Returns Type Description T"
  },
  "api/Zigurous.DataStructures.IRange-1.html": {
    "href": "api/Zigurous.DataStructures.IRange-1.html",
    "title": "Interface IRange<T> | Data Structures",
    "keywords": "Interface IRange<T> Namespace : Zigurous.DataStructures Syntax public interface IRange<T> Type Parameters Name Description T Properties max Declaration T max { get; set; } min Declaration T min { get; set; } Methods Includes(T) Declaration bool Includes(T value) Parameters Type Name Description T value Returns Type Description System.Boolean"
  },
  "api/Zigurous.DataStructures.ListExtensions.html": {
    "href": "api/Zigurous.DataStructures.ListExtensions.html",
    "title": "Class ListExtensions | Data Structures",
    "keywords": "Class ListExtensions Inheritance System.Object ListExtensions Namespace : Zigurous.DataStructures Syntax public static class ListExtensions Methods Add<T>(List<T>, T, Int32) Declaration public static void Add<T>(this List<T> list, T value, int count) Parameters Type Name Description List <T> list T value System.Int32 count Type Parameters Name Description T CombinedWith<T>(List<T>, List<T>) Declaration public static List<T> CombinedWith<T>(this List<T> list, List<T> otherList) Parameters Type Name Description List <T> list List <T> otherList Returns Type Description List <T> Type Parameters Name Description T ElementAt<T>(List<T>, Int32) Declaration public static T ElementAt<T>(this List<T> list, int index) Parameters Type Name Description List <T> list System.Int32 index Returns Type Description T Type Parameters Name Description T First<T>(List<T>) Declaration public static T First<T>(this List<T> list) Parameters Type Name Description List <T> list Returns Type Description T Type Parameters Name Description T First<T>(List<T>, Predicate<T>) Declaration public static T First<T>(this List<T> list, Predicate<T> where) Parameters Type Name Description List <T> list System.Predicate <T> where Returns Type Description T Type Parameters Name Description T For<T>(List<T>, Action<(T item, Int32 index)>) Declaration public static void For<T>(this List<T> list, Action<(T item, int index)> action) Parameters Type Name Description List <T> list System.Action < System.ValueTuple <T, System.Int32 >> action Type Parameters Name Description T IsEmpty<T>(List<T>) Declaration public static bool IsEmpty<T>(this List<T> list) Parameters Type Name Description List <T> list Returns Type Description System.Boolean Type Parameters Name Description T IsFalseForEach<T>(List<T>, Predicate<T>) Declaration public static bool IsFalseForEach<T>(this List<T> list, Predicate<T> predicate) Parameters Type Name Description List <T> list System.Predicate <T> predicate Returns Type Description System.Boolean Type Parameters Name Description T IsNotEmpty<T>(List<T>) Declaration public static bool IsNotEmpty<T>(this List<T> list) Parameters Type Name Description List <T> list Returns Type Description System.Boolean Type Parameters Name Description T IsTrueForEach<T>(List<T>, Predicate<T>) Declaration public static bool IsTrueForEach<T>(this List<T> list, Predicate<T> predicate) Parameters Type Name Description List <T> list System.Predicate <T> predicate Returns Type Description System.Boolean Type Parameters Name Description T Join<T>(List<T>, String) Declaration public static string Join<T>(this List<T> list, string delimiter = \",\") Parameters Type Name Description List <T> list System.String delimiter Returns Type Description System.String Type Parameters Name Description T Last<T>(List<T>) Declaration public static T Last<T>(this List<T> list) Parameters Type Name Description List <T> list Returns Type Description T Type Parameters Name Description T Map<TInput, TOutput>(List<TInput>, Converter<TInput, TOutput>) Declaration public static List<TOutput> Map<TInput, TOutput>(this List<TInput> list, Converter<TInput, TOutput> converter) Parameters Type Name Description List <TInput> list System.Converter <TInput, TOutput> converter Returns Type Description List <TOutput> Type Parameters Name Description TInput TOutput Random<T>(List<T>) Declaration public static T Random<T>(this List<T> list) Parameters Type Name Description List <T> list Returns Type Description T Type Parameters Name Description T Reduce<TItem, TSum>(List<TItem>, TSum, ListExtensions.Reducer<TSum, TItem>) Declaration public static TSum Reduce<TItem, TSum>(this List<TItem> list, TSum initialValue, ListExtensions.Reducer<TSum, TItem> reducer) Parameters Type Name Description List <TItem> list TSum initialValue ListExtensions.Reducer <TSum, TItem> reducer Returns Type Description TSum Type Parameters Name Description TItem TSum RemoveFirst<T>(List<T>) Declaration public static void RemoveFirst<T>(this List<T> list) Parameters Type Name Description List <T> list Type Parameters Name Description T RemoveLast<T>(List<T>) Declaration public static void RemoveLast<T>(this List<T> list) Parameters Type Name Description List <T> list Type Parameters Name Description T Where<T>(List<T>, Predicate<T>) Declaration public static List<T> Where<T>(this List<T> list, Predicate<T> match) Parameters Type Name Description List <T> list System.Predicate <T> match Returns Type Description List <T> Type Parameters Name Description T"
  },
  "api/Zigurous.DataStructures.ListExtensions.Reducer-2.html": {
    "href": "api/Zigurous.DataStructures.ListExtensions.Reducer-2.html",
    "title": "Delegate ListExtensions.Reducer<TSum, TItem> | Data Structures",
    "keywords": "Delegate ListExtensions.Reducer<TSum, TItem> Namespace : Zigurous.DataStructures Syntax public delegate TSum Reducer<TSum, TItem>(TSum sum, TItem item); Parameters Type Name Description TSum sum TItem item Returns Type Description TSum Type Parameters Name Description TSum TItem"
  },
  "api/Zigurous.DataStructures.Modules-1.html": {
    "href": "api/Zigurous.DataStructures.Modules-1.html",
    "title": "Class Modules<T> | Data Structures",
    "keywords": "Class Modules<T> Manages a list of registered entity modules. Inheritance System.Object Modules<T> Implements IModular <T> Namespace : Zigurous.DataStructures Syntax public sealed class Modules<T> : IModular<T> where T : class Type Parameters Name Description T Constructors Modules(T[], Action<T>, Action<T>) Creates a new Modules instance and pre-registers a list of given items. Declaration public Modules(T[] items, Action<T> registered = null, Action<T> unregistered = null) Parameters Type Name Description T[] items System.Action <T> registered System.Action <T> unregistered Modules(Int32, Action<T>, Action<T>) Creates a new Modules instance with a set capacity. Declaration public Modules(int capacity, Action<T> registered = null, Action<T> unregistered = null) Parameters Type Name Description System.Int32 capacity System.Action <T> registered System.Action <T> unregistered Fields registered A callback invoked when a new module is registered. Declaration public Action<T> registered unregistered A callback invoked when a module is unregistered. Declaration public Action<T> unregistered Properties Count The amount of modules registered to the entity. Declaration public int Count { get; } Item[Int32] Returns the module at the given index. Declaration public T this[int index] { get; } Parameters Type Name Description System.Int32 index items The modules registered to the entity. Declaration public List<T> items { get; } Methods IsRegistered(T) Deternines if the provided item is registered. Declaration public bool IsRegistered(T item) Parameters Type Name Description T item Returns Type Description System.Boolean Register(T) Registers an item to the entity. Returns false if the item cannot be registered. Declaration public bool Register(T item) Parameters Type Name Description T item Returns Type Description System.Boolean Unregister(T) Unregisters an item from the entity. Returns true if the item is unregistered. Declaration public bool Unregister(T item) Parameters Type Name Description T item Returns Type Description System.Boolean Implements IModular<T>"
  },
  "api/Zigurous.DataStructures.ObjectPool-1.Generator.html": {
    "href": "api/Zigurous.DataStructures.ObjectPool-1.Generator.html",
    "title": "Delegate ObjectPool<T>.Generator | Data Structures",
    "keywords": "Delegate ObjectPool<T>.Generator A function type that creates a new instance of an object. Namespace : Zigurous.DataStructures Syntax public delegate T Generator(); Returns Type Description T"
  },
  "api/Zigurous.DataStructures.ObjectPool-1.html": {
    "href": "api/Zigurous.DataStructures.ObjectPool-1.html",
    "title": "Class ObjectPool<T> | Data Structures",
    "keywords": "Class ObjectPool<T> Reuses objects from a shared pool to prevent instantiating new objects. The object pool can have a set capacity or it can grow in size. Optionally, objects that are currently active can be reused when the pool has reached capacity. Inheritance System.Object ObjectPool<T> Implements IObjectPool <T> Namespace : Zigurous.DataStructures Syntax public sealed class ObjectPool<T> : IObjectPool<T>, IDisposable where T : class Type Parameters Name Description T Constructors ObjectPool(Int32) Creates a new ObjectPool with an initial capacity. New objects are created as needed using the object type default value. Declaration public ObjectPool(int initialCapacity) Parameters Type Name Description System.Int32 initialCapacity ObjectPool(Int32, Int32, Boolean) Creates a new ObjectPool with an initial capacity and max capacity. Optionally active objects can be reused when the pool has reached max capacity. New objects are created as needed using the object type default value. Declaration public ObjectPool(int initialCapacity, int maxCapacity, bool reuseActive = false) Parameters Type Name Description System.Int32 initialCapacity System.Int32 maxCapacity System.Boolean reuseActive ObjectPool(ObjectPool<T>.Generator, Int32) Creates a new ObjectPool with a given generator function and initial capacity. New objects are created as needed with no max capacity. Declaration public ObjectPool(ObjectPool<T>.Generator generator, int initialCapacity) Parameters Type Name Description ObjectPool.Generator <> generator System.Int32 initialCapacity ObjectPool(ObjectPool<T>.Generator, Int32, Int32, Boolean) Creates a new ObjectPool with a given generator function and set capacity limits. Optionally active objects can be reused when the pool has reached max capacity. Declaration public ObjectPool(ObjectPool<T>.Generator generator, int initialCapacity, int maxCapacity, bool reuseActive = false) Parameters Type Name Description ObjectPool.Generator <> generator System.Int32 initialCapacity System.Int32 maxCapacity System.Boolean reuseActive Properties ActiveCount The number of objects currently being used. Declaration public int ActiveCount { get; } AvailableCount The number of objects available to be reused. Declaration public int AvailableCount { get; } maxCapacity The maximum number of objects that can be generated. Declaration public int maxCapacity { get; } reuseActive Whether active objects should be reused when the object pool has reached capacity. Declaration public bool reuseActive { get; } Methods Dispose() Disposes of all class resources. Declaration public void Dispose() Dispose(Action<T>) Disposes of all class resources and invokes a cleanup function on each object in the pool. This is useful, for example, if you want to destroy the objects when the pool is disposed. Declaration public void Dispose(Action<T> cleanup) Parameters Type Name Description System.Action <T> cleanup Empty() Empties the object pool of all objects. Declaration public void Empty() Empty(Action<T>) Empties the object pool of all objects and invokes a cleanup function on each object. This is useful, for example, if you want to destroy the objects when the pool is emptied. Declaration public void Empty(Action<T> cleanup) Parameters Type Name Description System.Action <T> cleanup Recycle(T) Adds an item back to the object pool so it can be reused. Declaration public void Recycle(T item) Parameters Type Name Description T item Retrieve() Retrieves an item from the object pool. If there are no available objects in the pool, either a new object will be generated or the oldest object will be reused depending upon how the ObjectPool was created. Declaration public T Retrieve() Returns Type Description T Implements IObjectPool<T>"
  },
  "api/Zigurous.DataStructures.Quantity-1.html": {
    "href": "api/Zigurous.DataStructures.Quantity-1.html",
    "title": "Struct Quantity<T> | Data Structures",
    "keywords": "Struct Quantity<T> Namespace : Zigurous.DataStructures Syntax [Serializable] public struct Quantity<T> : IEquatable<Quantity<T>> where T : IEquatable<T> Type Parameters Name Description T Constructors Quantity(T, Int32) Creates a new Quantity with given amount of entity. Declaration public Quantity(T entity, int amount) Parameters Type Name Description T entity System.Int32 amount Fields amount The number of entities. Declaration public int amount entity The entity being counted. Declaration public T entity Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) Equals(Quantity<T>) Declaration public bool Equals(Quantity<T> other) Parameters Type Name Description Quantity <T> other Returns Type Description System.Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() Operators Equality(Quantity<T>, Quantity<T>) Declaration public static bool operator ==(Quantity<T> lhs, Quantity<T> rhs) Parameters Type Name Description Quantity <T> lhs Quantity <T> rhs Returns Type Description System.Boolean Inequality(Quantity<T>, Quantity<T>) Declaration public static bool operator !=(Quantity<T> lhs, Quantity<T> rhs) Parameters Type Name Description Quantity <T> lhs Quantity <T> rhs Returns Type Description System.Boolean"
  },
  "api/Zigurous.DataStructures.QuaternionAccumulator.html": {
    "href": "api/Zigurous.DataStructures.QuaternionAccumulator.html",
    "title": "Class QuaternionAccumulator | Data Structures",
    "keywords": "Class QuaternionAccumulator Accumulates Quaternion values into a single total value. Inheritance System.Object ValueAccumulator < Quaternion > QuaternionAccumulator Inherited Members ValueAccumulator<Quaternion>.values ValueAccumulator<Quaternion>.total ValueAccumulator<Quaternion>.Count ValueAccumulator<Quaternion>.GetValue(Int32) ValueAccumulator<Quaternion>.SetValue(Quaternion, Int32) ValueAccumulator<Quaternion>.RemoveValue(Int32) ValueAccumulator<Quaternion>.Clear() Namespace : Zigurous.DataStructures Syntax public sealed class QuaternionAccumulator : ValueAccumulator<Quaternion> Constructors QuaternionAccumulator() Declaration public QuaternionAccumulator() Methods Add(Quaternion) Declaration protected override Quaternion Add(Quaternion value) Parameters Type Name Description Quaternion value Returns Type Description Quaternion Overrides Zigurous.DataStructures.ValueAccumulator<Quaternion>.Add(Quaternion) Subtract(Quaternion) Declaration protected override Quaternion Subtract(Quaternion value) Parameters Type Name Description Quaternion value Returns Type Description Quaternion Overrides Zigurous.DataStructures.ValueAccumulator<Quaternion>.Subtract(Quaternion)"
  },
  "api/Zigurous.DataStructures.Range-1.html": {
    "href": "api/Zigurous.DataStructures.Range-1.html",
    "title": "Struct Range<T> | Data Structures",
    "keywords": "Struct Range<T> Implements IRange <T> Namespace : Zigurous.DataStructures Syntax public struct Range<T> : IRange<T> where T : IComparable<T> Type Parameters Name Description T Constructors Range(T, T) Creates a new Range with given min and max values. Declaration public Range(T min = null, T max = null) Parameters Type Name Description T min T max Properties max The upper bound of the range. Declaration public T max { get; set; } min The lower bound of the range. Declaration public T min { get; set; } Methods Includes(T) Determines if the given value is between the range [inclusive, inclusive]. Declaration public bool Includes(T value) Parameters Type Name Description T value Returns Type Description System.Boolean Includes(T, Boolean, Boolean) Determines if the given value is between the range using a custom inclusive/exclusive combination. Declaration public bool Includes(T value, bool includeMin, bool includeMax) Parameters Type Name Description T value System.Boolean includeMin System.Boolean includeMax Returns Type Description System.Boolean Implements IRange<T>"
  },
  "api/Zigurous.DataStructures.SingletonBehavior-1.html": {
    "href": "api/Zigurous.DataStructures.SingletonBehavior-1.html",
    "title": "Class SingletonBehavior<T> | Data Structures",
    "keywords": "Class SingletonBehavior<T> Inheritance System.Object SingletonBehavior<T> Namespace : Zigurous.DataStructures Syntax public abstract class SingletonBehavior<T> : MonoBehaviour where T : Component Type Parameters Name Description T Constructors SingletonBehavior() Declaration protected SingletonBehavior() Properties HasInstance Returns true if the Singleton has been initialized and an instance is available to use. Declaration public static bool HasInstance { get; } Instance The current instance of the class. The instance will be created if it does not already exist. Declaration public static T Instance { get; } Methods Awake() Declaration protected virtual void Awake() OnDestroy() Declaration protected virtual void OnDestroy() OnSingletonInitialized() A callback invoked when the Singleton is first initialized. Declaration protected virtual void OnSingletonInitialized()"
  },
  "api/Zigurous.DataStructures.Size.html": {
    "href": "api/Zigurous.DataStructures.Size.html",
    "title": "Struct Size | Data Structures",
    "keywords": "Struct Size Namespace : Zigurous.DataStructures Syntax [Serializable] public struct Size : IEquatable<Size>, IComparable<Size> Constructors Size(Int32) Creates a new Size with uniform width and height. Declaration public Size(int size) Parameters Type Name Description System.Int32 size Size(Int32, Int32) Creates a new Size of given width and height. Declaration public Size(int width = 0, int height = 0) Parameters Type Name Description System.Int32 width System.Int32 height Fields height The height of the entity. Declaration public int height width The width of the entity. Declaration public int width Properties Area Calculates the area (width * height). Declaration public readonly int Area { get; } max Shorthand for writing Size(int.MaxValue, int.MaxValue). Declaration public static readonly Size max { get; } one Shorthand for writing Size(1, 1). Declaration public static readonly Size one { get; } sq1024 Shorthand for writing Size(1024). Declaration public static readonly Size sq1024 { get; } sq128 Shorthand for writing Size(128). Declaration public static readonly Size sq128 { get; } sq16 Shorthand for writing Size(16). Declaration public static readonly Size sq16 { get; } sq2 Shorthand for writing Size(2). Declaration public static readonly Size sq2 { get; } sq2048 Shorthand for writing Size(2048). Declaration public static readonly Size sq2048 { get; } sq256 Shorthand for writing Size(256). Declaration public static readonly Size sq256 { get; } sq32 Shorthand for writing Size(32). Declaration public static readonly Size sq32 { get; } sq4 Shorthand for writing Size(4). Declaration public static readonly Size sq4 { get; } sq4096 Shorthand for writing Size(4096). Declaration public static readonly Size sq4096 { get; } sq512 Shorthand for writing Size(512). Declaration public static readonly Size sq512 { get; } sq64 Shorthand for writing Size(64). Declaration public static readonly Size sq64 { get; } sq8 Shorthand for writing Size(8). Declaration public static readonly Size sq8 { get; } sq8192 Shorthand for writing Size(8192). Declaration public static readonly Size sq8192 { get; } zero Shorthand for writing Size(0, 0). Declaration public static readonly Size zero { get; } Methods CompareTo(Size) Declaration public int CompareTo(Size other) Parameters Type Name Description Size other Returns Type Description System.Int32 Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) Equals(Size) Declaration public bool Equals(Size other) Parameters Type Name Description Size other Returns Type Description System.Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators Equality(Size, Size) Declaration public static bool operator ==(Size lhs, Size rhs) Parameters Type Name Description Size lhs Size rhs Returns Type Description System.Boolean Inequality(Size, Size) Declaration public static bool operator !=(Size lhs, Size rhs) Parameters Type Name Description Size lhs Size rhs Returns Type Description System.Boolean"
  },
  "api/Zigurous.DataStructures.SortedSetExtensions.html": {
    "href": "api/Zigurous.DataStructures.SortedSetExtensions.html",
    "title": "Class SortedSetExtensions | Data Structures",
    "keywords": "Class SortedSetExtensions Inheritance System.Object SortedSetExtensions Namespace : Zigurous.DataStructures Syntax public static class SortedSetExtensions Methods First<T>(SortedSet<T>, Predicate<T>) Declaration public static T First<T>(this SortedSet<T> set, Predicate<T> where) Parameters Type Name Description SortedSet <T> set System.Predicate <T> where Returns Type Description T Type Parameters Name Description T ForEach<T>(SortedSet<T>, Action<T>) Declaration public static void ForEach<T>(this SortedSet<T> set, Action<T> action) Parameters Type Name Description SortedSet <T> set System.Action <T> action Type Parameters Name Description T IsFalseForEach<T>(SortedSet<T>, Predicate<T>) Declaration public static bool IsFalseForEach<T>(this SortedSet<T> set, Predicate<T> predicate) Parameters Type Name Description SortedSet <T> set System.Predicate <T> predicate Returns Type Description System.Boolean Type Parameters Name Description T IsTrueForEach<T>(SortedSet<T>, Predicate<T>) Declaration public static bool IsTrueForEach<T>(this SortedSet<T> set, Predicate<T> predicate) Parameters Type Name Description SortedSet <T> set System.Predicate <T> predicate Returns Type Description System.Boolean Type Parameters Name Description T"
  },
  "api/Zigurous.DataStructures.StringExtensions.html": {
    "href": "api/Zigurous.DataStructures.StringExtensions.html",
    "title": "Class StringExtensions | Data Structures",
    "keywords": "Class StringExtensions Inheritance System.Object StringExtensions Namespace : Zigurous.DataStructures Syntax public static class StringExtensions Methods IsEmpty(String) Declaration public static bool IsEmpty(this string str) Parameters Type Name Description System.String str Returns Type Description System.Boolean IsNotEmpty(String) Declaration public static bool IsNotEmpty(this string str) Parameters Type Name Description System.String str Returns Type Description System.Boolean Repeat(String, Int32) Declaration public static string Repeat(this string str, int n) Parameters Type Name Description System.String str System.Int32 n Returns Type Description System.String ToAbbreviatedString(Single) Declaration public static string ToAbbreviatedString(this float number) Parameters Type Name Description System.Single number Returns Type Description System.String ToAbbreviatedString(Single, StringExtensions.NumberAbbreviation[]) Declaration public static string ToAbbreviatedString(this float number, StringExtensions.NumberAbbreviation[] abbreviations) Parameters Type Name Description System.Single number StringExtensions.NumberAbbreviation [] abbreviations Returns Type Description System.String"
  },
  "api/Zigurous.DataStructures.StringExtensions.NumberAbbreviation.html": {
    "href": "api/Zigurous.DataStructures.StringExtensions.NumberAbbreviation.html",
    "title": "Struct StringExtensions.NumberAbbreviation | Data Structures",
    "keywords": "Struct StringExtensions.NumberAbbreviation Namespace : Zigurous.DataStructures Syntax [Serializable] public struct NumberAbbreviation Constructors NumberAbbreviation(Single, String) Declaration public NumberAbbreviation(float factor, string format) Parameters Type Name Description System.Single factor System.String format Fields factor Declaration public float factor format Declaration public string format"
  },
  "api/Zigurous.DataStructures.UIntRange.html": {
    "href": "api/Zigurous.DataStructures.UIntRange.html",
    "title": "Struct UIntRange | Data Structures",
    "keywords": "Struct UIntRange Implements INumberRange < System.UInt32 > IRange < System.UInt32 > Namespace : Zigurous.DataStructures Syntax [Serializable] public struct UIntRange : INumberRange<uint>, IRange<uint> Constructors UIntRange(UInt32, UInt32) Creates a new UIntRange with given min and max values. Declaration public UIntRange(uint min, uint max) Parameters Type Name Description System.UInt32 min System.UInt32 max Properties Delta The difference between the range min and max. Declaration public readonly uint Delta { get; } max The upper bound of the range. Declaration public uint max { get; set; } Median The number in the middle of the range min and max. Declaration public readonly uint Median { get; } min The lower bound of the range. Declaration public uint min { get; set; } minMax Shorthand for writing UIntRange(uint.MinValue, uint.MaxValue). Declaration public static readonly UIntRange minMax { get; } one Shorthand for writing UIntRange(1, 1). Declaration public static readonly UIntRange one { get; } zero Shorthand for writing UIntRange(0, 0). Declaration public static readonly UIntRange zero { get; } Methods Clamp(UInt32) Clamps the given value between the range. Declaration public uint Clamp(uint value) Parameters Type Name Description System.UInt32 value Returns Type Description System.UInt32 Includes(UInt32) Determines if the given value is between the range [inclusive, exclusive). Declaration public bool Includes(uint value) Parameters Type Name Description System.UInt32 value Returns Type Description System.Boolean Includes(UInt32, Boolean, Boolean) Determines if the given value is between the range using a custom inclusive/exclusive combination. Declaration public bool Includes(uint value, bool includeMin, bool includeMax) Parameters Type Name Description System.UInt32 value System.Boolean includeMin System.Boolean includeMax Returns Type Description System.Boolean Random() Returns a random value between the range [inclusive, exclusive). Declaration public uint Random() Returns Type Description System.UInt32 RandomInclusive() Returns a random value between the range [inclusive, inclusive]. Declaration public uint RandomInclusive() Returns Type Description System.UInt32 Implements INumberRange<T> IRange<T>"
  },
  "api/Zigurous.DataStructures.UnitIntervalRange.html": {
    "href": "api/Zigurous.DataStructures.UnitIntervalRange.html",
    "title": "Struct UnitIntervalRange | Data Structures",
    "keywords": "Struct UnitIntervalRange Implements INumberRange < System.Single > IRange < System.Single > Namespace : Zigurous.DataStructures Syntax [Serializable] public struct UnitIntervalRange : INumberRange<float>, IRange<float> Constructors UnitIntervalRange(Single, Single) Creates a new UnitIntervalRange with given min and max values. Declaration public UnitIntervalRange(float min = 0F, float max = 1F) Parameters Type Name Description System.Single min System.Single max Properties Delta The difference between the range min and max. Declaration public readonly float Delta { get; } max The upper bound of the range. Declaration public float max { get; set; } Median The number in the middle of the range min and max. Declaration public readonly float Median { get; } min The lower bound of the range. Declaration public float min { get; set; } minMax Shorthand for writing UnitIntervalRange(0.0f, 1.0f). Declaration public static readonly UnitIntervalRange minMax { get; } one Shorthand for writing UnitIntervalRange(1.0f, 1.0f). Declaration public static readonly UnitIntervalRange one { get; } zero Shorthand for writing UnitIntervalRange(0.0f, 0.0f). Declaration public static readonly UnitIntervalRange zero { get; } Methods Clamp(Single) Clamps the given value between the range. Declaration public float Clamp(float value) Parameters Type Name Description System.Single value Returns Type Description System.Single Includes(Single) Determines if the given value is between the range [inclusive, inclusive]. Declaration public bool Includes(float value) Parameters Type Name Description System.Single value Returns Type Description System.Boolean Random() Returns a random value between the range [inclusive, inclusive]. Declaration public float Random() Returns Type Description System.Single Implements INumberRange<T> IRange<T>"
  },
  "api/Zigurous.DataStructures.ValueAccumulator-1.html": {
    "href": "api/Zigurous.DataStructures.ValueAccumulator-1.html",
    "title": "Class ValueAccumulator<T> | Data Structures",
    "keywords": "Class ValueAccumulator<T> Accumulates a set of stored values into a single total value. Inheritance System.Object ValueAccumulator<T> DoubleAccumulator FloatAccumulator IntAccumulator QuaternionAccumulator Vector2Accumulator Vector2IntAccumulator Vector3Accumulator Vector3IntAccumulator Vector4Accumulator Namespace : Zigurous.DataStructures Syntax public abstract class ValueAccumulator<T> Type Parameters Name Description T Properties Count The number of unique values being accumulated. Declaration public int Count { get; } total The total accumulated value. Declaration public T total { get; protected set; } values Keeps track of all accumulated values. Values are stored by unique hash codes. Declaration public Dictionary<int, T> values { get; protected set; } Methods Add(T) Increases the accumulated total by a given value. Declaration protected abstract T Add(T value) Parameters Type Name Description T value Returns Type Description T Clear() Removes all stored values and resets the total accumulated value. Declaration public void Clear() GetValue(Int32) Returns the stored value with the given hash code identifier. Declaration public T GetValue(int id) Parameters Type Name Description System.Int32 id Returns Type Description T RemoveValue(Int32) Removes the stored value with the given hash code identifier, and updates the total accumulated value. Declaration public void RemoveValue(int id) Parameters Type Name Description System.Int32 id SetValue(T, Int32) Stores a given value with a hash code identifier, and updates the total accumulated value. Declaration public void SetValue(T value, int id) Parameters Type Name Description T value System.Int32 id Subtract(T) Decreases the accumulated total by a given value. Declaration protected abstract T Subtract(T value) Parameters Type Name Description T value Returns Type Description T"
  },
  "api/Zigurous.DataStructures.Vector2Accumulator.html": {
    "href": "api/Zigurous.DataStructures.Vector2Accumulator.html",
    "title": "Class Vector2Accumulator | Data Structures",
    "keywords": "Class Vector2Accumulator Accumulates Vector2 values into a single total value. Inheritance System.Object ValueAccumulator < Vector2 > Vector2Accumulator Inherited Members ValueAccumulator<Vector2>.values ValueAccumulator<Vector2>.total ValueAccumulator<Vector2>.Count ValueAccumulator<Vector2>.GetValue(Int32) ValueAccumulator<Vector2>.SetValue(Vector2, Int32) ValueAccumulator<Vector2>.RemoveValue(Int32) ValueAccumulator<Vector2>.Clear() Namespace : Zigurous.DataStructures Syntax public sealed class Vector2Accumulator : ValueAccumulator<Vector2> Methods Add(Vector2) Declaration protected override Vector2 Add(Vector2 value) Parameters Type Name Description Vector2 value Returns Type Description Vector2 Overrides Zigurous.DataStructures.ValueAccumulator<Vector2>.Add(Vector2) Subtract(Vector2) Declaration protected override Vector2 Subtract(Vector2 value) Parameters Type Name Description Vector2 value Returns Type Description Vector2 Overrides Zigurous.DataStructures.ValueAccumulator<Vector2>.Subtract(Vector2)"
  },
  "api/Zigurous.DataStructures.Vector2IntAccumulator.html": {
    "href": "api/Zigurous.DataStructures.Vector2IntAccumulator.html",
    "title": "Class Vector2IntAccumulator | Data Structures",
    "keywords": "Class Vector2IntAccumulator Accumulates Vector2Int values into a single total value. Inheritance System.Object ValueAccumulator < Vector2Int > Vector2IntAccumulator Inherited Members ValueAccumulator<Vector2Int>.values ValueAccumulator<Vector2Int>.total ValueAccumulator<Vector2Int>.Count ValueAccumulator<Vector2Int>.GetValue(Int32) ValueAccumulator<Vector2Int>.SetValue(Vector2Int, Int32) ValueAccumulator<Vector2Int>.RemoveValue(Int32) ValueAccumulator<Vector2Int>.Clear() Namespace : Zigurous.DataStructures Syntax public sealed class Vector2IntAccumulator : ValueAccumulator<Vector2Int> Methods Add(Vector2Int) Declaration protected override Vector2Int Add(Vector2Int value) Parameters Type Name Description Vector2Int value Returns Type Description Vector2Int Overrides Zigurous.DataStructures.ValueAccumulator<Vector2Int>.Add(Vector2Int) Subtract(Vector2Int) Declaration protected override Vector2Int Subtract(Vector2Int value) Parameters Type Name Description Vector2Int value Returns Type Description Vector2Int Overrides Zigurous.DataStructures.ValueAccumulator<Vector2Int>.Subtract(Vector2Int)"
  },
  "api/Zigurous.DataStructures.Vector2Range.html": {
    "href": "api/Zigurous.DataStructures.Vector2Range.html",
    "title": "Struct Vector2Range | Data Structures",
    "keywords": "Struct Vector2Range Implements INumberRange < Vector2 > IRange < Vector2 > Namespace : Zigurous.DataStructures Syntax [Serializable] public struct Vector2Range : INumberRange<Vector2>, IRange<Vector2> Constructors Vector2Range(Vector2, Vector2) Creates a new Vector2Range with given min and max values. Declaration public Vector2Range(Vector2 min, Vector2 max) Parameters Type Name Description Vector2 min Vector2 max Properties Delta The difference between the range min and max. Declaration public readonly Vector2 Delta { get; } max The upper bound of the range. Declaration public Vector2 max { get; set; } Median The vector in the middle of the range min and max. Declaration public readonly Vector2 Median { get; } min The lower bound of the range. Declaration public Vector2 min { get; set; } Methods Clamp(Vector2) Clamps the given vector between the range. Declaration public Vector2 Clamp(Vector2 value) Parameters Type Name Description Vector2 value Returns Type Description Vector2 Includes(Vector2) Determines if the given vector is between the range [inclusive, inclusive]. Declaration public bool Includes(Vector2 value) Parameters Type Name Description Vector2 value Returns Type Description System.Boolean Random() Returns a random vector between the range [inclusive, inclusive]. Declaration public Vector2 Random() Returns Type Description Vector2 Implements INumberRange<T> IRange<T>"
  },
  "api/Zigurous.DataStructures.Vector3Accumulator.html": {
    "href": "api/Zigurous.DataStructures.Vector3Accumulator.html",
    "title": "Class Vector3Accumulator | Data Structures",
    "keywords": "Class Vector3Accumulator Accumulates Vector3 values into a single total value. Inheritance System.Object ValueAccumulator < Vector3 > Vector3Accumulator Inherited Members ValueAccumulator<Vector3>.values ValueAccumulator<Vector3>.total ValueAccumulator<Vector3>.Count ValueAccumulator<Vector3>.GetValue(Int32) ValueAccumulator<Vector3>.SetValue(Vector3, Int32) ValueAccumulator<Vector3>.RemoveValue(Int32) ValueAccumulator<Vector3>.Clear() Namespace : Zigurous.DataStructures Syntax public sealed class Vector3Accumulator : ValueAccumulator<Vector3> Methods Add(Vector3) Declaration protected override Vector3 Add(Vector3 value) Parameters Type Name Description Vector3 value Returns Type Description Vector3 Overrides Zigurous.DataStructures.ValueAccumulator<Vector3>.Add(Vector3) Subtract(Vector3) Declaration protected override Vector3 Subtract(Vector3 value) Parameters Type Name Description Vector3 value Returns Type Description Vector3 Overrides Zigurous.DataStructures.ValueAccumulator<Vector3>.Subtract(Vector3)"
  },
  "api/Zigurous.DataStructures.Vector3IntAccumulator.html": {
    "href": "api/Zigurous.DataStructures.Vector3IntAccumulator.html",
    "title": "Class Vector3IntAccumulator | Data Structures",
    "keywords": "Class Vector3IntAccumulator Accumulates Vector3Int values into a single total value. Inheritance System.Object ValueAccumulator < Vector3Int > Vector3IntAccumulator Inherited Members ValueAccumulator<Vector3Int>.values ValueAccumulator<Vector3Int>.total ValueAccumulator<Vector3Int>.Count ValueAccumulator<Vector3Int>.GetValue(Int32) ValueAccumulator<Vector3Int>.SetValue(Vector3Int, Int32) ValueAccumulator<Vector3Int>.RemoveValue(Int32) ValueAccumulator<Vector3Int>.Clear() Namespace : Zigurous.DataStructures Syntax public sealed class Vector3IntAccumulator : ValueAccumulator<Vector3Int> Methods Add(Vector3Int) Declaration protected override Vector3Int Add(Vector3Int value) Parameters Type Name Description Vector3Int value Returns Type Description Vector3Int Overrides Zigurous.DataStructures.ValueAccumulator<Vector3Int>.Add(Vector3Int) Subtract(Vector3Int) Declaration protected override Vector3Int Subtract(Vector3Int value) Parameters Type Name Description Vector3Int value Returns Type Description Vector3Int Overrides Zigurous.DataStructures.ValueAccumulator<Vector3Int>.Subtract(Vector3Int)"
  },
  "api/Zigurous.DataStructures.Vector3Range.html": {
    "href": "api/Zigurous.DataStructures.Vector3Range.html",
    "title": "Struct Vector3Range | Data Structures",
    "keywords": "Struct Vector3Range Implements INumberRange < Vector3 > IRange < Vector3 > Namespace : Zigurous.DataStructures Syntax [Serializable] public struct Vector3Range : INumberRange<Vector3>, IRange<Vector3> Constructors Vector3Range(Vector3, Vector3) Creates a new Vector3Range with given min and max values. Declaration public Vector3Range(Vector3 min, Vector3 max) Parameters Type Name Description Vector3 min Vector3 max Properties Delta The difference between the range min and max. Declaration public readonly Vector3 Delta { get; } max The upper bound of the range. Declaration public Vector3 max { get; set; } Median The vector in the middle of the range min and max. Declaration public readonly Vector3 Median { get; } min The lower bound of the range. Declaration public Vector3 min { get; set; } Methods Clamp(Vector3) Clamps the given vector between the range. Declaration public Vector3 Clamp(Vector3 value) Parameters Type Name Description Vector3 value Returns Type Description Vector3 Includes(Vector3) Determines if the given vector is between the range [inclusive, inclusive]. Declaration public bool Includes(Vector3 value) Parameters Type Name Description Vector3 value Returns Type Description System.Boolean Random() Returns a random vector between the range [inclusive, inclusive]. Declaration public Vector3 Random() Returns Type Description Vector3 Implements INumberRange<T> IRange<T>"
  },
  "api/Zigurous.DataStructures.Vector4Accumulator.html": {
    "href": "api/Zigurous.DataStructures.Vector4Accumulator.html",
    "title": "Class Vector4Accumulator | Data Structures",
    "keywords": "Class Vector4Accumulator Accumulates Vector4 values into a single total value. Inheritance System.Object ValueAccumulator < Vector4 > Vector4Accumulator Inherited Members ValueAccumulator<Vector4>.values ValueAccumulator<Vector4>.total ValueAccumulator<Vector4>.Count ValueAccumulator<Vector4>.GetValue(Int32) ValueAccumulator<Vector4>.SetValue(Vector4, Int32) ValueAccumulator<Vector4>.RemoveValue(Int32) ValueAccumulator<Vector4>.Clear() Namespace : Zigurous.DataStructures Syntax public sealed class Vector4Accumulator : ValueAccumulator<Vector4> Methods Add(Vector4) Declaration protected override Vector4 Add(Vector4 value) Parameters Type Name Description Vector4 value Returns Type Description Vector4 Overrides Zigurous.DataStructures.ValueAccumulator<Vector4>.Add(Vector4) Subtract(Vector4) Declaration protected override Vector4 Subtract(Vector4 value) Parameters Type Name Description Vector4 value Returns Type Description Vector4 Overrides Zigurous.DataStructures.ValueAccumulator<Vector4>.Subtract(Vector4)"
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "Changelog | Data Structures",
    "keywords": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [1.2.1] - 2021/06/25 Added Readme namespace import instructions Changed Code cleanup [1.2.0] - 2021/06/06 Added DoubleAccumulator IntAccumulator QuaternionAccumulator Vector2IntAccumulator Vector3IntAccumulator Vector4Accumulator [1.1.0] - 2021/05/23 Added Implicit conversion operators between Bitmask and int Changed Code cleanup and formatting [1.0.1] - 2021/04/13 Removed ConditionalShowAttribute ConditionalHideAttribute Fixed Set Editor assembly to only compile for the Editor platform Size and GridSize were not printing the correct info in ToString() [1.0.0] - 2021/03/24 Added ArrayExtensions Bitmask Bool3 ClampedRange ColorRange ComparableExtensions DictionaryExtensions FloatAccumulator FloatRange GridSize HashCode HashSetExtensions Identifier IntRange ListExtensions Modules ObjectPool Quantity SingletonBehavior Size SortedSetExtensions StringExtensions UIntRange UnitIntervalRange Vector2Accumulator Vector2Range Vector3Accumulator Vector3Range"
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "License | Data Structures",
    "keywords": "License MIT License Copyright (c) 2021 Zigurous Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "Data Structures | Data Structures",
    "keywords": "Data Structures The Data Structures package contains common data structures, design patterns, and class extensions for Unity projects."
  },
  "manual/installation.html": {
    "href": "manual/installation.html",
    "title": "Installation | Data Structures",
    "keywords": "Installation Use the Unity Package Manager to install the Data Structures package. Open the Package Manager in Window > Package Manager Click the add ( + ) button in the status bar Select Add package from git URL from the add menu Enter the following Git URL in the text box and click Add: https://github.com/zigurous/unity-data-structures.git For more information on the Package Manager and installing packages, see the following pages: Unity's Package Manager Installing from a Git URL Importing Import the package namespace in each script or file you want to use it. Note : You may need to regenerate project files/assemblies first. using Zigurous.DataStructures; Source Code The source code for the Data Structures package is in the following repository: https://github.com/zigurous/unity-data-structures"
  }
}