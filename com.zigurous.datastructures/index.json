{
  "api/Zigurous.DataStructures.ArrayExtensions.html": {
    "href": "api/Zigurous.DataStructures.ArrayExtensions.html",
    "title": "Class ArrayExtensions | Data Structures",
    "keywords": "Class ArrayExtensions Extension methods for arrays. Inheritance System.Object ArrayExtensions Namespace : Zigurous.DataStructures public static class ArrayExtensions Methods Append<T>(T[], T) Appends element to the end of the array. public static T[] Append<T>(this T[] array, T element) Parameter Description array The array to add the element to. element The element to add. Returns Description T[] A new array with the added element. Type Parameter Description T The type of the array. Concat<T>(T[], T[]) Concats elements to the end of the array. public static T[] Concat<T>(this T[] array, T[] elements) Parameter Description array The array to add the elements to. elements The elements to add. Returns Description T[] A new array with the added elements. Type Parameter Description T The type of the array. Contains<T>(T[], T) Checks if the array contains element . public static bool Contains<T>(this T[] array, T element) where T : IEquatable<T> Parameter Description array The array to search in. element The element to search for. Type Parameter Description T The type of the array. ElementAt<T>(T[], Int32) Returns the element at index , or the default of T if the array is empty. public static T ElementAt<T>(this T[] array, int index) Parameter Description array The array to search in. index The index of the element to return. Type Parameter Description T The type of the array. Filter<T>(T[], Predicate<T>) Filters the array to only contain elements that satisfy the predicate . public static T[] Filter<T>(this T[] array, Predicate<T> predicate) Parameter Description array The array to filter. predicate The predicate to use. Returns Description T[] A new array with the filtered elements removed. Type Parameter Description T The type of the array. First<T>(T[]) Returns the first element in the array, or the default of T if the array is empty. public static T First<T>(this T[] array) Parameter Description array The array to get the element from. Type Parameter Description T The type of the array. First<T>(T[], Predicate<T>) Returns the first element in the array that satisfies the predicate , or the default of T if no element satisfies the predicate . public static T First<T>(this T[] array, Predicate<T> predicate) Parameter Description array The array to get the element from. predicate The predicate to use. Type Parameter Description T The type of the array. FirstNonNull<T>(T[]) Returns the first non-null element in the array, or the default of T if all elements are null. public static T FirstNonNull<T>(this T[] array) where T : class Parameter Description array The array to get the element from. Type Parameter Description T The type of the array. Flatten<T>(T[,,]) Flattens a three-dimensional array into a new one-dimensional array. public static T[] Flatten<T>(this T[,, ] array) Parameter Description array The three-dimensional array to flatten. Returns Description T[] A new array with the flattened elements. Type Parameter Description T The type of the array. Flatten<T>(T[,]) Flattens a two-dimensional array into a new one-dimensional array. public static T[] Flatten<T>(this T[, ] array) Parameter Description array The two-dimensional array to flatten. Returns Description T[] A new array with the flattened elements. Type Parameter Description T The type of the array. For<T>(T[], Action<(T element, Int32 index)>) Invokes an System.Action<T> for each element in the array. public static void For<T>(this T[] array, Action<(T element, int index)> action) Parameter Description array The array to iterate over. action The action to invoke. Type Parameter Description T The type of the array. ForEach<T>(T[], Action<T>) Invokes an System.Action<T> for each element in the array. public static void ForEach<T>(this T[] array, Action<T> action) Parameter Description array The array to iterate over. action The action to invoke. Type Parameter Description T The type of the array. IndexOf<T>(T[], T) Returns the index of element in the array. public static int IndexOf<T>(this T[] array, T element) where T : IEquatable<T> Parameter Description array The array to search in. element The element to search for. Type Parameter Description T The type of the array. IsAny<T>(T[], Predicate<T>) Checks if any element in the array satisfies the predicate . public static bool IsAny<T>(this T[] array, Predicate<T> predicate) Parameter Description array The array to search in. predicate The predicate to use. Type Parameter Description T The type of the array. IsEach<T>(T[], Predicate<T>) Checks if each element in the array satisfies the predicate . public static bool IsEach<T>(this T[] array, Predicate<T> predicate) Parameter Description array The array to search in. predicate The predicate to use. Type Parameter Description T The type of the array. IsEmpty(Array) Checks if the array is empty. public static bool IsEmpty(this Array array) Parameter Description array The array to check. IsInBounds(Array, Int32) Checks if index is within the bounds of the array. public static bool IsInBounds(this Array array, int index) Parameter Description array The array to check. index The index to check. IsNotEmpty(Array) Checks if the array is not empty. public static bool IsNotEmpty(this Array array) Parameter Description array The array to check. IsNotInBounds(Array, Int32) Checks if index is out of bounds of the array. public static bool IsNotInBounds(this Array array, int index) Parameter Description array The array to check. index The index to check. Join<T>(T[], String, Int32, Int32) Joins the elements of the array into a string separated by the delimiter . public static string Join<T>(this T[] array, string delimiter, int startIndex = 0, int endIndex = 2147483647) Parameter Description array The array to join. delimiter The delimiter to use. startIndex The index to start at. endIndex The index to end at. Type Parameter Description T The type of the array. Last<T>(T[]) Returns the last element in the array, or the default of T if the array is empty. public static T Last<T>(this T[] array) Parameter Description array The array to get the element from. Type Parameter Description T The type of the array. Last<T>(T[], Predicate<T>) Returns the last element in the array that satisfies the predicate , or the default of T if no element satisfies the predicate . public static T Last<T>(this T[] array, Predicate<T> predicate) Parameter Description array The array to get the element from. predicate The predicate to use. Type Parameter Description T The type of the array. LastNonNull<T>(T[]) Returns the last non-null element in the array, or the default of T if all elements are null. public static T LastNonNull<T>(this T[] array) where T : class Parameter Description array The array to get the element from. Type Parameter Description T The type of the array. Map<TInput, TOutput>(TInput[], Converter<TInput, TOutput>) Maps the elements of the array to a new array using a given converter . public static TOutput[] Map<TInput, TOutput>(this TInput[] array, Converter<TInput, TOutput> converter) Parameter Description array The array to map. converter The converter to use. Returns Description TOutput[] A new array with the converted elements. Type Parameter Description TInput The type of the input array. TOutput The type of the output array. NonNull<T>(T[]) Filters out all null elements from the array. public static T[] NonNull<T>(this T[] array) where T : class Parameter Description array The array to filter. Returns Description T[] A new array with all null elements removed. Type Parameter Description T The type of the array. Random<T>(T[]) Returns a random element from the array, or the default of T if the array is empty. public static T Random<T>(this T[] array) Parameter Description array The array to get the random element from. Type Parameter Description T The type of the array. Reduce<TElement, TSum>(TElement[], TSum, ArrayExtensions.Reducer<TSum, TElement>) Reduces the elements of the array to a single value. public static TSum Reduce<TElement, TSum>(this TElement[] array, TSum initialValue, ArrayExtensions.Reducer<TSum, TElement> reducer) Parameter Description array The array to reduce. initialValue The initial value to use. reducer The reducer to use. Returns Description TSum The reduced value. Type Parameter Description TElement The type of elements in the array. TSum The type of the reduced value. RemoveAt<T>(T[], Int32) Removes the element at the specified index from the array. public static T[] RemoveAt<T>(this T[] array, int index) Parameter Description array The array to remove the element from. index The index of the element to remove. Returns Description T[] A new array with the element removed. Type Parameter Description T The type of the array. Reverse<T>(T[]) Reverses the order of the elements in the array. public static void Reverse<T>(this T[] array) Parameter Description array The array to reverse. Type Parameter Description T The type of the array. Reversed<T>(T[]) Reverses the order of the elements in the array. public static T[] Reversed<T>(this T[] array) Parameter Description array The array to reverse. Returns Description T[] A new array with the order of the elements reversed. Type Parameter Description T The type of the array. Shuffle<T>(T[]) Shuffles the array in place. Remarks The shuffle is done using the Fisher-Yates algorithm. public static void Shuffle<T>(this T[] array) Parameter Description array The array to shuffle. Type Parameter Description T The type of the array. Shuffle<T>(T[], Random) Shuffles the array in place using the given random number generator. Remarks The shuffle is done using the Fisher-Yates algorithm. public static void Shuffle<T>(this T[] array, Random rng) Parameter Description array The array to shuffle. rng The random number generator to use. Type Parameter Description T The type of the array. Slice<T>(T[], Int32) Returns a portion of the array containing the specified amount of elements. public static T[] Slice<T>(this T[] array, int amount) Parameter Description array The array to slice. amount The amount of elements to slice. Returns Description T[] A new array containing only the sliced elements. Type Parameter Description T The type of the array. Sort<T>(T[], Comparison<T>) Sorts the elements of the array. public static void Sort<T>(this T[] array, Comparison<T> comparison) Parameter Description array The array to sort. comparison The comparison to use. Type Parameter Description T The type of the array. Where<T>(T[], Predicate<T>) Filters the array to only contain elements that satisfy the predicate . public static T[] Where<T>(this T[] array, Predicate<T> predicate) Parameter Description array The array to filter. predicate The predicate to use. Returns Description T[] A new array with the filtered elements removed. Type Parameter Description T The type of the array. WrapIndex(Array, Int32) Wraps the index in the array to the other end when outside the bounds. public static int WrapIndex(this Array array, int index) Parameter Description array The array to wrap. index The index to wrap. Returns Description System.Int32 The wrapped index."
  },
  "api/Zigurous.DataStructures.ArrayExtensions.Reducer-2.html": {
    "href": "api/Zigurous.DataStructures.ArrayExtensions.Reducer-2.html",
    "title": "Delegate ArrayExtensions.Reducer<TSum, TElement> | Data Structures",
    "keywords": "Delegate ArrayExtensions.Reducer<TSum, TElement> A function delegate that reduces an array into a single value. Namespace : Zigurous.DataStructures public delegate TSum Reducer<TSum, TElement>(TSum sum, TElement element); Parameter Description sum The current sum. element The current element being reduced. Returns Description TSum The reduced value. Type Parameter Description TSum The type of the reduced value. TElement The type of elements in the array."
  },
  "api/Zigurous.DataStructures.Bitmask.html": {
    "href": "api/Zigurous.DataStructures.Bitmask.html",
    "title": "Struct Bitmask | Data Structures",
    "keywords": "Struct Bitmask A bitmask representation that can be used for bitwise operations. A bitmask is a set of bits that can be set or cleared. Namespace : Zigurous.DataStructures [Serializable] public struct Bitmask : IEquatable<Bitmask>, IEquatable<int> Constructors Bitmask(Int32) Creates a new Bitmask from the given 32-bit integer. public Bitmask(int mask) Parameter Description mask The 32-bit integer to represent as a bitmask. Methods Change(Int32, Int32) Sets the nth bit of the bitmask to x. public void Change(int n, int x) Parameter Description n The nth bit to set. x The value to set the bit to. Clear(Int32) Sets the nth bit of the bitmask to 0. public void Clear(int n) Parameter Description n The nth bit to clear. Equals(Int32) Determines if the bitmask is equal to other . public bool Equals(int other) Parameter Description other The bitmask to compare to. Equals(Object) Determines if the bitmask is equal to other . public override bool Equals(object other) Parameter Description other The object to compare to. Overrides System.ValueType.Equals(System.Object) Equals(Bitmask) Determines if the bitmask is equal to other . public bool Equals(Bitmask other) Parameter Description other The bitmask to compare to. Get(Int32) Returns the nth bit of the bitmask. public int Get(int n) Parameter Description n The nth bit to get. GetHashCode() Returns the hash code of the bitmask. public override int GetHashCode() Overrides System.ValueType.GetHashCode() Has(Int32) Checks if the nth bit of the bitmask is set. public bool Has(int n) Parameter Description n The nth bit to check for. HasAnyFlag(Int32) Checks if the bitmask contains any of the flags . (mask & flags) != 0 public bool HasAnyFlag(int flags) Parameter Description flags The flags to check for. HasFlag(Int32) Checks if the bitmask contains the flag . (mask & flag) == flag public bool HasFlag(int flag) Parameter Description flag The flag to check for. HasOnlyFlags(Int32) Checks if the bitmask contains only the given flags and no other flags. ((mask ^ flags) & flags) == 0 public bool HasOnlyFlags(int flags) Parameter Description flags The flags to check for. Set(Int32) Sets the nth bit of the bitmask to 1. public void Set(int n) Parameter Description n The nth bit to set. Toggle(Int32) Toggles the nth bit of the bitmask. public void Toggle(int n) Parameter Description n The nth bit to toggle. ToString() Converts the bitmask to a string. public override string ToString() Overrides System.ValueType.ToString() Operators BitwiseAnd(Bitmask, Bitmask) public static Bitmask operator &(Bitmask a, Bitmask b) Parameter Description a b BitwiseOr(Bitmask, Bitmask) public static Bitmask operator |(Bitmask a, Bitmask b) Parameter Description a b Equality(Int32, Bitmask) public static bool operator ==(int lhs, Bitmask rhs) Parameter Description lhs rhs Equality(Bitmask, Int32) public static bool operator ==(Bitmask lhs, int rhs) Parameter Description lhs rhs Equality(Bitmask, Bitmask) public static bool operator ==(Bitmask lhs, Bitmask rhs) Parameter Description lhs rhs ExclusiveOr(Bitmask, Bitmask) public static Bitmask operator ^(Bitmask a, Bitmask b) Parameter Description a b Implicit(Int32 to Bitmask) public static implicit operator Bitmask(int value) Parameter Description value Implicit(Bitmask to Int32) public static implicit operator int (Bitmask value) Parameter Description value Inequality(Int32, Bitmask) public static bool operator !=(int lhs, Bitmask rhs) Parameter Description lhs rhs Inequality(Bitmask, Int32) public static bool operator !=(Bitmask lhs, int rhs) Parameter Description lhs rhs Inequality(Bitmask, Bitmask) public static bool operator !=(Bitmask lhs, Bitmask rhs) Parameter Description lhs rhs LeftShift(Bitmask, Int32) public static Bitmask operator <<(Bitmask a, int b) Parameter Description a b OnesComplement(Bitmask) public static Bitmask operator ~(Bitmask a) Parameter Description a RightShift(Bitmask, Int32) public static Bitmask operator >>(Bitmask a, int b) Parameter Description a b"
  },
  "api/Zigurous.DataStructures.Bool3.html": {
    "href": "api/Zigurous.DataStructures.Bool3.html",
    "title": "Struct Bool3 | Data Structures",
    "keywords": "Struct Bool3 Stores a tuple of 3 booleans. Namespace : Zigurous.DataStructures [Serializable] public struct Bool3 : IEquatable<Bool3> Constructors Bool3(Boolean, Boolean, Boolean) Creates a new Bool3 with the specified values. public Bool3(bool x = false, bool y = false, bool z = false) Parameter Description x The X component. y The Y component. z The Z component. Fields x The X component. public bool x y The Y component. public bool y z The Z component. public bool z Properties False Shorthand for writing Bool3(false, false, false). public static readonly Bool3 False { get; } Item[Int32] Gets or sets the component at the given index . public bool this[int index] { get; set; } Parameter Description index The index of the component to get or set. True Shorthand for writing Bool3(true, true, true). public static readonly Bool3 True { get; } X Shorthand for writing Bool3(true, false, false). public static readonly Bool3 X { get; } Y Shorthand for writing Bool3(false, true, false). public static readonly Bool3 Y { get; } Z Shorthand for writing Bool3(false, false, true). public static readonly Bool3 Z { get; } Methods Equals(Object) Determines if the tuple is equal to other . public override bool Equals(object other) Parameter Description other The object to compare to. Overrides System.ValueType.Equals(System.Object) Equals(Bool3) Determines if the tuple is equal to other . public bool Equals(Bool3 other) Parameter Description other The tuple to compare to. GetHashCode() Returns the hash code of the tuple. public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToString() Converts the tuple to a string. public override string ToString() Overrides System.ValueType.ToString() Operators BitwiseAnd(Bool3, Bool3) public static Bool3 operator &(Bool3 a, Bool3 b) Parameter Description a b BitwiseOr(Bool3, Bool3) public static Bool3 operator |(Bool3 a, Bool3 b) Parameter Description a b Equality(Bool3, Bool3) public static bool operator ==(Bool3 lhs, Bool3 rhs) Parameter Description lhs rhs ExclusiveOr(Bool3, Bool3) public static Bool3 operator ^(Bool3 a, Bool3 b) Parameter Description a b Inequality(Bool3, Bool3) public static bool operator !=(Bool3 lhs, Bool3 rhs) Parameter Description lhs rhs LogicalNot(Bool3) public static Bool3 operator !(Bool3 a) Parameter Description a"
  },
  "api/Zigurous.DataStructures.ClampedRange.html": {
    "href": "api/Zigurous.DataStructures.ClampedRange.html",
    "title": "Struct ClampedRange | Data Structures",
    "keywords": "Struct ClampedRange A range of values clamped between a lower and upper bound. Implements INumberRange < System.Single > IRange < System.Single > Namespace : Zigurous.DataStructures [Serializable] public struct ClampedRange : INumberRange<float>, IRange<float> Constructors ClampedRange(Single, Single, Single, Single) Creates a new range with the specified values. public ClampedRange(float min = 0F, float max = 1F, float clampLower = 0F, float clampUpper = 1F) Parameter Description min The lower bound of the range. max The upper bound of the range. clampLower The lower clamping bound of the range. clampUpper The upper clamping bound of the range. Fields clamp The clamping values of the range. public FloatRange clamp Properties Delta The difference between the maximum and minimum values. public readonly float Delta { get; } max The upper bound of the range. public float max { get; set; } Median The median value of the range. public readonly float Median { get; } min The lower bound of the range. public float min { get; set; } Methods Clamp(Single) Clamps the value to the range. public float Clamp(float value) Parameter Description value The value to clamp. Returns Description System.Single The clamped value. Includes(Single) Checks if the value is in the range. public bool Includes(float value) Parameter Description value The value to check. Includes(Single, Boolean, Boolean) Checks if the value is in the range. public bool Includes(float value, bool includeMin, bool includeMax) Parameter Description value The value to check. includeMin The minimum value is inclusive if true, exclusive if false. includeMax The maximum value is inclusive if true, exclusive if false. Random() Returns a random value in the range. public float Random() Implements INumberRange<T> IRange<T>"
  },
  "api/Zigurous.DataStructures.ColorRange.html": {
    "href": "api/Zigurous.DataStructures.ColorRange.html",
    "title": "Struct ColorRange | Data Structures",
    "keywords": "Struct ColorRange A range of Color values. Implements INumberRange < Color > IRange < Color > Namespace : Zigurous.DataStructures [Serializable] public struct ColorRange : INumberRange<Color>, IRange<Color> Constructors ColorRange(Color, Color) Creates a new range with the specified values. public ColorRange(Color min, Color max) Parameter Description min The lower bound of the range. max The upper bound of the range. Properties black Shorthand for writing ColorRange(Color.black, Color.black). public static readonly ColorRange black { get; } blackToWhite Shorthand for writing ColorRange(Color.black, Color.white). public static readonly ColorRange blackToWhite { get; } Delta The difference between the maximum and minimum values. public readonly Color Delta { get; } fadeIn Shorthand for writing ColorRange(Color(0,0,0,0), Color(0,0,0,1)). public static readonly ColorRange fadeIn { get; } fadeOut Shorthand for writing ColorRange(Color(0,0,0,1), Color(0,0,0,0)). public static readonly ColorRange fadeOut { get; } max The upper bound of the range. public Color max { get; set; } Median The median value of the range. public readonly Color Median { get; } min The lower bound of the range. public Color min { get; set; } transparent Shorthand for writing ColorRange(Color(0,0,0,0), Color(0,0,0,0)). public static readonly ColorRange transparent { get; } white Shorthand for writing ColorRange(Color.white, Color.white). public static readonly ColorRange white { get; } whiteToBlack Shorthand for writing ColorRange(Color.white, Color.black). public static readonly ColorRange whiteToBlack { get; } Methods Clamp(Color) Clamps the value to the range. public Color Clamp(Color value) Parameter Description value The value to clamp. Returns Description Color The clamped value. Includes(Color) Checks if the value is in the range. public bool Includes(Color value) Parameter Description value The value to check. Includes(Color, Boolean, Boolean) Checks if the value is in the range. public bool Includes(Color value, bool includeMin, bool includeMax) Parameter Description value The value to check. includeMin The minimum value is inclusive if true, exclusive if false. includeMax The maximum value is inclusive if true, exclusive if false. Random() Returns a random value in the range. public Color Random() Implements INumberRange<T> IRange<T>"
  },
  "api/Zigurous.DataStructures.ComparableExtensions.html": {
    "href": "api/Zigurous.DataStructures.ComparableExtensions.html",
    "title": "Class ComparableExtensions | Data Structures",
    "keywords": "Class ComparableExtensions Extension methods for IComparable. Inheritance System.Object ComparableExtensions Namespace : Zigurous.DataStructures public static class ComparableExtensions Methods IsBetween<T>(T, T, T, Boolean, Boolean) Checks if the value is between min and max . public static bool IsBetween<T>(this T value, T min, T max, bool includeMin, bool includeMax) where T : IComparable<T> Parameter Description value The value to check. min The minimum value. max The maximum value. includeMin The minimum value is inclusive if true, exclusive if false. includeMax The maximum value is inclusive if true, exclusive if false. Type Parameter Description T The type of value to check."
  },
  "api/Zigurous.DataStructures.DictionaryExtensions.html": {
    "href": "api/Zigurous.DataStructures.DictionaryExtensions.html",
    "title": "Class DictionaryExtensions | Data Structures",
    "keywords": "Class DictionaryExtensions Extension methods for dictionaries. Inheritance System.Object DictionaryExtensions Namespace : Zigurous.DataStructures public static class DictionaryExtensions Methods Where<TKey, TValue>(Dictionary<TKey, TValue>, Predicate<KeyValuePair<TKey, TValue>>) Filters the dictionary by a predicate . public static Dictionary<TKey, TValue> Where<TKey, TValue>(this Dictionary<TKey, TValue> dictionary, Predicate<KeyValuePair<TKey, TValue>> predicate) Parameter Description dictionary The dictionary to filter. predicate The predicate to use. Returns Description Dictionary <TKey, TValue> A new dictionary with the filtered key-value pairs removed. Type Parameter Description TKey The type of the keys in the dictionary. TValue The type of the values in the dictionary. Where<TKey, TValue>(Dictionary<TKey, TValue>.KeyCollection, Predicate<TKey>) Filters the dictionary keys by a predicate . public static List<TKey> Where<TKey, TValue>(this Dictionary<TKey, TValue>.KeyCollection keys, Predicate<TKey> predicate) Parameter Description keys The keys to filter. predicate The predicate to use. Returns Description List <TKey> A new list with the filtered keys removed. Type Parameter Description TKey The type of the keys in the dictionary. TValue The type of the values in the dictionary. Where<TKey, TValue>(Dictionary<TKey, TValue>.ValueCollection, Predicate<TValue>) Filters the dictionary values by a predicate . public static List<TValue> Where<TKey, TValue>(this Dictionary<TKey, TValue>.ValueCollection values, Predicate<TValue> predicate) Parameter Description values The values to filter. predicate The predicate to use. Returns Description List <TValue> A new list with the filtered values removed. Type Parameter Description TKey The type of the keys in the dictionary. TValue The type of the values in the dictionary."
  },
  "api/Zigurous.DataStructures.DoubleAccumulator.html": {
    "href": "api/Zigurous.DataStructures.DoubleAccumulator.html",
    "title": "Class DoubleAccumulator | Data Structures",
    "keywords": "Class DoubleAccumulator Accumulates double values into a single total value. Inheritance System.Object ValueAccumulator < System.Double > DoubleAccumulator Inherited Members ValueAccumulator<Double>.values ValueAccumulator<Double>.total ValueAccumulator<Double>.Count ValueAccumulator<Double>.GetValue(Int32) ValueAccumulator<Double>.SetValue(Double, Int32) ValueAccumulator<Double>.RemoveValue(Int32) ValueAccumulator<Double>.Clear() Namespace : Zigurous.DataStructures public sealed class DoubleAccumulator : ValueAccumulator<double> Methods Add(Double) Increases the accumulated total by a given value. protected override double Add(double value) Parameter Description value The value to add to the total. Returns Description System.Double The new total value. Overrides Zigurous.DataStructures.ValueAccumulator<System.Double>.Add(System.Double) Subtract(Double) Decreases the accumulated total by a given value. protected override double Subtract(double value) Parameter Description value The value to subtract from the total. Returns Description System.Double The new total value. Overrides Zigurous.DataStructures.ValueAccumulator<System.Double>.Subtract(System.Double)"
  },
  "api/Zigurous.DataStructures.EulerRange.html": {
    "href": "api/Zigurous.DataStructures.EulerRange.html",
    "title": "Struct EulerRange | Data Structures",
    "keywords": "Struct EulerRange A range of euler values wrapped between -360 and +360. Implements INumberRange < System.Single > IRange < System.Single > Namespace : Zigurous.DataStructures [Serializable] public struct EulerRange : INumberRange<float>, IRange<float> Constructors EulerRange(Single, Single) Creates a new range with the specified values. public EulerRange(float min = -360F, float max = 360F) Parameter Description min The lower bound of the range. max The upper bound of the range. Properties Delta The difference between the maximum and minimum values. public readonly float Delta { get; } fullRange Shorthand for writing EulerRange(-360.0f, 360.0f). public static readonly EulerRange fullRange { get; } halfRange Shorthand for writing EulerRange(-180.0f, 180.0f). public static readonly EulerRange halfRange { get; } max The upper bound of the range. public float max { get; set; } Median The median value of the range. public readonly float Median { get; } min The lower bound of the range. public float min { get; set; } pi Shorthand for writing EulerRange(0.0f, 180.0f). public static readonly EulerRange pi { get; } pi2 Shorthand for writing EulerRange(0.0f, 360.0f). public static readonly EulerRange pi2 { get; } zero Shorthand for writing EulerRange(0.0f, 0.0f). public static readonly EulerRange zero { get; } Methods Clamp(Single) Clamps the value to the range. public float Clamp(float value) Parameter Description value The value to clamp. Returns Description System.Single The clamped value. Includes(Single) Checks if the value is in the range. public bool Includes(float value) Parameter Description value The value to check. Includes(Single, Boolean, Boolean) Checks if the value is in the range. public bool Includes(float value, bool includeMin, bool includeMax) Parameter Description value The value to check. includeMin The minimum value is inclusive if true, exclusive if false. includeMax The maximum value is inclusive if true, exclusive if false. Random() Returns a random value in the range. public float Random() Wrap(Single) Wraps the value within the range. public float Wrap(float value) Parameter Description value The value to wrap. Returns Description System.Single The wrapped value. Implements INumberRange<T> IRange<T>"
  },
  "api/Zigurous.DataStructures.FloatAccumulator.html": {
    "href": "api/Zigurous.DataStructures.FloatAccumulator.html",
    "title": "Class FloatAccumulator | Data Structures",
    "keywords": "Class FloatAccumulator Accumulates float values into a single total value. Inheritance System.Object ValueAccumulator < System.Single > FloatAccumulator Inherited Members ValueAccumulator<Single>.values ValueAccumulator<Single>.total ValueAccumulator<Single>.Count ValueAccumulator<Single>.GetValue(Int32) ValueAccumulator<Single>.SetValue(Single, Int32) ValueAccumulator<Single>.RemoveValue(Int32) ValueAccumulator<Single>.Clear() Namespace : Zigurous.DataStructures public sealed class FloatAccumulator : ValueAccumulator<float> Methods Add(Single) Increases the accumulated total by a given value. protected override float Add(float value) Parameter Description value The value to add to the total. Returns Description System.Single The new total value. Overrides Zigurous.DataStructures.ValueAccumulator<System.Single>.Add(System.Single) Subtract(Single) Decreases the accumulated total by a given value. protected override float Subtract(float value) Parameter Description value The value to subtract from the total. Returns Description System.Single The new total value. Overrides Zigurous.DataStructures.ValueAccumulator<System.Single>.Subtract(System.Single)"
  },
  "api/Zigurous.DataStructures.FloatRange.html": {
    "href": "api/Zigurous.DataStructures.FloatRange.html",
    "title": "Struct FloatRange | Data Structures",
    "keywords": "Struct FloatRange A range of float values. Implements INumberRange < System.Single > IRange < System.Single > Namespace : Zigurous.DataStructures [Serializable] public struct FloatRange : INumberRange<float>, IRange<float> Constructors FloatRange(Single, Single) Creates a new range with the specified values. public FloatRange(float min = 0F, float max = 1F) Parameter Description min The lower bound of the range. max The upper bound of the range. Properties Delta The difference between the maximum and minimum values. public readonly float Delta { get; } max The upper bound of the range. public float max { get; set; } Median The median value of the range. public readonly float Median { get; } min The lower bound of the range. public float min { get; set; } minMax Shorthand for writing FloatRange(float.MinValue, float.MaxValue). public static readonly FloatRange minMax { get; } negative Shorthand for writing FloatRange(float.MinValue, 0.0f). public static readonly FloatRange negative { get; } one Shorthand for writing FloatRange(1.0f, 1.0f). public static readonly FloatRange one { get; } percent Shorthand for writing FloatRange(0.0f, 1.0f). public static readonly FloatRange percent { get; } positive Shorthand for writing FloatRange(0.0f, float.MaxValue). public static readonly FloatRange positive { get; } zero Shorthand for writing FloatRange(0.0f, 0.0f). public static readonly FloatRange zero { get; } Methods Clamp(Single) Clamps the value to the range. public float Clamp(float value) Parameter Description value The value to clamp. Returns Description System.Single The clamped value. Includes(Single) Checks if the value is in the range. public bool Includes(float value) Parameter Description value The value to check. Includes(Single, Boolean, Boolean) Checks if the value is in the range. public bool Includes(float value, bool includeMin, bool includeMax) Parameter Description value The value to check. includeMin The minimum value is inclusive if true, exclusive if false. includeMax The maximum value is inclusive if true, exclusive if false. Random() Returns a random value in the range. public float Random() Implements INumberRange<T> IRange<T>"
  },
  "api/Zigurous.DataStructures.GridSize.html": {
    "href": "api/Zigurous.DataStructures.GridSize.html",
    "title": "Struct GridSize | Data Structures",
    "keywords": "Struct GridSize Stores the size of a grid as rows and columns. Namespace : Zigurous.DataStructures [Serializable] public struct GridSize : IEquatable<GridSize>, IComparable<GridSize> Constructors GridSize(Int32) Creates a new grid size with uniform rows and columns specified by size . public GridSize(int size) Parameter Description size The uniform size of the grid. GridSize(Int32, Int32) Creates a new grid size with the given rows and columns . public GridSize(int rows = 0, int columns = 0) Parameter Description rows The number of rows in the grid. columns The number of columns in the grid. Fields columns The number of columns in the grid. public int columns rows The number of rows in the grid. public int rows Properties Area The area of the grid (rows * columns). public readonly int Area { get; } max Shorthand for writing GridSize(int.MaxValue, int.MaxValue). public static readonly GridSize max { get; } one Shorthand for writing GridSize(1, 1). public static readonly GridSize one { get; } sq1024 Shorthand for writing GridSize(1024). public static readonly GridSize sq1024 { get; } sq128 Shorthand for writing GridSize(128). public static readonly GridSize sq128 { get; } sq16 Shorthand for writing GridSize(16). public static readonly GridSize sq16 { get; } sq2 Shorthand for writing GridSize(2). public static readonly GridSize sq2 { get; } sq2048 Shorthand for writing GridSize(2048). public static readonly GridSize sq2048 { get; } sq256 Shorthand for writing GridSize(256). public static readonly GridSize sq256 { get; } sq32 Shorthand for writing GridSize(32). public static readonly GridSize sq32 { get; } sq4 Shorthand for writing GridSize(4). public static readonly GridSize sq4 { get; } sq4096 Shorthand for writing GridSize(4096). public static readonly GridSize sq4096 { get; } sq512 Shorthand for writing GridSize(512). public static readonly GridSize sq512 { get; } sq64 Shorthand for writing GridSize(64). public static readonly GridSize sq64 { get; } sq8 Shorthand for writing GridSize(8). public static readonly GridSize sq8 { get; } sq8192 Shorthand for writing GridSize(8192). public static readonly GridSize sq8192 { get; } zero Shorthand for writing GridSize(0, 0). public static readonly GridSize zero { get; } Methods CompareTo(GridSize) System.IComparable`1.CompareTo(`0) . public int CompareTo(GridSize other) Parameter Description other The grid size to compare to. Equals(Object) Checks if the grid size is equal to other . public override bool Equals(object other) Parameter Description other The object to compare to. Overrides System.ValueType.Equals(System.Object) Equals(GridSize) Checks if the grid size is equal to other . public bool Equals(GridSize other) Parameter Description other The grid size to compare to. GetHashCode() Returns the hash code of the grid size. public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToString() Converts the grid size to a string. public override string ToString() Overrides System.ValueType.ToString() Operators Equality(GridSize, GridSize) public static bool operator ==(GridSize lhs, GridSize rhs) Parameter Description lhs rhs Inequality(GridSize, GridSize) public static bool operator !=(GridSize lhs, GridSize rhs) Parameter Description lhs rhs"
  },
  "api/Zigurous.DataStructures.HashCode.html": {
    "href": "api/Zigurous.DataStructures.HashCode.html",
    "title": "Class HashCode | Data Structures",
    "keywords": "Class HashCode Combines multiple hash codes into a single value. Inheritance System.Object HashCode Namespace : Zigurous.DataStructures public static class HashCode Methods Combine(Int32, Int32) Combines two hash codes into one unique hash. public static int Combine(int hash1, int hash2) Parameter Description hash1 The first hash. hash2 The second hash. Returns Description System.Int32 The combined hash code. Combine(Int32, Int32, Int32) Combines three hash codes into one unique hash. public static int Combine(int hash1, int hash2, int hash3) Parameter Description hash1 The first hash. hash2 The second hash. hash3 The third hash. Returns Description System.Int32 The combined hash code. Combine(Int32, Int32, Int32, Int32) Combines four hash codes into one unique hash. public static int Combine(int hash1, int hash2, int hash3, int hash4) Parameter Description hash1 The first hash. hash2 The second hash. hash3 The third hash. hash4 The fourth hash. Returns Description System.Int32 The combined hash code."
  },
  "api/Zigurous.DataStructures.HashSetExtensions.html": {
    "href": "api/Zigurous.DataStructures.HashSetExtensions.html",
    "title": "Class HashSetExtensions | Data Structures",
    "keywords": "Class HashSetExtensions Extension methods for hash sets. Inheritance System.Object HashSetExtensions Namespace : Zigurous.DataStructures public static class HashSetExtensions Methods First<T>(HashSet<T>, Predicate<T>) Returns the first element in the set that satisifies the predicate . public static T First<T>(this HashSet<T> set, Predicate<T> predicate) Parameter Description set The set to get the element from. predicate The predicate to use. Type Parameter Description T The type of the elements in the set. ForEach<T>(HashSet<T>, Action<T>) Invokes an action on each element in the set. public static void ForEach<T>(this HashSet<T> set, Action<T> action) Parameter Description set The set to iterate over. action The action to invoke on each element. Type Parameter Description T The type of the elements in the set. IsAny<T>(HashSet<T>, Predicate<T>) Checks if any element in the set satisfies the predicate . public static bool IsAny<T>(this HashSet<T> set, Predicate<T> predicate) Parameter Description set The set to check. predicate The predicate to use. Type Parameter Description T The type of the elements in the set. IsEach<T>(HashSet<T>, Predicate<T>) Checks if each element in the set satisfies the predicate . public static bool IsEach<T>(this HashSet<T> set, Predicate<T> predicate) Parameter Description set The set to check. predicate The predicate to use. Type Parameter Description T The type of the elements in the set."
  },
  "api/Zigurous.DataStructures.html": {
    "href": "api/Zigurous.DataStructures.html",
    "title": "Namespace Zigurous.DataStructures | Data Structures",
    "keywords": "Namespace Zigurous.DataStructures Classes ArrayExtensions Extension methods for arrays. ComparableExtensions Extension methods for IComparable. DictionaryExtensions Extension methods for dictionaries. DoubleAccumulator Accumulates double values into a single total value. FloatAccumulator Accumulates float values into a single total value. HashCode Combines multiple hash codes into a single value. HashSetExtensions Extension methods for hash sets. Identifier Generates identifiers. IntAccumulator Accumulates int values into a single total value. ListExtensions Extension methods for lists. Modules<T> Manages a list of registered entity modules. ObjectPool<T> Reuses objects from a shared pool to prevent instantiating new objects. The object pool can have a set capacity or it can grow in size. Optionally, objects that are currently active can be reused when the pool has reached capacity. QuaternionAccumulator Accumulates Quaternion values into a single total value. SingletonBehavior<T> A singleton behavior that can be used to ensure that only one instance of a class is created. SortedSetExtensions Extension methods for sorted sets. StringExtensions Extension methods for strings. ValueAccumulator<T> Accumulates a set of stored values into a single total value. Vector2Accumulator Accumulates Vector2 values into a single total value. Vector2IntAccumulator Accumulates Vector2Int values into a single total value. Vector3Accumulator Accumulates Vector3 values into a single total value. Vector3IntAccumulator Accumulates Vector3Int values into a single total value. Vector4Accumulator Accumulates Vector4 values into a single total value. Structs Bitmask A bitmask representation that can be used for bitwise operations. A bitmask is a set of bits that can be set or cleared. Bool3 Stores a tuple of 3 booleans. ClampedRange A range of values clamped between a lower and upper bound. ColorRange A range of Color values. EulerRange A range of euler values wrapped between -360 and +360. FloatRange A range of float values. GridSize Stores the size of a grid as rows and columns. IntRange A range of int values. Quantity<T> Stores a quantity of a given entity type. Range<T> A range of values of the given type. Size Stores the size of an entity as a width and height. UIntRange A range of uint values. UnitIntervalRange A range of values between zero and one. Vector2Range A range of Vector2 values. Vector3Range A range of Vector3 values. Vector4Range A range of Vector4 values. Interfaces IModular<T> A type that can register and unregister modules. INumberRange<T> A generic interface for a range of number values. IObjectPool<T> A type that can retrieve and recycle objects from a shared pool. IRange<T> A generic interface for a range of values. Delegates ArrayExtensions.Reducer<TSum, TElement> A function delegate that reduces an array into a single value. ListExtensions.Reducer<TSum, TItem> A function delegate that reduces a list into a single value. ObjectPool<T>.Generator A function delegate that creates a new instance of T ."
  },
  "api/Zigurous.DataStructures.Identifier.html": {
    "href": "api/Zigurous.DataStructures.Identifier.html",
    "title": "Class Identifier | Data Structures",
    "keywords": "Class Identifier Generates identifiers. Inheritance System.Object Identifier Namespace : Zigurous.DataStructures public static class Identifier Methods Temporal() Creates an identifier based on unix time. Since time is always increasing, this value will be different than generations made in previous cycles. Remarks This should not be used to guarentee uniqueness since ids generated within the same cycle will usually be identical. public static long Temporal()"
  },
  "api/Zigurous.DataStructures.IModular-1.html": {
    "href": "api/Zigurous.DataStructures.IModular-1.html",
    "title": "Interface IModular<T> | Data Structures",
    "keywords": "Interface IModular<T> A type that can register and unregister modules. Namespace : Zigurous.DataStructures public interface IModular<T> where T : class Type Parameter Description T The type of module that can be registered. Methods IsRegistered(T) Checks if the module is registered. bool IsRegistered(T module) Parameter Description module The module to check for registration. Register(T) Registers a module to the entity. bool Register(T module) Parameter Description module The module to register. Returns Description System.Boolean True if the module was registered, false if the module cannot be registered. Unregister(T) Unregisters a module from the entity. bool Unregister(T module) Parameter Description module The module to unregister. Returns Description System.Boolean True if the module was unregistered, false if the module cannot be unregistered."
  },
  "api/Zigurous.DataStructures.IntAccumulator.html": {
    "href": "api/Zigurous.DataStructures.IntAccumulator.html",
    "title": "Class IntAccumulator | Data Structures",
    "keywords": "Class IntAccumulator Accumulates int values into a single total value. Inheritance System.Object ValueAccumulator < System.Int32 > IntAccumulator Inherited Members ValueAccumulator<Int32>.values ValueAccumulator<Int32>.total ValueAccumulator<Int32>.Count ValueAccumulator<Int32>.GetValue(Int32) ValueAccumulator<Int32>.SetValue(Int32, Int32) ValueAccumulator<Int32>.RemoveValue(Int32) ValueAccumulator<Int32>.Clear() Namespace : Zigurous.DataStructures public sealed class IntAccumulator : ValueAccumulator<int> Methods Add(Int32) Increases the accumulated total by a given value. protected override int Add(int value) Parameter Description value The value to add to the total. Returns Description System.Int32 The new total value. Overrides Zigurous.DataStructures.ValueAccumulator<System.Int32>.Add(System.Int32) Subtract(Int32) Decreases the accumulated total by a given value. protected override int Subtract(int value) Parameter Description value The value to subtract from the total. Returns Description System.Int32 The new total value. Overrides Zigurous.DataStructures.ValueAccumulator<System.Int32>.Subtract(System.Int32)"
  },
  "api/Zigurous.DataStructures.IntRange.html": {
    "href": "api/Zigurous.DataStructures.IntRange.html",
    "title": "Struct IntRange | Data Structures",
    "keywords": "Struct IntRange A range of int values. Implements INumberRange < System.Int32 > IRange < System.Int32 > Namespace : Zigurous.DataStructures [Serializable] public struct IntRange : INumberRange<int>, IRange<int> Constructors IntRange(Int32, Int32) Creates a new range with the specified values. public IntRange(int min, int max) Parameter Description min The lower bound of the range. max The upper bound of the range. Properties Delta The difference between the maximum and minimum values. public readonly int Delta { get; } max The upper bound of the range. public int max { get; set; } Median The median value of the range. public readonly int Median { get; } min The lower bound of the range. public int min { get; set; } minMax Shorthand for writing IntRange(int.MinValue, int.MaxValue). public static readonly IntRange minMax { get; } negative Shorthand for writing IntRange(int.MinValue, 0). public static readonly IntRange negative { get; } one Shorthand for writing IntRange(1, 1). public static readonly IntRange one { get; } positive Shorthand for writing IntRange(0, int.MaxValue). public static readonly IntRange positive { get; } zero Shorthand for writing IntRange(0, 0). public static readonly IntRange zero { get; } Methods Clamp(Int32) Clamps the value to the range. public int Clamp(int value) Parameter Description value The value to clamp. Returns Description System.Int32 The clamped value. Includes(Int32) Checks if the value is in the range. public bool Includes(int value) Parameter Description value The value to check. Includes(Int32, Boolean, Boolean) Checks if the value is in the range. public bool Includes(int value, bool includeMin, bool includeMax) Parameter Description value The value to check. includeMin The minimum value is inclusive if true, exclusive if false. includeMax The maximum value is inclusive if true, exclusive if false. Random() Returns a random value in the range [inclusive, exclusive). public int Random() RandomInclusive() Returns a random value in the range [inclusive, inclusive]. public int RandomInclusive() Implements INumberRange<T> IRange<T>"
  },
  "api/Zigurous.DataStructures.INumberRange-1.html": {
    "href": "api/Zigurous.DataStructures.INumberRange-1.html",
    "title": "Interface INumberRange<T> | Data Structures",
    "keywords": "Interface INumberRange<T> A generic interface for a range of number values. Inherited Members IRange<T>.min IRange<T>.max IRange<T>.Includes(T) IRange<T>.Includes(T, Boolean, Boolean) Namespace : Zigurous.DataStructures public interface INumberRange<T> : IRange<T> Type Parameter Description T The type of values in the range. Properties Delta The difference between the maximum and minimum values. T Delta { get; } Median The median value of the range. T Median { get; } Methods Clamp(T) Clamps the value to the range. T Clamp(T value) Parameter Description value The value to clamp. Returns Description T The clamped value. Random() Returns a random value in the range. T Random()"
  },
  "api/Zigurous.DataStructures.IObjectPool-1.html": {
    "href": "api/Zigurous.DataStructures.IObjectPool-1.html",
    "title": "Interface IObjectPool<T> | Data Structures",
    "keywords": "Interface IObjectPool<T> A type that can retrieve and recycle objects from a shared pool. Namespace : Zigurous.DataStructures public interface IObjectPool<T> : IDisposable where T : class Type Parameter Description T The type of object to be pooled. Methods Empty() Empties the object pool of all objects. void Empty() Recycle(T) Adds an item back to the object pool so it can be reused. void Recycle(T item) Parameter Description item The item to recycle. Retrieve() Returns an item from the object pool and removes it from the pool. T Retrieve()"
  },
  "api/Zigurous.DataStructures.IRange-1.html": {
    "href": "api/Zigurous.DataStructures.IRange-1.html",
    "title": "Interface IRange<T> | Data Structures",
    "keywords": "Interface IRange<T> A generic interface for a range of values. Namespace : Zigurous.DataStructures public interface IRange<T> Type Parameter Description T The type of values in the range. Properties max The upper bound of the range. T max { get; set; } min The lower bound of the range. T min { get; set; } Methods Includes(T) Checks if the value is in the range. bool Includes(T value) Parameter Description value The value to check. Includes(T, Boolean, Boolean) Checks if the value is in the range. bool Includes(T value, bool includeMin, bool includeMax) Parameter Description value The value to check. includeMin The minimum value is inclusive if true, exclusive if false. includeMax The maximum value is inclusive if true, exclusive if false."
  },
  "api/Zigurous.DataStructures.ListExtensions.html": {
    "href": "api/Zigurous.DataStructures.ListExtensions.html",
    "title": "Class ListExtensions | Data Structures",
    "keywords": "Class ListExtensions Extension methods for lists. Inheritance System.Object ListExtensions Namespace : Zigurous.DataStructures public static class ListExtensions Methods Add<T>(List<T>, T, Int32) Adds a specified amount of value to the list. public static void Add<T>(this List<T> list, T value, int amount) Parameter Description list The list to add to. value The value to add. amount The number of times to add the value. Type Parameter Description T The type of the list. CombinedWith<T>(List<T>, List<T>) Combines the list with another. public static List<T> CombinedWith<T>(this List<T> list, List<T> other) Parameter Description list The first list. other The second list. Returns Description List <T> A new list containing all the items of list and other . Type Parameter Description T The type of the list. Filter<T>(List<T>, Predicate<T>) Filters the list to only contain items that satisfy the predicate . public static List<T> Filter<T>(this List<T> list, Predicate<T> predicate) Parameter Description list The list to filter. predicate The predicate to use. Returns Description List <T> A new list with the filtered items removed. Type Parameter Description T The type of the list. First<T>(List<T>) Returns the first item in the list, or the default value of T if the list is empty. public static T First<T>(this List<T> list) Parameter Description list The list to get the item from. Type Parameter Description T The type of the list. First<T>(List<T>, Predicate<T>) Returns the first item in the list that satisfies the predicate , or the default value of T if no item satisfies the predicate . public static T First<T>(this List<T> list, Predicate<T> predicate) Parameter Description list The list to get the item from. predicate The predicate to use. Type Parameter Description T The type of the list. FirstNonNull<T>(List<T>) Returns the first non-null item in the list, or the default value of T if all items are null. public static T FirstNonNull<T>(this List<T> list) where T : class Parameter Description list The list to get the item from. Type Parameter Description T The type of the list. For<T>(List<T>, Action<(T item, Int32 index)>) Invokes an System.Action<T> for each item in the list. public static void For<T>(this List<T> list, Action<(T item, int index)> action) Parameter Description list The list to iterate over. action The action to invoke. Type Parameter Description T The type of the list. IsAny<T>(List<T>, Predicate<T>) Checks if any item in the list satisfies the predicate . public static bool IsAny<T>(this List<T> list, Predicate<T> predicate) Parameter Description list The list to search in. predicate The predicate to use. Type Parameter Description T The type of the list. IsEach<T>(List<T>, Predicate<T>) Checks if each item in the list satisfies the predicate . public static bool IsEach<T>(this List<T> list, Predicate<T> predicate) Parameter Description list The list to search in. predicate The predicate to use. Type Parameter Description T The type of the list. IsEmpty<T>(List<T>) Checks if the list is empty. public static bool IsEmpty<T>(this List<T> list) Parameter Description list The list to check. Type Parameter Description T The type of the list. IsInBounds<T>(List<T>, Int32) Checks if index is within the bounds of the list. public static bool IsInBounds<T>(this List<T> list, int index) Parameter Description list The list to check. index The index to check. Type Parameter Description T The type of the list. IsNotEmpty<T>(List<T>) Checks if the list is not empty. public static bool IsNotEmpty<T>(this List<T> list) Parameter Description list The list to check. Type Parameter Description T The type of the list. IsNotInBounds<T>(List<T>, Int32) Checks if index is out of bounds of the list. public static bool IsNotInBounds<T>(this List<T> list, int index) Parameter Description list The list to check. index The index to check. Type Parameter Description T The type of the list. ItemAt<T>(List<T>, Int32) Returns the item at index , or the default value of T if the list is empty. public static T ItemAt<T>(this List<T> list, int index) Parameter Description list The list to get the item from. index The index of the item to get. Type Parameter Description T The type of the list. Join<T>(List<T>, String, Int32, Int32) Joins the items of the list into a string separated by the delimiter . public static string Join<T>(this List<T> list, string delimiter, int startIndex = 0, int endIndex = 2147483647) Parameter Description list delimiter The delimiter to use. startIndex The index to start at. endIndex The index to end at. Type Parameter Description T The type of the array. Last<T>(List<T>) Returns the last item in the list, or the default of T if the list is empty. public static T Last<T>(this List<T> list) Parameter Description list The list to get the item from. Type Parameter Description T The type of the list. Last<T>(List<T>, Predicate<T>) Returns the last item in the list that satisfies the predicate , or the default of T if no item satisfies the predicate . public static T Last<T>(this List<T> list, Predicate<T> predicate) Parameter Description list The list to get the item from. predicate The predicate to use. Type Parameter Description T The type of the list. LastNonNull<T>(List<T>) Returns the last non-null item in the list, or the default of T if all items are null. public static T LastNonNull<T>(this List<T> list) where T : class Parameter Description list The list to get the item from. Type Parameter Description T The type of the list. Map<TInput, TOutput>(List<TInput>, Converter<TInput, TOutput>) Maps the items of the list to a new list using a given converter . public static List<TOutput> Map<TInput, TOutput>(this List<TInput> list, Converter<TInput, TOutput> converter) Parameter Description list The list to map. converter The converter to use. Returns Description List <TOutput> A new list with the converted items. Type Parameter Description TInput The type of the input list. TOutput The type of the output list. NonNull<T>(List<T>) Filters out all null items from the list. public static List<T> NonNull<T>(this List<T> list) where T : class Parameter Description list The list to filter. Returns Description List <T> A new list with all null items removed. Type Parameter Description T The type of the list. Random<T>(List<T>) Returns a random item from the list, or the default of T if the list is empty. public static T Random<T>(this List<T> list) Parameter Description list The list to get the random item from. Type Parameter Description T The type of the list. Reduce<TItem, TSum>(List<TItem>, TSum, ListExtensions.Reducer<TSum, TItem>) Reduces the items of the list to a single value. public static TSum Reduce<TItem, TSum>(this List<TItem> list, TSum initialValue, ListExtensions.Reducer<TSum, TItem> reducer) Parameter Description list The list to reduce. initialValue The initial value to use. reducer The reducer to use. Returns Description TSum The reduced value. Type Parameter Description TItem The type of items in the list. TSum The type of the reduced value. RemoveFirst<T>(List<T>) Removes the first item in the list. public static void RemoveFirst<T>(this List<T> list) Parameter Description list The list to remove from. Type Parameter Description T The type of the list. RemoveLast<T>(List<T>) Removes the last item in the list. public static void RemoveLast<T>(this List<T> list) Parameter Description list The list to remove from. Type Parameter Description T The type of the list. Reversed<T>(List<T>) Reverses the order of the items in the list. public static List<T> Reversed<T>(this List<T> list) Parameter Description list The list to reverse. Returns Description List <T> A new list with the order of the items reversed. Type Parameter Description T The type of the list. Shuffle<T>(List<T>) Shuffles the list in place. Remarks The shuffle is done using the Fisher-Yates algorithm. public static void Shuffle<T>(this List<T> list) Parameter Description list The list to shuffle. Type Parameter Description T The type of the list. Shuffle<T>(List<T>, Random) Shuffles the list in place using the given random number generator. Remarks The shuffle is done using the Fisher-Yates algorithm. public static void Shuffle<T>(this List<T> list, Random rng) Parameter Description list The list to shuffle. rng The random number generator to use. Type Parameter Description T The type of the list. Where<T>(List<T>, Predicate<T>) Filters the list to only contain items that satisfy the predicate . public static List<T> Where<T>(this List<T> list, Predicate<T> predicate) Parameter Description list The list to filter. predicate The predicate to use. Returns Description List <T> A new list with the filtered items removed. Type Parameter Description T The type of the list. WrapIndex<T>(List<T>, Int32) Wraps the index in the list to the other end when outside the bounds. public static int WrapIndex<T>(this List<T> list, int index) Parameter Description list The list to wrap. index The index to wrap. Returns Description System.Int32 The wrapped index. Type Parameter Description T The type of the list."
  },
  "api/Zigurous.DataStructures.ListExtensions.Reducer-2.html": {
    "href": "api/Zigurous.DataStructures.ListExtensions.Reducer-2.html",
    "title": "Delegate ListExtensions.Reducer<TSum, TItem> | Data Structures",
    "keywords": "Delegate ListExtensions.Reducer<TSum, TItem> A function delegate that reduces a list into a single value. Namespace : Zigurous.DataStructures public delegate TSum Reducer<TSum, TItem>(TSum sum, TItem item); Parameter Description sum The current sum. item The current item being reduced. Returns Description TSum The reduced value. Type Parameter Description TSum The type of the reduced value. TItem The type of items in the list."
  },
  "api/Zigurous.DataStructures.Modules-1.html": {
    "href": "api/Zigurous.DataStructures.Modules-1.html",
    "title": "Class Modules<T> | Data Structures",
    "keywords": "Class Modules<T> Manages a list of registered entity modules. Inheritance System.Object Modules<T> Implements IModular <T> Namespace : Zigurous.DataStructures public sealed class Modules<T> : IModular<T> where T : class Type Parameter Description T The type of entity to manage. Constructors Modules(T[], Action<T>, Action<T>) Creates a new module collection and pre-registers a list of items . public Modules(T[] items, Action<T> registered = null, Action<T> unregistered = null) Parameter Description items The items to pre-register. registered A callback invoked when a module is registered. unregistered A callback invoked when a module is unregistered. Modules(Int32, Action<T>, Action<T>) Creates a new module collection with a set capacity . public Modules(int capacity, Action<T> registered = null, Action<T> unregistered = null) Parameter Description capacity The initial capacity of the collection. registered The callback invoked when a module is registered. unregistered The callback invoked when a module is unregistered. Fields registered The callback invoked when a module is registered. public Action<T> registered unregistered The callback invoked when a module is unregistered. public Action<T> unregistered Properties Count The amount of modules registered to the entity. public int Count { get; } Item[Int32] Returns the module at the given index . public T this[int index] { get; } Parameter Description index The index of the module to return. items The modules registered to the entity. public List<T> items { get; } Methods IsRegistered(T) Checks if the module is registered. public bool IsRegistered(T module) Parameter Description module The module to check for registration. Register(T) Registers a module to the entity. public bool Register(T module) Parameter Description module The module to register. Returns Description System.Boolean True if the module was registered, false if the module cannot be registered. Unregister(T) Unregisters a module from the entity. public bool Unregister(T module) Parameter Description module The module to unregister. Returns Description System.Boolean True if the module was unregistered, false if the module cannot be unregistered. Implements IModular<T>"
  },
  "api/Zigurous.DataStructures.ObjectPool-1.Generator.html": {
    "href": "api/Zigurous.DataStructures.ObjectPool-1.Generator.html",
    "title": "Delegate ObjectPool<T>.Generator | Data Structures",
    "keywords": "Delegate ObjectPool<T>.Generator A function delegate that creates a new instance of T . Namespace : Zigurous.DataStructures public delegate T Generator();"
  },
  "api/Zigurous.DataStructures.ObjectPool-1.html": {
    "href": "api/Zigurous.DataStructures.ObjectPool-1.html",
    "title": "Class ObjectPool<T> | Data Structures",
    "keywords": "Class ObjectPool<T> Reuses objects from a shared pool to prevent instantiating new objects. The object pool can have a set capacity or it can grow in size. Optionally, objects that are currently active can be reused when the pool has reached capacity. Inheritance System.Object ObjectPool<T> Implements IObjectPool <T> Namespace : Zigurous.DataStructures public sealed class ObjectPool<T> : IObjectPool<T>, IDisposable where T : class, IDisposable Type Parameter Description T The type of object to pool. Constructors ObjectPool(Int32) Creates a new object pool with an initial capacity. New objects are created as needed using the object type default value. public ObjectPool(int initialCapacity) Parameter Description initialCapacity The initial capacity of the pool. ObjectPool(Int32, Int32, Boolean) Creates a new object pool with an initial capacity and max capacity. Optionally active objects can be reused when the pool has reached max capacity. New objects are created as needed using the object type default value. public ObjectPool(int initialCapacity, int maxCapacity, bool reuseActive = false) Parameter Description initialCapacity The initial capacity of the pool. maxCapacity The maximum number of objects that can be generated. reuseActive Whether active objects should be reused when the object pool has reached max capacity. ObjectPool(ObjectPool<T>.Generator, Int32) Creates a new object pool with a given generator function and initial capacity. New objects are created as needed with no max capacity. public ObjectPool(ObjectPool<T>.Generator generator, int initialCapacity) Parameter Description generator The function delegate that generates a new object. initialCapacity The initial capacity of the pool. ObjectPool(ObjectPool<T>.Generator, Int32, Int32, Boolean) Creates a new object pool with a given generator function and set capacity limits. Optionally active objects can be reused when the pool has reached max capacity. public ObjectPool(ObjectPool<T>.Generator generator, int initialCapacity, int maxCapacity, bool reuseActive = false) Parameter Description generator The function delegate that generates a new object. initialCapacity The initial capacity of the pool. maxCapacity The maximum number of objects that can be generated. reuseActive Whether active objects should be reused when the object pool has reached max capacity. Properties ActiveCount The number of objects currently being used. public int ActiveCount { get; } activeItems The list of objects currently being used. public List<T> activeItems { get; } AvailableCount The number of objects available to be reused. public int AvailableCount { get; } generator The function delegate that generates a new object. public ObjectPool<T>.Generator generator { get; } maxCapacity The maximum number of objects that can be generated. public int maxCapacity { get; } pool The list of all objects waiting to be reused. public Queue<T> pool { get; } reuseActive Whether active objects should be reused when the object pool has reached capacity. public bool reuseActive { get; } Methods Dispose() Disposes of all class resources. public void Dispose() Dispose(Action<T>) Disposes of all class resources and invokes a cleanup function on each object in the pool. Remarks The cleanup function is useful, for example, if you want to destroy the objects when the pool is disposed. public void Dispose(Action<T> cleanup) Parameter Description cleanup The cleanup function to invoke on each object. Empty() Empties the object pool of all objects. public void Empty() Empty(Action<T>) Empties the object pool of all objects and invokes a cleanup function on each object. Remarks The cleanup function is useful, for example, if you want to destroy the objects when the pool is emptied. public void Empty(Action<T> cleanup) Parameter Description cleanup The cleanup function to invoke on each object. Recycle(T) Adds an item back to the object pool so it can be reused. public void Recycle(T item) Parameter Description item The item to add to the pool. Retrieve() Returns an item from the object pool and removes it from the pool. If there are no available objects in the pool, either a new object will be generated or the oldest object will be reused depending upon how the object pool was created. public T Retrieve() Implements IObjectPool<T>"
  },
  "api/Zigurous.DataStructures.Quantity-1.html": {
    "href": "api/Zigurous.DataStructures.Quantity-1.html",
    "title": "Struct Quantity<T> | Data Structures",
    "keywords": "Struct Quantity<T> Stores a quantity of a given entity type. Namespace : Zigurous.DataStructures [Serializable] public struct Quantity<T> : IEquatable<Quantity<T>> where T : IEquatable<T> Type Parameter Description T The type of entity being counted. Constructors Quantity(T, Int32) Creates a new quantity with a specified amount of entity . public Quantity(T entity, int amount) Parameter Description entity The entity being counted. amount The amount of entities. Fields amount The number of entities. public int amount entity The entity being counted. public T entity Methods Equals(Object) Determines if the quantity is equal to other . public override bool Equals(object other) Parameter Description other The object to compare to. Overrides System.ValueType.Equals(System.Object) Equals(Quantity<T>) Determines if the quantity is equal to other . public bool Equals(Quantity<T> other) Parameter Description other The quantity to compare to. GetHashCode() Returns the hash code of the quantity. public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToString() Converts the quantity to a string. public override string ToString() Overrides System.ValueType.ToString() Operators Equality(Quantity<T>, Quantity<T>) public static bool operator ==(Quantity<T> lhs, Quantity<T> rhs) Parameter Description lhs rhs Inequality(Quantity<T>, Quantity<T>) public static bool operator !=(Quantity<T> lhs, Quantity<T> rhs) Parameter Description lhs rhs"
  },
  "api/Zigurous.DataStructures.QuaternionAccumulator.html": {
    "href": "api/Zigurous.DataStructures.QuaternionAccumulator.html",
    "title": "Class QuaternionAccumulator | Data Structures",
    "keywords": "Class QuaternionAccumulator Accumulates Quaternion values into a single total value. Inheritance System.Object ValueAccumulator < Quaternion > QuaternionAccumulator Inherited Members ValueAccumulator<Quaternion>.values ValueAccumulator<Quaternion>.total ValueAccumulator<Quaternion>.Count ValueAccumulator<Quaternion>.GetValue(Int32) ValueAccumulator<Quaternion>.SetValue(Quaternion, Int32) ValueAccumulator<Quaternion>.RemoveValue(Int32) ValueAccumulator<Quaternion>.Clear() Namespace : Zigurous.DataStructures public sealed class QuaternionAccumulator : ValueAccumulator<Quaternion> Constructors QuaternionAccumulator() Default constructor. public QuaternionAccumulator() Methods Add(Quaternion) Increases the accumulated total by a given value. protected override Quaternion Add(Quaternion value) Parameter Description value The value to add to the total. Returns Description Quaternion The new total value. Overrides Zigurous.DataStructures.ValueAccumulator<Quaternion>.Add(Quaternion) Subtract(Quaternion) Decreases the accumulated total by a given value. protected override Quaternion Subtract(Quaternion value) Parameter Description value The value to subtract from the total. Returns Description Quaternion The new total value. Overrides Zigurous.DataStructures.ValueAccumulator<Quaternion>.Subtract(Quaternion)"
  },
  "api/Zigurous.DataStructures.Range-1.html": {
    "href": "api/Zigurous.DataStructures.Range-1.html",
    "title": "Struct Range<T> | Data Structures",
    "keywords": "Struct Range<T> A range of values of the given type. Implements IRange <T> Namespace : Zigurous.DataStructures public struct Range<T> : IRange<T> where T : IComparable<T> Type Parameter Description T The type of values in the range. Constructors Range(T, T) Creates a new range with the specified values. public Range(T min = null, T max = null) Parameter Description min The lower bound of the range. max The upper bound of the range. Properties max The upper bound of the range. public T max { get; set; } min The lower bound of the range. public T min { get; set; } Methods Includes(T) Checks if the value is in the range. public bool Includes(T value) Parameter Description value The value to check. Includes(T, Boolean, Boolean) Checks if the value is in the range. public bool Includes(T value, bool includeMin, bool includeMax) Parameter Description value The value to check. includeMin Whether to include the minimum value. includeMax Whether to include the maximum value. Implements IRange<T>"
  },
  "api/Zigurous.DataStructures.SingletonBehavior-1.html": {
    "href": "api/Zigurous.DataStructures.SingletonBehavior-1.html",
    "title": "Class SingletonBehavior<T> | Data Structures",
    "keywords": "Class SingletonBehavior<T> A singleton behavior that can be used to ensure that only one instance of a class is created. Inheritance System.Object SingletonBehavior<T> Namespace : Zigurous.DataStructures public abstract class SingletonBehavior<T> : MonoBehaviour where T : Component Type Parameter Description T The type of the singleton class. Constructors SingletonBehavior() protected SingletonBehavior() Properties HasInstance Checks if the singleton has been initialized and an instance is available to use. public static bool HasInstance { get; } Instance The current instance of the class. The instance will be created if it does not already exist. public static T Instance { get; } Methods Awake() protected virtual void Awake() OnDestroy() protected virtual void OnDestroy() OnSingletonInitialized() A callback invoked when the singleton is first initialized. protected virtual void OnSingletonInitialized()"
  },
  "api/Zigurous.DataStructures.Size.html": {
    "href": "api/Zigurous.DataStructures.Size.html",
    "title": "Struct Size | Data Structures",
    "keywords": "Struct Size Stores the size of an entity as a width and height. Namespace : Zigurous.DataStructures [Serializable] public struct Size : IEquatable<Size>, IComparable<Size> Constructors Size(Int32) Creates a new size with uniform width and height specified by size . public Size(int size) Parameter Description size The uniform size of the entity. Size(Int32, Int32) Creates a new size of the given width and height . public Size(int width = 0, int height = 0) Parameter Description width The width of the entity. height The height of the entity. Fields height The height of the entity. public int height width The width of the entity. public int width Properties Area The area of the entity (width * height). public readonly int Area { get; } max Shorthand for writing Size(int.MaxValue, int.MaxValue). public static readonly Size max { get; } one Shorthand for writing Size(1, 1). public static readonly Size one { get; } sq1024 Shorthand for writing Size(1024). public static readonly Size sq1024 { get; } sq128 Shorthand for writing Size(128). public static readonly Size sq128 { get; } sq16 Shorthand for writing Size(16). public static readonly Size sq16 { get; } sq2 Shorthand for writing Size(2). public static readonly Size sq2 { get; } sq2048 Shorthand for writing Size(2048). public static readonly Size sq2048 { get; } sq256 Shorthand for writing Size(256). public static readonly Size sq256 { get; } sq32 Shorthand for writing Size(32). public static readonly Size sq32 { get; } sq4 Shorthand for writing Size(4). public static readonly Size sq4 { get; } sq4096 Shorthand for writing Size(4096). public static readonly Size sq4096 { get; } sq512 Shorthand for writing Size(512). public static readonly Size sq512 { get; } sq64 Shorthand for writing Size(64). public static readonly Size sq64 { get; } sq8 Shorthand for writing Size(8). public static readonly Size sq8 { get; } sq8192 Shorthand for writing Size(8192). public static readonly Size sq8192 { get; } zero Shorthand for writing Size(0, 0). public static readonly Size zero { get; } Methods CompareTo(Size) System.IComparable`1.CompareTo(`0) . public int CompareTo(Size other) Parameter Description other The size to compare to. Equals(Object) Determines if the size is equal to other . public override bool Equals(object other) Parameter Description other The object to compare to. Overrides System.ValueType.Equals(System.Object) Equals(Size) Determines if the size is equal to other . public bool Equals(Size other) Parameter Description other The size to compare to. GetHashCode() Returns the hash code of the size. public override int GetHashCode() Overrides System.ValueType.GetHashCode() ToString() Converts the size to a string. public override string ToString() Overrides System.ValueType.ToString() Operators Equality(Size, Size) public static bool operator ==(Size lhs, Size rhs) Parameter Description lhs rhs Inequality(Size, Size) public static bool operator !=(Size lhs, Size rhs) Parameter Description lhs rhs"
  },
  "api/Zigurous.DataStructures.SortedSetExtensions.html": {
    "href": "api/Zigurous.DataStructures.SortedSetExtensions.html",
    "title": "Class SortedSetExtensions | Data Structures",
    "keywords": "Class SortedSetExtensions Extension methods for sorted sets. Inheritance System.Object SortedSetExtensions Namespace : Zigurous.DataStructures public static class SortedSetExtensions Methods First<T>(SortedSet<T>, Predicate<T>) Returns the first element in the set that satisfies the predicate . public static T First<T>(this SortedSet<T> set, Predicate<T> predicate) Parameter Description set The set to get the element from. predicate The predicate to use. Type Parameter Description T The type of the elements in the set. ForEach<T>(SortedSet<T>, Action<T>) Invokes an action on each element in the set. public static void ForEach<T>(this SortedSet<T> set, Action<T> action) Parameter Description set The set to iterate over. action The action to invoke on each element. Type Parameter Description T The type of the elements in the set. IsAny<T>(SortedSet<T>, Predicate<T>) Checks if any element in the set satisfies the predicate . public static bool IsAny<T>(this SortedSet<T> set, Predicate<T> predicate) Parameter Description set The set to check. predicate The predicate to use. Type Parameter Description T The type of the elements in the set. IsEach<T>(SortedSet<T>, Predicate<T>) Checks if each element in the set satisfies the predicate . public static bool IsEach<T>(this SortedSet<T> set, Predicate<T> predicate) Parameter Description set The set to check. predicate The predicate to use. Type Parameter Description T The type of the elements in the set."
  },
  "api/Zigurous.DataStructures.StringExtensions.html": {
    "href": "api/Zigurous.DataStructures.StringExtensions.html",
    "title": "Class StringExtensions | Data Structures",
    "keywords": "Class StringExtensions Extension methods for strings. Inheritance System.Object StringExtensions Namespace : Zigurous.DataStructures public static class StringExtensions Methods IsEmpty(String) Checks if the string is null or empty. public static bool IsEmpty(this string str) Parameter Description str The string to test. IsNotEmpty(String) Checks if the string is not null and not empty. public static bool IsNotEmpty(this string str) Parameter Description str The string to test. Repeat(String, Int32) Repeats the string n times. public static string Repeat(this string str, int n) Parameter Description str The string to repeat. n The number of times to repeat the string. Returns Description System.String A new repeated string."
  },
  "api/Zigurous.DataStructures.UIntRange.html": {
    "href": "api/Zigurous.DataStructures.UIntRange.html",
    "title": "Struct UIntRange | Data Structures",
    "keywords": "Struct UIntRange A range of uint values. Implements INumberRange < System.UInt32 > IRange < System.UInt32 > Namespace : Zigurous.DataStructures [Serializable] public struct UIntRange : INumberRange<uint>, IRange<uint> Constructors UIntRange(UInt32, UInt32) Creates a new range with the specified values. public UIntRange(uint min, uint max) Parameter Description min The lower bound of the range. max The upper bound of the range. Properties Delta The difference between the maximum and minimum values. public readonly uint Delta { get; } max The upper bound of the range. public uint max { get; set; } Median The median value of the range. public readonly uint Median { get; } min The lower bound of the range. public uint min { get; set; } minMax Shorthand for writing UIntRange(uint.MinValue, uint.MaxValue). public static readonly UIntRange minMax { get; } one Shorthand for writing UIntRange(1, 1). public static readonly UIntRange one { get; } zero Shorthand for writing UIntRange(0, 0). public static readonly UIntRange zero { get; } Methods Clamp(UInt32) Clamps the value to the range. public uint Clamp(uint value) Parameter Description value The value to clamp. Returns Description System.UInt32 The clamped value. Includes(UInt32) Checks if the value is in the range. public bool Includes(uint value) Parameter Description value The value to check. Includes(UInt32, Boolean, Boolean) Checks if the value is in the range. public bool Includes(uint value, bool includeMin, bool includeMax) Parameter Description value The value to check. includeMin The minimum value is inclusive if true, exclusive if false. includeMax The maximum value is inclusive if true, exclusive if false. Random() Returns a random value in the range [inclusive, exclusive). public uint Random() RandomInclusive() Returns a random value in the range [inclusive, inclusive]. public uint RandomInclusive() Implements INumberRange<T> IRange<T>"
  },
  "api/Zigurous.DataStructures.UnitIntervalRange.html": {
    "href": "api/Zigurous.DataStructures.UnitIntervalRange.html",
    "title": "Struct UnitIntervalRange | Data Structures",
    "keywords": "Struct UnitIntervalRange A range of values between zero and one. Implements INumberRange < System.Single > IRange < System.Single > Namespace : Zigurous.DataStructures [Serializable] public struct UnitIntervalRange : INumberRange<float>, IRange<float> Constructors UnitIntervalRange(Single, Single) Creates a new range with the specified values. public UnitIntervalRange(float min = 0F, float max = 1F) Parameter Description min The lower bound of the range. max The upper bound of the range. Properties Delta The difference between the maximum and minimum values. public readonly float Delta { get; } max The upper bound of the range. public float max { get; set; } Median The median value of the range. public readonly float Median { get; } min The lower bound of the range. public float min { get; set; } minMax Shorthand for writing UnitIntervalRange(0.0f, 1.0f). public static readonly UnitIntervalRange minMax { get; } one Shorthand for writing UnitIntervalRange(1.0f, 1.0f). public static readonly UnitIntervalRange one { get; } zero Shorthand for writing UnitIntervalRange(0.0f, 0.0f). public static readonly UnitIntervalRange zero { get; } Methods Clamp(Single) Clamps the value to the range. public float Clamp(float value) Parameter Description value The value to clamp. Returns Description System.Single The clamped value. Includes(Single) Checks if the value is in the range. public bool Includes(float value) Parameter Description value The value to check. Includes(Single, Boolean, Boolean) Checks if the value is in the range. public bool Includes(float value, bool includeMin, bool includeMax) Parameter Description value The value to check. includeMin The minimum value is inclusive if true, exclusive if false. includeMax The maximum value is inclusive if true, exclusive if false. Random() Returns a random value in the range. public float Random() Implements INumberRange<T> IRange<T>"
  },
  "api/Zigurous.DataStructures.ValueAccumulator-1.html": {
    "href": "api/Zigurous.DataStructures.ValueAccumulator-1.html",
    "title": "Class ValueAccumulator<T> | Data Structures",
    "keywords": "Class ValueAccumulator<T> Accumulates a set of stored values into a single total value. Inheritance System.Object ValueAccumulator<T> DoubleAccumulator FloatAccumulator IntAccumulator QuaternionAccumulator Vector2Accumulator Vector2IntAccumulator Vector3Accumulator Vector3IntAccumulator Vector4Accumulator Namespace : Zigurous.DataStructures public abstract class ValueAccumulator<T> Type Parameter Description T The type of value to accumulate. Properties Count The number of unique values being accumulated. public int Count { get; } total The total accumulated value. public T total { get; protected set; } values Keeps track of all accumulated values. Values are stored with unique identifiers. public Dictionary<int, T> values { get; protected set; } Methods Add(T) Increases the accumulated total by a given value. protected abstract T Add(T value) Parameter Description value The value to add to the total. Returns Description T The new total value. Clear() Removes all stored values and resets the total accumulated value. public void Clear() GetValue(Int32) Returns the stored value with the given identifier , or the default of T if the value does not exist. public T GetValue(int identifier) Parameter Description identifier RemoveValue(Int32) Removes the value stored with the given identifier and updates the total accumulated value. public void RemoveValue(int identifier) Parameter Description identifier The identifier of the stored value to remove. SetValue(T, Int32) Stores a given value with the identifier . The total accumulated value is updated based on the difference between the new and old value. public void SetValue(T value, int identifier) Parameter Description value The value to set. identifier The identifier of the value. Subtract(T) Decreases the accumulated total by a given value. protected abstract T Subtract(T value) Parameter Description value The value to subtract from the total. Returns Description T The new total value."
  },
  "api/Zigurous.DataStructures.Vector2Accumulator.html": {
    "href": "api/Zigurous.DataStructures.Vector2Accumulator.html",
    "title": "Class Vector2Accumulator | Data Structures",
    "keywords": "Class Vector2Accumulator Accumulates Vector2 values into a single total value. Inheritance System.Object ValueAccumulator < Vector2 > Vector2Accumulator Inherited Members ValueAccumulator<Vector2>.values ValueAccumulator<Vector2>.total ValueAccumulator<Vector2>.Count ValueAccumulator<Vector2>.GetValue(Int32) ValueAccumulator<Vector2>.SetValue(Vector2, Int32) ValueAccumulator<Vector2>.RemoveValue(Int32) ValueAccumulator<Vector2>.Clear() Namespace : Zigurous.DataStructures public sealed class Vector2Accumulator : ValueAccumulator<Vector2> Methods Add(Vector2) Increases the accumulated total by a given value. protected override Vector2 Add(Vector2 value) Parameter Description value The value to add to the total. Returns Description Vector2 The new total value. Overrides Zigurous.DataStructures.ValueAccumulator<Vector2>.Add(Vector2) Subtract(Vector2) Decreases the accumulated total by a given value. protected override Vector2 Subtract(Vector2 value) Parameter Description value The value to subtract from the total. Returns Description Vector2 The new total value. Overrides Zigurous.DataStructures.ValueAccumulator<Vector2>.Subtract(Vector2)"
  },
  "api/Zigurous.DataStructures.Vector2IntAccumulator.html": {
    "href": "api/Zigurous.DataStructures.Vector2IntAccumulator.html",
    "title": "Class Vector2IntAccumulator | Data Structures",
    "keywords": "Class Vector2IntAccumulator Accumulates Vector2Int values into a single total value. Inheritance System.Object ValueAccumulator < Vector2Int > Vector2IntAccumulator Inherited Members ValueAccumulator<Vector2Int>.values ValueAccumulator<Vector2Int>.total ValueAccumulator<Vector2Int>.Count ValueAccumulator<Vector2Int>.GetValue(Int32) ValueAccumulator<Vector2Int>.SetValue(Vector2Int, Int32) ValueAccumulator<Vector2Int>.RemoveValue(Int32) ValueAccumulator<Vector2Int>.Clear() Namespace : Zigurous.DataStructures public sealed class Vector2IntAccumulator : ValueAccumulator<Vector2Int> Methods Add(Vector2Int) Increases the accumulated total by a given value. protected override Vector2Int Add(Vector2Int value) Parameter Description value The value to add to the total. Returns Description Vector2Int The new total value. Overrides Zigurous.DataStructures.ValueAccumulator<Vector2Int>.Add(Vector2Int) Subtract(Vector2Int) Decreases the accumulated total by a given value. protected override Vector2Int Subtract(Vector2Int value) Parameter Description value The value to subtract from the total. Returns Description Vector2Int The new total value. Overrides Zigurous.DataStructures.ValueAccumulator<Vector2Int>.Subtract(Vector2Int)"
  },
  "api/Zigurous.DataStructures.Vector2Range.html": {
    "href": "api/Zigurous.DataStructures.Vector2Range.html",
    "title": "Struct Vector2Range | Data Structures",
    "keywords": "Struct Vector2Range A range of Vector2 values. Implements INumberRange < Vector2 > IRange < Vector2 > Namespace : Zigurous.DataStructures [Serializable] public struct Vector2Range : INumberRange<Vector2>, IRange<Vector2> Constructors Vector2Range(Vector2, Vector2) Creates a new range with the specified values. public Vector2Range(Vector2 min, Vector2 max) Parameter Description min The lower bound of the range. max The upper bound of the range. Properties Delta The difference between the maximum and minimum values. public readonly Vector2 Delta { get; } max The upper bound of the range. public Vector2 max { get; set; } Median The median value of the range. public readonly Vector2 Median { get; } min The lower bound of the range. public Vector2 min { get; set; } Methods Clamp(Vector2) Clamps the value to the range. public Vector2 Clamp(Vector2 value) Parameter Description value The value to clamp. Returns Description Vector2 The clamped value. Includes(Vector2) Checks if the value is in the range. public bool Includes(Vector2 value) Parameter Description value The value to check. Includes(Vector2, Boolean, Boolean) Checks if the value is in the range. public bool Includes(Vector2 value, bool includeMin, bool includeMax) Parameter Description value The value to check. includeMin The minimum value is inclusive if true, exclusive if false. includeMax The maximum value is inclusive if true, exclusive if false. Random() Returns a random value in the range. public Vector2 Random() Implements INumberRange<T> IRange<T>"
  },
  "api/Zigurous.DataStructures.Vector3Accumulator.html": {
    "href": "api/Zigurous.DataStructures.Vector3Accumulator.html",
    "title": "Class Vector3Accumulator | Data Structures",
    "keywords": "Class Vector3Accumulator Accumulates Vector3 values into a single total value. Inheritance System.Object ValueAccumulator < Vector3 > Vector3Accumulator Inherited Members ValueAccumulator<Vector3>.values ValueAccumulator<Vector3>.total ValueAccumulator<Vector3>.Count ValueAccumulator<Vector3>.GetValue(Int32) ValueAccumulator<Vector3>.SetValue(Vector3, Int32) ValueAccumulator<Vector3>.RemoveValue(Int32) ValueAccumulator<Vector3>.Clear() Namespace : Zigurous.DataStructures public sealed class Vector3Accumulator : ValueAccumulator<Vector3> Methods Add(Vector3) Increases the accumulated total by a given value. protected override Vector3 Add(Vector3 value) Parameter Description value The value to add to the total. Returns Description Vector3 The new total value. Overrides Zigurous.DataStructures.ValueAccumulator<Vector3>.Add(Vector3) Subtract(Vector3) Decreases the accumulated total by a given value. protected override Vector3 Subtract(Vector3 value) Parameter Description value The value to subtract from the total. Returns Description Vector3 The new total value. Overrides Zigurous.DataStructures.ValueAccumulator<Vector3>.Subtract(Vector3)"
  },
  "api/Zigurous.DataStructures.Vector3IntAccumulator.html": {
    "href": "api/Zigurous.DataStructures.Vector3IntAccumulator.html",
    "title": "Class Vector3IntAccumulator | Data Structures",
    "keywords": "Class Vector3IntAccumulator Accumulates Vector3Int values into a single total value. Inheritance System.Object ValueAccumulator < Vector3Int > Vector3IntAccumulator Inherited Members ValueAccumulator<Vector3Int>.values ValueAccumulator<Vector3Int>.total ValueAccumulator<Vector3Int>.Count ValueAccumulator<Vector3Int>.GetValue(Int32) ValueAccumulator<Vector3Int>.SetValue(Vector3Int, Int32) ValueAccumulator<Vector3Int>.RemoveValue(Int32) ValueAccumulator<Vector3Int>.Clear() Namespace : Zigurous.DataStructures public sealed class Vector3IntAccumulator : ValueAccumulator<Vector3Int> Methods Add(Vector3Int) Increases the accumulated total by a given value. protected override Vector3Int Add(Vector3Int value) Parameter Description value The value to add to the total. Returns Description Vector3Int The new total value. Overrides Zigurous.DataStructures.ValueAccumulator<Vector3Int>.Add(Vector3Int) Subtract(Vector3Int) Decreases the accumulated total by a given value. protected override Vector3Int Subtract(Vector3Int value) Parameter Description value The value to subtract from the total. Returns Description Vector3Int The new total value. Overrides Zigurous.DataStructures.ValueAccumulator<Vector3Int>.Subtract(Vector3Int)"
  },
  "api/Zigurous.DataStructures.Vector3Range.html": {
    "href": "api/Zigurous.DataStructures.Vector3Range.html",
    "title": "Struct Vector3Range | Data Structures",
    "keywords": "Struct Vector3Range A range of Vector3 values. Implements INumberRange < Vector3 > IRange < Vector3 > Namespace : Zigurous.DataStructures [Serializable] public struct Vector3Range : INumberRange<Vector3>, IRange<Vector3> Constructors Vector3Range(Vector3, Vector3) Creates a new range with the specified values. public Vector3Range(Vector3 min, Vector3 max) Parameter Description min The lower bound of the range. max The upper bound of the range. Properties Delta The difference between the maximum and minimum values. public readonly Vector3 Delta { get; } max The upper bound of the range. public Vector3 max { get; set; } Median The median value of the range. public readonly Vector3 Median { get; } min The lower bound of the range. public Vector3 min { get; set; } Methods Clamp(Vector3) Clamps the value to the range. public Vector3 Clamp(Vector3 value) Parameter Description value The value to clamp. Returns Description Vector3 The clamped value. Includes(Vector3) Checks if the value is in the range. public bool Includes(Vector3 value) Parameter Description value The value to check. Includes(Vector3, Boolean, Boolean) Checks if the value is in the range. public bool Includes(Vector3 value, bool includeMin, bool includeMax) Parameter Description value The value to check. includeMin The minimum value is inclusive if true, exclusive if false. includeMax The maximum value is inclusive if true, exclusive if false. Random() Returns a random value in the range. public Vector3 Random() Implements INumberRange<T> IRange<T>"
  },
  "api/Zigurous.DataStructures.Vector4Accumulator.html": {
    "href": "api/Zigurous.DataStructures.Vector4Accumulator.html",
    "title": "Class Vector4Accumulator | Data Structures",
    "keywords": "Class Vector4Accumulator Accumulates Vector4 values into a single total value. Inheritance System.Object ValueAccumulator < Vector4 > Vector4Accumulator Inherited Members ValueAccumulator<Vector4>.values ValueAccumulator<Vector4>.total ValueAccumulator<Vector4>.Count ValueAccumulator<Vector4>.GetValue(Int32) ValueAccumulator<Vector4>.SetValue(Vector4, Int32) ValueAccumulator<Vector4>.RemoveValue(Int32) ValueAccumulator<Vector4>.Clear() Namespace : Zigurous.DataStructures public sealed class Vector4Accumulator : ValueAccumulator<Vector4> Methods Add(Vector4) Increases the accumulated total by a given value. protected override Vector4 Add(Vector4 value) Parameter Description value The value to add to the total. Returns Description Vector4 The new total value. Overrides Zigurous.DataStructures.ValueAccumulator<Vector4>.Add(Vector4) Subtract(Vector4) Decreases the accumulated total by a given value. protected override Vector4 Subtract(Vector4 value) Parameter Description value The value to subtract from the total. Returns Description Vector4 The new total value. Overrides Zigurous.DataStructures.ValueAccumulator<Vector4>.Subtract(Vector4)"
  },
  "api/Zigurous.DataStructures.Vector4Range.html": {
    "href": "api/Zigurous.DataStructures.Vector4Range.html",
    "title": "Struct Vector4Range | Data Structures",
    "keywords": "Struct Vector4Range A range of Vector4 values. Implements INumberRange < Vector4 > IRange < Vector4 > Namespace : Zigurous.DataStructures [Serializable] public struct Vector4Range : INumberRange<Vector4>, IRange<Vector4> Constructors Vector4Range(Vector4, Vector4) Creates a new range with the specified values. public Vector4Range(Vector4 min, Vector4 max) Parameter Description min The lower bound of the range. max The upper bound of the range. Properties Delta The difference between the maximum and minimum values. public readonly Vector4 Delta { get; } max The upper bound of the range. public Vector4 max { get; set; } Median The median value of the range. public readonly Vector4 Median { get; } min The lower bound of the range. public Vector4 min { get; set; } Methods Clamp(Vector4) Clamps the value to the range. public Vector4 Clamp(Vector4 value) Parameter Description value The value to clamp. Returns Description Vector4 The clamped value. Includes(Vector4) Checks if the value is in the range. public bool Includes(Vector4 value) Parameter Description value The value to check. Includes(Vector4, Boolean, Boolean) Checks if the value is in the range. public bool Includes(Vector4 value, bool includeMin, bool includeMax) Parameter Description value The value to check. includeMin The minimum value is inclusive if true, exclusive if false. includeMax The maximum value is inclusive if true, exclusive if false. Random() Returns a random value in the range. public Vector4 Random() Implements INumberRange<T> IRange<T>"
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "Changelog | Data Structures",
    "keywords": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [1.4.0] - 2021/07/13 Added Extension methods for shuffling arrays and lists Shuffle() Removed String extensions for abbreviating numbers (moved to different package https://github.com/zigurous/unity-math-utils ) [1.3.0] - 2021/07/10 Added Vector4Range data structure New extension methods for List<T> , HashSet<T> , and SortedSet<T> Changed Package description Documentation comments Small memory optimizations Renamed Identifier.GenerateFromTime to Identifier.Temporal Renamed List<T>.ElementAt to List<T>.ItemAt [1.2.1] - 2021/06/25 Added Readme namespace import instructions Changed Code cleanup [1.2.0] - 2021/06/06 Added DoubleAccumulator IntAccumulator QuaternionAccumulator Vector2IntAccumulator Vector3IntAccumulator Vector4Accumulator [1.1.0] - 2021/05/23 Added Implicit conversion operators between Bitmask and int Changed Code cleanup and formatting [1.0.1] - 2021/04/13 Removed ConditionalShowAttribute ConditionalHideAttribute Fixed Set Editor assembly to only compile for the Editor platform Size and GridSize were not printing the correct info in ToString() [1.0.0] - 2021/03/24 Added ArrayExtensions Bitmask Bool3 ClampedRange ColorRange ComparableExtensions DictionaryExtensions FloatAccumulator FloatRange GridSize HashCode HashSetExtensions Identifier IntRange ListExtensions Modules ObjectPool Quantity SingletonBehavior Size SortedSetExtensions StringExtensions UIntRange UnitIntervalRange Vector2Accumulator Vector2Range Vector3Accumulator Vector3Range"
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "License | Data Structures",
    "keywords": "License MIT License Copyright (c) 2021 Zigurous Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "manual/extensions.html": {
    "href": "manual/extensions.html",
    "title": "Extension Methods | Data Structures",
    "keywords": "Extension Methods A lot of functionality of the Data Structures package comes from extension methods that provide enhanced support for common container types and interfaces. Extension methods are available for the following: Array Comparable Dictionary HashSet List SortedSet String"
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "Data Structures | Data Structures",
    "keywords": "Data Structures The Data Structures package contains common data structures and design pattern implementations for Unity projects. It also contains dozens of class extensions for common collection types and interfaces. Reference Data Structures Design Patterns Extension Methods Utility Classes"
  },
  "manual/installation.html": {
    "href": "manual/installation.html",
    "title": "Installation | Data Structures",
    "keywords": "Installation Use the Unity Package Manager to install the Data Structures package. Open the Package Manager in Window > Package Manager Click the add ( + ) button in the status bar Select Add package from git URL from the add menu Enter the following Git URL in the text box and click Add: https://github.com/zigurous/unity-data-structures.git For more information on the Package Manager and installing packages, see the following pages: Unity's Package Manager Installing from a Git URL Importing Import the package namespace in each script or file you want to use it. Note : You may need to regenerate project files/assemblies first. using Zigurous.DataStructures; Source Code The source code for the Data Structures package is in the following repository: https://github.com/zigurous/unity-data-structures"
  },
  "manual/patterns.html": {
    "href": "manual/patterns.html",
    "title": "Design Patterns | Data Structures",
    "keywords": "Design Patterns Design patterns are commonly used in association with data structures. The Data Structures package includes a few different design pattern implementations commonly used in Unity games. SingletonBehavior A singleton behavior that can be used to ensure that only one instance of a class is created. public class MySingleton : SingletonBehavior<MySingleton> ValueAccumulator Accumulates a set of stored values into a single total value. ObjectPool Reuses objects from a shared pool to prevent instantiating new objects. The object pool can have a set capacity or it can grow in size. Modules Manages a list of registered entity modules."
  },
  "manual/structs.html": {
    "href": "manual/structs.html",
    "title": "Data Structures | Data Structures",
    "keywords": "Data Structures Data structures are, of course, the primary functionality included in the Data Structures package. All of the following data structures are available in the package: Bool3 Stores a tuple of 3 booleans. Bitmask A bitmask representation that can be used for bitwise operations. A bitmask is a set of bits that can be set or cleared. Quantity<T> Stores a quantity of a given entity type. Size Stores the size of an entity as a width and height. GridSize Stores the size of a grid as rows and columns. Range<T> A range of values of the given type. ClampedRange A range of values clamped between a lower and upper bound. ColorRange A range of Color values. EulerRange A range of euler values wrapped between -360 and +360. FloatRange A range of float values. IntRange A range of int values. UIntRange A range of uint values. UnitIntervalRange A range of values between zero and one. Vector2Range A range of Vector2 values. Vector3Range A range of Vector3 values. Vector4Range A range of Vector4 values."
  },
  "manual/utilities.html": {
    "href": "manual/utilities.html",
    "title": "Utility Classes | Data Structures",
    "keywords": "Utility Classes The Data Structures package includes a couple utility classes that provide commonly needed functions when creating and using data structures. HashCode Combines multiple hash codes into a single value. int hash = HashCode.Combine(a, b, c); Identifier Generates identifiers."
  }
}