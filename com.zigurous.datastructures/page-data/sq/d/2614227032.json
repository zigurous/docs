{"data":{"api":{"nodes":[{"items":[{"children":[],"id":"ArrayExtensions.Reducer`2","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ArrayExtensions.Reducer<TSum, TElement>","nameWithType":"ArrayExtensions.Reducer<TSum, TElement>","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nA function delegate that reduces an array into a single value.\n","syntax":{"content":"public delegate TSum Reducer<TSum, TElement>(TSum sum, TElement element);","parameters":[{"description":"The current sum.","id":"sum","type":"{TSum}"},{"description":"The current element being reduced.","id":"element","type":"{TElement}"}],"return":{"description":"The reduced value.","type":"{TSum}"},"typeParameters":[{"description":"The type of the reduced value.","id":"TSum"},{"description":"The type of elements in the array.","id":"TElement"}]},"type":"Delegate","uid":"Zigurous.DataStructures.ArrayExtensions.Reducer`2"}]},{"items":[{"children":["Zigurous.DataStructures.Bitmask.#ctor(System.Int32)","Zigurous.DataStructures.Bitmask.Change(System.Int32,System.Int32)","Zigurous.DataStructures.Bitmask.Clear(System.Int32)","Zigurous.DataStructures.Bitmask.Equals(System.Int32)","Zigurous.DataStructures.Bitmask.Equals(System.Object)","Zigurous.DataStructures.Bitmask.Equals(Zigurous.DataStructures.Bitmask)","Zigurous.DataStructures.Bitmask.Get(System.Int32)","Zigurous.DataStructures.Bitmask.GetHashCode","Zigurous.DataStructures.Bitmask.Has(System.Int32)","Zigurous.DataStructures.Bitmask.HasAnyFlag(System.Int32)","Zigurous.DataStructures.Bitmask.HasFlag(System.Int32)","Zigurous.DataStructures.Bitmask.HasOnlyFlags(System.Int32)","Zigurous.DataStructures.Bitmask.op_BitwiseAnd(Zigurous.DataStructures.Bitmask,Zigurous.DataStructures.Bitmask)","Zigurous.DataStructures.Bitmask.op_BitwiseOr(Zigurous.DataStructures.Bitmask,Zigurous.DataStructures.Bitmask)","Zigurous.DataStructures.Bitmask.op_Equality(System.Int32,Zigurous.DataStructures.Bitmask)","Zigurous.DataStructures.Bitmask.op_Equality(Zigurous.DataStructures.Bitmask,System.Int32)","Zigurous.DataStructures.Bitmask.op_Equality(Zigurous.DataStructures.Bitmask,Zigurous.DataStructures.Bitmask)","Zigurous.DataStructures.Bitmask.op_ExclusiveOr(Zigurous.DataStructures.Bitmask,Zigurous.DataStructures.Bitmask)","Zigurous.DataStructures.Bitmask.op_Implicit(System.Int32)~Zigurous.DataStructures.Bitmask","Zigurous.DataStructures.Bitmask.op_Implicit(Zigurous.DataStructures.Bitmask)~System.Int32","Zigurous.DataStructures.Bitmask.op_Inequality(System.Int32,Zigurous.DataStructures.Bitmask)","Zigurous.DataStructures.Bitmask.op_Inequality(Zigurous.DataStructures.Bitmask,System.Int32)","Zigurous.DataStructures.Bitmask.op_Inequality(Zigurous.DataStructures.Bitmask,Zigurous.DataStructures.Bitmask)","Zigurous.DataStructures.Bitmask.op_LeftShift(Zigurous.DataStructures.Bitmask,System.Int32)","Zigurous.DataStructures.Bitmask.op_OnesComplement(Zigurous.DataStructures.Bitmask)","Zigurous.DataStructures.Bitmask.op_RightShift(Zigurous.DataStructures.Bitmask,System.Int32)","Zigurous.DataStructures.Bitmask.Set(System.Int32)","Zigurous.DataStructures.Bitmask.Toggle(System.Int32)","Zigurous.DataStructures.Bitmask.ToString"],"id":"Bitmask","implements":["Global.IEquatable{Zigurous.DataStructures.Bitmask}","Global.IEquatable{System.Int32}"],"inheritance":null,"inheritedMembers":null,"name":"Bitmask","nameWithType":"Bitmask","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nA bitmask representation that can be used for bitwise operations.\nA bitmask is a set of bits that can be set or cleared.\n","syntax":{"content":"public struct Bitmask","parameters":null,"return":null,"typeParameters":null},"type":"Struct","uid":"Zigurous.DataStructures.Bitmask"},{"children":null,"id":"#ctor(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Bitmask(Int32)","nameWithType":"Bitmask.Bitmask(Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bitmask","remarks":null,"summary":"\nCreates a new Bitmask from the given 32-bit integer.\n","syntax":{"content":"public Bitmask(int mask)","parameters":[{"description":"The 32-bit integer to represent as a bitmask.","id":"mask","type":"System.Int32"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.DataStructures.Bitmask.#ctor(System.Int32)"},{"children":null,"id":"HasFlag(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"HasFlag(Int32)","nameWithType":"Bitmask.HasFlag(Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bitmask","remarks":null,"summary":"\nChecks if the bitmask contains the flag.\n<pre><code>(mask &amp; flag) == flag</code></pre>\n","syntax":{"content":"public bool HasFlag(int flag)","parameters":[{"description":"The flag to check for.","id":"flag","type":"System.Int32"}],"return":{"description":"True if the bitmask contains the flag, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Bitmask.HasFlag(System.Int32)"},{"children":null,"id":"HasAnyFlag(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"HasAnyFlag(Int32)","nameWithType":"Bitmask.HasAnyFlag(Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bitmask","remarks":null,"summary":"\nChecks if the bitmask contains any of the flags.\n<pre><code>(mask &amp; flags) != 0</code></pre>\n","syntax":{"content":"public bool HasAnyFlag(int flags)","parameters":[{"description":"The flags to check for.","id":"flags","type":"System.Int32"}],"return":{"description":"True if the bitmask contains any of the flags, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Bitmask.HasAnyFlag(System.Int32)"},{"children":null,"id":"HasOnlyFlags(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"HasOnlyFlags(Int32)","nameWithType":"Bitmask.HasOnlyFlags(Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bitmask","remarks":null,"summary":"\nChecks if the bitmask contains only the given flags\nand no other flags.\n<pre><code>((mask ^ flags) &amp; flags) == 0</code></pre>\n","syntax":{"content":"public bool HasOnlyFlags(int flags)","parameters":[{"description":"The flags to check for.","id":"flags","type":"System.Int32"}],"return":{"description":"True if the bitmask contains only the given flags, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Bitmask.HasOnlyFlags(System.Int32)"},{"children":null,"id":"Has(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Has(Int32)","nameWithType":"Bitmask.Has(Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bitmask","remarks":null,"summary":"\nChecks if the nth bit of the bitmask is set.\n","syntax":{"content":"public bool Has(int n)","parameters":[{"description":"The nth bit to check for.","id":"n","type":"System.Int32"}],"return":{"description":"True if the nth bit is set, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Bitmask.Has(System.Int32)"},{"children":null,"id":"Get(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Get(Int32)","nameWithType":"Bitmask.Get(Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bitmask","remarks":null,"summary":"\nReturns the nth bit of the bitmask.\n","syntax":{"content":"public int Get(int n)","parameters":[{"description":"The nth bit to get.","id":"n","type":"System.Int32"}],"return":{"description":"The nth bit of the bitmask.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Bitmask.Get(System.Int32)"},{"children":null,"id":"Set(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Set(Int32)","nameWithType":"Bitmask.Set(Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bitmask","remarks":null,"summary":"\nSets the nth bit of the bitmask to 1.\n","syntax":{"content":"public void Set(int n)","parameters":[{"description":"The nth bit to set.","id":"n","type":"System.Int32"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Bitmask.Set(System.Int32)"},{"children":null,"id":"Clear(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clear(Int32)","nameWithType":"Bitmask.Clear(Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bitmask","remarks":null,"summary":"\nSets the nth bit of the bitmask to 0.\n","syntax":{"content":"public void Clear(int n)","parameters":[{"description":"The nth bit to clear.","id":"n","type":"System.Int32"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Bitmask.Clear(System.Int32)"},{"children":null,"id":"Toggle(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Toggle(Int32)","nameWithType":"Bitmask.Toggle(Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bitmask","remarks":null,"summary":"\nToggles the nth bit of the bitmask.\n","syntax":{"content":"public void Toggle(int n)","parameters":[{"description":"The nth bit to toggle.","id":"n","type":"System.Int32"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Bitmask.Toggle(System.Int32)"},{"children":null,"id":"Change(System.Int32,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Change(Int32, Int32)","nameWithType":"Bitmask.Change(Int32, Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bitmask","remarks":null,"summary":"\nSets the nth bit of the bitmask to x.\n","syntax":{"content":"public void Change(int n, int x)","parameters":[{"description":"The nth bit to set.","id":"n","type":"System.Int32"},{"description":"The value to set the bit to.","id":"x","type":"System.Int32"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Bitmask.Change(System.Int32,System.Int32)"},{"children":null,"id":"Equals(Zigurous.DataStructures.Bitmask)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Equals(Bitmask)","nameWithType":"Bitmask.Equals(Bitmask)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bitmask","remarks":null,"summary":"\nDetermines if the bitmask is equal to another bitmask.\n","syntax":{"content":"public bool Equals(Bitmask other)","parameters":[{"description":"The bitmask to compare to.","id":"other","type":"Zigurous.DataStructures.Bitmask"}],"return":{"description":"True if the bitmasks are equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Bitmask.Equals(Zigurous.DataStructures.Bitmask)"},{"children":null,"id":"Equals(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Equals(Int32)","nameWithType":"Bitmask.Equals(Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bitmask","remarks":null,"summary":"\nDetermines if the bitmask is equal to another bitmask.\n","syntax":{"content":"public bool Equals(int other)","parameters":[{"description":"The bitmask to compare to.","id":"other","type":"System.Int32"}],"return":{"description":"True if the bitmasks are equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Bitmask.Equals(System.Int32)"},{"children":null,"id":"Equals(System.Object)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Equals(Object)","nameWithType":"Bitmask.Equals(Object)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bitmask","remarks":null,"summary":"\nDetermines if the bitmask is equal to another bitmask.\n","syntax":{"content":"public override bool Equals(object other)","parameters":[{"description":"The object to compare to.","id":"other","type":"System.Object"}],"return":{"description":"True if the bitmasks are equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Bitmask.Equals(System.Object)"},{"children":null,"id":"GetHashCode","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetHashCode()","nameWithType":"Bitmask.GetHashCode()","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bitmask","remarks":null,"summary":"\nReturns the hash code of the bitmask.\n","syntax":{"content":"public override int GetHashCode()","parameters":null,"return":{"description":"The hash code of the bitmask.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Bitmask.GetHashCode"},{"children":null,"id":"ToString","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ToString()","nameWithType":"Bitmask.ToString()","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bitmask","remarks":null,"summary":"\nConverts the bitmask to a string.\n","syntax":{"content":"public override string ToString()","parameters":null,"return":{"description":"The bitmask as a string.","type":"System.String"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Bitmask.ToString"},{"children":null,"id":"op_Equality(Zigurous.DataStructures.Bitmask,Zigurous.DataStructures.Bitmask)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Equality(Bitmask, Bitmask)","nameWithType":"Bitmask.Equality(Bitmask, Bitmask)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bitmask","remarks":null,"summary":"\nDetermines if two bitmasks are equal.\n","syntax":{"content":"public static bool operator ==(Bitmask lhs, Bitmask rhs)","parameters":[{"description":"The first bitmask to compare.","id":"lhs","type":"Zigurous.DataStructures.Bitmask"},{"description":"The second bitmask to compare.","id":"rhs","type":"Zigurous.DataStructures.Bitmask"}],"return":{"description":"True if the bitmasks are equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Operator","uid":"Zigurous.DataStructures.Bitmask.op_Equality(Zigurous.DataStructures.Bitmask,Zigurous.DataStructures.Bitmask)"},{"children":null,"id":"op_Equality(Zigurous.DataStructures.Bitmask,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Equality(Bitmask, Int32)","nameWithType":"Bitmask.Equality(Bitmask, Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bitmask","remarks":null,"summary":"\nDetermines if two bitmasks are equal.\n","syntax":{"content":"public static bool operator ==(Bitmask lhs, int rhs)","parameters":[{"description":"The first bitmask to compare.","id":"lhs","type":"Zigurous.DataStructures.Bitmask"},{"description":"The second bitmask to compare.","id":"rhs","type":"System.Int32"}],"return":{"description":"True if the bitmasks are equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Operator","uid":"Zigurous.DataStructures.Bitmask.op_Equality(Zigurous.DataStructures.Bitmask,System.Int32)"},{"children":null,"id":"op_Equality(System.Int32,Zigurous.DataStructures.Bitmask)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Equality(Int32, Bitmask)","nameWithType":"Bitmask.Equality(Int32, Bitmask)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bitmask","remarks":null,"summary":"\nDetermines if two bitmasks are equal.\n","syntax":{"content":"public static bool operator ==(int lhs, Bitmask rhs)","parameters":[{"description":"The first bitmask to compare.","id":"lhs","type":"System.Int32"},{"description":"The second bitmask to compare.","id":"rhs","type":"Zigurous.DataStructures.Bitmask"}],"return":{"description":"True if the bitmasks are equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Operator","uid":"Zigurous.DataStructures.Bitmask.op_Equality(System.Int32,Zigurous.DataStructures.Bitmask)"},{"children":null,"id":"op_Inequality(Zigurous.DataStructures.Bitmask,Zigurous.DataStructures.Bitmask)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Inequality(Bitmask, Bitmask)","nameWithType":"Bitmask.Inequality(Bitmask, Bitmask)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bitmask","remarks":null,"summary":"\nDetermines if two bitmasks are not equal.\n","syntax":{"content":"public static bool operator !=(Bitmask lhs, Bitmask rhs)","parameters":[{"description":"The first bitmask to compare.","id":"lhs","type":"Zigurous.DataStructures.Bitmask"},{"description":"The second bitmask to compare.","id":"rhs","type":"Zigurous.DataStructures.Bitmask"}],"return":{"description":"True if the bitmasks are not equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Operator","uid":"Zigurous.DataStructures.Bitmask.op_Inequality(Zigurous.DataStructures.Bitmask,Zigurous.DataStructures.Bitmask)"},{"children":null,"id":"op_Inequality(Zigurous.DataStructures.Bitmask,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Inequality(Bitmask, Int32)","nameWithType":"Bitmask.Inequality(Bitmask, Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bitmask","remarks":null,"summary":"\nDetermines if two bitmasks are not equal.\n","syntax":{"content":"public static bool operator !=(Bitmask lhs, int rhs)","parameters":[{"description":"The first bitmask to compare.","id":"lhs","type":"Zigurous.DataStructures.Bitmask"},{"description":"The second bitmask to compare.","id":"rhs","type":"System.Int32"}],"return":{"description":"True if the bitmasks are not equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Operator","uid":"Zigurous.DataStructures.Bitmask.op_Inequality(Zigurous.DataStructures.Bitmask,System.Int32)"},{"children":null,"id":"op_Inequality(System.Int32,Zigurous.DataStructures.Bitmask)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Inequality(Int32, Bitmask)","nameWithType":"Bitmask.Inequality(Int32, Bitmask)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bitmask","remarks":null,"summary":"\nDetermines if two bitmasks are not equal.\n","syntax":{"content":"public static bool operator !=(int lhs, Bitmask rhs)","parameters":[{"description":"The first bitmask to compare.","id":"lhs","type":"System.Int32"},{"description":"The second bitmask to compare.","id":"rhs","type":"Zigurous.DataStructures.Bitmask"}],"return":{"description":"True if the bitmasks are not equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Operator","uid":"Zigurous.DataStructures.Bitmask.op_Inequality(System.Int32,Zigurous.DataStructures.Bitmask)"},{"children":null,"id":"op_BitwiseAnd(Zigurous.DataStructures.Bitmask,Zigurous.DataStructures.Bitmask)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"BitwiseAnd(Bitmask, Bitmask)","nameWithType":"Bitmask.BitwiseAnd(Bitmask, Bitmask)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bitmask","remarks":null,"summary":"\nPerforms a bitwise AND operation on two bitmasks.\n","syntax":{"content":"public static Bitmask operator &(Bitmask lhs, Bitmask rhs)","parameters":[{"description":"The first bitmask.","id":"lhs","type":"Zigurous.DataStructures.Bitmask"},{"description":"The second bitmask.","id":"rhs","type":"Zigurous.DataStructures.Bitmask"}],"return":{"description":"The result of the operation.","type":"Zigurous.DataStructures.Bitmask"},"typeParameters":null},"type":"Operator","uid":"Zigurous.DataStructures.Bitmask.op_BitwiseAnd(Zigurous.DataStructures.Bitmask,Zigurous.DataStructures.Bitmask)"},{"children":null,"id":"op_BitwiseOr(Zigurous.DataStructures.Bitmask,Zigurous.DataStructures.Bitmask)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"BitwiseOr(Bitmask, Bitmask)","nameWithType":"Bitmask.BitwiseOr(Bitmask, Bitmask)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bitmask","remarks":null,"summary":"\nPerforms a bitwise OR operation on two bitmasks.\n","syntax":{"content":"public static Bitmask operator |(Bitmask lhs, Bitmask rhs)","parameters":[{"description":"The first bitmask.","id":"lhs","type":"Zigurous.DataStructures.Bitmask"},{"description":"The second bitmask.","id":"rhs","type":"Zigurous.DataStructures.Bitmask"}],"return":{"description":"The result of the operation.","type":"Zigurous.DataStructures.Bitmask"},"typeParameters":null},"type":"Operator","uid":"Zigurous.DataStructures.Bitmask.op_BitwiseOr(Zigurous.DataStructures.Bitmask,Zigurous.DataStructures.Bitmask)"},{"children":null,"id":"op_ExclusiveOr(Zigurous.DataStructures.Bitmask,Zigurous.DataStructures.Bitmask)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ExclusiveOr(Bitmask, Bitmask)","nameWithType":"Bitmask.ExclusiveOr(Bitmask, Bitmask)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bitmask","remarks":null,"summary":"\nPerforms a bitwise XOR operation on two bitmasks.\n","syntax":{"content":"public static Bitmask operator ^(Bitmask lhs, Bitmask rhs)","parameters":[{"description":"The first bitmask.","id":"lhs","type":"Zigurous.DataStructures.Bitmask"},{"description":"The second bitmask.","id":"rhs","type":"Zigurous.DataStructures.Bitmask"}],"return":{"description":"The result of the operation.","type":"Zigurous.DataStructures.Bitmask"},"typeParameters":null},"type":"Operator","uid":"Zigurous.DataStructures.Bitmask.op_ExclusiveOr(Zigurous.DataStructures.Bitmask,Zigurous.DataStructures.Bitmask)"},{"children":null,"id":"op_OnesComplement(Zigurous.DataStructures.Bitmask)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnesComplement(Bitmask)","nameWithType":"Bitmask.OnesComplement(Bitmask)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bitmask","remarks":null,"summary":"\nPerforms a bitwise ones&apos; complement operation on a bitmask.\n","syntax":{"content":"public static Bitmask operator ~(Bitmask operand)","parameters":[{"description":null,"id":"operand","type":"Zigurous.DataStructures.Bitmask"}],"return":{"description":"The result of the operation.","type":"Zigurous.DataStructures.Bitmask"},"typeParameters":null},"type":"Operator","uid":"Zigurous.DataStructures.Bitmask.op_OnesComplement(Zigurous.DataStructures.Bitmask)"},{"children":null,"id":"op_LeftShift(Zigurous.DataStructures.Bitmask,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"LeftShift(Bitmask, Int32)","nameWithType":"Bitmask.LeftShift(Bitmask, Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bitmask","remarks":null,"summary":"\nPerforms a binary left shift operation on two bitmasks.\n","syntax":{"content":"public static Bitmask operator <<(Bitmask lhs, int rhs)","parameters":[{"description":"The first bitmask.","id":"lhs","type":"Zigurous.DataStructures.Bitmask"},{"description":"The second bitmask.","id":"rhs","type":"System.Int32"}],"return":{"description":"The result of the operation.","type":"Zigurous.DataStructures.Bitmask"},"typeParameters":null},"type":"Operator","uid":"Zigurous.DataStructures.Bitmask.op_LeftShift(Zigurous.DataStructures.Bitmask,System.Int32)"},{"children":null,"id":"op_RightShift(Zigurous.DataStructures.Bitmask,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"RightShift(Bitmask, Int32)","nameWithType":"Bitmask.RightShift(Bitmask, Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bitmask","remarks":null,"summary":"\nPerforms a binary right shift operation on two bitmasks.\n","syntax":{"content":"public static Bitmask operator >>(Bitmask lhs, int rhs)","parameters":[{"description":"The first bitmask.","id":"lhs","type":"Zigurous.DataStructures.Bitmask"},{"description":"The second bitmask.","id":"rhs","type":"System.Int32"}],"return":{"description":"The result of the operation.","type":"Zigurous.DataStructures.Bitmask"},"typeParameters":null},"type":"Operator","uid":"Zigurous.DataStructures.Bitmask.op_RightShift(Zigurous.DataStructures.Bitmask,System.Int32)"},{"children":null,"id":"op_Implicit(Zigurous.DataStructures.Bitmask)~System.Int32","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Implicit(Bitmask to Int32)","nameWithType":"Bitmask.Implicit(Bitmask to Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bitmask","remarks":null,"summary":"\nImplicitly converts a bitmask to an integer.\n","syntax":{"content":"public static implicit operator int (Bitmask bitmask)","parameters":[{"description":"The bitmask to convert.","id":"bitmask","type":"Zigurous.DataStructures.Bitmask"}],"return":{"description":"The bitmask as an integer.","type":"System.Int32"},"typeParameters":null},"type":"Operator","uid":"Zigurous.DataStructures.Bitmask.op_Implicit(Zigurous.DataStructures.Bitmask)~System.Int32"},{"children":null,"id":"op_Implicit(System.Int32)~Zigurous.DataStructures.Bitmask","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Implicit(Int32 to Bitmask)","nameWithType":"Bitmask.Implicit(Int32 to Bitmask)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bitmask","remarks":null,"summary":"\nImplicitly converts an integer to a bitmask.\n","syntax":{"content":"public static implicit operator Bitmask(int mask)","parameters":[{"description":"The integer to convert.","id":"mask","type":"System.Int32"}],"return":{"description":"The integer as a bitmask.","type":"Zigurous.DataStructures.Bitmask"},"typeParameters":null},"type":"Operator","uid":"Zigurous.DataStructures.Bitmask.op_Implicit(System.Int32)~Zigurous.DataStructures.Bitmask"}]},{"items":[{"children":["Zigurous.DataStructures.Bool3.#ctor(System.Boolean,System.Boolean,System.Boolean)","Zigurous.DataStructures.Bool3.Equals(System.Object)","Zigurous.DataStructures.Bool3.Equals(Zigurous.DataStructures.Bool3)","Zigurous.DataStructures.Bool3.False","Zigurous.DataStructures.Bool3.GetHashCode","Zigurous.DataStructures.Bool3.Item(System.Int32)","Zigurous.DataStructures.Bool3.op_BitwiseAnd(Zigurous.DataStructures.Bool3,Zigurous.DataStructures.Bool3)","Zigurous.DataStructures.Bool3.op_BitwiseOr(Zigurous.DataStructures.Bool3,Zigurous.DataStructures.Bool3)","Zigurous.DataStructures.Bool3.op_Equality(Zigurous.DataStructures.Bool3,Zigurous.DataStructures.Bool3)","Zigurous.DataStructures.Bool3.op_ExclusiveOr(Zigurous.DataStructures.Bool3,Zigurous.DataStructures.Bool3)","Zigurous.DataStructures.Bool3.op_Inequality(Zigurous.DataStructures.Bool3,Zigurous.DataStructures.Bool3)","Zigurous.DataStructures.Bool3.op_LogicalNot(Zigurous.DataStructures.Bool3)","Zigurous.DataStructures.Bool3.ToString","Zigurous.DataStructures.Bool3.True","Zigurous.DataStructures.Bool3.x","Zigurous.DataStructures.Bool3.X","Zigurous.DataStructures.Bool3.y","Zigurous.DataStructures.Bool3.Y","Zigurous.DataStructures.Bool3.z","Zigurous.DataStructures.Bool3.Z"],"id":"Bool3","implements":["Global.IEquatable{Zigurous.DataStructures.Bool3}"],"inheritance":null,"inheritedMembers":null,"name":"Bool3","nameWithType":"Bool3","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nStores a tuple of 3 booleans.\n","syntax":{"content":"[Serializable]\npublic struct Bool3","parameters":null,"return":null,"typeParameters":null},"type":"Struct","uid":"Zigurous.DataStructures.Bool3"},{"children":null,"id":"False","implements":null,"inheritance":null,"inheritedMembers":null,"name":"False","nameWithType":"Bool3.False","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bool3","remarks":null,"summary":"\nShorthand for writing <code>Bool3(false, false, false)</code>.\n","syntax":{"content":"public static readonly Bool3 False { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.Bool3"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Bool3.False"},{"children":null,"id":"True","implements":null,"inheritance":null,"inheritedMembers":null,"name":"True","nameWithType":"Bool3.True","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bool3","remarks":null,"summary":"\nShorthand for writing <code>Bool3(true, true, true)</code>.\n","syntax":{"content":"public static readonly Bool3 True { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.Bool3"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Bool3.True"},{"children":null,"id":"X","implements":null,"inheritance":null,"inheritedMembers":null,"name":"X","nameWithType":"Bool3.X","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bool3","remarks":null,"summary":"\nShorthand for writing <code>Bool3(true, false, false)</code>.\n","syntax":{"content":"public static readonly Bool3 X { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.Bool3"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Bool3.X"},{"children":null,"id":"Y","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Y","nameWithType":"Bool3.Y","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bool3","remarks":null,"summary":"\nShorthand for writing <code>Bool3(false, true, false)</code>.\n","syntax":{"content":"public static readonly Bool3 Y { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.Bool3"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Bool3.Y"},{"children":null,"id":"Z","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Z","nameWithType":"Bool3.Z","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bool3","remarks":null,"summary":"\nShorthand for writing <code>Bool3(false, false, true)</code>.\n","syntax":{"content":"public static readonly Bool3 Z { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.Bool3"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Bool3.Z"},{"children":null,"id":"x","implements":null,"inheritance":null,"inheritedMembers":null,"name":"x","nameWithType":"Bool3.x","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bool3","remarks":null,"summary":"\nThe X component.\n","syntax":{"content":"public bool x","parameters":null,"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Field","uid":"Zigurous.DataStructures.Bool3.x"},{"children":null,"id":"y","implements":null,"inheritance":null,"inheritedMembers":null,"name":"y","nameWithType":"Bool3.y","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bool3","remarks":null,"summary":"\nThe Y component.\n","syntax":{"content":"public bool y","parameters":null,"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Field","uid":"Zigurous.DataStructures.Bool3.y"},{"children":null,"id":"z","implements":null,"inheritance":null,"inheritedMembers":null,"name":"z","nameWithType":"Bool3.z","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bool3","remarks":null,"summary":"\nThe Z component.\n","syntax":{"content":"public bool z","parameters":null,"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Field","uid":"Zigurous.DataStructures.Bool3.z"},{"children":null,"id":"Item(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Item[Int32]","nameWithType":"Bool3.Item[Int32]","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bool3","remarks":null,"summary":"\nGets or sets the component at the specified index.\n","syntax":{"content":"public bool this[int index] { get; set; }","parameters":[{"description":"The index of the component to get or set.","id":"index","type":"System.Int32"}],"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Bool3.Item(System.Int32)"},{"children":null,"id":"#ctor(System.Boolean,System.Boolean,System.Boolean)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Bool3(Boolean, Boolean, Boolean)","nameWithType":"Bool3.Bool3(Boolean, Boolean, Boolean)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bool3","remarks":null,"summary":"\nCreates a new Bool3 with the specified values.\n","syntax":{"content":"public Bool3(bool x = false, bool y = false, bool z = false)","parameters":[{"description":"The X component.","id":"x","type":"System.Boolean"},{"description":"The Y component.","id":"y","type":"System.Boolean"},{"description":"The Z component.","id":"z","type":"System.Boolean"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.DataStructures.Bool3.#ctor(System.Boolean,System.Boolean,System.Boolean)"},{"children":null,"id":"Equals(Zigurous.DataStructures.Bool3)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Equals(Bool3)","nameWithType":"Bool3.Equals(Bool3)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bool3","remarks":null,"summary":"\nDetermines if the tuple is equal to another.\n","syntax":{"content":"public bool Equals(Bool3 other)","parameters":[{"description":"The tuple to compare to.","id":"other","type":"Zigurous.DataStructures.Bool3"}],"return":{"description":"True if the tuples are equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Bool3.Equals(Zigurous.DataStructures.Bool3)"},{"children":null,"id":"Equals(System.Object)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Equals(Object)","nameWithType":"Bool3.Equals(Object)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bool3","remarks":null,"summary":"\nDetermines if the tuple is equal to another.\n","syntax":{"content":"public override bool Equals(object other)","parameters":[{"description":"The object to compare to.","id":"other","type":"System.Object"}],"return":{"description":"True if the tuples are equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Bool3.Equals(System.Object)"},{"children":null,"id":"GetHashCode","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetHashCode()","nameWithType":"Bool3.GetHashCode()","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bool3","remarks":null,"summary":"\nReturns the hash code of the tuple.\n","syntax":{"content":"public override int GetHashCode()","parameters":null,"return":{"description":"The hash code of the tuple.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Bool3.GetHashCode"},{"children":null,"id":"ToString","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ToString()","nameWithType":"Bool3.ToString()","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bool3","remarks":null,"summary":"\nConverts the tuple to a string.\n","syntax":{"content":"public override string ToString()","parameters":null,"return":{"description":"The tuple as a string.","type":"System.String"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Bool3.ToString"},{"children":null,"id":"op_Equality(Zigurous.DataStructures.Bool3,Zigurous.DataStructures.Bool3)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Equality(Bool3, Bool3)","nameWithType":"Bool3.Equality(Bool3, Bool3)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bool3","remarks":null,"summary":"\nDetermines if two tuples are equal.\n","syntax":{"content":"public static bool operator ==(Bool3 lhs, Bool3 rhs)","parameters":[{"description":"The first tuple to compare.","id":"lhs","type":"Zigurous.DataStructures.Bool3"},{"description":"The second tuple to compare.","id":"rhs","type":"Zigurous.DataStructures.Bool3"}],"return":{"description":"True if the tuples are equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Operator","uid":"Zigurous.DataStructures.Bool3.op_Equality(Zigurous.DataStructures.Bool3,Zigurous.DataStructures.Bool3)"},{"children":null,"id":"op_Inequality(Zigurous.DataStructures.Bool3,Zigurous.DataStructures.Bool3)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Inequality(Bool3, Bool3)","nameWithType":"Bool3.Inequality(Bool3, Bool3)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bool3","remarks":null,"summary":"\nDetermines if two tuples are not equal.\n","syntax":{"content":"public static bool operator !=(Bool3 lhs, Bool3 rhs)","parameters":[{"description":"The first tuple to compare.","id":"lhs","type":"Zigurous.DataStructures.Bool3"},{"description":"The second tuple to compare.","id":"rhs","type":"Zigurous.DataStructures.Bool3"}],"return":{"description":"True if the tuples are not equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Operator","uid":"Zigurous.DataStructures.Bool3.op_Inequality(Zigurous.DataStructures.Bool3,Zigurous.DataStructures.Bool3)"},{"children":null,"id":"op_BitwiseAnd(Zigurous.DataStructures.Bool3,Zigurous.DataStructures.Bool3)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"BitwiseAnd(Bool3, Bool3)","nameWithType":"Bool3.BitwiseAnd(Bool3, Bool3)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bool3","remarks":null,"summary":"\nPerforms a bitwise AND operation on two tuples.\n","syntax":{"content":"public static Bool3 operator &(Bool3 lhs, Bool3 rhs)","parameters":[{"description":"The first tuple.","id":"lhs","type":"Zigurous.DataStructures.Bool3"},{"description":"The second tuple.","id":"rhs","type":"Zigurous.DataStructures.Bool3"}],"return":{"description":"The result of the operation.","type":"Zigurous.DataStructures.Bool3"},"typeParameters":null},"type":"Operator","uid":"Zigurous.DataStructures.Bool3.op_BitwiseAnd(Zigurous.DataStructures.Bool3,Zigurous.DataStructures.Bool3)"},{"children":null,"id":"op_BitwiseOr(Zigurous.DataStructures.Bool3,Zigurous.DataStructures.Bool3)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"BitwiseOr(Bool3, Bool3)","nameWithType":"Bool3.BitwiseOr(Bool3, Bool3)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bool3","remarks":null,"summary":"\nPerforms a bitwise OR operation on two tuples.\n","syntax":{"content":"public static Bool3 operator |(Bool3 lhs, Bool3 rhs)","parameters":[{"description":"The first tuple.","id":"lhs","type":"Zigurous.DataStructures.Bool3"},{"description":"The second tuple.","id":"rhs","type":"Zigurous.DataStructures.Bool3"}],"return":{"description":"The result of the operation.","type":"Zigurous.DataStructures.Bool3"},"typeParameters":null},"type":"Operator","uid":"Zigurous.DataStructures.Bool3.op_BitwiseOr(Zigurous.DataStructures.Bool3,Zigurous.DataStructures.Bool3)"},{"children":null,"id":"op_ExclusiveOr(Zigurous.DataStructures.Bool3,Zigurous.DataStructures.Bool3)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ExclusiveOr(Bool3, Bool3)","nameWithType":"Bool3.ExclusiveOr(Bool3, Bool3)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bool3","remarks":null,"summary":"\nPerforms a bitwise XOR operation on two tuples.\n","syntax":{"content":"public static Bool3 operator ^(Bool3 lhs, Bool3 rhs)","parameters":[{"description":"The first tuple.","id":"lhs","type":"Zigurous.DataStructures.Bool3"},{"description":"The second tuple.","id":"rhs","type":"Zigurous.DataStructures.Bool3"}],"return":{"description":"The result of the operation.","type":"Zigurous.DataStructures.Bool3"},"typeParameters":null},"type":"Operator","uid":"Zigurous.DataStructures.Bool3.op_ExclusiveOr(Zigurous.DataStructures.Bool3,Zigurous.DataStructures.Bool3)"},{"children":null,"id":"op_LogicalNot(Zigurous.DataStructures.Bool3)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"LogicalNot(Bool3)","nameWithType":"Bool3.LogicalNot(Bool3)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Bool3","remarks":null,"summary":"\nPerforms a logical negation operation on a tuple.\n","syntax":{"content":"public static Bool3 operator !(Bool3 operand)","parameters":[{"description":"The tuple to negate.","id":"operand","type":"Zigurous.DataStructures.Bool3"}],"return":{"description":"The result of the operation.","type":"Zigurous.DataStructures.Bool3"},"typeParameters":null},"type":"Operator","uid":"Zigurous.DataStructures.Bool3.op_LogicalNot(Zigurous.DataStructures.Bool3)"}]},{"items":[{"children":["Zigurous.DataStructures.ClampedRange.#ctor(System.Single,System.Single,System.Single,System.Single)","Zigurous.DataStructures.ClampedRange.clamp","Zigurous.DataStructures.ClampedRange.Clamp(System.Single)","Zigurous.DataStructures.ClampedRange.delta","Zigurous.DataStructures.ClampedRange.Includes(System.Single)","Zigurous.DataStructures.ClampedRange.Includes(System.Single,System.Boolean,System.Boolean)","Zigurous.DataStructures.ClampedRange.InverseLerp(System.Single)","Zigurous.DataStructures.ClampedRange.Lerp(System.Single)","Zigurous.DataStructures.ClampedRange.max","Zigurous.DataStructures.ClampedRange.median","Zigurous.DataStructures.ClampedRange.min","Zigurous.DataStructures.ClampedRange.Random"],"id":"ClampedRange","implements":["Zigurous.DataStructures.INumberRange{System.Single}","Zigurous.DataStructures.IRange{System.Single}"],"inheritance":null,"inheritedMembers":null,"name":"ClampedRange","nameWithType":"ClampedRange","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nA range of values clamped between a lower and upper bound.\n","syntax":{"content":"[Serializable]\npublic struct ClampedRange : INumberRange<float>, IRange<float>","parameters":null,"return":null,"typeParameters":null},"type":"Struct","uid":"Zigurous.DataStructures.ClampedRange"},{"children":null,"id":"min","implements":["Zigurous.DataStructures.IRange{System.Single}.min"],"inheritance":null,"inheritedMembers":null,"name":"min","nameWithType":"ClampedRange.min","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ClampedRange","remarks":null,"summary":"\nThe lower bound of the range.\n","syntax":{"content":"public float min { get; set; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.ClampedRange.min"},{"children":null,"id":"max","implements":["Zigurous.DataStructures.IRange{System.Single}.max"],"inheritance":null,"inheritedMembers":null,"name":"max","nameWithType":"ClampedRange.max","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ClampedRange","remarks":null,"summary":"\nThe upper bound of the range.\n","syntax":{"content":"public float max { get; set; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.ClampedRange.max"},{"children":null,"id":"clamp","implements":null,"inheritance":null,"inheritedMembers":null,"name":"clamp","nameWithType":"ClampedRange.clamp","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ClampedRange","remarks":null,"summary":"\nThe clamping values of the range.\n","syntax":{"content":"public FloatRange clamp","parameters":null,"return":{"description":null,"type":"Zigurous.DataStructures.FloatRange"},"typeParameters":null},"type":"Field","uid":"Zigurous.DataStructures.ClampedRange.clamp"},{"children":null,"id":"delta","implements":["Zigurous.DataStructures.INumberRange{System.Single}.delta"],"inheritance":null,"inheritedMembers":null,"name":"delta","nameWithType":"ClampedRange.delta","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ClampedRange","remarks":null,"summary":"\nThe difference between the maximum and minimum values (Read only).\n","syntax":{"content":"public readonly float delta { get; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.ClampedRange.delta"},{"children":null,"id":"median","implements":["Zigurous.DataStructures.INumberRange{System.Single}.median"],"inheritance":null,"inheritedMembers":null,"name":"median","nameWithType":"ClampedRange.median","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ClampedRange","remarks":null,"summary":"\nThe median value of the range (Read only).\n","syntax":{"content":"public readonly float median { get; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.ClampedRange.median"},{"children":null,"id":"#ctor(System.Single,System.Single,System.Single,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ClampedRange(Single, Single, Single, Single)","nameWithType":"ClampedRange.ClampedRange(Single, Single, Single, Single)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ClampedRange","remarks":null,"summary":"\nCreates a new range with the specified values.\n","syntax":{"content":"public ClampedRange(float min = 0F, float max = 1F, float clampLower = 0F, float clampUpper = 1F)","parameters":[{"description":"The lower bound of the range.","id":"min","type":"System.Single"},{"description":"The upper bound of the range.","id":"max","type":"System.Single"},{"description":"The lower clamping bound of the range.","id":"clampLower","type":"System.Single"},{"description":"The upper clamping bound of the range.","id":"clampUpper","type":"System.Single"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.DataStructures.ClampedRange.#ctor(System.Single,System.Single,System.Single,System.Single)"},{"children":null,"id":"Random","implements":["Zigurous.DataStructures.INumberRange{System.Single}.Random"],"inheritance":null,"inheritedMembers":null,"name":"Random()","nameWithType":"ClampedRange.Random()","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ClampedRange","remarks":null,"summary":"\nReturns a random value in the range.\n","syntax":{"content":"public float Random()","parameters":null,"return":{"description":"A random value in the range.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.ClampedRange.Random"},{"children":null,"id":"Includes(System.Single)","implements":["Zigurous.DataStructures.IRange{System.Single}.Includes(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Single)","nameWithType":"ClampedRange.Includes(Single)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ClampedRange","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(float value)","parameters":[{"description":"The value to check.","id":"value","type":"System.Single"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.ClampedRange.Includes(System.Single)"},{"children":null,"id":"Includes(System.Single,System.Boolean,System.Boolean)","implements":["Zigurous.DataStructures.IRange{System.Single}.Includes(System.Single,System.Boolean,System.Boolean)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Single, Boolean, Boolean)","nameWithType":"ClampedRange.Includes(Single, Boolean, Boolean)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ClampedRange","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(float value, bool includeMin, bool includeMax)","parameters":[{"description":"The value to check.","id":"value","type":"System.Single"},{"description":"The minimum value is inclusive if true, exclusive if false.","id":"includeMin","type":"System.Boolean"},{"description":"The maximum value is inclusive if true, exclusive if false.","id":"includeMax","type":"System.Boolean"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.ClampedRange.Includes(System.Single,System.Boolean,System.Boolean)"},{"children":null,"id":"Clamp(System.Single)","implements":["Zigurous.DataStructures.INumberRange{System.Single}.Clamp(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"Clamp(Single)","nameWithType":"ClampedRange.Clamp(Single)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ClampedRange","remarks":null,"summary":"\nClamps a value to the range.\n","syntax":{"content":"public float Clamp(float value)","parameters":[{"description":"The value to clamp.","id":"value","type":"System.Single"}],"return":{"description":"The clamped value.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.ClampedRange.Clamp(System.Single)"},{"children":null,"id":"Lerp(System.Single)","implements":["Zigurous.DataStructures.INumberRange{System.Single}.Lerp(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"Lerp(Single)","nameWithType":"ClampedRange.Lerp(Single)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ClampedRange","remarks":null,"summary":"\nLinearly interpolates between the range by <code data-dev-comment-type=\"paramref\" class=\"paramref\">t</code>.\n","syntax":{"content":"public float Lerp(float t)","parameters":[{"description":"The interpolant value between [0..1].","id":"t","type":"System.Single"}],"return":{"description":"The interpolated value.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.ClampedRange.Lerp(System.Single)"},{"children":null,"id":"InverseLerp(System.Single)","implements":["Zigurous.DataStructures.INumberRange{System.Single}.InverseLerp(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"InverseLerp(Single)","nameWithType":"ClampedRange.InverseLerp(Single)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ClampedRange","remarks":null,"summary":"\nCalculates the linear parameter t that produces the interpolant\nvalue within the range.\n","syntax":{"content":"public float InverseLerp(float value)","parameters":[{"description":"The value within the range you want to calculate.","id":"value","type":"System.Single"}],"return":{"description":"The interpolant value between [0..1].","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.ClampedRange.InverseLerp(System.Single)"}]},{"items":[{"children":["Zigurous.DataStructures.ColorRange.#ctor(Color,Color)","Zigurous.DataStructures.ColorRange.black","Zigurous.DataStructures.ColorRange.blackToWhite","Zigurous.DataStructures.ColorRange.Clamp(Color)","Zigurous.DataStructures.ColorRange.delta","Zigurous.DataStructures.ColorRange.fadeIn","Zigurous.DataStructures.ColorRange.fadeOut","Zigurous.DataStructures.ColorRange.Includes(Color)","Zigurous.DataStructures.ColorRange.Includes(Color,System.Boolean,System.Boolean)","Zigurous.DataStructures.ColorRange.InverseLerp(Color)","Zigurous.DataStructures.ColorRange.Lerp(System.Single)","Zigurous.DataStructures.ColorRange.max","Zigurous.DataStructures.ColorRange.median","Zigurous.DataStructures.ColorRange.min","Zigurous.DataStructures.ColorRange.Random","Zigurous.DataStructures.ColorRange.transparent","Zigurous.DataStructures.ColorRange.white","Zigurous.DataStructures.ColorRange.whiteToBlack"],"id":"ColorRange","implements":["Zigurous.DataStructures.INumberRange{Color}","Zigurous.DataStructures.IRange{Color}"],"inheritance":null,"inheritedMembers":null,"name":"ColorRange","nameWithType":"ColorRange","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nA range of Color values.\n","syntax":{"content":"[Serializable]\npublic struct ColorRange : INumberRange<Color>, IRange<Color>","parameters":null,"return":null,"typeParameters":null},"type":"Struct","uid":"Zigurous.DataStructures.ColorRange"},{"children":null,"id":"black","implements":null,"inheritance":null,"inheritedMembers":null,"name":"black","nameWithType":"ColorRange.black","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ColorRange","remarks":null,"summary":"\nShorthand for writing <code>ColorRange(Color.black, Color.black)</code>.\n","syntax":{"content":"public static readonly ColorRange black { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.ColorRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.ColorRange.black"},{"children":null,"id":"white","implements":null,"inheritance":null,"inheritedMembers":null,"name":"white","nameWithType":"ColorRange.white","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ColorRange","remarks":null,"summary":"\nShorthand for writing <code>ColorRange(Color.white, Color.white)</code>.\n","syntax":{"content":"public static readonly ColorRange white { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.ColorRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.ColorRange.white"},{"children":null,"id":"blackToWhite","implements":null,"inheritance":null,"inheritedMembers":null,"name":"blackToWhite","nameWithType":"ColorRange.blackToWhite","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ColorRange","remarks":null,"summary":"\nShorthand for writing <code>ColorRange(Color.black, Color.white)</code>.\n","syntax":{"content":"public static readonly ColorRange blackToWhite { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.ColorRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.ColorRange.blackToWhite"},{"children":null,"id":"whiteToBlack","implements":null,"inheritance":null,"inheritedMembers":null,"name":"whiteToBlack","nameWithType":"ColorRange.whiteToBlack","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ColorRange","remarks":null,"summary":"\nShorthand for writing <code>ColorRange(Color.white, Color.black)</code>.\n","syntax":{"content":"public static readonly ColorRange whiteToBlack { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.ColorRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.ColorRange.whiteToBlack"},{"children":null,"id":"fadeIn","implements":null,"inheritance":null,"inheritedMembers":null,"name":"fadeIn","nameWithType":"ColorRange.fadeIn","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ColorRange","remarks":null,"summary":"\nShorthand for writing <code>ColorRange(Color(0,0,0,0), Color(0,0,0,1))</code>.\n","syntax":{"content":"public static readonly ColorRange fadeIn { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.ColorRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.ColorRange.fadeIn"},{"children":null,"id":"fadeOut","implements":null,"inheritance":null,"inheritedMembers":null,"name":"fadeOut","nameWithType":"ColorRange.fadeOut","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ColorRange","remarks":null,"summary":"\nShorthand for writing <code>ColorRange(Color(0,0,0,1), Color(0,0,0,0))</code>.\n","syntax":{"content":"public static readonly ColorRange fadeOut { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.ColorRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.ColorRange.fadeOut"},{"children":null,"id":"transparent","implements":null,"inheritance":null,"inheritedMembers":null,"name":"transparent","nameWithType":"ColorRange.transparent","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ColorRange","remarks":null,"summary":"\nShorthand for writing <code>ColorRange(Color(0,0,0,0), Color(0,0,0,0))</code>.\n","syntax":{"content":"public static readonly ColorRange transparent { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.ColorRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.ColorRange.transparent"},{"children":null,"id":"min","implements":["Zigurous.DataStructures.IRange{Color}.min"],"inheritance":null,"inheritedMembers":null,"name":"min","nameWithType":"ColorRange.min","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ColorRange","remarks":null,"summary":"\nThe lower bound of the range.\n","syntax":{"content":"public Color min { get; set; }","parameters":[],"return":{"description":null,"type":"Global.Color"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.ColorRange.min"},{"children":null,"id":"max","implements":["Zigurous.DataStructures.IRange{Color}.max"],"inheritance":null,"inheritedMembers":null,"name":"max","nameWithType":"ColorRange.max","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ColorRange","remarks":null,"summary":"\nThe upper bound of the range.\n","syntax":{"content":"public Color max { get; set; }","parameters":[],"return":{"description":null,"type":"Global.Color"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.ColorRange.max"},{"children":null,"id":"delta","implements":["Zigurous.DataStructures.INumberRange{Color}.delta"],"inheritance":null,"inheritedMembers":null,"name":"delta","nameWithType":"ColorRange.delta","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ColorRange","remarks":null,"summary":"\nThe difference between the maximum and minimum values (Read only).\n","syntax":{"content":"public readonly Color delta { get; }","parameters":[],"return":{"description":null,"type":"Global.Color"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.ColorRange.delta"},{"children":null,"id":"median","implements":["Zigurous.DataStructures.INumberRange{Color}.median"],"inheritance":null,"inheritedMembers":null,"name":"median","nameWithType":"ColorRange.median","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ColorRange","remarks":null,"summary":"\nThe median value of the range (Read only).\n","syntax":{"content":"public readonly Color median { get; }","parameters":[],"return":{"description":null,"type":"Global.Color"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.ColorRange.median"},{"children":null,"id":"#ctor(Color,Color)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ColorRange(Color, Color)","nameWithType":"ColorRange.ColorRange(Color, Color)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ColorRange","remarks":null,"summary":"\nCreates a new range with the specified values.\n","syntax":{"content":"public ColorRange(Color min, Color max)","parameters":[{"description":"The lower bound of the range.","id":"min","type":"Global.Color"},{"description":"The upper bound of the range.","id":"max","type":"Global.Color"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.DataStructures.ColorRange.#ctor(Color,Color)"},{"children":null,"id":"Random","implements":["Zigurous.DataStructures.INumberRange{Color}.Random"],"inheritance":null,"inheritedMembers":null,"name":"Random()","nameWithType":"ColorRange.Random()","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ColorRange","remarks":null,"summary":"\nReturns a random value in the range.\n","syntax":{"content":"public Color Random()","parameters":null,"return":{"description":"A random value in the range.","type":"Global.Color"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.ColorRange.Random"},{"children":null,"id":"Includes(Color)","implements":["Zigurous.DataStructures.IRange{Color}.Includes(Color)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Color)","nameWithType":"ColorRange.Includes(Color)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ColorRange","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(Color value)","parameters":[{"description":"The value to check.","id":"value","type":"Global.Color"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.ColorRange.Includes(Color)"},{"children":null,"id":"Includes(Color,System.Boolean,System.Boolean)","implements":["Zigurous.DataStructures.IRange{Color}.Includes(Color,System.Boolean,System.Boolean)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Color, Boolean, Boolean)","nameWithType":"ColorRange.Includes(Color, Boolean, Boolean)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ColorRange","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(Color value, bool includeMin, bool includeMax)","parameters":[{"description":"The value to check.","id":"value","type":"Global.Color"},{"description":"The minimum value is inclusive if true, exclusive if false.","id":"includeMin","type":"System.Boolean"},{"description":"The maximum value is inclusive if true, exclusive if false.","id":"includeMax","type":"System.Boolean"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.ColorRange.Includes(Color,System.Boolean,System.Boolean)"},{"children":null,"id":"Clamp(Color)","implements":["Zigurous.DataStructures.INumberRange{Color}.Clamp(Color)"],"inheritance":null,"inheritedMembers":null,"name":"Clamp(Color)","nameWithType":"ColorRange.Clamp(Color)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ColorRange","remarks":null,"summary":"\nClamps a value to the range.\n","syntax":{"content":"public Color Clamp(Color value)","parameters":[{"description":"The value to clamp.","id":"value","type":"Global.Color"}],"return":{"description":"The clamped value.","type":"Global.Color"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.ColorRange.Clamp(Color)"},{"children":null,"id":"Lerp(System.Single)","implements":["Zigurous.DataStructures.INumberRange{Color}.Lerp(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"Lerp(Single)","nameWithType":"ColorRange.Lerp(Single)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ColorRange","remarks":null,"summary":"\nLinearly interpolates between the range by <code data-dev-comment-type=\"paramref\" class=\"paramref\">t</code>.\n","syntax":{"content":"public Color Lerp(float t)","parameters":[{"description":"The interpolant value between [0..1].","id":"t","type":"System.Single"}],"return":{"description":"The interpolated value.","type":"Global.Color"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.ColorRange.Lerp(System.Single)"},{"children":null,"id":"InverseLerp(Color)","implements":["Zigurous.DataStructures.INumberRange{Color}.InverseLerp(Color)"],"inheritance":null,"inheritedMembers":null,"name":"InverseLerp(Color)","nameWithType":"ColorRange.InverseLerp(Color)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ColorRange","remarks":null,"summary":"\nCalculates the linear parameter t that produces the interpolant\nvalue within the range.\n","syntax":{"content":"public float InverseLerp(Color value)","parameters":[{"description":"The value within the range you want to calculate.","id":"value","type":"Global.Color"}],"return":{"description":"The interpolant value between [0..1].","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.ColorRange.InverseLerp(Color)"}]},{"items":[{"children":["Zigurous.DataStructures.ComparableExtensions.IsBetween``1(``0,``0,``0,System.Boolean,System.Boolean)"],"id":"ComparableExtensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"ComparableExtensions","nameWithType":"ComparableExtensions","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nExtension methods for IComparable.\n","syntax":{"content":"public static class ComparableExtensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.DataStructures.ComparableExtensions"},{"children":null,"id":"IsBetween``1(``0,``0,``0,System.Boolean,System.Boolean)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsBetween<T>(T, T, T, Boolean, Boolean)","nameWithType":"ComparableExtensions.IsBetween<T>(T, T, T, Boolean, Boolean)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ComparableExtensions","remarks":null,"summary":"\nChecks if the value is between a min and max.\n","syntax":{"content":"public static bool IsBetween<T>(this T value, T min, T max, bool includeMin, bool includeMax)\n    where T : IComparable<T>","parameters":[{"description":"The value to check.","id":"value","type":"{T}"},{"description":"The minimum value.","id":"min","type":"{T}"},{"description":"The maximum value.","id":"max","type":"{T}"},{"description":"The minimum value is inclusive if true, exclusive if false.","id":"includeMin","type":"System.Boolean"},{"description":"The maximum value is inclusive if true, exclusive if false.","id":"includeMax","type":"System.Boolean"}],"return":{"description":"True if the value is between the min and max.","type":"System.Boolean"},"typeParameters":[{"description":"The type of value to check.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ComparableExtensions.IsBetween``1(``0,``0,``0,System.Boolean,System.Boolean)"}]},{"items":[{"children":["Zigurous.DataStructures.DictionaryExtensions.Where``2(Dictionary{``0,``1},Predicate{KeyValuePair{``0,``1}})","Zigurous.DataStructures.DictionaryExtensions.Where``2(Dictionary{``0,``1}.KeyCollection,Predicate{``0})","Zigurous.DataStructures.DictionaryExtensions.Where``2(Dictionary{``0,``1}.ValueCollection,Predicate{``1})"],"id":"DictionaryExtensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"DictionaryExtensions","nameWithType":"DictionaryExtensions","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nExtension methods for dictionaries.\n","syntax":{"content":"public static class DictionaryExtensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.DataStructures.DictionaryExtensions"},{"children":null,"id":"Where``2(Dictionary{``0,``1},Predicate{KeyValuePair{``0,``1}})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Where<TKey, TValue>(Dictionary<TKey, TValue>, Predicate<KeyValuePair<TKey, TValue>>)","nameWithType":"DictionaryExtensions.Where<TKey, TValue>(Dictionary<TKey, TValue>, Predicate<KeyValuePair<TKey, TValue>>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.DictionaryExtensions","remarks":null,"summary":"\nFilters the dictionary by a predicate.\n","syntax":{"content":"public static Dictionary<TKey, TValue> Where<TKey, TValue>(this Dictionary<TKey, TValue> dictionary, Predicate<KeyValuePair<TKey, TValue>> predicate)","parameters":[{"description":"The dictionary to filter.","id":"dictionary","type":"Global.Dictionary{{TKey},{TValue}}"},{"description":"The predicate to use.","id":"predicate","type":"Global.Predicate{KeyValuePair{{TKey},{TValue}}}"}],"return":{"description":"A new dictionary with the filtered key-value pairs removed.","type":"Global.Dictionary{{TKey},{TValue}}"},"typeParameters":[{"description":"The type of the keys in the dictionary.","id":"TKey"},{"description":"The type of the values in the dictionary.","id":"TValue"}]},"type":"Method","uid":"Zigurous.DataStructures.DictionaryExtensions.Where``2(Dictionary{``0,``1},Predicate{KeyValuePair{``0,``1}})"},{"children":null,"id":"Where``2(Dictionary{``0,``1}.KeyCollection,Predicate{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Where<TKey, TValue>(Dictionary<TKey, TValue>.KeyCollection, Predicate<TKey>)","nameWithType":"DictionaryExtensions.Where<TKey, TValue>(Dictionary<TKey, TValue>.KeyCollection, Predicate<TKey>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.DictionaryExtensions","remarks":null,"summary":"\nFilters the dictionary keys by a predicate.\n","syntax":{"content":"public static List<TKey> Where<TKey, TValue>(this Dictionary<TKey, TValue>.KeyCollection keys, Predicate<TKey> predicate)","parameters":[{"description":"The keys to filter.","id":"keys","type":"Global.Dictionary{{TKey},{TValue}}.KeyCollection"},{"description":"The predicate to use.","id":"predicate","type":"Global.Predicate{{TKey}}"}],"return":{"description":"A new list with the filtered keys removed.","type":"Global.List{{TKey}}"},"typeParameters":[{"description":"The type of the keys in the dictionary.","id":"TKey"},{"description":"The type of the values in the dictionary.","id":"TValue"}]},"type":"Method","uid":"Zigurous.DataStructures.DictionaryExtensions.Where``2(Dictionary{``0,``1}.KeyCollection,Predicate{``0})"},{"children":null,"id":"Where``2(Dictionary{``0,``1}.ValueCollection,Predicate{``1})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Where<TKey, TValue>(Dictionary<TKey, TValue>.ValueCollection, Predicate<TValue>)","nameWithType":"DictionaryExtensions.Where<TKey, TValue>(Dictionary<TKey, TValue>.ValueCollection, Predicate<TValue>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.DictionaryExtensions","remarks":null,"summary":"\nFilters the dictionary values by a predicate.\n","syntax":{"content":"public static List<TValue> Where<TKey, TValue>(this Dictionary<TKey, TValue>.ValueCollection values, Predicate<TValue> predicate)","parameters":[{"description":"The values to filter.","id":"values","type":"Global.Dictionary{{TKey},{TValue}}.ValueCollection"},{"description":"The predicate to use.","id":"predicate","type":"Global.Predicate{{TValue}}"}],"return":{"description":"A new list with the filtered values removed.","type":"Global.List{{TValue}}"},"typeParameters":[{"description":"The type of the keys in the dictionary.","id":"TKey"},{"description":"The type of the values in the dictionary.","id":"TValue"}]},"type":"Method","uid":"Zigurous.DataStructures.DictionaryExtensions.Where``2(Dictionary{``0,``1}.ValueCollection,Predicate{``1})"}]},{"items":[{"children":["Zigurous.DataStructures.DoubleAccumulator.Add(System.Double)","Zigurous.DataStructures.DoubleAccumulator.Subtract(System.Double)"],"id":"DoubleAccumulator","implements":null,"inheritance":["System.Object","Zigurous.DataStructures.ValueAccumulator{System.Double}"],"inheritedMembers":["Zigurous.DataStructures.ValueAccumulator{System.Double}.values","Zigurous.DataStructures.ValueAccumulator{System.Double}.total","Zigurous.DataStructures.ValueAccumulator{System.Double}.count","Zigurous.DataStructures.ValueAccumulator{System.Double}.defaultValue","Zigurous.DataStructures.ValueAccumulator{System.Double}.GetValue(System.Int32)","Zigurous.DataStructures.ValueAccumulator{System.Double}.SetValue(System.Int32,System.Double)","Zigurous.DataStructures.ValueAccumulator{System.Double}.RemoveValue(System.Int32)","Zigurous.DataStructures.ValueAccumulator{System.Double}.Clear"],"name":"DoubleAccumulator","nameWithType":"DoubleAccumulator","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nAccumulates double values into a single total value.\n","syntax":{"content":"public sealed class DoubleAccumulator : ValueAccumulator<double>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.DataStructures.DoubleAccumulator"},{"children":null,"id":"Add(System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Add(Double)","nameWithType":"DoubleAccumulator.Add(Double)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.DoubleAccumulator","remarks":null,"summary":"\nIncreases the accumulated total by a given value.\n","syntax":{"content":"protected override double Add(double value)","parameters":[{"description":"The value to add to the total.","id":"value","type":"System.Double"}],"return":{"description":"The new total value.","type":"System.Double"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.DoubleAccumulator.Add(System.Double)"},{"children":null,"id":"Subtract(System.Double)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Subtract(Double)","nameWithType":"DoubleAccumulator.Subtract(Double)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.DoubleAccumulator","remarks":null,"summary":"\nDecreases the accumulated total by a given value.\n","syntax":{"content":"protected override double Subtract(double value)","parameters":[{"description":"The value to subtract from the total.","id":"value","type":"System.Double"}],"return":{"description":"The new total value.","type":"System.Double"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.DoubleAccumulator.Subtract(System.Double)"}]},{"items":[{"children":["Zigurous.DataStructures.EulerRange.#ctor(System.Single,System.Single)","Zigurous.DataStructures.EulerRange.Clamp(System.Single)","Zigurous.DataStructures.EulerRange.delta","Zigurous.DataStructures.EulerRange.fullRange","Zigurous.DataStructures.EulerRange.halfRange","Zigurous.DataStructures.EulerRange.Includes(System.Single)","Zigurous.DataStructures.EulerRange.Includes(System.Single,System.Boolean,System.Boolean)","Zigurous.DataStructures.EulerRange.InverseLerp(System.Single)","Zigurous.DataStructures.EulerRange.Lerp(System.Single)","Zigurous.DataStructures.EulerRange.max","Zigurous.DataStructures.EulerRange.median","Zigurous.DataStructures.EulerRange.min","Zigurous.DataStructures.EulerRange.pi","Zigurous.DataStructures.EulerRange.pi2","Zigurous.DataStructures.EulerRange.Random","Zigurous.DataStructures.EulerRange.Wrap(System.Single)","Zigurous.DataStructures.EulerRange.zero"],"id":"EulerRange","implements":["Zigurous.DataStructures.INumberRange{System.Single}","Zigurous.DataStructures.IRange{System.Single}"],"inheritance":null,"inheritedMembers":null,"name":"EulerRange","nameWithType":"EulerRange","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nA range of euler values wrapped between -360 and +360.\n","syntax":{"content":"[Serializable]\npublic struct EulerRange : INumberRange<float>, IRange<float>","parameters":null,"return":null,"typeParameters":null},"type":"Struct","uid":"Zigurous.DataStructures.EulerRange"},{"children":null,"id":"zero","implements":null,"inheritance":null,"inheritedMembers":null,"name":"zero","nameWithType":"EulerRange.zero","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.EulerRange","remarks":null,"summary":"\nShorthand for writing <code>EulerRange(0f, 0f)</code>.\n","syntax":{"content":"public static readonly EulerRange zero { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.EulerRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.EulerRange.zero"},{"children":null,"id":"pi","implements":null,"inheritance":null,"inheritedMembers":null,"name":"pi","nameWithType":"EulerRange.pi","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.EulerRange","remarks":null,"summary":"\nShorthand for writing <code>EulerRange(0f, 180f)</code>.\n","syntax":{"content":"public static readonly EulerRange pi { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.EulerRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.EulerRange.pi"},{"children":null,"id":"pi2","implements":null,"inheritance":null,"inheritedMembers":null,"name":"pi2","nameWithType":"EulerRange.pi2","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.EulerRange","remarks":null,"summary":"\nShorthand for writing <code>EulerRange(0f, 360f)</code>.\n","syntax":{"content":"public static readonly EulerRange pi2 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.EulerRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.EulerRange.pi2"},{"children":null,"id":"halfRange","implements":null,"inheritance":null,"inheritedMembers":null,"name":"halfRange","nameWithType":"EulerRange.halfRange","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.EulerRange","remarks":null,"summary":"\nShorthand for writing <code>EulerRange(-180f, 180f)</code>.\n","syntax":{"content":"public static readonly EulerRange halfRange { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.EulerRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.EulerRange.halfRange"},{"children":null,"id":"fullRange","implements":null,"inheritance":null,"inheritedMembers":null,"name":"fullRange","nameWithType":"EulerRange.fullRange","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.EulerRange","remarks":null,"summary":"\nShorthand for writing <code>EulerRange(-360f, 360f)</code>.\n","syntax":{"content":"public static readonly EulerRange fullRange { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.EulerRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.EulerRange.fullRange"},{"children":null,"id":"min","implements":["Zigurous.DataStructures.IRange{System.Single}.min"],"inheritance":null,"inheritedMembers":null,"name":"min","nameWithType":"EulerRange.min","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.EulerRange","remarks":null,"summary":"\nThe lower bound of the range.\n","syntax":{"content":"public float min { get; set; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.EulerRange.min"},{"children":null,"id":"max","implements":["Zigurous.DataStructures.IRange{System.Single}.max"],"inheritance":null,"inheritedMembers":null,"name":"max","nameWithType":"EulerRange.max","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.EulerRange","remarks":null,"summary":"\nThe upper bound of the range.\n","syntax":{"content":"public float max { get; set; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.EulerRange.max"},{"children":null,"id":"delta","implements":["Zigurous.DataStructures.INumberRange{System.Single}.delta"],"inheritance":null,"inheritedMembers":null,"name":"delta","nameWithType":"EulerRange.delta","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.EulerRange","remarks":null,"summary":"\nThe difference between the maximum and minimum values (Read only).\n","syntax":{"content":"public readonly float delta { get; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.EulerRange.delta"},{"children":null,"id":"median","implements":["Zigurous.DataStructures.INumberRange{System.Single}.median"],"inheritance":null,"inheritedMembers":null,"name":"median","nameWithType":"EulerRange.median","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.EulerRange","remarks":null,"summary":"\nThe median value of the range (Read only).\n","syntax":{"content":"public readonly float median { get; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.EulerRange.median"},{"children":null,"id":"#ctor(System.Single,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"EulerRange(Single, Single)","nameWithType":"EulerRange.EulerRange(Single, Single)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.EulerRange","remarks":null,"summary":"\nCreates a new range with the specified values.\n","syntax":{"content":"public EulerRange(float min = -360F, float max = 360F)","parameters":[{"description":"The lower bound of the range.","id":"min","type":"System.Single"},{"description":"The upper bound of the range.","id":"max","type":"System.Single"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.DataStructures.EulerRange.#ctor(System.Single,System.Single)"},{"children":null,"id":"Random","implements":["Zigurous.DataStructures.INumberRange{System.Single}.Random"],"inheritance":null,"inheritedMembers":null,"name":"Random()","nameWithType":"EulerRange.Random()","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.EulerRange","remarks":null,"summary":"\nReturns a random value in the range.\n","syntax":{"content":"public float Random()","parameters":null,"return":{"description":"A random value in the range.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.EulerRange.Random"},{"children":null,"id":"Includes(System.Single)","implements":["Zigurous.DataStructures.IRange{System.Single}.Includes(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Single)","nameWithType":"EulerRange.Includes(Single)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.EulerRange","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(float value)","parameters":[{"description":"The value to check.","id":"value","type":"System.Single"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.EulerRange.Includes(System.Single)"},{"children":null,"id":"Includes(System.Single,System.Boolean,System.Boolean)","implements":["Zigurous.DataStructures.IRange{System.Single}.Includes(System.Single,System.Boolean,System.Boolean)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Single, Boolean, Boolean)","nameWithType":"EulerRange.Includes(Single, Boolean, Boolean)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.EulerRange","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(float value, bool includeMin, bool includeMax)","parameters":[{"description":"The value to check.","id":"value","type":"System.Single"},{"description":"The minimum value is inclusive if true, exclusive if false.","id":"includeMin","type":"System.Boolean"},{"description":"The maximum value is inclusive if true, exclusive if false.","id":"includeMax","type":"System.Boolean"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.EulerRange.Includes(System.Single,System.Boolean,System.Boolean)"},{"children":null,"id":"Clamp(System.Single)","implements":["Zigurous.DataStructures.INumberRange{System.Single}.Clamp(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"Clamp(Single)","nameWithType":"EulerRange.Clamp(Single)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.EulerRange","remarks":null,"summary":"\nClamps a value to the range.\n","syntax":{"content":"public float Clamp(float value)","parameters":[{"description":"The value to clamp.","id":"value","type":"System.Single"}],"return":{"description":"The clamped value.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.EulerRange.Clamp(System.Single)"},{"children":null,"id":"Wrap(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Wrap(Single)","nameWithType":"EulerRange.Wrap(Single)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.EulerRange","remarks":null,"summary":"\nWraps a value within the range.\n","syntax":{"content":"public float Wrap(float value)","parameters":[{"description":"The value to wrap.","id":"value","type":"System.Single"}],"return":{"description":"The wrapped value.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.EulerRange.Wrap(System.Single)"},{"children":null,"id":"Lerp(System.Single)","implements":["Zigurous.DataStructures.INumberRange{System.Single}.Lerp(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"Lerp(Single)","nameWithType":"EulerRange.Lerp(Single)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.EulerRange","remarks":null,"summary":"\nLinearly interpolates between the range by <code data-dev-comment-type=\"paramref\" class=\"paramref\">t</code>.\n","syntax":{"content":"public float Lerp(float t)","parameters":[{"description":"The interpolant value between [0..1].","id":"t","type":"System.Single"}],"return":{"description":"The interpolated value.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.EulerRange.Lerp(System.Single)"},{"children":null,"id":"InverseLerp(System.Single)","implements":["Zigurous.DataStructures.INumberRange{System.Single}.InverseLerp(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"InverseLerp(Single)","nameWithType":"EulerRange.InverseLerp(Single)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.EulerRange","remarks":null,"summary":"\nCalculates the linear parameter t that produces the interpolant\nvalue within the range.\n","syntax":{"content":"public float InverseLerp(float value)","parameters":[{"description":"The value within the range you want to calculate.","id":"value","type":"System.Single"}],"return":{"description":"The interpolant value between [0..1].","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.EulerRange.InverseLerp(System.Single)"}]},{"items":[{"children":[],"id":"FixedUpdateStrategy","implements":null,"inheritance":["System.Object","Zigurous.DataStructures.UpdateStrategy"],"inheritedMembers":["Zigurous.DataStructures.UpdateStrategy.Execute(System.Single)","Zigurous.DataStructures.UpdateStrategy.Register(Zigurous.DataStructures.UpdateStrategy.UpdateAction)","Zigurous.DataStructures.UpdateStrategy.Unregister(Zigurous.DataStructures.UpdateStrategy.UpdateAction)"],"name":"FixedUpdateStrategy","nameWithType":"FixedUpdateStrategy","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nAn update strategy executed during the fixed update loop.\n","syntax":{"content":"public sealed class FixedUpdateStrategy : UpdateStrategy","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.DataStructures.FixedUpdateStrategy"}]},{"items":[{"children":["Zigurous.DataStructures.FloatAccumulator.Add(System.Single)","Zigurous.DataStructures.FloatAccumulator.Subtract(System.Single)"],"id":"FloatAccumulator","implements":null,"inheritance":["System.Object","Zigurous.DataStructures.ValueAccumulator{System.Single}"],"inheritedMembers":["Zigurous.DataStructures.ValueAccumulator{System.Single}.values","Zigurous.DataStructures.ValueAccumulator{System.Single}.total","Zigurous.DataStructures.ValueAccumulator{System.Single}.count","Zigurous.DataStructures.ValueAccumulator{System.Single}.defaultValue","Zigurous.DataStructures.ValueAccumulator{System.Single}.GetValue(System.Int32)","Zigurous.DataStructures.ValueAccumulator{System.Single}.SetValue(System.Int32,System.Single)","Zigurous.DataStructures.ValueAccumulator{System.Single}.RemoveValue(System.Int32)","Zigurous.DataStructures.ValueAccumulator{System.Single}.Clear"],"name":"FloatAccumulator","nameWithType":"FloatAccumulator","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nAccumulates float values into a single total value.\n","syntax":{"content":"public sealed class FloatAccumulator : ValueAccumulator<float>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.DataStructures.FloatAccumulator"},{"children":null,"id":"Add(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Add(Single)","nameWithType":"FloatAccumulator.Add(Single)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.FloatAccumulator","remarks":null,"summary":"\nIncreases the accumulated total by a given value.\n","syntax":{"content":"protected override float Add(float value)","parameters":[{"description":"The value to add to the total.","id":"value","type":"System.Single"}],"return":{"description":"The new total value.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.FloatAccumulator.Add(System.Single)"},{"children":null,"id":"Subtract(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Subtract(Single)","nameWithType":"FloatAccumulator.Subtract(Single)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.FloatAccumulator","remarks":null,"summary":"\nDecreases the accumulated total by a given value.\n","syntax":{"content":"protected override float Subtract(float value)","parameters":[{"description":"The value to subtract from the total.","id":"value","type":"System.Single"}],"return":{"description":"The new total value.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.FloatAccumulator.Subtract(System.Single)"}]},{"items":[{"children":["Zigurous.DataStructures.FloatRange.#ctor(System.Single,System.Single)","Zigurous.DataStructures.FloatRange.Clamp(System.Single)","Zigurous.DataStructures.FloatRange.delta","Zigurous.DataStructures.FloatRange.Includes(System.Single)","Zigurous.DataStructures.FloatRange.Includes(System.Single,System.Boolean,System.Boolean)","Zigurous.DataStructures.FloatRange.InverseLerp(System.Single)","Zigurous.DataStructures.FloatRange.Lerp(System.Single)","Zigurous.DataStructures.FloatRange.max","Zigurous.DataStructures.FloatRange.median","Zigurous.DataStructures.FloatRange.min","Zigurous.DataStructures.FloatRange.minMax","Zigurous.DataStructures.FloatRange.negative","Zigurous.DataStructures.FloatRange.one","Zigurous.DataStructures.FloatRange.percent","Zigurous.DataStructures.FloatRange.positive","Zigurous.DataStructures.FloatRange.Random","Zigurous.DataStructures.FloatRange.zero"],"id":"FloatRange","implements":["Zigurous.DataStructures.INumberRange{System.Single}","Zigurous.DataStructures.IRange{System.Single}"],"inheritance":null,"inheritedMembers":null,"name":"FloatRange","nameWithType":"FloatRange","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nA range of float values.\n","syntax":{"content":"[Serializable]\npublic struct FloatRange : INumberRange<float>, IRange<float>","parameters":null,"return":null,"typeParameters":null},"type":"Struct","uid":"Zigurous.DataStructures.FloatRange"},{"children":null,"id":"zero","implements":null,"inheritance":null,"inheritedMembers":null,"name":"zero","nameWithType":"FloatRange.zero","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.FloatRange","remarks":null,"summary":"\nShorthand for writing <code>FloatRange(0f, 0f)</code>.\n","syntax":{"content":"public static readonly FloatRange zero { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.FloatRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.FloatRange.zero"},{"children":null,"id":"one","implements":null,"inheritance":null,"inheritedMembers":null,"name":"one","nameWithType":"FloatRange.one","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.FloatRange","remarks":null,"summary":"\nShorthand for writing <code>FloatRange(1f, 1f)</code>.\n","syntax":{"content":"public static readonly FloatRange one { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.FloatRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.FloatRange.one"},{"children":null,"id":"percent","implements":null,"inheritance":null,"inheritedMembers":null,"name":"percent","nameWithType":"FloatRange.percent","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.FloatRange","remarks":null,"summary":"\nShorthand for writing <code>FloatRange(0f, 1f)</code>.\n","syntax":{"content":"public static readonly FloatRange percent { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.FloatRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.FloatRange.percent"},{"children":null,"id":"positive","implements":null,"inheritance":null,"inheritedMembers":null,"name":"positive","nameWithType":"FloatRange.positive","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.FloatRange","remarks":null,"summary":"\nShorthand for writing <code>FloatRange(0f, float.MaxValue)</code>.\n","syntax":{"content":"public static readonly FloatRange positive { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.FloatRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.FloatRange.positive"},{"children":null,"id":"negative","implements":null,"inheritance":null,"inheritedMembers":null,"name":"negative","nameWithType":"FloatRange.negative","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.FloatRange","remarks":null,"summary":"\nShorthand for writing <code>FloatRange(float.MinValue, 0f)</code>.\n","syntax":{"content":"public static readonly FloatRange negative { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.FloatRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.FloatRange.negative"},{"children":null,"id":"minMax","implements":null,"inheritance":null,"inheritedMembers":null,"name":"minMax","nameWithType":"FloatRange.minMax","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.FloatRange","remarks":null,"summary":"\nShorthand for writing <code>FloatRange(float.MinValue, float.MaxValue)</code>.\n","syntax":{"content":"public static readonly FloatRange minMax { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.FloatRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.FloatRange.minMax"},{"children":null,"id":"min","implements":["Zigurous.DataStructures.IRange{System.Single}.min"],"inheritance":null,"inheritedMembers":null,"name":"min","nameWithType":"FloatRange.min","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.FloatRange","remarks":null,"summary":"\nThe lower bound of the range.\n","syntax":{"content":"public float min { get; set; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.FloatRange.min"},{"children":null,"id":"max","implements":["Zigurous.DataStructures.IRange{System.Single}.max"],"inheritance":null,"inheritedMembers":null,"name":"max","nameWithType":"FloatRange.max","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.FloatRange","remarks":null,"summary":"\nThe upper bound of the range.\n","syntax":{"content":"public float max { get; set; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.FloatRange.max"},{"children":null,"id":"delta","implements":["Zigurous.DataStructures.INumberRange{System.Single}.delta"],"inheritance":null,"inheritedMembers":null,"name":"delta","nameWithType":"FloatRange.delta","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.FloatRange","remarks":null,"summary":"\nThe difference between the maximum and minimum values (Read only).\n","syntax":{"content":"public readonly float delta { get; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.FloatRange.delta"},{"children":null,"id":"median","implements":["Zigurous.DataStructures.INumberRange{System.Single}.median"],"inheritance":null,"inheritedMembers":null,"name":"median","nameWithType":"FloatRange.median","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.FloatRange","remarks":null,"summary":"\nThe median value of the range (Read only).\n","syntax":{"content":"public readonly float median { get; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.FloatRange.median"},{"children":null,"id":"#ctor(System.Single,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"FloatRange(Single, Single)","nameWithType":"FloatRange.FloatRange(Single, Single)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.FloatRange","remarks":null,"summary":"\nCreates a new range with the specified values.\n","syntax":{"content":"public FloatRange(float min = 0F, float max = 1F)","parameters":[{"description":"The lower bound of the range.","id":"min","type":"System.Single"},{"description":"The upper bound of the range.","id":"max","type":"System.Single"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.DataStructures.FloatRange.#ctor(System.Single,System.Single)"},{"children":null,"id":"Random","implements":["Zigurous.DataStructures.INumberRange{System.Single}.Random"],"inheritance":null,"inheritedMembers":null,"name":"Random()","nameWithType":"FloatRange.Random()","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.FloatRange","remarks":null,"summary":"\nReturns a random value in the range.\n","syntax":{"content":"public float Random()","parameters":null,"return":{"description":"A random value in the range.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.FloatRange.Random"},{"children":null,"id":"Includes(System.Single)","implements":["Zigurous.DataStructures.IRange{System.Single}.Includes(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Single)","nameWithType":"FloatRange.Includes(Single)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.FloatRange","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(float value)","parameters":[{"description":"The value to check.","id":"value","type":"System.Single"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.FloatRange.Includes(System.Single)"},{"children":null,"id":"Includes(System.Single,System.Boolean,System.Boolean)","implements":["Zigurous.DataStructures.IRange{System.Single}.Includes(System.Single,System.Boolean,System.Boolean)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Single, Boolean, Boolean)","nameWithType":"FloatRange.Includes(Single, Boolean, Boolean)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.FloatRange","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(float value, bool includeMin, bool includeMax)","parameters":[{"description":"The value to check.","id":"value","type":"System.Single"},{"description":"The minimum value is inclusive if true, exclusive if false.","id":"includeMin","type":"System.Boolean"},{"description":"The maximum value is inclusive if true, exclusive if false.","id":"includeMax","type":"System.Boolean"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.FloatRange.Includes(System.Single,System.Boolean,System.Boolean)"},{"children":null,"id":"Clamp(System.Single)","implements":["Zigurous.DataStructures.INumberRange{System.Single}.Clamp(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"Clamp(Single)","nameWithType":"FloatRange.Clamp(Single)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.FloatRange","remarks":null,"summary":"\nClamps a value to the range.\n","syntax":{"content":"public float Clamp(float value)","parameters":[{"description":"The value to clamp.","id":"value","type":"System.Single"}],"return":{"description":"The clamped value.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.FloatRange.Clamp(System.Single)"},{"children":null,"id":"Lerp(System.Single)","implements":["Zigurous.DataStructures.INumberRange{System.Single}.Lerp(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"Lerp(Single)","nameWithType":"FloatRange.Lerp(Single)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.FloatRange","remarks":null,"summary":"\nLinearly interpolates between the range by <code data-dev-comment-type=\"paramref\" class=\"paramref\">t</code>.\n","syntax":{"content":"public float Lerp(float t)","parameters":[{"description":"The interpolant value between [0..1].","id":"t","type":"System.Single"}],"return":{"description":"The interpolated value.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.FloatRange.Lerp(System.Single)"},{"children":null,"id":"InverseLerp(System.Single)","implements":["Zigurous.DataStructures.INumberRange{System.Single}.InverseLerp(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"InverseLerp(Single)","nameWithType":"FloatRange.InverseLerp(Single)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.FloatRange","remarks":null,"summary":"\nCalculates the linear parameter t that produces the interpolant\nvalue within the range.\n","syntax":{"content":"public float InverseLerp(float value)","parameters":[{"description":"The value within the range you want to calculate.","id":"value","type":"System.Single"}],"return":{"description":"The interpolant value between [0..1].","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.FloatRange.InverseLerp(System.Single)"}]},{"items":[{"children":["Zigurous.DataStructures.GridSize.#ctor(System.Int32)","Zigurous.DataStructures.GridSize.#ctor(System.Int32,System.Int32)","Zigurous.DataStructures.GridSize.area","Zigurous.DataStructures.GridSize.columns","Zigurous.DataStructures.GridSize.CompareTo(Zigurous.DataStructures.GridSize)","Zigurous.DataStructures.GridSize.Equals(System.Object)","Zigurous.DataStructures.GridSize.Equals(Zigurous.DataStructures.GridSize)","Zigurous.DataStructures.GridSize.GetHashCode","Zigurous.DataStructures.GridSize.max","Zigurous.DataStructures.GridSize.one","Zigurous.DataStructures.GridSize.op_Equality(Zigurous.DataStructures.GridSize,Zigurous.DataStructures.GridSize)","Zigurous.DataStructures.GridSize.op_Inequality(Zigurous.DataStructures.GridSize,Zigurous.DataStructures.GridSize)","Zigurous.DataStructures.GridSize.rows","Zigurous.DataStructures.GridSize.sq1024","Zigurous.DataStructures.GridSize.sq128","Zigurous.DataStructures.GridSize.sq16","Zigurous.DataStructures.GridSize.sq2","Zigurous.DataStructures.GridSize.sq2048","Zigurous.DataStructures.GridSize.sq256","Zigurous.DataStructures.GridSize.sq32","Zigurous.DataStructures.GridSize.sq4","Zigurous.DataStructures.GridSize.sq4096","Zigurous.DataStructures.GridSize.sq512","Zigurous.DataStructures.GridSize.sq64","Zigurous.DataStructures.GridSize.sq8","Zigurous.DataStructures.GridSize.sq8192","Zigurous.DataStructures.GridSize.ToString","Zigurous.DataStructures.GridSize.zero"],"id":"GridSize","implements":["Global.IEquatable{Zigurous.DataStructures.GridSize}","Global.IComparable{Zigurous.DataStructures.GridSize}"],"inheritance":null,"inheritedMembers":null,"name":"GridSize","nameWithType":"GridSize","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nStores the size of a grid as rows and columns.\n","syntax":{"content":"[Serializable]\npublic struct GridSize","parameters":null,"return":null,"typeParameters":null},"type":"Struct","uid":"Zigurous.DataStructures.GridSize"},{"children":null,"id":"zero","implements":null,"inheritance":null,"inheritedMembers":null,"name":"zero","nameWithType":"GridSize.zero","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.GridSize","remarks":null,"summary":"\nShorthand for writing <code>GridSize(0, 0)</code>.\n","syntax":{"content":"public static readonly GridSize zero { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.GridSize"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.GridSize.zero"},{"children":null,"id":"one","implements":null,"inheritance":null,"inheritedMembers":null,"name":"one","nameWithType":"GridSize.one","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.GridSize","remarks":null,"summary":"\nShorthand for writing <code>GridSize(1, 1)</code>.\n","syntax":{"content":"public static readonly GridSize one { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.GridSize"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.GridSize.one"},{"children":null,"id":"max","implements":null,"inheritance":null,"inheritedMembers":null,"name":"max","nameWithType":"GridSize.max","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.GridSize","remarks":null,"summary":"\nShorthand for writing <code>GridSize(int.MaxValue, int.MaxValue)</code>.\n","syntax":{"content":"public static readonly GridSize max { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.GridSize"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.GridSize.max"},{"children":null,"id":"sq2","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq2","nameWithType":"GridSize.sq2","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.GridSize","remarks":null,"summary":"\nShorthand for writing <code>GridSize(2)</code>.\n","syntax":{"content":"public static readonly GridSize sq2 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.GridSize"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.GridSize.sq2"},{"children":null,"id":"sq4","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq4","nameWithType":"GridSize.sq4","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.GridSize","remarks":null,"summary":"\nShorthand for writing <code>GridSize(4)</code>.\n","syntax":{"content":"public static readonly GridSize sq4 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.GridSize"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.GridSize.sq4"},{"children":null,"id":"sq8","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq8","nameWithType":"GridSize.sq8","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.GridSize","remarks":null,"summary":"\nShorthand for writing <code>GridSize(8)</code>.\n","syntax":{"content":"public static readonly GridSize sq8 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.GridSize"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.GridSize.sq8"},{"children":null,"id":"sq16","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq16","nameWithType":"GridSize.sq16","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.GridSize","remarks":null,"summary":"\nShorthand for writing <code>GridSize(16)</code>.\n","syntax":{"content":"public static readonly GridSize sq16 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.GridSize"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.GridSize.sq16"},{"children":null,"id":"sq32","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq32","nameWithType":"GridSize.sq32","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.GridSize","remarks":null,"summary":"\nShorthand for writing <code>GridSize(32)</code>.\n","syntax":{"content":"public static readonly GridSize sq32 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.GridSize"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.GridSize.sq32"},{"children":null,"id":"sq64","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq64","nameWithType":"GridSize.sq64","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.GridSize","remarks":null,"summary":"\nShorthand for writing <code>GridSize(64)</code>.\n","syntax":{"content":"public static readonly GridSize sq64 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.GridSize"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.GridSize.sq64"},{"children":null,"id":"sq128","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq128","nameWithType":"GridSize.sq128","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.GridSize","remarks":null,"summary":"\nShorthand for writing <code>GridSize(128)</code>.\n","syntax":{"content":"public static readonly GridSize sq128 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.GridSize"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.GridSize.sq128"},{"children":null,"id":"sq256","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq256","nameWithType":"GridSize.sq256","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.GridSize","remarks":null,"summary":"\nShorthand for writing <code>GridSize(256)</code>.\n","syntax":{"content":"public static readonly GridSize sq256 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.GridSize"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.GridSize.sq256"},{"children":null,"id":"sq512","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq512","nameWithType":"GridSize.sq512","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.GridSize","remarks":null,"summary":"\nShorthand for writing <code>GridSize(512)</code>.\n","syntax":{"content":"public static readonly GridSize sq512 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.GridSize"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.GridSize.sq512"},{"children":null,"id":"sq1024","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq1024","nameWithType":"GridSize.sq1024","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.GridSize","remarks":null,"summary":"\nShorthand for writing <code>GridSize(1024)</code>.\n","syntax":{"content":"public static readonly GridSize sq1024 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.GridSize"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.GridSize.sq1024"},{"children":null,"id":"sq2048","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq2048","nameWithType":"GridSize.sq2048","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.GridSize","remarks":null,"summary":"\nShorthand for writing <code>GridSize(2048)</code>.\n","syntax":{"content":"public static readonly GridSize sq2048 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.GridSize"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.GridSize.sq2048"},{"children":null,"id":"sq4096","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq4096","nameWithType":"GridSize.sq4096","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.GridSize","remarks":null,"summary":"\nShorthand for writing <code>GridSize(4096)</code>.\n","syntax":{"content":"public static readonly GridSize sq4096 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.GridSize"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.GridSize.sq4096"},{"children":null,"id":"sq8192","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq8192","nameWithType":"GridSize.sq8192","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.GridSize","remarks":null,"summary":"\nShorthand for writing <code>GridSize(8192)</code>.\n","syntax":{"content":"public static readonly GridSize sq8192 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.GridSize"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.GridSize.sq8192"},{"children":null,"id":"rows","implements":null,"inheritance":null,"inheritedMembers":null,"name":"rows","nameWithType":"GridSize.rows","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.GridSize","remarks":null,"summary":"\nThe number of rows in the grid.\n","syntax":{"content":"public int rows","parameters":null,"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Field","uid":"Zigurous.DataStructures.GridSize.rows"},{"children":null,"id":"columns","implements":null,"inheritance":null,"inheritedMembers":null,"name":"columns","nameWithType":"GridSize.columns","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.GridSize","remarks":null,"summary":"\nThe number of columns in the grid.\n","syntax":{"content":"public int columns","parameters":null,"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Field","uid":"Zigurous.DataStructures.GridSize.columns"},{"children":null,"id":"area","implements":null,"inheritance":null,"inheritedMembers":null,"name":"area","nameWithType":"GridSize.area","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.GridSize","remarks":null,"summary":"\nThe area of the grid (rows * columns) (Read only).\n","syntax":{"content":"public readonly int area { get; }","parameters":[],"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.GridSize.area"},{"children":null,"id":"#ctor(System.Int32,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GridSize(Int32, Int32)","nameWithType":"GridSize.GridSize(Int32, Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.GridSize","remarks":null,"summary":"\nCreates a new grid size with the specified rows and columns.\n","syntax":{"content":"public GridSize(int rows = 0, int columns = 0)","parameters":[{"description":"The number of rows in the grid.","id":"rows","type":"System.Int32"},{"description":"The number of columns in the grid.","id":"columns","type":"System.Int32"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.DataStructures.GridSize.#ctor(System.Int32,System.Int32)"},{"children":null,"id":"#ctor(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GridSize(Int32)","nameWithType":"GridSize.GridSize(Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.GridSize","remarks":null,"summary":"\nCreates a new grid size with uniform rows and columns.\n","syntax":{"content":"public GridSize(int size)","parameters":[{"description":"The uniform size of the grid.","id":"size","type":"System.Int32"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.DataStructures.GridSize.#ctor(System.Int32)"},{"children":null,"id":"CompareTo(Zigurous.DataStructures.GridSize)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"CompareTo(GridSize)","nameWithType":"GridSize.CompareTo(GridSize)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.GridSize","remarks":null,"summary":"\nCompares this instance with another and returns an integer that\nindicates whether this instance precedes, follows, or appears in the\nsame position in the sort order as the other instance.\n","syntax":{"content":"public int CompareTo(GridSize other)","parameters":[{"description":"The grid size to compare to.","id":"other","type":"Zigurous.DataStructures.GridSize"}],"return":{"description":"\nGreater than zero if this instance follows the other, less than zero\nif this instance precedes the other, and zero if this instance has\nthe same position as the other.\n","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.GridSize.CompareTo(Zigurous.DataStructures.GridSize)"},{"children":null,"id":"Equals(Zigurous.DataStructures.GridSize)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Equals(GridSize)","nameWithType":"GridSize.Equals(GridSize)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.GridSize","remarks":null,"summary":"\nChecks if the grid size is equal to another grid size.\n","syntax":{"content":"public bool Equals(GridSize other)","parameters":[{"description":"The grid size to compare to.","id":"other","type":"Zigurous.DataStructures.GridSize"}],"return":{"description":"True if the grid sizes are equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.GridSize.Equals(Zigurous.DataStructures.GridSize)"},{"children":null,"id":"Equals(System.Object)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Equals(Object)","nameWithType":"GridSize.Equals(Object)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.GridSize","remarks":null,"summary":"\nChecks if the grid size is equal to another grid size.\n","syntax":{"content":"public override bool Equals(object other)","parameters":[{"description":"The object to compare to.","id":"other","type":"System.Object"}],"return":{"description":"True if the grid sizes are equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.GridSize.Equals(System.Object)"},{"children":null,"id":"GetHashCode","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetHashCode()","nameWithType":"GridSize.GetHashCode()","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.GridSize","remarks":null,"summary":"\nReturns the hash code of the grid size.\n","syntax":{"content":"public override int GetHashCode()","parameters":null,"return":{"description":"The hash code of the grid size.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.GridSize.GetHashCode"},{"children":null,"id":"ToString","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ToString()","nameWithType":"GridSize.ToString()","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.GridSize","remarks":null,"summary":"\nConverts the grid size to a string.\n","syntax":{"content":"public override string ToString()","parameters":null,"return":{"description":"The grid size as a string.","type":"System.String"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.GridSize.ToString"},{"children":null,"id":"op_Equality(Zigurous.DataStructures.GridSize,Zigurous.DataStructures.GridSize)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Equality(GridSize, GridSize)","nameWithType":"GridSize.Equality(GridSize, GridSize)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.GridSize","remarks":null,"summary":"\nDetermines if two grid sizes are equal.\n","syntax":{"content":"public static bool operator ==(GridSize lhs, GridSize rhs)","parameters":[{"description":"The first grid size to compare.","id":"lhs","type":"Zigurous.DataStructures.GridSize"},{"description":"The second grid size to compare.","id":"rhs","type":"Zigurous.DataStructures.GridSize"}],"return":{"description":"True if the grid sizes are equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Operator","uid":"Zigurous.DataStructures.GridSize.op_Equality(Zigurous.DataStructures.GridSize,Zigurous.DataStructures.GridSize)"},{"children":null,"id":"op_Inequality(Zigurous.DataStructures.GridSize,Zigurous.DataStructures.GridSize)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Inequality(GridSize, GridSize)","nameWithType":"GridSize.Inequality(GridSize, GridSize)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.GridSize","remarks":null,"summary":"\nDetermines if two grid sizes are not equal.\n","syntax":{"content":"public static bool operator !=(GridSize lhs, GridSize rhs)","parameters":[{"description":"The first grid size to compare.","id":"lhs","type":"Zigurous.DataStructures.GridSize"},{"description":"The second grid size to compare.","id":"rhs","type":"Zigurous.DataStructures.GridSize"}],"return":{"description":"True if the grid sizes are not equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Operator","uid":"Zigurous.DataStructures.GridSize.op_Inequality(Zigurous.DataStructures.GridSize,Zigurous.DataStructures.GridSize)"}]},{"items":[{"children":["Zigurous.DataStructures.HashCode.Combine(System.Int32,System.Int32)","Zigurous.DataStructures.HashCode.Combine(System.Int32,System.Int32,System.Int32)","Zigurous.DataStructures.HashCode.Combine(System.Int32,System.Int32,System.Int32,System.Int32)"],"id":"HashCode","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"HashCode","nameWithType":"HashCode","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nCombines multiple hash codes into a single value.\n","syntax":{"content":"public static class HashCode","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.DataStructures.HashCode"},{"children":null,"id":"Combine(System.Int32,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Combine(Int32, Int32)","nameWithType":"HashCode.Combine(Int32, Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.HashCode","remarks":null,"summary":"\nCombines two hash codes into one unique hash.\n","syntax":{"content":"public static int Combine(int hash1, int hash2)","parameters":[{"description":"The first hash.","id":"hash1","type":"System.Int32"},{"description":"The second hash.","id":"hash2","type":"System.Int32"}],"return":{"description":"The combined hash code.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.HashCode.Combine(System.Int32,System.Int32)"},{"children":null,"id":"Combine(System.Int32,System.Int32,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Combine(Int32, Int32, Int32)","nameWithType":"HashCode.Combine(Int32, Int32, Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.HashCode","remarks":null,"summary":"\nCombines three hash codes into one unique hash.\n","syntax":{"content":"public static int Combine(int hash1, int hash2, int hash3)","parameters":[{"description":"The first hash.","id":"hash1","type":"System.Int32"},{"description":"The second hash.","id":"hash2","type":"System.Int32"},{"description":"The third hash.","id":"hash3","type":"System.Int32"}],"return":{"description":"The combined hash code.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.HashCode.Combine(System.Int32,System.Int32,System.Int32)"},{"children":null,"id":"Combine(System.Int32,System.Int32,System.Int32,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Combine(Int32, Int32, Int32, Int32)","nameWithType":"HashCode.Combine(Int32, Int32, Int32, Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.HashCode","remarks":null,"summary":"\nCombines four hash codes into one unique hash.\n","syntax":{"content":"public static int Combine(int hash1, int hash2, int hash3, int hash4)","parameters":[{"description":"The first hash.","id":"hash1","type":"System.Int32"},{"description":"The second hash.","id":"hash2","type":"System.Int32"},{"description":"The third hash.","id":"hash3","type":"System.Int32"},{"description":"The fourth hash.","id":"hash4","type":"System.Int32"}],"return":{"description":"The combined hash code.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.HashCode.Combine(System.Int32,System.Int32,System.Int32,System.Int32)"}]},{"items":[{"children":["Zigurous.DataStructures.HashSetExtensions.First``1(HashSet{``0},Predicate{``0})","Zigurous.DataStructures.HashSetExtensions.ForEach``1(HashSet{``0},Action{``0})","Zigurous.DataStructures.HashSetExtensions.IsAny``1(HashSet{``0},Predicate{``0})","Zigurous.DataStructures.HashSetExtensions.IsEach``1(HashSet{``0},Predicate{``0})"],"id":"HashSetExtensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"HashSetExtensions","nameWithType":"HashSetExtensions","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nExtension methods for hash sets.\n","syntax":{"content":"public static class HashSetExtensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.DataStructures.HashSetExtensions"},{"children":null,"id":"First``1(HashSet{``0},Predicate{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"First<T>(HashSet<T>, Predicate<T>)","nameWithType":"HashSetExtensions.First<T>(HashSet<T>, Predicate<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.HashSetExtensions","remarks":null,"summary":"\nReturns the first element in the set that satisifies a predicate.\n","syntax":{"content":"public static T First<T>(this HashSet<T> set, Predicate<T> predicate)","parameters":[{"description":"The set to get the element from.","id":"set","type":"Global.HashSet{{T}}"},{"description":"The predicate to use.","id":"predicate","type":"Global.Predicate{{T}}"}],"return":{"description":"The first element in the set that satisifies the predicate.","type":"{T}"},"typeParameters":[{"description":"The type of the elements in the set.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.HashSetExtensions.First``1(HashSet{``0},Predicate{``0})"},{"children":null,"id":"ForEach``1(HashSet{``0},Action{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ForEach<T>(HashSet<T>, Action<T>)","nameWithType":"HashSetExtensions.ForEach<T>(HashSet<T>, Action<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.HashSetExtensions","remarks":null,"summary":"\nInvokes an action on each element in the set. The element is passed\nas a parameter.\n","syntax":{"content":"public static void ForEach<T>(this HashSet<T> set, Action<T> action)","parameters":[{"description":"The set to iterate over.","id":"set","type":"Global.HashSet{{T}}"},{"description":"The action to invoke on each element.","id":"action","type":"Global.Action{{T}}"}],"return":null,"typeParameters":[{"description":"The type of the elements in the set.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.HashSetExtensions.ForEach``1(HashSet{``0},Action{``0})"},{"children":null,"id":"IsAny``1(HashSet{``0},Predicate{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsAny<T>(HashSet<T>, Predicate<T>)","nameWithType":"HashSetExtensions.IsAny<T>(HashSet<T>, Predicate<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.HashSetExtensions","remarks":null,"summary":"\nChecks if any element in the set satisfies a predicate.\n","syntax":{"content":"public static bool IsAny<T>(this HashSet<T> set, Predicate<T> predicate)","parameters":[{"description":"The set to check.","id":"set","type":"Global.HashSet{{T}}"},{"description":"The predicate to use.","id":"predicate","type":"Global.Predicate{{T}}"}],"return":{"description":"True if any element in the set satisfies the predicate.","type":"System.Boolean"},"typeParameters":[{"description":"The type of the elements in the set.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.HashSetExtensions.IsAny``1(HashSet{``0},Predicate{``0})"},{"children":null,"id":"IsEach``1(HashSet{``0},Predicate{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsEach<T>(HashSet<T>, Predicate<T>)","nameWithType":"HashSetExtensions.IsEach<T>(HashSet<T>, Predicate<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.HashSetExtensions","remarks":null,"summary":"\nChecks if each element in the set satisfies a predicate.\n","syntax":{"content":"public static bool IsEach<T>(this HashSet<T> set, Predicate<T> predicate)","parameters":[{"description":"The set to check.","id":"set","type":"Global.HashSet{{T}}"},{"description":"The predicate to use.","id":"predicate","type":"Global.Predicate{{T}}"}],"return":{"description":"True if all elements in the set satisfy the predicate.","type":"System.Boolean"},"typeParameters":[{"description":"The type of the elements in the set.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.HashSetExtensions.IsEach``1(HashSet{``0},Predicate{``0})"}]},{"items":[{"children":["Zigurous.DataStructures.Identifier.Guid","Zigurous.DataStructures.Identifier.UnixTime"],"id":"Identifier","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"Identifier","nameWithType":"Identifier","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nGenerates identifiers.\n","syntax":{"content":"public static class Identifier","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.DataStructures.Identifier"},{"children":null,"id":"Guid","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Guid()","nameWithType":"Identifier.Guid()","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Identifier","remarks":null,"summary":"\nCreates a new GUID string similar to the following\n&quot;0f8fad5b-d9cb-469f-a165-70867728950e&quot;.\n","syntax":{"content":"public static string Guid()","parameters":null,"return":{"description":"The generated GUID.","type":"System.String"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Identifier.Guid"},{"children":null,"id":"UnixTime","implements":null,"inheritance":null,"inheritedMembers":null,"name":"UnixTime()","nameWithType":"Identifier.UnixTime()","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Identifier","remarks":"\nThis should not be used to guarantee uniqueness since ids generated\nwithin the same cycle will usually be identical.\n","summary":"\nCreates an identifier based on unix time. Since time is always\nincreasing, this value will be different than generations made in\nprevious cycles.\n","syntax":{"content":"public static long UnixTime()","parameters":null,"return":{"description":"The generated identifier.","type":"System.Int64"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Identifier.UnixTime"}]},{"items":[{"children":["Zigurous.DataStructures.IModular`1.IsRegistered(`0)","Zigurous.DataStructures.IModular`1.Register(`0)","Zigurous.DataStructures.IModular`1.Unregister(`0)"],"id":"IModular`1","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IModular<T>","nameWithType":"IModular<T>","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nA type that can register and unregister modules.\n","syntax":{"content":"public interface IModular<T>\n    where T : class","parameters":null,"return":null,"typeParameters":[{"description":"The type of module that can be registered.","id":"T"}]},"type":"Interface","uid":"Zigurous.DataStructures.IModular`1"},{"children":null,"id":"Register(`0)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Register(T)","nameWithType":"IModular<T>.Register(T)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.IModular`1","remarks":null,"summary":"\nRegisters a module to the entity.\n","syntax":{"content":"bool Register(T module)","parameters":[{"description":"The module to register.","id":"module","type":"{T}"}],"return":{"description":"True if the module was registered, false if the module cannot be registered.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.IModular`1.Register(`0)"},{"children":null,"id":"Unregister(`0)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Unregister(T)","nameWithType":"IModular<T>.Unregister(T)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.IModular`1","remarks":null,"summary":"\nUnregisters a module from the entity.\n","syntax":{"content":"bool Unregister(T module)","parameters":[{"description":"The module to unregister.","id":"module","type":"{T}"}],"return":{"description":"True if the module was unregistered, false if the module cannot be unregistered.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.IModular`1.Unregister(`0)"},{"children":null,"id":"IsRegistered(`0)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsRegistered(T)","nameWithType":"IModular<T>.IsRegistered(T)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.IModular`1","remarks":null,"summary":"\nChecks if a given module is registered.\n","syntax":{"content":"bool IsRegistered(T module)","parameters":[{"description":"The module to check for registration.","id":"module","type":"{T}"}],"return":{"description":"True if the module is registered, false if the module is not registered.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.IModular`1.IsRegistered(`0)"}]},{"items":[{"children":["Zigurous.DataStructures.IntAccumulator.Add(System.Int32)","Zigurous.DataStructures.IntAccumulator.Subtract(System.Int32)"],"id":"IntAccumulator","implements":null,"inheritance":["System.Object","Zigurous.DataStructures.ValueAccumulator{System.Int32}"],"inheritedMembers":["Zigurous.DataStructures.ValueAccumulator{System.Int32}.values","Zigurous.DataStructures.ValueAccumulator{System.Int32}.total","Zigurous.DataStructures.ValueAccumulator{System.Int32}.count","Zigurous.DataStructures.ValueAccumulator{System.Int32}.defaultValue","Zigurous.DataStructures.ValueAccumulator{System.Int32}.GetValue(System.Int32)","Zigurous.DataStructures.ValueAccumulator{System.Int32}.SetValue(System.Int32,System.Int32)","Zigurous.DataStructures.ValueAccumulator{System.Int32}.RemoveValue(System.Int32)","Zigurous.DataStructures.ValueAccumulator{System.Int32}.Clear"],"name":"IntAccumulator","nameWithType":"IntAccumulator","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nAccumulates int values into a single total value.\n","syntax":{"content":"public sealed class IntAccumulator : ValueAccumulator<int>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.DataStructures.IntAccumulator"},{"children":null,"id":"Add(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Add(Int32)","nameWithType":"IntAccumulator.Add(Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.IntAccumulator","remarks":null,"summary":"\nIncreases the accumulated total by a given value.\n","syntax":{"content":"protected override int Add(int value)","parameters":[{"description":"The value to add to the total.","id":"value","type":"System.Int32"}],"return":{"description":"The new total value.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.IntAccumulator.Add(System.Int32)"},{"children":null,"id":"Subtract(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Subtract(Int32)","nameWithType":"IntAccumulator.Subtract(Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.IntAccumulator","remarks":null,"summary":"\nDecreases the accumulated total by a given value.\n","syntax":{"content":"protected override int Subtract(int value)","parameters":[{"description":"The value to subtract from the total.","id":"value","type":"System.Int32"}],"return":{"description":"The new total value.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.IntAccumulator.Subtract(System.Int32)"}]},{"items":[{"children":["Zigurous.DataStructures.IntRange.#ctor(System.Int32,System.Int32)","Zigurous.DataStructures.IntRange.Clamp(System.Int32)","Zigurous.DataStructures.IntRange.delta","Zigurous.DataStructures.IntRange.Includes(System.Int32)","Zigurous.DataStructures.IntRange.Includes(System.Int32,System.Boolean,System.Boolean)","Zigurous.DataStructures.IntRange.InverseLerp(System.Int32)","Zigurous.DataStructures.IntRange.Lerp(System.Single)","Zigurous.DataStructures.IntRange.max","Zigurous.DataStructures.IntRange.median","Zigurous.DataStructures.IntRange.min","Zigurous.DataStructures.IntRange.minMax","Zigurous.DataStructures.IntRange.negative","Zigurous.DataStructures.IntRange.one","Zigurous.DataStructures.IntRange.positive","Zigurous.DataStructures.IntRange.Random","Zigurous.DataStructures.IntRange.RandomInclusive","Zigurous.DataStructures.IntRange.zero"],"id":"IntRange","implements":["Zigurous.DataStructures.INumberRange{System.Int32}","Zigurous.DataStructures.IRange{System.Int32}"],"inheritance":null,"inheritedMembers":null,"name":"IntRange","nameWithType":"IntRange","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nA range of int values.\n","syntax":{"content":"[Serializable]\npublic struct IntRange : INumberRange<int>, IRange<int>","parameters":null,"return":null,"typeParameters":null},"type":"Struct","uid":"Zigurous.DataStructures.IntRange"},{"children":null,"id":"zero","implements":null,"inheritance":null,"inheritedMembers":null,"name":"zero","nameWithType":"IntRange.zero","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.IntRange","remarks":null,"summary":"\nShorthand for writing <code>IntRange(0, 0)</code>.\n","syntax":{"content":"public static readonly IntRange zero { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.IntRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.IntRange.zero"},{"children":null,"id":"one","implements":null,"inheritance":null,"inheritedMembers":null,"name":"one","nameWithType":"IntRange.one","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.IntRange","remarks":null,"summary":"\nShorthand for writing <code>IntRange(1, 1)</code>.\n","syntax":{"content":"public static readonly IntRange one { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.IntRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.IntRange.one"},{"children":null,"id":"positive","implements":null,"inheritance":null,"inheritedMembers":null,"name":"positive","nameWithType":"IntRange.positive","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.IntRange","remarks":null,"summary":"\nShorthand for writing <code>IntRange(0, int.MaxValue)</code>.\n","syntax":{"content":"public static readonly IntRange positive { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.IntRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.IntRange.positive"},{"children":null,"id":"negative","implements":null,"inheritance":null,"inheritedMembers":null,"name":"negative","nameWithType":"IntRange.negative","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.IntRange","remarks":null,"summary":"\nShorthand for writing <code>IntRange(int.MinValue, 0)</code>.\n","syntax":{"content":"public static readonly IntRange negative { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.IntRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.IntRange.negative"},{"children":null,"id":"minMax","implements":null,"inheritance":null,"inheritedMembers":null,"name":"minMax","nameWithType":"IntRange.minMax","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.IntRange","remarks":null,"summary":"\nShorthand for writing <code>IntRange(int.MinValue, int.MaxValue)</code>.\n","syntax":{"content":"public static readonly IntRange minMax { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.IntRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.IntRange.minMax"},{"children":null,"id":"min","implements":["Zigurous.DataStructures.IRange{System.Int32}.min"],"inheritance":null,"inheritedMembers":null,"name":"min","nameWithType":"IntRange.min","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.IntRange","remarks":null,"summary":"\nThe lower bound of the range.\n","syntax":{"content":"public int min { get; set; }","parameters":[],"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.IntRange.min"},{"children":null,"id":"max","implements":["Zigurous.DataStructures.IRange{System.Int32}.max"],"inheritance":null,"inheritedMembers":null,"name":"max","nameWithType":"IntRange.max","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.IntRange","remarks":null,"summary":"\nThe upper bound of the range.\n","syntax":{"content":"public int max { get; set; }","parameters":[],"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.IntRange.max"},{"children":null,"id":"delta","implements":["Zigurous.DataStructures.INumberRange{System.Int32}.delta"],"inheritance":null,"inheritedMembers":null,"name":"delta","nameWithType":"IntRange.delta","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.IntRange","remarks":null,"summary":"\nThe difference between the maximum and minimum values (Read only).\n","syntax":{"content":"public readonly int delta { get; }","parameters":[],"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.IntRange.delta"},{"children":null,"id":"median","implements":["Zigurous.DataStructures.INumberRange{System.Int32}.median"],"inheritance":null,"inheritedMembers":null,"name":"median","nameWithType":"IntRange.median","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.IntRange","remarks":null,"summary":"\nThe median value of the range (Read only).\n","syntax":{"content":"public readonly int median { get; }","parameters":[],"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.IntRange.median"},{"children":null,"id":"#ctor(System.Int32,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IntRange(Int32, Int32)","nameWithType":"IntRange.IntRange(Int32, Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.IntRange","remarks":null,"summary":"\nCreates a new range with the specified values.\n","syntax":{"content":"public IntRange(int min, int max)","parameters":[{"description":"The lower bound of the range.","id":"min","type":"System.Int32"},{"description":"The upper bound of the range.","id":"max","type":"System.Int32"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.DataStructures.IntRange.#ctor(System.Int32,System.Int32)"},{"children":null,"id":"Random","implements":["Zigurous.DataStructures.INumberRange{System.Int32}.Random"],"inheritance":null,"inheritedMembers":null,"name":"Random()","nameWithType":"IntRange.Random()","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.IntRange","remarks":null,"summary":"\nReturns a random value in the range [inclusive, exclusive).\n","syntax":{"content":"public int Random()","parameters":null,"return":{"description":"A random value in the range [inclusive, exclusive).","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.IntRange.Random"},{"children":null,"id":"RandomInclusive","implements":null,"inheritance":null,"inheritedMembers":null,"name":"RandomInclusive()","nameWithType":"IntRange.RandomInclusive()","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.IntRange","remarks":null,"summary":"\nReturns a random value in the range [inclusive, inclusive].\n","syntax":{"content":"public int RandomInclusive()","parameters":null,"return":{"description":"A random value in the range [inclusive, inclusive].","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.IntRange.RandomInclusive"},{"children":null,"id":"Includes(System.Int32)","implements":["Zigurous.DataStructures.IRange{System.Int32}.Includes(System.Int32)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Int32)","nameWithType":"IntRange.Includes(Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.IntRange","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(int value)","parameters":[{"description":"The value to check.","id":"value","type":"System.Int32"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.IntRange.Includes(System.Int32)"},{"children":null,"id":"Includes(System.Int32,System.Boolean,System.Boolean)","implements":["Zigurous.DataStructures.IRange{System.Int32}.Includes(System.Int32,System.Boolean,System.Boolean)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Int32, Boolean, Boolean)","nameWithType":"IntRange.Includes(Int32, Boolean, Boolean)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.IntRange","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(int value, bool includeMin, bool includeMax)","parameters":[{"description":"The value to check.","id":"value","type":"System.Int32"},{"description":"The minimum value is inclusive if true, exclusive if false.","id":"includeMin","type":"System.Boolean"},{"description":"The maximum value is inclusive if true, exclusive if false.","id":"includeMax","type":"System.Boolean"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.IntRange.Includes(System.Int32,System.Boolean,System.Boolean)"},{"children":null,"id":"Clamp(System.Int32)","implements":["Zigurous.DataStructures.INumberRange{System.Int32}.Clamp(System.Int32)"],"inheritance":null,"inheritedMembers":null,"name":"Clamp(Int32)","nameWithType":"IntRange.Clamp(Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.IntRange","remarks":null,"summary":"\nClamps a value to the range.\n","syntax":{"content":"public int Clamp(int value)","parameters":[{"description":"The value to clamp.","id":"value","type":"System.Int32"}],"return":{"description":"The clamped value.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.IntRange.Clamp(System.Int32)"},{"children":null,"id":"Lerp(System.Single)","implements":["Zigurous.DataStructures.INumberRange{System.Int32}.Lerp(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"Lerp(Single)","nameWithType":"IntRange.Lerp(Single)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.IntRange","remarks":null,"summary":"\nLinearly interpolates between the range by <code data-dev-comment-type=\"paramref\" class=\"paramref\">t</code>.\n","syntax":{"content":"public int Lerp(float t)","parameters":[{"description":"The interpolant value between [0..1].","id":"t","type":"System.Single"}],"return":{"description":"The interpolated value.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.IntRange.Lerp(System.Single)"},{"children":null,"id":"InverseLerp(System.Int32)","implements":["Zigurous.DataStructures.INumberRange{System.Int32}.InverseLerp(System.Int32)"],"inheritance":null,"inheritedMembers":null,"name":"InverseLerp(Int32)","nameWithType":"IntRange.InverseLerp(Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.IntRange","remarks":null,"summary":"\nCalculates the linear parameter t that produces the interpolant\nvalue within the range.\n","syntax":{"content":"public float InverseLerp(int value)","parameters":[{"description":"The value within the range you want to calculate.","id":"value","type":"System.Int32"}],"return":{"description":"The interpolant value between [0..1].","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.IntRange.InverseLerp(System.Int32)"}]},{"items":[{"children":["Zigurous.DataStructures.INumberRange`1.Clamp(`0)","Zigurous.DataStructures.INumberRange`1.delta","Zigurous.DataStructures.INumberRange`1.InverseLerp(`0)","Zigurous.DataStructures.INumberRange`1.Lerp(System.Single)","Zigurous.DataStructures.INumberRange`1.median","Zigurous.DataStructures.INumberRange`1.Random"],"id":"INumberRange`1","implements":null,"inheritance":null,"inheritedMembers":["Zigurous.DataStructures.IRange{{T}}.min","Zigurous.DataStructures.IRange{{T}}.max","Zigurous.DataStructures.IRange{{T}}.Includes({T})","Zigurous.DataStructures.IRange{{T}}.Includes({T},System.Boolean,System.Boolean)"],"name":"INumberRange<T>","nameWithType":"INumberRange<T>","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nA generic interface for a range of number values.\n","syntax":{"content":"public interface INumberRange<T> : IRange<T>","parameters":null,"return":null,"typeParameters":[{"description":"The type of values in the range.","id":"T"}]},"type":"Interface","uid":"Zigurous.DataStructures.INumberRange`1"},{"children":null,"id":"delta","implements":null,"inheritance":null,"inheritedMembers":null,"name":"delta","nameWithType":"INumberRange<T>.delta","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.INumberRange`1","remarks":null,"summary":"\nThe difference between the maximum and minimum values (Read only).\n","syntax":{"content":"T delta { get; }","parameters":[],"return":{"description":null,"type":"{T}"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.INumberRange`1.delta"},{"children":null,"id":"median","implements":null,"inheritance":null,"inheritedMembers":null,"name":"median","nameWithType":"INumberRange<T>.median","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.INumberRange`1","remarks":null,"summary":"\nThe median value of the range (Read only).\n","syntax":{"content":"T median { get; }","parameters":[],"return":{"description":null,"type":"{T}"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.INumberRange`1.median"},{"children":null,"id":"Random","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Random()","nameWithType":"INumberRange<T>.Random()","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.INumberRange`1","remarks":null,"summary":"\nReturns a random value in the range.\n","syntax":{"content":"T Random()","parameters":null,"return":{"description":"A random value in the range.","type":"{T}"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.INumberRange`1.Random"},{"children":null,"id":"Clamp(`0)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clamp(T)","nameWithType":"INumberRange<T>.Clamp(T)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.INumberRange`1","remarks":null,"summary":"\nClamps a value to the range.\n","syntax":{"content":"T Clamp(T value)","parameters":[{"description":"The value to clamp.","id":"value","type":"{T}"}],"return":{"description":"The clamped value.","type":"{T}"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.INumberRange`1.Clamp(`0)"},{"children":null,"id":"Lerp(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Lerp(Single)","nameWithType":"INumberRange<T>.Lerp(Single)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.INumberRange`1","remarks":null,"summary":"\nLinearly interpolates between the range by <code data-dev-comment-type=\"paramref\" class=\"paramref\">t</code>.\n","syntax":{"content":"T Lerp(float t)","parameters":[{"description":"The interpolant value between [0..1].","id":"t","type":"System.Single"}],"return":{"description":"The interpolated value.","type":"{T}"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.INumberRange`1.Lerp(System.Single)"},{"children":null,"id":"InverseLerp(`0)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"InverseLerp(T)","nameWithType":"INumberRange<T>.InverseLerp(T)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.INumberRange`1","remarks":null,"summary":"\nCalculates the linear parameter t that produces the interpolant\nvalue within the range.\n","syntax":{"content":"float InverseLerp(T value)","parameters":[{"description":"The value within the range you want to calculate.","id":"value","type":"{T}"}],"return":{"description":"The interpolant value between [0..1].","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.INumberRange`1.InverseLerp(`0)"}]},{"items":[{"children":["Zigurous.DataStructures.IObjectPool`1.Empty","Zigurous.DataStructures.IObjectPool`1.Recycle(`0)","Zigurous.DataStructures.IObjectPool`1.Retrieve"],"id":"IObjectPool`1","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IObjectPool<T>","nameWithType":"IObjectPool<T>","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nA type that can retrieve and recycle objects from a shared pool.\n","syntax":{"content":"public interface IObjectPool<T>\n    where T : class","parameters":null,"return":null,"typeParameters":[{"description":"The type of object to be pooled.","id":"T"}]},"type":"Interface","uid":"Zigurous.DataStructures.IObjectPool`1"},{"children":null,"id":"Retrieve","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Retrieve()","nameWithType":"IObjectPool<T>.Retrieve()","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.IObjectPool`1","remarks":null,"summary":"\nRemoves and returns an object from the pool.\n","syntax":{"content":"T Retrieve()","parameters":null,"return":{"description":"An object from the pool.","type":"{T}"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.IObjectPool`1.Retrieve"},{"children":null,"id":"Recycle(`0)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Recycle(T)","nameWithType":"IObjectPool<T>.Recycle(T)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.IObjectPool`1","remarks":null,"summary":"\nAdds an object back to the pool so it can be reused.\n","syntax":{"content":"void Recycle(T item)","parameters":[{"description":"The object to recycle.","id":"item","type":"{T}"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.IObjectPool`1.Recycle(`0)"},{"children":null,"id":"Empty","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Empty()","nameWithType":"IObjectPool<T>.Empty()","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.IObjectPool`1","remarks":null,"summary":"\nEmpties the pool of all objects.\n","syntax":{"content":"void Empty()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.IObjectPool`1.Empty"}]},{"items":[{"children":["Zigurous.DataStructures.IRange`1.Includes(`0)","Zigurous.DataStructures.IRange`1.Includes(`0,System.Boolean,System.Boolean)","Zigurous.DataStructures.IRange`1.max","Zigurous.DataStructures.IRange`1.min"],"id":"IRange`1","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IRange<T>","nameWithType":"IRange<T>","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nA generic interface for a range of values.\n","syntax":{"content":"public interface IRange<T>","parameters":null,"return":null,"typeParameters":[{"description":"The type of values in the range.","id":"T"}]},"type":"Interface","uid":"Zigurous.DataStructures.IRange`1"},{"children":null,"id":"min","implements":null,"inheritance":null,"inheritedMembers":null,"name":"min","nameWithType":"IRange<T>.min","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.IRange`1","remarks":null,"summary":"\nThe lower bound of the range.\n","syntax":{"content":"T min { get; set; }","parameters":[],"return":{"description":null,"type":"{T}"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.IRange`1.min"},{"children":null,"id":"max","implements":null,"inheritance":null,"inheritedMembers":null,"name":"max","nameWithType":"IRange<T>.max","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.IRange`1","remarks":null,"summary":"\nThe upper bound of the range.\n","syntax":{"content":"T max { get; set; }","parameters":[],"return":{"description":null,"type":"{T}"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.IRange`1.max"},{"children":null,"id":"Includes(`0)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Includes(T)","nameWithType":"IRange<T>.Includes(T)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.IRange`1","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"bool Includes(T value)","parameters":[{"description":"The value to check.","id":"value","type":"{T}"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.IRange`1.Includes(`0)"},{"children":null,"id":"Includes(`0,System.Boolean,System.Boolean)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Includes(T, Boolean, Boolean)","nameWithType":"IRange<T>.Includes(T, Boolean, Boolean)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.IRange`1","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"bool Includes(T value, bool includeMin, bool includeMax)","parameters":[{"description":"The value to check.","id":"value","type":"{T}"},{"description":"The minimum value is inclusive if true, exclusive if false.","id":"includeMin","type":"System.Boolean"},{"description":"The maximum value is inclusive if true, exclusive if false.","id":"includeMax","type":"System.Boolean"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.IRange`1.Includes(`0,System.Boolean,System.Boolean)"}]},{"items":[{"children":[],"id":"LateUpdateStrategy","implements":null,"inheritance":["System.Object","Zigurous.DataStructures.UpdateStrategy"],"inheritedMembers":["Zigurous.DataStructures.UpdateStrategy.Execute(System.Single)","Zigurous.DataStructures.UpdateStrategy.Register(Zigurous.DataStructures.UpdateStrategy.UpdateAction)","Zigurous.DataStructures.UpdateStrategy.Unregister(Zigurous.DataStructures.UpdateStrategy.UpdateAction)"],"name":"LateUpdateStrategy","nameWithType":"LateUpdateStrategy","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nAn update strategy executed during the late update loop.\n","syntax":{"content":"public sealed class LateUpdateStrategy : UpdateStrategy","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.DataStructures.LateUpdateStrategy"}]},{"items":[{"children":[],"id":"ListExtensions.Reducer`2","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ListExtensions.Reducer<TSum, TItem>","nameWithType":"ListExtensions.Reducer<TSum, TItem>","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nA function delegate that reduces a list into a single value.\n","syntax":{"content":"public delegate TSum Reducer<TSum, TItem>(TSum sum, TItem item);","parameters":[{"description":"The current sum.","id":"sum","type":"{TSum}"},{"description":"The current item being reduced.","id":"item","type":"{TItem}"}],"return":{"description":"The reduced value.","type":"{TSum}"},"typeParameters":[{"description":"The type of the reduced value.","id":"TSum"},{"description":"The type of items in the list.","id":"TItem"}]},"type":"Delegate","uid":"Zigurous.DataStructures.ListExtensions.Reducer`2"}]},{"items":[{"children":["Zigurous.DataStructures.Modules`1.#ctor(`0[],Action{`0},Action{`0})","Zigurous.DataStructures.Modules`1.#ctor(System.Int32,Action{`0},Action{`0})","Zigurous.DataStructures.Modules`1.count","Zigurous.DataStructures.Modules`1.IsRegistered(`0)","Zigurous.DataStructures.Modules`1.Item(System.Int32)","Zigurous.DataStructures.Modules`1.items","Zigurous.DataStructures.Modules`1.Register(`0)","Zigurous.DataStructures.Modules`1.registered","Zigurous.DataStructures.Modules`1.Unregister(`0)","Zigurous.DataStructures.Modules`1.unregistered"],"id":"Modules`1","implements":["Zigurous.DataStructures.IModular{{T}}"],"inheritance":["System.Object"],"inheritedMembers":null,"name":"Modules<T>","nameWithType":"Modules<T>","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nManages a list of registered entity modules.\n","syntax":{"content":"public sealed class Modules<T> : IModular<T> where T : class","parameters":null,"return":null,"typeParameters":[{"description":"The type of entity to manage.","id":"T"}]},"type":"Class","uid":"Zigurous.DataStructures.Modules`1"},{"children":null,"id":"items","implements":null,"inheritance":null,"inheritedMembers":null,"name":"items","nameWithType":"Modules<T>.items","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Modules`1","remarks":null,"summary":"\nThe modules registered to the entity (Read only).\n","syntax":{"content":"public List<T> items { get; }","parameters":[],"return":{"description":null,"type":"Global.List{{T}}"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Modules`1.items"},{"children":null,"id":"registered","implements":null,"inheritance":null,"inheritedMembers":null,"name":"registered","nameWithType":"Modules<T>.registered","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Modules`1","remarks":null,"summary":"\nA callback invoked when a module is registered.\n","syntax":{"content":"public Action<T> registered","parameters":null,"return":{"description":null,"type":"Global.Action{{T}}"},"typeParameters":null},"type":"Field","uid":"Zigurous.DataStructures.Modules`1.registered"},{"children":null,"id":"unregistered","implements":null,"inheritance":null,"inheritedMembers":null,"name":"unregistered","nameWithType":"Modules<T>.unregistered","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Modules`1","remarks":null,"summary":"\nA callback invoked when a module is unregistered.\n","syntax":{"content":"public Action<T> unregistered","parameters":null,"return":{"description":null,"type":"Global.Action{{T}}"},"typeParameters":null},"type":"Field","uid":"Zigurous.DataStructures.Modules`1.unregistered"},{"children":null,"id":"count","implements":null,"inheritance":null,"inheritedMembers":null,"name":"count","nameWithType":"Modules<T>.count","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Modules`1","remarks":null,"summary":"\nThe amount of modules registered to the entity (Read only).\n","syntax":{"content":"public int count { get; }","parameters":[],"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Modules`1.count"},{"children":null,"id":"Item(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Item[Int32]","nameWithType":"Modules<T>.Item[Int32]","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Modules`1","remarks":null,"summary":"\nReturns the module at the specified index.\n","syntax":{"content":"public T this[int index] { get; }","parameters":[{"description":"The index of the module to return.","id":"index","type":"System.Int32"}],"return":{"description":null,"type":"{T}"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Modules`1.Item(System.Int32)"},{"children":null,"id":"#ctor(System.Int32,Action{`0},Action{`0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Modules(Int32, Action<T>, Action<T>)","nameWithType":"Modules<T>.Modules(Int32, Action<T>, Action<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Modules`1","remarks":null,"summary":"\nCreates a new module collection with a set capacity.\n","syntax":{"content":"public Modules(int capacity, Action<T> registered = null, Action<T> unregistered = null)","parameters":[{"description":"The initial capacity of the collection.","id":"capacity","type":"System.Int32"},{"description":"The callback invoked when a module is registered.","id":"registered","type":"Global.Action{{T}}"},{"description":"The callback invoked when a module is unregistered.","id":"unregistered","type":"Global.Action{{T}}"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.DataStructures.Modules`1.#ctor(System.Int32,Action{`0},Action{`0})"},{"children":null,"id":"#ctor(`0[],Action{`0},Action{`0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Modules(T[], Action<T>, Action<T>)","nameWithType":"Modules<T>.Modules(T[], Action<T>, Action<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Modules`1","remarks":null,"summary":"\nCreates a new module collection and pre-registers a list of items.\n","syntax":{"content":"public Modules(T[] items, Action<T> registered = null, Action<T> unregistered = null)","parameters":[{"description":"The items to pre-register.","id":"items","type":"{T}[]"},{"description":"A callback invoked when a module is registered.","id":"registered","type":"Global.Action{{T}}"},{"description":"A callback invoked when a module is unregistered.","id":"unregistered","type":"Global.Action{{T}}"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.DataStructures.Modules`1.#ctor(`0[],Action{`0},Action{`0})"},{"children":null,"id":"Register(`0)","implements":["Zigurous.DataStructures.IModular{{T}}.Register({T})"],"inheritance":null,"inheritedMembers":null,"name":"Register(T)","nameWithType":"Modules<T>.Register(T)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Modules`1","remarks":null,"summary":"\nRegisters a module to the entity.\n","syntax":{"content":"public bool Register(T module)","parameters":[{"description":"The module to register.","id":"module","type":"{T}"}],"return":{"description":"True if the module was registered, false if the module cannot be registered.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Modules`1.Register(`0)"},{"children":null,"id":"Unregister(`0)","implements":["Zigurous.DataStructures.IModular{{T}}.Unregister({T})"],"inheritance":null,"inheritedMembers":null,"name":"Unregister(T)","nameWithType":"Modules<T>.Unregister(T)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Modules`1","remarks":null,"summary":"\nUnregisters a module from the entity.\n","syntax":{"content":"public bool Unregister(T module)","parameters":[{"description":"The module to unregister.","id":"module","type":"{T}"}],"return":{"description":"True if the module was unregistered, false if the module cannot be unregistered.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Modules`1.Unregister(`0)"},{"children":null,"id":"IsRegistered(`0)","implements":["Zigurous.DataStructures.IModular{{T}}.IsRegistered({T})"],"inheritance":null,"inheritedMembers":null,"name":"IsRegistered(T)","nameWithType":"Modules<T>.IsRegistered(T)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Modules`1","remarks":null,"summary":"\nChecks if a given module is registered.\n","syntax":{"content":"public bool IsRegistered(T module)","parameters":[{"description":"The module to check for registration.","id":"module","type":"{T}"}],"return":{"description":"True if the module is registered, false if the module is not registered.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Modules`1.IsRegistered(`0)"}]},{"items":[{"children":[],"id":"NormalUpdateStrategy","implements":null,"inheritance":["System.Object","Zigurous.DataStructures.UpdateStrategy"],"inheritedMembers":["Zigurous.DataStructures.UpdateStrategy.Execute(System.Single)","Zigurous.DataStructures.UpdateStrategy.Register(Zigurous.DataStructures.UpdateStrategy.UpdateAction)","Zigurous.DataStructures.UpdateStrategy.Unregister(Zigurous.DataStructures.UpdateStrategy.UpdateAction)"],"name":"NormalUpdateStrategy","nameWithType":"NormalUpdateStrategy","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nAn update strategy executed during the normal update loop.\n","syntax":{"content":"public sealed class NormalUpdateStrategy : UpdateStrategy","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.DataStructures.NormalUpdateStrategy"}]},{"items":[{"children":[],"id":"ObjectPool`1.Generator","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ObjectPool<T>.Generator","nameWithType":"ObjectPool<T>.Generator","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nA function delegate that creates a new instance of <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code>.\n","syntax":{"content":"public delegate T Generator();","parameters":null,"return":{"description":"A new instance of <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code>.","type":"{T}"},"typeParameters":null},"type":"Delegate","uid":"Zigurous.DataStructures.ObjectPool`1.Generator"}]},{"items":[{"children":["Zigurous.DataStructures.ObjectPool`1.#ctor(System.Int32)","Zigurous.DataStructures.ObjectPool`1.#ctor(System.Int32,System.Int32,System.Boolean)","Zigurous.DataStructures.ObjectPool`1.#ctor(Zigurous.DataStructures.ObjectPool{`0}.Generator,System.Int32)","Zigurous.DataStructures.ObjectPool`1.#ctor(Zigurous.DataStructures.ObjectPool{`0}.Generator,System.Int32,System.Int32,System.Boolean)","Zigurous.DataStructures.ObjectPool`1.activeCount","Zigurous.DataStructures.ObjectPool`1.activeItems","Zigurous.DataStructures.ObjectPool`1.availableCount","Zigurous.DataStructures.ObjectPool`1.Dispose","Zigurous.DataStructures.ObjectPool`1.Dispose(Action{`0})","Zigurous.DataStructures.ObjectPool`1.Empty","Zigurous.DataStructures.ObjectPool`1.Empty(Action{`0})","Zigurous.DataStructures.ObjectPool`1.generator","Zigurous.DataStructures.ObjectPool`1.maxCapacity","Zigurous.DataStructures.ObjectPool`1.pool","Zigurous.DataStructures.ObjectPool`1.Recycle(`0)","Zigurous.DataStructures.ObjectPool`1.Retrieve","Zigurous.DataStructures.ObjectPool`1.reuseActive"],"id":"ObjectPool`1","implements":["Zigurous.DataStructures.IObjectPool{{T}}","Global.IDisposable"],"inheritance":["System.Object"],"inheritedMembers":null,"name":"ObjectPool<T>","nameWithType":"ObjectPool<T>","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nReuses objects from a shared pool to prevent instantiating new objects.\nThe object pool can have a set capacity or it can grow in size.\nOptionally, objects that are currently active can be reused when the\npool has reached capacity.\n","syntax":{"content":"public sealed class ObjectPool<T> : IObjectPool<T> where T : class","parameters":null,"return":null,"typeParameters":[{"description":"The type of object to pool.","id":"T"}]},"type":"Class","uid":"Zigurous.DataStructures.ObjectPool`1"},{"children":null,"id":"pool","implements":null,"inheritance":null,"inheritedMembers":null,"name":"pool","nameWithType":"ObjectPool<T>.pool","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ObjectPool`1","remarks":null,"summary":"\nThe list of all objects waiting to be reused (Read only).\n","syntax":{"content":"public Queue<T> pool { get; }","parameters":[],"return":{"description":null,"type":"Global.Queue{{T}}"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.ObjectPool`1.pool"},{"children":null,"id":"activeItems","implements":null,"inheritance":null,"inheritedMembers":null,"name":"activeItems","nameWithType":"ObjectPool<T>.activeItems","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ObjectPool`1","remarks":null,"summary":"\nThe list of objects currently being used (Read only).\n","syntax":{"content":"public List<T> activeItems { get; }","parameters":[],"return":{"description":null,"type":"Global.List{{T}}"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.ObjectPool`1.activeItems"},{"children":null,"id":"activeCount","implements":null,"inheritance":null,"inheritedMembers":null,"name":"activeCount","nameWithType":"ObjectPool<T>.activeCount","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ObjectPool`1","remarks":null,"summary":"\nThe number of objects currently being used (Read only).\n","syntax":{"content":"public int activeCount { get; }","parameters":[],"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.ObjectPool`1.activeCount"},{"children":null,"id":"availableCount","implements":null,"inheritance":null,"inheritedMembers":null,"name":"availableCount","nameWithType":"ObjectPool<T>.availableCount","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ObjectPool`1","remarks":null,"summary":"\nThe number of objects available to be reused (Read only).\n","syntax":{"content":"public int availableCount { get; }","parameters":[],"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.ObjectPool`1.availableCount"},{"children":null,"id":"maxCapacity","implements":null,"inheritance":null,"inheritedMembers":null,"name":"maxCapacity","nameWithType":"ObjectPool<T>.maxCapacity","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ObjectPool`1","remarks":null,"summary":"\nThe maximum number of objects that can be generated.\n","syntax":{"content":"public int maxCapacity { get; set; }","parameters":[],"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.ObjectPool`1.maxCapacity"},{"children":null,"id":"reuseActive","implements":null,"inheritance":null,"inheritedMembers":null,"name":"reuseActive","nameWithType":"ObjectPool<T>.reuseActive","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ObjectPool`1","remarks":null,"summary":"\nWhether active objects should be reused when the object pool has\nreached capacity.\n","syntax":{"content":"public bool reuseActive { get; set; }","parameters":[],"return":{"description":null,"type":"System.Boolean"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.ObjectPool`1.reuseActive"},{"children":null,"id":"generator","implements":null,"inheritance":null,"inheritedMembers":null,"name":"generator","nameWithType":"ObjectPool<T>.generator","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ObjectPool`1","remarks":null,"summary":"\nThe function that generates a new object.\n","syntax":{"content":"public ObjectPool<T>.Generator generator { get; set; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.ObjectPool`1.Generator"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.ObjectPool`1.generator"},{"children":null,"id":"#ctor(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ObjectPool(Int32)","nameWithType":"ObjectPool<T>.ObjectPool(Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ObjectPool`1","remarks":null,"summary":"\nCreates a new object pool with an initial capacity. New objects are\ncreated as needed using the object type default value.\n","syntax":{"content":"public ObjectPool(int initialCapacity)","parameters":[{"description":"The initial capacity of the pool.","id":"initialCapacity","type":"System.Int32"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.DataStructures.ObjectPool`1.#ctor(System.Int32)"},{"children":null,"id":"#ctor(System.Int32,System.Int32,System.Boolean)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ObjectPool(Int32, Int32, Boolean)","nameWithType":"ObjectPool<T>.ObjectPool(Int32, Int32, Boolean)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ObjectPool`1","remarks":null,"summary":"\nCreates a new object pool with an initial capacity and max capacity.\nOptionally active objects can be reused when the pool has reached\nmax capacity. New objects are created as needed using the object\ntype default value.\n","syntax":{"content":"public ObjectPool(int initialCapacity, int maxCapacity, bool reuseActive = false)","parameters":[{"description":"The initial capacity of the pool.","id":"initialCapacity","type":"System.Int32"},{"description":"The maximum number of objects that can be generated.","id":"maxCapacity","type":"System.Int32"},{"description":"Whether active objects should be reused when the object pool has reached max capacity.","id":"reuseActive","type":"System.Boolean"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.DataStructures.ObjectPool`1.#ctor(System.Int32,System.Int32,System.Boolean)"},{"children":null,"id":"#ctor(Zigurous.DataStructures.ObjectPool{`0}.Generator,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ObjectPool(ObjectPool<T>.Generator, Int32)","nameWithType":"ObjectPool<T>.ObjectPool(ObjectPool<T>.Generator, Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ObjectPool`1","remarks":null,"summary":"\nCreates a new object pool with a given generator function and\ninitial capacity. New objects are created as needed with no max\ncapacity.\n","syntax":{"content":"public ObjectPool(ObjectPool<T>.Generator generator, int initialCapacity)","parameters":[{"description":"The function delegate that generates a new object.","id":"generator","type":"Zigurous.DataStructures.ObjectPool`1.Generator"},{"description":"The initial capacity of the pool.","id":"initialCapacity","type":"System.Int32"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.DataStructures.ObjectPool`1.#ctor(Zigurous.DataStructures.ObjectPool{`0}.Generator,System.Int32)"},{"children":null,"id":"#ctor(Zigurous.DataStructures.ObjectPool{`0}.Generator,System.Int32,System.Int32,System.Boolean)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ObjectPool(ObjectPool<T>.Generator, Int32, Int32, Boolean)","nameWithType":"ObjectPool<T>.ObjectPool(ObjectPool<T>.Generator, Int32, Int32, Boolean)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ObjectPool`1","remarks":null,"summary":"\nCreates a new object pool with a given generator function and set\ncapacity limits. Optionally active objects can be reused when the\npool has reached max capacity.\n","syntax":{"content":"public ObjectPool(ObjectPool<T>.Generator generator, int initialCapacity, int maxCapacity, bool reuseActive = false)","parameters":[{"description":"The function delegate that generates a new object.","id":"generator","type":"Zigurous.DataStructures.ObjectPool`1.Generator"},{"description":"The initial capacity of the pool.","id":"initialCapacity","type":"System.Int32"},{"description":"The maximum number of objects that can be generated.","id":"maxCapacity","type":"System.Int32"},{"description":"Whether active objects should be reused when the object pool has reached max capacity.","id":"reuseActive","type":"System.Boolean"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.DataStructures.ObjectPool`1.#ctor(Zigurous.DataStructures.ObjectPool{`0}.Generator,System.Int32,System.Int32,System.Boolean)"},{"children":null,"id":"Dispose","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Dispose()","nameWithType":"ObjectPool<T>.Dispose()","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ObjectPool`1","remarks":null,"summary":"\nDisposes of all class resources.\n","syntax":{"content":"public void Dispose()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.ObjectPool`1.Dispose"},{"children":null,"id":"Dispose(Action{`0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Dispose(Action<T>)","nameWithType":"ObjectPool<T>.Dispose(Action<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ObjectPool`1","remarks":"\nThe cleanup function is useful, for example, if you want to destroy\nthe objects when the pool is disposed.\n","summary":"\nDisposes of all class resources and invokes a cleanup function on\neach object in the pool.\n","syntax":{"content":"public void Dispose(Action<T> cleanup)","parameters":[{"description":"The cleanup function to invoke on each object.","id":"cleanup","type":"Global.Action{{T}}"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.ObjectPool`1.Dispose(Action{`0})"},{"children":null,"id":"Retrieve","implements":["Zigurous.DataStructures.IObjectPool{{T}}.Retrieve"],"inheritance":null,"inheritedMembers":null,"name":"Retrieve()","nameWithType":"ObjectPool<T>.Retrieve()","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ObjectPool`1","remarks":null,"summary":"\nRemoves and returns an object from the pool. If there are no\navailable objects in the pool, either a new object will be generated\nor the oldest object will be reused depending upon how the object\npool is configured.\n","syntax":{"content":"public T Retrieve()","parameters":null,"return":{"description":"An object from the pool.","type":"{T}"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.ObjectPool`1.Retrieve"},{"children":null,"id":"Recycle(`0)","implements":["Zigurous.DataStructures.IObjectPool{{T}}.Recycle({T})"],"inheritance":null,"inheritedMembers":null,"name":"Recycle(T)","nameWithType":"ObjectPool<T>.Recycle(T)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ObjectPool`1","remarks":null,"summary":"\nAdds an object back to the pool so it can be reused.\n","syntax":{"content":"public void Recycle(T item)","parameters":[{"description":"The object to recycle.","id":"item","type":"{T}"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.ObjectPool`1.Recycle(`0)"},{"children":null,"id":"Empty","implements":["Zigurous.DataStructures.IObjectPool{{T}}.Empty"],"inheritance":null,"inheritedMembers":null,"name":"Empty()","nameWithType":"ObjectPool<T>.Empty()","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ObjectPool`1","remarks":null,"summary":"\nEmpties the pool of all objects.\n","syntax":{"content":"public void Empty()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.ObjectPool`1.Empty"},{"children":null,"id":"Empty(Action{`0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Empty(Action<T>)","nameWithType":"ObjectPool<T>.Empty(Action<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ObjectPool`1","remarks":"\nThe cleanup function is useful, for example, if you want to destroy\nthe objects when the pool is emptied.\n","summary":"\nEmpties the pool of all objects and invokes a cleanup function on\neach object.\n","syntax":{"content":"public void Empty(Action<T> cleanup)","parameters":[{"description":"The cleanup function to invoke on each object.","id":"cleanup","type":"Global.Action{{T}}"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.ObjectPool`1.Empty(Action{`0})"}]},{"items":[{"children":["Zigurous.DataStructures.Quantity`1.#ctor(`0,System.Int32)","Zigurous.DataStructures.Quantity`1.amount","Zigurous.DataStructures.Quantity`1.entity","Zigurous.DataStructures.Quantity`1.Equals(System.Object)","Zigurous.DataStructures.Quantity`1.Equals(Zigurous.DataStructures.Quantity{`0})","Zigurous.DataStructures.Quantity`1.GetHashCode","Zigurous.DataStructures.Quantity`1.op_Equality(Zigurous.DataStructures.Quantity{`0},Zigurous.DataStructures.Quantity{`0})","Zigurous.DataStructures.Quantity`1.op_Inequality(Zigurous.DataStructures.Quantity{`0},Zigurous.DataStructures.Quantity{`0})","Zigurous.DataStructures.Quantity`1.ToString"],"id":"Quantity`1","implements":["Global.IEquatable{Zigurous.DataStructures.Quantity`1}"],"inheritance":null,"inheritedMembers":null,"name":"Quantity<T>","nameWithType":"Quantity<T>","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nStores a quantity of a given entity type.\n","syntax":{"content":"[Serializable]\npublic struct Quantity<T>\n    where T : IEquatable<T>","parameters":null,"return":null,"typeParameters":[{"description":"The type of entity being counted.","id":"T"}]},"type":"Struct","uid":"Zigurous.DataStructures.Quantity`1"},{"children":null,"id":"entity","implements":null,"inheritance":null,"inheritedMembers":null,"name":"entity","nameWithType":"Quantity<T>.entity","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Quantity`1","remarks":null,"summary":"\nThe entity being counted.\n","syntax":{"content":"public T entity","parameters":null,"return":{"description":null,"type":"{T}"},"typeParameters":null},"type":"Field","uid":"Zigurous.DataStructures.Quantity`1.entity"},{"children":null,"id":"amount","implements":null,"inheritance":null,"inheritedMembers":null,"name":"amount","nameWithType":"Quantity<T>.amount","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Quantity`1","remarks":null,"summary":"\nThe number of entities.\n","syntax":{"content":"public int amount","parameters":null,"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Field","uid":"Zigurous.DataStructures.Quantity`1.amount"},{"children":null,"id":"#ctor(`0,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Quantity(T, Int32)","nameWithType":"Quantity<T>.Quantity(T, Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Quantity`1","remarks":null,"summary":"\nCreates a new quantity with the specified amount of a given entity.\n","syntax":{"content":"public Quantity(T entity, int amount)","parameters":[{"description":"The entity being counted.","id":"entity","type":"{T}"},{"description":"The amount of entities.","id":"amount","type":"System.Int32"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.DataStructures.Quantity`1.#ctor(`0,System.Int32)"},{"children":null,"id":"Equals(Zigurous.DataStructures.Quantity{`0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Equals(Quantity<T>)","nameWithType":"Quantity<T>.Equals(Quantity<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Quantity`1","remarks":null,"summary":"\nDetermines if the quantity is equal to another quantity.\n","syntax":{"content":"public bool Equals(Quantity<T> other)","parameters":[{"description":"The quantity to compare to.","id":"other","type":"Zigurous.DataStructures.Quantity`1"}],"return":{"description":"True if the quantities are equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Quantity`1.Equals(Zigurous.DataStructures.Quantity{`0})"},{"children":null,"id":"Equals(System.Object)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Equals(Object)","nameWithType":"Quantity<T>.Equals(Object)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Quantity`1","remarks":null,"summary":"\nDetermines if the quantity is equal to another quantity.\n","syntax":{"content":"public override bool Equals(object other)","parameters":[{"description":"The object to compare to.","id":"other","type":"System.Object"}],"return":{"description":"True if the quantities are equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Quantity`1.Equals(System.Object)"},{"children":null,"id":"GetHashCode","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetHashCode()","nameWithType":"Quantity<T>.GetHashCode()","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Quantity`1","remarks":null,"summary":"\nReturns the hash code of the quantity.\n","syntax":{"content":"public override int GetHashCode()","parameters":null,"return":{"description":"The hash code of the quantity.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Quantity`1.GetHashCode"},{"children":null,"id":"ToString","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ToString()","nameWithType":"Quantity<T>.ToString()","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Quantity`1","remarks":null,"summary":"\nConverts the quantity to a string.\n","syntax":{"content":"public override string ToString()","parameters":null,"return":{"description":"The quantity as a string.","type":"System.String"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Quantity`1.ToString"},{"children":null,"id":"op_Equality(Zigurous.DataStructures.Quantity{`0},Zigurous.DataStructures.Quantity{`0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Equality(Quantity<T>, Quantity<T>)","nameWithType":"Quantity<T>.Equality(Quantity<T>, Quantity<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Quantity`1","remarks":null,"summary":"\nDetermines if two quantities are equal.\n","syntax":{"content":"public static bool operator ==(Quantity<T> lhs, Quantity<T> rhs)","parameters":[{"description":"The first quantity to compare.","id":"lhs","type":"Zigurous.DataStructures.Quantity`1"},{"description":"The second quantity to compare.","id":"rhs","type":"Zigurous.DataStructures.Quantity`1"}],"return":{"description":"True if the quantities are equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Operator","uid":"Zigurous.DataStructures.Quantity`1.op_Equality(Zigurous.DataStructures.Quantity{`0},Zigurous.DataStructures.Quantity{`0})"},{"children":null,"id":"op_Inequality(Zigurous.DataStructures.Quantity{`0},Zigurous.DataStructures.Quantity{`0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Inequality(Quantity<T>, Quantity<T>)","nameWithType":"Quantity<T>.Inequality(Quantity<T>, Quantity<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Quantity`1","remarks":null,"summary":"\nDetermines if two quantities are not equal.\n","syntax":{"content":"public static bool operator !=(Quantity<T> lhs, Quantity<T> rhs)","parameters":[{"description":"The first quantity to compare.","id":"lhs","type":"Zigurous.DataStructures.Quantity`1"},{"description":"The second quantity to compare.","id":"rhs","type":"Zigurous.DataStructures.Quantity`1"}],"return":{"description":"True if the quantities are not equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Operator","uid":"Zigurous.DataStructures.Quantity`1.op_Inequality(Zigurous.DataStructures.Quantity{`0},Zigurous.DataStructures.Quantity{`0})"}]},{"items":[{"children":["Zigurous.DataStructures.QuaternionAccumulator.Add(Quaternion)","Zigurous.DataStructures.QuaternionAccumulator.defaultValue","Zigurous.DataStructures.QuaternionAccumulator.Subtract(Quaternion)"],"id":"QuaternionAccumulator","implements":null,"inheritance":["System.Object","Zigurous.DataStructures.ValueAccumulator{Quaternion}"],"inheritedMembers":["Zigurous.DataStructures.ValueAccumulator{Quaternion}.values","Zigurous.DataStructures.ValueAccumulator{Quaternion}.total","Zigurous.DataStructures.ValueAccumulator{Quaternion}.count","Zigurous.DataStructures.ValueAccumulator{Quaternion}.GetValue(System.Int32)","Zigurous.DataStructures.ValueAccumulator{Quaternion}.SetValue(System.Int32,Quaternion)","Zigurous.DataStructures.ValueAccumulator{Quaternion}.RemoveValue(System.Int32)","Zigurous.DataStructures.ValueAccumulator{Quaternion}.Clear"],"name":"QuaternionAccumulator","nameWithType":"QuaternionAccumulator","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nAccumulates Quaternion values into a single total value.\n","syntax":{"content":"public sealed class QuaternionAccumulator : ValueAccumulator<Quaternion>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.DataStructures.QuaternionAccumulator"},{"children":null,"id":"defaultValue","implements":null,"inheritance":null,"inheritedMembers":null,"name":"defaultValue","nameWithType":"QuaternionAccumulator.defaultValue","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.QuaternionAccumulator","remarks":null,"summary":"\nThe default value of <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code>.\n","syntax":{"content":"protected override Quaternion defaultValue { get; }","parameters":[],"return":{"description":null,"type":"Global.Quaternion"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.QuaternionAccumulator.defaultValue"},{"children":null,"id":"Add(Quaternion)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Add(Quaternion)","nameWithType":"QuaternionAccumulator.Add(Quaternion)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.QuaternionAccumulator","remarks":null,"summary":"\nIncreases the accumulated total by a given value.\n","syntax":{"content":"protected override Quaternion Add(Quaternion value)","parameters":[{"description":"The value to add to the total.","id":"value","type":"Global.Quaternion"}],"return":{"description":"The new total value.","type":"Global.Quaternion"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.QuaternionAccumulator.Add(Quaternion)"},{"children":null,"id":"Subtract(Quaternion)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Subtract(Quaternion)","nameWithType":"QuaternionAccumulator.Subtract(Quaternion)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.QuaternionAccumulator","remarks":null,"summary":"\nDecreases the accumulated total by a given value.\n","syntax":{"content":"protected override Quaternion Subtract(Quaternion value)","parameters":[{"description":"The value to subtract from the total.","id":"value","type":"Global.Quaternion"}],"return":{"description":"The new total value.","type":"Global.Quaternion"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.QuaternionAccumulator.Subtract(Quaternion)"}]},{"items":[{"children":["Zigurous.DataStructures.Range`1.#ctor(`0,`0)","Zigurous.DataStructures.Range`1.Includes(`0)","Zigurous.DataStructures.Range`1.Includes(`0,System.Boolean,System.Boolean)","Zigurous.DataStructures.Range`1.max","Zigurous.DataStructures.Range`1.min"],"id":"Range`1","implements":["Zigurous.DataStructures.IRange{{T}}"],"inheritance":null,"inheritedMembers":null,"name":"Range<T>","nameWithType":"Range<T>","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nA range of values of the given type.\n","syntax":{"content":"[Serializable]\npublic struct Range<T> : IRange<T> where T : IComparable<T>","parameters":null,"return":null,"typeParameters":[{"description":"The type of values in the range.","id":"T"}]},"type":"Struct","uid":"Zigurous.DataStructures.Range`1"},{"children":null,"id":"min","implements":["Zigurous.DataStructures.IRange{{T}}.min"],"inheritance":null,"inheritedMembers":null,"name":"min","nameWithType":"Range<T>.min","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Range`1","remarks":null,"summary":"\nThe lower bound of the range.\n","syntax":{"content":"public T min { get; set; }","parameters":[],"return":{"description":null,"type":"{T}"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Range`1.min"},{"children":null,"id":"max","implements":["Zigurous.DataStructures.IRange{{T}}.max"],"inheritance":null,"inheritedMembers":null,"name":"max","nameWithType":"Range<T>.max","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Range`1","remarks":null,"summary":"\nThe upper bound of the range.\n","syntax":{"content":"public T max { get; set; }","parameters":[],"return":{"description":null,"type":"{T}"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Range`1.max"},{"children":null,"id":"#ctor(`0,`0)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Range(T, T)","nameWithType":"Range<T>.Range(T, T)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Range`1","remarks":null,"summary":"\nCreates a new range with the specified values.\n","syntax":{"content":"public Range(T min = null, T max = null)","parameters":[{"description":"The lower bound of the range.","id":"min","type":"{T}"},{"description":"The upper bound of the range.","id":"max","type":"{T}"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.DataStructures.Range`1.#ctor(`0,`0)"},{"children":null,"id":"Includes(`0)","implements":["Zigurous.DataStructures.IRange{{T}}.Includes({T})"],"inheritance":null,"inheritedMembers":null,"name":"Includes(T)","nameWithType":"Range<T>.Includes(T)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Range`1","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(T value)","parameters":[{"description":"The value to check.","id":"value","type":"{T}"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Range`1.Includes(`0)"},{"children":null,"id":"Includes(`0,System.Boolean,System.Boolean)","implements":["Zigurous.DataStructures.IRange{{T}}.Includes({T},System.Boolean,System.Boolean)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(T, Boolean, Boolean)","nameWithType":"Range<T>.Includes(T, Boolean, Boolean)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Range`1","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(T value, bool includeMin, bool includeMax)","parameters":[{"description":"The value to check.","id":"value","type":"{T}"},{"description":"The minimum value is inclusive if true, exclusive if false.","id":"includeMin","type":"System.Boolean"},{"description":"The maximum value is inclusive if true, exclusive if false.","id":"includeMax","type":"System.Boolean"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Range`1.Includes(`0,System.Boolean,System.Boolean)"}]},{"items":[{"children":["Zigurous.DataStructures.SingletonBehavior`1.HasInstance","Zigurous.DataStructures.SingletonBehavior`1.Instance","Zigurous.DataStructures.SingletonBehavior`1.SetUp","Zigurous.DataStructures.SingletonBehavior`1.TearDown"],"id":"SingletonBehavior`1","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"SingletonBehavior<T>","nameWithType":"SingletonBehavior<T>","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nA singleton behavior that can be used to ensure that only one instance\nof a class is created.\n","syntax":{"content":"public abstract class SingletonBehavior<T> : MonoBehaviour where T : Component","parameters":null,"return":null,"typeParameters":[{"description":"The type of the singleton class.","id":"T"}]},"type":"Class","uid":"Zigurous.DataStructures.SingletonBehavior`1"},{"children":null,"id":"Instance","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Instance","nameWithType":"SingletonBehavior<T>.Instance","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.SingletonBehavior`1","remarks":null,"summary":"\nThe current instance of the class.\nThe instance will be created if it does not already exist.\n","syntax":{"content":"public static T Instance { get; }","parameters":[],"return":{"description":"The instance of the class.","type":"{T}"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.SingletonBehavior`1.Instance"},{"children":null,"id":"HasInstance","implements":null,"inheritance":null,"inheritedMembers":null,"name":"HasInstance","nameWithType":"SingletonBehavior<T>.HasInstance","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.SingletonBehavior`1","remarks":null,"summary":"\nChecks if the singleton has been initialized and an instance is\navailable to use.\n","syntax":{"content":"public static bool HasInstance { get; }","parameters":[],"return":{"description":"True if an instance is available, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.SingletonBehavior`1.HasInstance"},{"children":null,"id":"SetUp","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SetUp()","nameWithType":"SingletonBehavior<T>.SetUp()","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.SingletonBehavior`1","remarks":null,"summary":"\nHandles initializing the singleton on Awake. This function should be\nused in replacement of Awake.\n","syntax":{"content":"protected virtual void SetUp()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.SingletonBehavior`1.SetUp"},{"children":null,"id":"TearDown","implements":null,"inheritance":null,"inheritedMembers":null,"name":"TearDown()","nameWithType":"SingletonBehavior<T>.TearDown()","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.SingletonBehavior`1","remarks":null,"summary":"\nHandles deinitializing the singleton. This function should be used\nin replacement of OnDestroy.\n","syntax":{"content":"protected virtual void TearDown()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.SingletonBehavior`1.TearDown"}]},{"items":[{"children":["Zigurous.DataStructures.Size.#ctor(System.Int32)","Zigurous.DataStructures.Size.#ctor(System.Int32,System.Int32)","Zigurous.DataStructures.Size.area","Zigurous.DataStructures.Size.CompareTo(Zigurous.DataStructures.Size)","Zigurous.DataStructures.Size.Equals(System.Object)","Zigurous.DataStructures.Size.Equals(Zigurous.DataStructures.Size)","Zigurous.DataStructures.Size.GetHashCode","Zigurous.DataStructures.Size.height","Zigurous.DataStructures.Size.max","Zigurous.DataStructures.Size.one","Zigurous.DataStructures.Size.op_Equality(Zigurous.DataStructures.Size,Zigurous.DataStructures.Size)","Zigurous.DataStructures.Size.op_Inequality(Zigurous.DataStructures.Size,Zigurous.DataStructures.Size)","Zigurous.DataStructures.Size.sq1024","Zigurous.DataStructures.Size.sq128","Zigurous.DataStructures.Size.sq16","Zigurous.DataStructures.Size.sq2","Zigurous.DataStructures.Size.sq2048","Zigurous.DataStructures.Size.sq256","Zigurous.DataStructures.Size.sq32","Zigurous.DataStructures.Size.sq4","Zigurous.DataStructures.Size.sq4096","Zigurous.DataStructures.Size.sq512","Zigurous.DataStructures.Size.sq64","Zigurous.DataStructures.Size.sq8","Zigurous.DataStructures.Size.sq8192","Zigurous.DataStructures.Size.ToString","Zigurous.DataStructures.Size.width","Zigurous.DataStructures.Size.zero"],"id":"Size","implements":["Global.IEquatable{Zigurous.DataStructures.Size}","Global.IComparable{Zigurous.DataStructures.Size}"],"inheritance":null,"inheritedMembers":null,"name":"Size","nameWithType":"Size","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nStores the size of an entity as a width and height.\n","syntax":{"content":"[Serializable]\npublic struct Size","parameters":null,"return":null,"typeParameters":null},"type":"Struct","uid":"Zigurous.DataStructures.Size"},{"children":null,"id":"zero","implements":null,"inheritance":null,"inheritedMembers":null,"name":"zero","nameWithType":"Size.zero","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Size","remarks":null,"summary":"\nShorthand for writing <code>Size(0, 0)</code>.\n","syntax":{"content":"public static readonly Size zero { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.Size"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Size.zero"},{"children":null,"id":"one","implements":null,"inheritance":null,"inheritedMembers":null,"name":"one","nameWithType":"Size.one","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Size","remarks":null,"summary":"\nShorthand for writing <code>Size(1, 1)</code>.\n","syntax":{"content":"public static readonly Size one { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.Size"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Size.one"},{"children":null,"id":"max","implements":null,"inheritance":null,"inheritedMembers":null,"name":"max","nameWithType":"Size.max","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Size","remarks":null,"summary":"\nShorthand for writing <code>Size(int.MaxValue, int.MaxValue)</code>.\n","syntax":{"content":"public static readonly Size max { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.Size"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Size.max"},{"children":null,"id":"sq2","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq2","nameWithType":"Size.sq2","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Size","remarks":null,"summary":"\nShorthand for writing <code>Size(2)</code>.\n","syntax":{"content":"public static readonly Size sq2 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.Size"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Size.sq2"},{"children":null,"id":"sq4","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq4","nameWithType":"Size.sq4","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Size","remarks":null,"summary":"\nShorthand for writing <code>Size(4)</code>.\n","syntax":{"content":"public static readonly Size sq4 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.Size"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Size.sq4"},{"children":null,"id":"sq8","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq8","nameWithType":"Size.sq8","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Size","remarks":null,"summary":"\nShorthand for writing <code>Size(8)</code>.\n","syntax":{"content":"public static readonly Size sq8 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.Size"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Size.sq8"},{"children":null,"id":"sq16","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq16","nameWithType":"Size.sq16","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Size","remarks":null,"summary":"\nShorthand for writing <code>Size(16)</code>.\n","syntax":{"content":"public static readonly Size sq16 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.Size"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Size.sq16"},{"children":null,"id":"sq32","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq32","nameWithType":"Size.sq32","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Size","remarks":null,"summary":"\nShorthand for writing <code>Size(32)</code>.\n","syntax":{"content":"public static readonly Size sq32 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.Size"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Size.sq32"},{"children":null,"id":"sq64","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq64","nameWithType":"Size.sq64","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Size","remarks":null,"summary":"\nShorthand for writing <code>Size(64)</code>.\n","syntax":{"content":"public static readonly Size sq64 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.Size"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Size.sq64"},{"children":null,"id":"sq128","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq128","nameWithType":"Size.sq128","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Size","remarks":null,"summary":"\nShorthand for writing <code>Size(128)</code>.\n","syntax":{"content":"public static readonly Size sq128 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.Size"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Size.sq128"},{"children":null,"id":"sq256","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq256","nameWithType":"Size.sq256","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Size","remarks":null,"summary":"\nShorthand for writing <code>Size(256)</code>.\n","syntax":{"content":"public static readonly Size sq256 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.Size"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Size.sq256"},{"children":null,"id":"sq512","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq512","nameWithType":"Size.sq512","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Size","remarks":null,"summary":"\nShorthand for writing <code>Size(512)</code>.\n","syntax":{"content":"public static readonly Size sq512 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.Size"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Size.sq512"},{"children":null,"id":"sq1024","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq1024","nameWithType":"Size.sq1024","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Size","remarks":null,"summary":"\nShorthand for writing <code>Size(1024)</code>.\n","syntax":{"content":"public static readonly Size sq1024 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.Size"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Size.sq1024"},{"children":null,"id":"sq2048","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq2048","nameWithType":"Size.sq2048","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Size","remarks":null,"summary":"\nShorthand for writing <code>Size(2048)</code>.\n","syntax":{"content":"public static readonly Size sq2048 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.Size"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Size.sq2048"},{"children":null,"id":"sq4096","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq4096","nameWithType":"Size.sq4096","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Size","remarks":null,"summary":"\nShorthand for writing <code>Size(4096)</code>.\n","syntax":{"content":"public static readonly Size sq4096 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.Size"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Size.sq4096"},{"children":null,"id":"sq8192","implements":null,"inheritance":null,"inheritedMembers":null,"name":"sq8192","nameWithType":"Size.sq8192","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Size","remarks":null,"summary":"\nShorthand for writing <code>Size(8192)</code>.\n","syntax":{"content":"public static readonly Size sq8192 { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.Size"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Size.sq8192"},{"children":null,"id":"width","implements":null,"inheritance":null,"inheritedMembers":null,"name":"width","nameWithType":"Size.width","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Size","remarks":null,"summary":"\nThe width of the entity.\n","syntax":{"content":"public int width","parameters":null,"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Field","uid":"Zigurous.DataStructures.Size.width"},{"children":null,"id":"height","implements":null,"inheritance":null,"inheritedMembers":null,"name":"height","nameWithType":"Size.height","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Size","remarks":null,"summary":"\nThe height of the entity.\n","syntax":{"content":"public int height","parameters":null,"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Field","uid":"Zigurous.DataStructures.Size.height"},{"children":null,"id":"area","implements":null,"inheritance":null,"inheritedMembers":null,"name":"area","nameWithType":"Size.area","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Size","remarks":null,"summary":"\nThe area of the entity (width * height) (Read only).\n","syntax":{"content":"public readonly int area { get; }","parameters":[],"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Size.area"},{"children":null,"id":"#ctor(System.Int32,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Size(Int32, Int32)","nameWithType":"Size.Size(Int32, Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Size","remarks":null,"summary":"\nCreates a new size with the specified width and height.\n","syntax":{"content":"public Size(int width = 0, int height = 0)","parameters":[{"description":"The width of the entity.","id":"width","type":"System.Int32"},{"description":"The height of the entity.","id":"height","type":"System.Int32"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.DataStructures.Size.#ctor(System.Int32,System.Int32)"},{"children":null,"id":"#ctor(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Size(Int32)","nameWithType":"Size.Size(Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Size","remarks":null,"summary":"\nCreates a new size with uniform width and height.\n","syntax":{"content":"public Size(int size)","parameters":[{"description":"The uniform size of the entity.","id":"size","type":"System.Int32"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.DataStructures.Size.#ctor(System.Int32)"},{"children":null,"id":"CompareTo(Zigurous.DataStructures.Size)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"CompareTo(Size)","nameWithType":"Size.CompareTo(Size)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Size","remarks":null,"summary":"\nCompares this instance with another and returns an integer that\nindicates whether this instance precedes, follows, or appears in the\nsame position in the sort order as the other instance.\n","syntax":{"content":"public int CompareTo(Size other)","parameters":[{"description":"The size to compare to.","id":"other","type":"Zigurous.DataStructures.Size"}],"return":{"description":"\nGreater than zero if this instance follows the other, less than zero\nif this instance precedes the other, and zero if this instance has\nthe same position as the other.\n","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Size.CompareTo(Zigurous.DataStructures.Size)"},{"children":null,"id":"Equals(Zigurous.DataStructures.Size)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Equals(Size)","nameWithType":"Size.Equals(Size)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Size","remarks":null,"summary":"\nDetermines if the size is equal to another size.\n","syntax":{"content":"public bool Equals(Size other)","parameters":[{"description":"The size to compare to.","id":"other","type":"Zigurous.DataStructures.Size"}],"return":{"description":"True if the sizes are equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Size.Equals(Zigurous.DataStructures.Size)"},{"children":null,"id":"Equals(System.Object)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Equals(Object)","nameWithType":"Size.Equals(Object)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Size","remarks":null,"summary":"\nDetermines if the size is equal to another size.\n","syntax":{"content":"public override bool Equals(object other)","parameters":[{"description":"The object to compare to.","id":"other","type":"System.Object"}],"return":{"description":"True if the sizes are equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Size.Equals(System.Object)"},{"children":null,"id":"GetHashCode","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetHashCode()","nameWithType":"Size.GetHashCode()","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Size","remarks":null,"summary":"\nReturns the hash code of the size.\n","syntax":{"content":"public override int GetHashCode()","parameters":null,"return":{"description":"The hash code of the size.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Size.GetHashCode"},{"children":null,"id":"ToString","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ToString()","nameWithType":"Size.ToString()","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Size","remarks":null,"summary":"\nConverts the size to a string.\n","syntax":{"content":"public override string ToString()","parameters":null,"return":{"description":"The size as a string.","type":"System.String"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Size.ToString"},{"children":null,"id":"op_Equality(Zigurous.DataStructures.Size,Zigurous.DataStructures.Size)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Equality(Size, Size)","nameWithType":"Size.Equality(Size, Size)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Size","remarks":null,"summary":"\nDetermines if two sizes are equal.\n","syntax":{"content":"public static bool operator ==(Size lhs, Size rhs)","parameters":[{"description":"The first size to compare.","id":"lhs","type":"Zigurous.DataStructures.Size"},{"description":"The second size to compare.","id":"rhs","type":"Zigurous.DataStructures.Size"}],"return":{"description":"True if the sizes are equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Operator","uid":"Zigurous.DataStructures.Size.op_Equality(Zigurous.DataStructures.Size,Zigurous.DataStructures.Size)"},{"children":null,"id":"op_Inequality(Zigurous.DataStructures.Size,Zigurous.DataStructures.Size)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Inequality(Size, Size)","nameWithType":"Size.Inequality(Size, Size)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Size","remarks":null,"summary":"\nDetermines if two sizes are not equal.\n","syntax":{"content":"public static bool operator !=(Size lhs, Size rhs)","parameters":[{"description":"The first size to compare.","id":"lhs","type":"Zigurous.DataStructures.Size"},{"description":"The second size to compare.","id":"rhs","type":"Zigurous.DataStructures.Size"}],"return":{"description":"True if the sizes are not equal, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Operator","uid":"Zigurous.DataStructures.Size.op_Inequality(Zigurous.DataStructures.Size,Zigurous.DataStructures.Size)"}]},{"items":[{"children":["Zigurous.DataStructures.SortedSetExtensions.First``1(SortedSet{``0},Predicate{``0})","Zigurous.DataStructures.SortedSetExtensions.ForEach``1(SortedSet{``0},Action{``0})","Zigurous.DataStructures.SortedSetExtensions.IsAny``1(SortedSet{``0},Predicate{``0})","Zigurous.DataStructures.SortedSetExtensions.IsEach``1(SortedSet{``0},Predicate{``0})"],"id":"SortedSetExtensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"SortedSetExtensions","nameWithType":"SortedSetExtensions","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nExtension methods for sorted sets.\n","syntax":{"content":"public static class SortedSetExtensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.DataStructures.SortedSetExtensions"},{"children":null,"id":"First``1(SortedSet{``0},Predicate{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"First<T>(SortedSet<T>, Predicate<T>)","nameWithType":"SortedSetExtensions.First<T>(SortedSet<T>, Predicate<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.SortedSetExtensions","remarks":null,"summary":"\nReturns the first element in the set that satisfies a predicate.\n","syntax":{"content":"public static T First<T>(this SortedSet<T> set, Predicate<T> predicate)","parameters":[{"description":"The set to get the element from.","id":"set","type":"Global.SortedSet{{T}}"},{"description":"The predicate to use.","id":"predicate","type":"Global.Predicate{{T}}"}],"return":{"description":"The first element in the set that satisfies the predicate, or <code>default(T)</code> if no item satisfies the predicate.","type":"{T}"},"typeParameters":[{"description":"The type of the elements in the set.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.SortedSetExtensions.First``1(SortedSet{``0},Predicate{``0})"},{"children":null,"id":"ForEach``1(SortedSet{``0},Action{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ForEach<T>(SortedSet<T>, Action<T>)","nameWithType":"SortedSetExtensions.ForEach<T>(SortedSet<T>, Action<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.SortedSetExtensions","remarks":null,"summary":"\nInvokes an action on each element in the set. The element is passed\nas a parameter.\n","syntax":{"content":"public static void ForEach<T>(this SortedSet<T> set, Action<T> action)","parameters":[{"description":"The set to iterate over.","id":"set","type":"Global.SortedSet{{T}}"},{"description":"The action to invoke on each element.","id":"action","type":"Global.Action{{T}}"}],"return":null,"typeParameters":[{"description":"The type of the elements in the set.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.SortedSetExtensions.ForEach``1(SortedSet{``0},Action{``0})"},{"children":null,"id":"IsAny``1(SortedSet{``0},Predicate{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsAny<T>(SortedSet<T>, Predicate<T>)","nameWithType":"SortedSetExtensions.IsAny<T>(SortedSet<T>, Predicate<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.SortedSetExtensions","remarks":null,"summary":"\nChecks if any element in the set satisfies a predicate.\n","syntax":{"content":"public static bool IsAny<T>(this SortedSet<T> set, Predicate<T> predicate)","parameters":[{"description":"The set to check.","id":"set","type":"Global.SortedSet{{T}}"},{"description":"The predicate to use.","id":"predicate","type":"Global.Predicate{{T}}"}],"return":{"description":"True if any element satisfies the predicate.","type":"System.Boolean"},"typeParameters":[{"description":"The type of the elements in the set.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.SortedSetExtensions.IsAny``1(SortedSet{``0},Predicate{``0})"},{"children":null,"id":"IsEach``1(SortedSet{``0},Predicate{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsEach<T>(SortedSet<T>, Predicate<T>)","nameWithType":"SortedSetExtensions.IsEach<T>(SortedSet<T>, Predicate<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.SortedSetExtensions","remarks":null,"summary":"\nChecks if each element in the set satisfies a predicate.\n","syntax":{"content":"public static bool IsEach<T>(this SortedSet<T> set, Predicate<T> predicate)","parameters":[{"description":"The set to check.","id":"set","type":"Global.SortedSet{{T}}"},{"description":"The predicate to use.","id":"predicate","type":"Global.Predicate{{T}}"}],"return":{"description":"True if all elements satisfy the predicate.","type":"System.Boolean"},"typeParameters":[{"description":"The type of the elements in the set.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.SortedSetExtensions.IsEach``1(SortedSet{``0},Predicate{``0})"}]},{"items":[{"children":["Zigurous.DataStructures.StringExtensions.IsEmpty(System.String)","Zigurous.DataStructures.StringExtensions.IsNotEmpty(System.String)","Zigurous.DataStructures.StringExtensions.Repeat(System.String,System.Int32)"],"id":"StringExtensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"StringExtensions","nameWithType":"StringExtensions","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nExtension methods for strings.\n","syntax":{"content":"public static class StringExtensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.DataStructures.StringExtensions"},{"children":null,"id":"IsEmpty(System.String)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsEmpty(String)","nameWithType":"StringExtensions.IsEmpty(String)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.StringExtensions","remarks":null,"summary":"\nChecks if the string is null or empty.\n","syntax":{"content":"public static bool IsEmpty(this string str)","parameters":[{"description":"The string to test.","id":"str","type":"System.String"}],"return":{"description":"True if the string is null or empty.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.StringExtensions.IsEmpty(System.String)"},{"children":null,"id":"IsNotEmpty(System.String)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsNotEmpty(String)","nameWithType":"StringExtensions.IsNotEmpty(String)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.StringExtensions","remarks":null,"summary":"\nChecks if the string is not null and not empty.\n","syntax":{"content":"public static bool IsNotEmpty(this string str)","parameters":[{"description":"The string to test.","id":"str","type":"System.String"}],"return":{"description":"True if the string is not null and not empty.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.StringExtensions.IsNotEmpty(System.String)"},{"children":null,"id":"Repeat(System.String,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Repeat(String, Int32)","nameWithType":"StringExtensions.Repeat(String, Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.StringExtensions","remarks":null,"summary":"\nRepeats the string a given number of times.\n","syntax":{"content":"public static string Repeat(this string str, int n)","parameters":[{"description":"The string to repeat.","id":"str","type":"System.String"},{"description":"The number of times to repeat the string.","id":"n","type":"System.Int32"}],"return":{"description":"A new repeated string.","type":"System.String"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.StringExtensions.Repeat(System.String,System.Int32)"}]},{"items":[{"children":["Zigurous.DataStructures.UIntRange.#ctor(System.UInt32,System.UInt32)","Zigurous.DataStructures.UIntRange.Clamp(System.UInt32)","Zigurous.DataStructures.UIntRange.delta","Zigurous.DataStructures.UIntRange.Includes(System.UInt32)","Zigurous.DataStructures.UIntRange.Includes(System.UInt32,System.Boolean,System.Boolean)","Zigurous.DataStructures.UIntRange.InverseLerp(System.UInt32)","Zigurous.DataStructures.UIntRange.Lerp(System.Single)","Zigurous.DataStructures.UIntRange.max","Zigurous.DataStructures.UIntRange.median","Zigurous.DataStructures.UIntRange.min","Zigurous.DataStructures.UIntRange.minMax","Zigurous.DataStructures.UIntRange.one","Zigurous.DataStructures.UIntRange.Random","Zigurous.DataStructures.UIntRange.RandomInclusive","Zigurous.DataStructures.UIntRange.zero"],"id":"UIntRange","implements":["Zigurous.DataStructures.INumberRange{System.UInt32}","Zigurous.DataStructures.IRange{System.UInt32}"],"inheritance":null,"inheritedMembers":null,"name":"UIntRange","nameWithType":"UIntRange","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nA range of uint values.\n","syntax":{"content":"[Serializable]\npublic struct UIntRange : INumberRange<uint>, IRange<uint>","parameters":null,"return":null,"typeParameters":null},"type":"Struct","uid":"Zigurous.DataStructures.UIntRange"},{"children":null,"id":"zero","implements":null,"inheritance":null,"inheritedMembers":null,"name":"zero","nameWithType":"UIntRange.zero","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UIntRange","remarks":null,"summary":"\nShorthand for writing <code>UIntRange(0, 0)</code>.\n","syntax":{"content":"public static readonly UIntRange zero { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.UIntRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.UIntRange.zero"},{"children":null,"id":"one","implements":null,"inheritance":null,"inheritedMembers":null,"name":"one","nameWithType":"UIntRange.one","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UIntRange","remarks":null,"summary":"\nShorthand for writing <code>UIntRange(1, 1)</code>.\n","syntax":{"content":"public static readonly UIntRange one { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.UIntRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.UIntRange.one"},{"children":null,"id":"minMax","implements":null,"inheritance":null,"inheritedMembers":null,"name":"minMax","nameWithType":"UIntRange.minMax","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UIntRange","remarks":null,"summary":"\nShorthand for writing <code>UIntRange(uint.MinValue, uint.MaxValue)</code>.\n","syntax":{"content":"public static readonly UIntRange minMax { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.UIntRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.UIntRange.minMax"},{"children":null,"id":"min","implements":["Zigurous.DataStructures.IRange{System.UInt32}.min"],"inheritance":null,"inheritedMembers":null,"name":"min","nameWithType":"UIntRange.min","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UIntRange","remarks":null,"summary":"\nThe lower bound of the range.\n","syntax":{"content":"public uint min { get; set; }","parameters":[],"return":{"description":null,"type":"System.UInt32"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.UIntRange.min"},{"children":null,"id":"max","implements":["Zigurous.DataStructures.IRange{System.UInt32}.max"],"inheritance":null,"inheritedMembers":null,"name":"max","nameWithType":"UIntRange.max","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UIntRange","remarks":null,"summary":"\nThe upper bound of the range.\n","syntax":{"content":"public uint max { get; set; }","parameters":[],"return":{"description":null,"type":"System.UInt32"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.UIntRange.max"},{"children":null,"id":"delta","implements":["Zigurous.DataStructures.INumberRange{System.UInt32}.delta"],"inheritance":null,"inheritedMembers":null,"name":"delta","nameWithType":"UIntRange.delta","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UIntRange","remarks":null,"summary":"\nThe difference between the maximum and minimum values (Read only).\n","syntax":{"content":"public readonly uint delta { get; }","parameters":[],"return":{"description":null,"type":"System.UInt32"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.UIntRange.delta"},{"children":null,"id":"median","implements":["Zigurous.DataStructures.INumberRange{System.UInt32}.median"],"inheritance":null,"inheritedMembers":null,"name":"median","nameWithType":"UIntRange.median","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UIntRange","remarks":null,"summary":"\nThe median value of the range (Read only).\n","syntax":{"content":"public readonly uint median { get; }","parameters":[],"return":{"description":null,"type":"System.UInt32"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.UIntRange.median"},{"children":null,"id":"#ctor(System.UInt32,System.UInt32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"UIntRange(UInt32, UInt32)","nameWithType":"UIntRange.UIntRange(UInt32, UInt32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UIntRange","remarks":null,"summary":"\nCreates a new range with the specified values.\n","syntax":{"content":"public UIntRange(uint min, uint max)","parameters":[{"description":"The lower bound of the range.","id":"min","type":"System.UInt32"},{"description":"The upper bound of the range.","id":"max","type":"System.UInt32"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.DataStructures.UIntRange.#ctor(System.UInt32,System.UInt32)"},{"children":null,"id":"Random","implements":["Zigurous.DataStructures.INumberRange{System.UInt32}.Random"],"inheritance":null,"inheritedMembers":null,"name":"Random()","nameWithType":"UIntRange.Random()","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UIntRange","remarks":null,"summary":"\nReturns a random value in the range [inclusive, exclusive).\n","syntax":{"content":"public uint Random()","parameters":null,"return":{"description":"A random value in the range [inclusive, exclusive).","type":"System.UInt32"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.UIntRange.Random"},{"children":null,"id":"RandomInclusive","implements":null,"inheritance":null,"inheritedMembers":null,"name":"RandomInclusive()","nameWithType":"UIntRange.RandomInclusive()","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UIntRange","remarks":null,"summary":"\nReturns a random value in the range [inclusive, inclusive].\n","syntax":{"content":"public uint RandomInclusive()","parameters":null,"return":{"description":"A random value in the range [inclusive, inclusive].","type":"System.UInt32"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.UIntRange.RandomInclusive"},{"children":null,"id":"Includes(System.UInt32)","implements":["Zigurous.DataStructures.IRange{System.UInt32}.Includes(System.UInt32)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(UInt32)","nameWithType":"UIntRange.Includes(UInt32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UIntRange","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(uint value)","parameters":[{"description":"The value to check.","id":"value","type":"System.UInt32"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.UIntRange.Includes(System.UInt32)"},{"children":null,"id":"Includes(System.UInt32,System.Boolean,System.Boolean)","implements":["Zigurous.DataStructures.IRange{System.UInt32}.Includes(System.UInt32,System.Boolean,System.Boolean)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(UInt32, Boolean, Boolean)","nameWithType":"UIntRange.Includes(UInt32, Boolean, Boolean)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UIntRange","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(uint value, bool includeMin, bool includeMax)","parameters":[{"description":"The value to check.","id":"value","type":"System.UInt32"},{"description":"The minimum value is inclusive if true, exclusive if false.","id":"includeMin","type":"System.Boolean"},{"description":"The maximum value is inclusive if true, exclusive if false.","id":"includeMax","type":"System.Boolean"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.UIntRange.Includes(System.UInt32,System.Boolean,System.Boolean)"},{"children":null,"id":"Clamp(System.UInt32)","implements":["Zigurous.DataStructures.INumberRange{System.UInt32}.Clamp(System.UInt32)"],"inheritance":null,"inheritedMembers":null,"name":"Clamp(UInt32)","nameWithType":"UIntRange.Clamp(UInt32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UIntRange","remarks":null,"summary":"\nClamps a value to the range.\n","syntax":{"content":"public uint Clamp(uint value)","parameters":[{"description":"The value to clamp.","id":"value","type":"System.UInt32"}],"return":{"description":"The clamped value.","type":"System.UInt32"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.UIntRange.Clamp(System.UInt32)"},{"children":null,"id":"Lerp(System.Single)","implements":["Zigurous.DataStructures.INumberRange{System.UInt32}.Lerp(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"Lerp(Single)","nameWithType":"UIntRange.Lerp(Single)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UIntRange","remarks":null,"summary":"\nLinearly interpolates between the range by <code data-dev-comment-type=\"paramref\" class=\"paramref\">t</code>.\n","syntax":{"content":"public uint Lerp(float t)","parameters":[{"description":"The interpolant value between [0..1].","id":"t","type":"System.Single"}],"return":{"description":"The interpolated value.","type":"System.UInt32"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.UIntRange.Lerp(System.Single)"},{"children":null,"id":"InverseLerp(System.UInt32)","implements":["Zigurous.DataStructures.INumberRange{System.UInt32}.InverseLerp(System.UInt32)"],"inheritance":null,"inheritedMembers":null,"name":"InverseLerp(UInt32)","nameWithType":"UIntRange.InverseLerp(UInt32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UIntRange","remarks":null,"summary":"\nCalculates the linear parameter t that produces the interpolant\nvalue within the range.\n","syntax":{"content":"public float InverseLerp(uint value)","parameters":[{"description":"The value within the range you want to calculate.","id":"value","type":"System.UInt32"}],"return":{"description":"The interpolant value between [0..1].","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.UIntRange.InverseLerp(System.UInt32)"}]},{"items":[{"children":["Zigurous.DataStructures.UnitIntervalRange.#ctor(System.Single,System.Single)","Zigurous.DataStructures.UnitIntervalRange.Clamp(System.Single)","Zigurous.DataStructures.UnitIntervalRange.delta","Zigurous.DataStructures.UnitIntervalRange.Includes(System.Single)","Zigurous.DataStructures.UnitIntervalRange.Includes(System.Single,System.Boolean,System.Boolean)","Zigurous.DataStructures.UnitIntervalRange.InverseLerp(System.Single)","Zigurous.DataStructures.UnitIntervalRange.Lerp(System.Single)","Zigurous.DataStructures.UnitIntervalRange.max","Zigurous.DataStructures.UnitIntervalRange.median","Zigurous.DataStructures.UnitIntervalRange.min","Zigurous.DataStructures.UnitIntervalRange.minMax","Zigurous.DataStructures.UnitIntervalRange.one","Zigurous.DataStructures.UnitIntervalRange.Random","Zigurous.DataStructures.UnitIntervalRange.zero"],"id":"UnitIntervalRange","implements":["Zigurous.DataStructures.INumberRange{System.Single}","Zigurous.DataStructures.IRange{System.Single}"],"inheritance":null,"inheritedMembers":null,"name":"UnitIntervalRange","nameWithType":"UnitIntervalRange","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nA range of values between zero and one.\n","syntax":{"content":"[Serializable]\npublic struct UnitIntervalRange : INumberRange<float>, IRange<float>","parameters":null,"return":null,"typeParameters":null},"type":"Struct","uid":"Zigurous.DataStructures.UnitIntervalRange"},{"children":null,"id":"zero","implements":null,"inheritance":null,"inheritedMembers":null,"name":"zero","nameWithType":"UnitIntervalRange.zero","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UnitIntervalRange","remarks":null,"summary":"\nShorthand for writing <code>UnitIntervalRange(0f, 0f)</code>.\n","syntax":{"content":"public static readonly UnitIntervalRange zero { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.UnitIntervalRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.UnitIntervalRange.zero"},{"children":null,"id":"one","implements":null,"inheritance":null,"inheritedMembers":null,"name":"one","nameWithType":"UnitIntervalRange.one","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UnitIntervalRange","remarks":null,"summary":"\nShorthand for writing <code>UnitIntervalRange(1f, 1f)</code>.\n","syntax":{"content":"public static readonly UnitIntervalRange one { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.UnitIntervalRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.UnitIntervalRange.one"},{"children":null,"id":"minMax","implements":null,"inheritance":null,"inheritedMembers":null,"name":"minMax","nameWithType":"UnitIntervalRange.minMax","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UnitIntervalRange","remarks":null,"summary":"\nShorthand for writing <code>UnitIntervalRange(0f, 1f)</code>.\n","syntax":{"content":"public static readonly UnitIntervalRange minMax { get; }","parameters":[],"return":{"description":null,"type":"Zigurous.DataStructures.UnitIntervalRange"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.UnitIntervalRange.minMax"},{"children":null,"id":"min","implements":["Zigurous.DataStructures.IRange{System.Single}.min"],"inheritance":null,"inheritedMembers":null,"name":"min","nameWithType":"UnitIntervalRange.min","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UnitIntervalRange","remarks":null,"summary":"\nThe lower bound of the range.\n","syntax":{"content":"public float min { get; set; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.UnitIntervalRange.min"},{"children":null,"id":"max","implements":["Zigurous.DataStructures.IRange{System.Single}.max"],"inheritance":null,"inheritedMembers":null,"name":"max","nameWithType":"UnitIntervalRange.max","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UnitIntervalRange","remarks":null,"summary":"\nThe upper bound of the range.\n","syntax":{"content":"public float max { get; set; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.UnitIntervalRange.max"},{"children":null,"id":"delta","implements":["Zigurous.DataStructures.INumberRange{System.Single}.delta"],"inheritance":null,"inheritedMembers":null,"name":"delta","nameWithType":"UnitIntervalRange.delta","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UnitIntervalRange","remarks":null,"summary":"\nThe difference between the maximum and minimum values (Read only).\n","syntax":{"content":"public readonly float delta { get; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.UnitIntervalRange.delta"},{"children":null,"id":"median","implements":["Zigurous.DataStructures.INumberRange{System.Single}.median"],"inheritance":null,"inheritedMembers":null,"name":"median","nameWithType":"UnitIntervalRange.median","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UnitIntervalRange","remarks":null,"summary":"\nThe median value of the range (Read only).\n","syntax":{"content":"public readonly float median { get; }","parameters":[],"return":{"description":null,"type":"System.Single"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.UnitIntervalRange.median"},{"children":null,"id":"#ctor(System.Single,System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"UnitIntervalRange(Single, Single)","nameWithType":"UnitIntervalRange.UnitIntervalRange(Single, Single)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UnitIntervalRange","remarks":null,"summary":"\nCreates a new range with the specified values.\n","syntax":{"content":"public UnitIntervalRange(float min = 0F, float max = 1F)","parameters":[{"description":"The lower bound of the range.","id":"min","type":"System.Single"},{"description":"The upper bound of the range.","id":"max","type":"System.Single"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.DataStructures.UnitIntervalRange.#ctor(System.Single,System.Single)"},{"children":null,"id":"Random","implements":["Zigurous.DataStructures.INumberRange{System.Single}.Random"],"inheritance":null,"inheritedMembers":null,"name":"Random()","nameWithType":"UnitIntervalRange.Random()","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UnitIntervalRange","remarks":null,"summary":"\nReturns a random value in the range.\n","syntax":{"content":"public float Random()","parameters":null,"return":{"description":"A random value in the range.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.UnitIntervalRange.Random"},{"children":null,"id":"Includes(System.Single)","implements":["Zigurous.DataStructures.IRange{System.Single}.Includes(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Single)","nameWithType":"UnitIntervalRange.Includes(Single)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UnitIntervalRange","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(float value)","parameters":[{"description":"The value to check.","id":"value","type":"System.Single"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.UnitIntervalRange.Includes(System.Single)"},{"children":null,"id":"Includes(System.Single,System.Boolean,System.Boolean)","implements":["Zigurous.DataStructures.IRange{System.Single}.Includes(System.Single,System.Boolean,System.Boolean)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Single, Boolean, Boolean)","nameWithType":"UnitIntervalRange.Includes(Single, Boolean, Boolean)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UnitIntervalRange","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(float value, bool includeMin, bool includeMax)","parameters":[{"description":"The value to check.","id":"value","type":"System.Single"},{"description":"The minimum value is inclusive if true, exclusive if false.","id":"includeMin","type":"System.Boolean"},{"description":"The maximum value is inclusive if true, exclusive if false.","id":"includeMax","type":"System.Boolean"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.UnitIntervalRange.Includes(System.Single,System.Boolean,System.Boolean)"},{"children":null,"id":"Clamp(System.Single)","implements":["Zigurous.DataStructures.INumberRange{System.Single}.Clamp(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"Clamp(Single)","nameWithType":"UnitIntervalRange.Clamp(Single)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UnitIntervalRange","remarks":null,"summary":"\nClamps a value to the range.\n","syntax":{"content":"public float Clamp(float value)","parameters":[{"description":"The value to clamp.","id":"value","type":"System.Single"}],"return":{"description":"The clamped value.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.UnitIntervalRange.Clamp(System.Single)"},{"children":null,"id":"Lerp(System.Single)","implements":["Zigurous.DataStructures.INumberRange{System.Single}.Lerp(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"Lerp(Single)","nameWithType":"UnitIntervalRange.Lerp(Single)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UnitIntervalRange","remarks":null,"summary":"\nLinearly interpolates between the range by <code data-dev-comment-type=\"paramref\" class=\"paramref\">t</code>.\n","syntax":{"content":"public float Lerp(float t)","parameters":[{"description":"The interpolant value between [0..1].","id":"t","type":"System.Single"}],"return":{"description":"The interpolated value.","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.UnitIntervalRange.Lerp(System.Single)"},{"children":null,"id":"InverseLerp(System.Single)","implements":["Zigurous.DataStructures.INumberRange{System.Single}.InverseLerp(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"InverseLerp(Single)","nameWithType":"UnitIntervalRange.InverseLerp(Single)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UnitIntervalRange","remarks":null,"summary":"\nCalculates the linear parameter t that produces the interpolant\nvalue within the range.\n","syntax":{"content":"public float InverseLerp(float value)","parameters":[{"description":"The value within the range you want to calculate.","id":"value","type":"System.Single"}],"return":{"description":"The interpolant value between [0..1].","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.UnitIntervalRange.InverseLerp(System.Single)"}]},{"items":[{"children":["Zigurous.DataStructures.UpdateBehavior.OnDisable","Zigurous.DataStructures.UpdateBehavior.OnEnable","Zigurous.DataStructures.UpdateBehavior.OnUpdate(System.Single)","Zigurous.DataStructures.UpdateBehavior.OnValidate","Zigurous.DataStructures.UpdateBehavior.updateMode"],"id":"UpdateBehavior","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"UpdateBehavior","nameWithType":"UpdateBehavior","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nA behavior that can run in any update mode.\n","syntax":{"content":"public abstract class UpdateBehavior : MonoBehaviour","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.DataStructures.UpdateBehavior"},{"children":null,"id":"updateMode","implements":null,"inheritance":null,"inheritedMembers":null,"name":"updateMode","nameWithType":"UpdateBehavior.updateMode","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UpdateBehavior","remarks":null,"summary":"\nThe update mode of the behavior.\n","syntax":{"content":"public UpdateMode updateMode","parameters":null,"return":{"description":null,"type":"Zigurous.DataStructures.UpdateMode"},"typeParameters":null},"type":"Field","uid":"Zigurous.DataStructures.UpdateBehavior.updateMode"},{"children":null,"id":"OnUpdate(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnUpdate(Single)","nameWithType":"UpdateBehavior.OnUpdate(Single)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UpdateBehavior","remarks":null,"summary":"\nHandles behavior updates.\n","syntax":{"content":"protected abstract void OnUpdate(float deltaTime)","parameters":[{"description":"The time since the last frame.","id":"deltaTime","type":"System.Single"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.UpdateBehavior.OnUpdate(System.Single)"},{"children":null,"id":"OnEnable","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnEnable()","nameWithType":"UpdateBehavior.OnEnable()","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UpdateBehavior","remarks":null,"summary":"\nA Unity lifecycle method called when the behavior is enabled.\n","syntax":{"content":"protected virtual void OnEnable()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.UpdateBehavior.OnEnable"},{"children":null,"id":"OnDisable","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnDisable()","nameWithType":"UpdateBehavior.OnDisable()","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UpdateBehavior","remarks":null,"summary":"\nA Unity lifecycle method called when the behavior is disabled.\n","syntax":{"content":"protected virtual void OnDisable()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.UpdateBehavior.OnDisable"},{"children":null,"id":"OnValidate","implements":null,"inheritance":null,"inheritedMembers":null,"name":"OnValidate()","nameWithType":"UpdateBehavior.OnValidate()","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UpdateBehavior","remarks":null,"summary":"\nA Unity lifecycle method called during editor validation.\n","syntax":{"content":"protected virtual void OnValidate()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.UpdateBehavior.OnValidate"}]},{"items":[{"children":["Zigurous.DataStructures.UpdateMode.FixedUpdate","Zigurous.DataStructures.UpdateMode.LateUpdate","Zigurous.DataStructures.UpdateMode.Update"],"id":"UpdateMode","implements":null,"inheritance":null,"inheritedMembers":null,"name":"UpdateMode","nameWithType":"UpdateMode","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nAn update mode a behavior can run with.\n","syntax":{"content":"public enum UpdateMode","parameters":null,"return":null,"typeParameters":null},"type":"Enum","uid":"Zigurous.DataStructures.UpdateMode"},{"children":null,"id":"Update","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Update","nameWithType":"UpdateMode.Update","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UpdateMode","remarks":null,"summary":"\nUpdates during the normal loop, once every frame.\n","syntax":{"content":"Update = 0","parameters":null,"return":{"description":null,"type":"Zigurous.DataStructures.UpdateMode"},"typeParameters":null},"type":"Field","uid":"Zigurous.DataStructures.UpdateMode.Update"},{"children":null,"id":"LateUpdate","implements":null,"inheritance":null,"inheritedMembers":null,"name":"LateUpdate","nameWithType":"UpdateMode.LateUpdate","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UpdateMode","remarks":null,"summary":"\nUpdates after all other update functions, once every frame.\n","syntax":{"content":"LateUpdate = 1","parameters":null,"return":{"description":null,"type":"Zigurous.DataStructures.UpdateMode"},"typeParameters":null},"type":"Field","uid":"Zigurous.DataStructures.UpdateMode.LateUpdate"},{"children":null,"id":"FixedUpdate","implements":null,"inheritance":null,"inheritedMembers":null,"name":"FixedUpdate","nameWithType":"UpdateMode.FixedUpdate","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UpdateMode","remarks":null,"summary":"\nUpdates during the physics loop at a fixed timestep.\n","syntax":{"content":"FixedUpdate = 2","parameters":null,"return":{"description":null,"type":"Zigurous.DataStructures.UpdateMode"},"typeParameters":null},"type":"Field","uid":"Zigurous.DataStructures.UpdateMode.FixedUpdate"}]},{"items":[{"children":[],"id":"UpdateStrategy.UpdateAction","implements":null,"inheritance":null,"inheritedMembers":null,"name":"UpdateStrategy.UpdateAction","nameWithType":"UpdateStrategy.UpdateAction","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nA function delegate to execute an update action.\n","syntax":{"content":"public delegate void UpdateAction(float deltaTime);","parameters":[{"description":"The time since the last frame.","id":"deltaTime","type":"System.Single"}],"return":null,"typeParameters":null},"type":"Delegate","uid":"Zigurous.DataStructures.UpdateStrategy.UpdateAction"}]},{"items":[{"children":["Zigurous.DataStructures.UpdateStrategy.Execute(System.Single)","Zigurous.DataStructures.UpdateStrategy.Register(Zigurous.DataStructures.UpdateStrategy.UpdateAction)","Zigurous.DataStructures.UpdateStrategy.Unregister(Zigurous.DataStructures.UpdateStrategy.UpdateAction)"],"id":"UpdateStrategy","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"UpdateStrategy","nameWithType":"UpdateStrategy","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nAn update strategy that executes an update action.\n","syntax":{"content":"public abstract class UpdateStrategy : MonoBehaviour","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.DataStructures.UpdateStrategy"},{"children":null,"id":"Execute(System.Single)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Execute(Single)","nameWithType":"UpdateStrategy.Execute(Single)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UpdateStrategy","remarks":null,"summary":"\nExecutes the update action.\n","syntax":{"content":"public void Execute(float deltaTime)","parameters":[{"description":"The time since the last frame.","id":"deltaTime","type":"System.Single"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.UpdateStrategy.Execute(System.Single)"},{"children":null,"id":"Register(Zigurous.DataStructures.UpdateStrategy.UpdateAction)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Register(UpdateStrategy.UpdateAction)","nameWithType":"UpdateStrategy.Register(UpdateStrategy.UpdateAction)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UpdateStrategy","remarks":null,"summary":"\nRegisters an update action to be executed by the strategy.\n","syntax":{"content":"public void Register(UpdateStrategy.UpdateAction action)","parameters":[{"description":"The update action to register.","id":"action","type":"Zigurous.DataStructures.UpdateStrategy.UpdateAction"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.UpdateStrategy.Register(Zigurous.DataStructures.UpdateStrategy.UpdateAction)"},{"children":null,"id":"Unregister(Zigurous.DataStructures.UpdateStrategy.UpdateAction)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Unregister(UpdateStrategy.UpdateAction)","nameWithType":"UpdateStrategy.Unregister(UpdateStrategy.UpdateAction)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.UpdateStrategy","remarks":null,"summary":"\nUnregisters an update action from being executed by the strategy.\n","syntax":{"content":"public void Unregister(UpdateStrategy.UpdateAction action)","parameters":[{"description":"The update action to unregister.","id":"action","type":"Zigurous.DataStructures.UpdateStrategy.UpdateAction"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.UpdateStrategy.Unregister(Zigurous.DataStructures.UpdateStrategy.UpdateAction)"}]},{"items":[{"children":["Zigurous.DataStructures.ValueAccumulator`1.#ctor","Zigurous.DataStructures.ValueAccumulator`1.Add(`0)","Zigurous.DataStructures.ValueAccumulator`1.Clear","Zigurous.DataStructures.ValueAccumulator`1.count","Zigurous.DataStructures.ValueAccumulator`1.defaultValue","Zigurous.DataStructures.ValueAccumulator`1.GetValue(System.Int32)","Zigurous.DataStructures.ValueAccumulator`1.RemoveValue(System.Int32)","Zigurous.DataStructures.ValueAccumulator`1.SetValue(System.Int32,`0)","Zigurous.DataStructures.ValueAccumulator`1.Subtract(`0)","Zigurous.DataStructures.ValueAccumulator`1.total","Zigurous.DataStructures.ValueAccumulator`1.values"],"id":"ValueAccumulator`1","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"ValueAccumulator<T>","nameWithType":"ValueAccumulator<T>","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nAccumulates a set of stored values into a single total value.\n","syntax":{"content":"public abstract class ValueAccumulator<T>","parameters":null,"return":null,"typeParameters":[{"description":"The type of value to accumulate.","id":"T"}]},"type":"Class","uid":"Zigurous.DataStructures.ValueAccumulator`1"},{"children":null,"id":"values","implements":null,"inheritance":null,"inheritedMembers":null,"name":"values","nameWithType":"ValueAccumulator<T>.values","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ValueAccumulator`1","remarks":null,"summary":"\nThe stored values with their given identifiers (Read only).\n","syntax":{"content":"public Dictionary<int, T> values { get; protected set; }","parameters":[],"return":{"description":null,"type":"Global.Dictionary{System.Int32,{T}}"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.ValueAccumulator`1.values"},{"children":null,"id":"total","implements":null,"inheritance":null,"inheritedMembers":null,"name":"total","nameWithType":"ValueAccumulator<T>.total","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ValueAccumulator`1","remarks":null,"summary":"\nThe total accumulated value (Read only).\n","syntax":{"content":"public T total { get; protected set; }","parameters":[],"return":{"description":null,"type":"{T}"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.ValueAccumulator`1.total"},{"children":null,"id":"count","implements":null,"inheritance":null,"inheritedMembers":null,"name":"count","nameWithType":"ValueAccumulator<T>.count","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ValueAccumulator`1","remarks":null,"summary":"\nThe number of unique values being accumulated (Read only).\n","syntax":{"content":"public int count { get; }","parameters":[],"return":{"description":null,"type":"System.Int32"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.ValueAccumulator`1.count"},{"children":null,"id":"defaultValue","implements":null,"inheritance":null,"inheritedMembers":null,"name":"defaultValue","nameWithType":"ValueAccumulator<T>.defaultValue","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ValueAccumulator`1","remarks":null,"summary":"\nThe default value of <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code>.\n","syntax":{"content":"protected virtual T defaultValue { get; }","parameters":[],"return":{"description":null,"type":"{T}"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.ValueAccumulator`1.defaultValue"},{"children":null,"id":"#ctor","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ValueAccumulator()","nameWithType":"ValueAccumulator<T>.ValueAccumulator()","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ValueAccumulator`1","remarks":null,"summary":"\nCreates a new instance of the value accumulator.\n","syntax":{"content":"public ValueAccumulator()","parameters":null,"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.DataStructures.ValueAccumulator`1.#ctor"},{"children":null,"id":"GetValue(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"GetValue(Int32)","nameWithType":"ValueAccumulator<T>.GetValue(Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ValueAccumulator`1","remarks":null,"summary":"\nReturns the value stored with the specified identifier.\n","syntax":{"content":"public T GetValue(int identifier)","parameters":[{"description":"The identifier of the stored value.","id":"identifier","type":"System.Int32"}],"return":{"description":"The value stored with the identifier, or <code>default(T)</code> if the value does not exist.","type":"{T}"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.ValueAccumulator`1.GetValue(System.Int32)"},{"children":null,"id":"SetValue(System.Int32,`0)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"SetValue(Int32, T)","nameWithType":"ValueAccumulator<T>.SetValue(Int32, T)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ValueAccumulator`1","remarks":null,"summary":"\nStores a given value with the specified identifier. The total\naccumulated value is updated based on the difference between the new\nand old value.\n","syntax":{"content":"public void SetValue(int identifier, T value)","parameters":[{"description":"The identifier of the value.","id":"identifier","type":"System.Int32"},{"description":"The value to set.","id":"value","type":"{T}"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.ValueAccumulator`1.SetValue(System.Int32,`0)"},{"children":null,"id":"RemoveValue(System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"RemoveValue(Int32)","nameWithType":"ValueAccumulator<T>.RemoveValue(Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ValueAccumulator`1","remarks":null,"summary":"\nRemoves the value stored with the given identifier and updates the\ntotal accumulated value.\n","syntax":{"content":"public void RemoveValue(int identifier)","parameters":[{"description":"The identifier of the stored value to remove.","id":"identifier","type":"System.Int32"}],"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.ValueAccumulator`1.RemoveValue(System.Int32)"},{"children":null,"id":"Clear","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Clear()","nameWithType":"ValueAccumulator<T>.Clear()","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ValueAccumulator`1","remarks":null,"summary":"\nRemoves all stored values and resets the total accumulated value.\n","syntax":{"content":"public void Clear()","parameters":null,"return":null,"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.ValueAccumulator`1.Clear"},{"children":null,"id":"Add(`0)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Add(T)","nameWithType":"ValueAccumulator<T>.Add(T)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ValueAccumulator`1","remarks":null,"summary":"\nIncreases the accumulated total by a given value.\n","syntax":{"content":"protected abstract T Add(T value)","parameters":[{"description":"The value to add to the total.","id":"value","type":"{T}"}],"return":{"description":"The new total value.","type":"{T}"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.ValueAccumulator`1.Add(`0)"},{"children":null,"id":"Subtract(`0)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Subtract(T)","nameWithType":"ValueAccumulator<T>.Subtract(T)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ValueAccumulator`1","remarks":null,"summary":"\nDecreases the accumulated total by a given value.\n","syntax":{"content":"protected abstract T Subtract(T value)","parameters":[{"description":"The value to subtract from the total.","id":"value","type":"{T}"}],"return":{"description":"The new total value.","type":"{T}"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.ValueAccumulator`1.Subtract(`0)"}]},{"items":[{"children":["Zigurous.DataStructures.Vector2Accumulator.Add(Vector2)","Zigurous.DataStructures.Vector2Accumulator.defaultValue","Zigurous.DataStructures.Vector2Accumulator.Subtract(Vector2)"],"id":"Vector2Accumulator","implements":null,"inheritance":["System.Object","Zigurous.DataStructures.ValueAccumulator{Vector2}"],"inheritedMembers":["Zigurous.DataStructures.ValueAccumulator{Vector2}.values","Zigurous.DataStructures.ValueAccumulator{Vector2}.total","Zigurous.DataStructures.ValueAccumulator{Vector2}.count","Zigurous.DataStructures.ValueAccumulator{Vector2}.GetValue(System.Int32)","Zigurous.DataStructures.ValueAccumulator{Vector2}.SetValue(System.Int32,Vector2)","Zigurous.DataStructures.ValueAccumulator{Vector2}.RemoveValue(System.Int32)","Zigurous.DataStructures.ValueAccumulator{Vector2}.Clear"],"name":"Vector2Accumulator","nameWithType":"Vector2Accumulator","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nAccumulates Vector2 values into a single total value.\n","syntax":{"content":"public sealed class Vector2Accumulator : ValueAccumulator<Vector2>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.DataStructures.Vector2Accumulator"},{"children":null,"id":"defaultValue","implements":null,"inheritance":null,"inheritedMembers":null,"name":"defaultValue","nameWithType":"Vector2Accumulator.defaultValue","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector2Accumulator","remarks":null,"summary":"\nThe default value of <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code>.\n","syntax":{"content":"protected override Vector2 defaultValue { get; }","parameters":[],"return":{"description":null,"type":"Global.Vector2"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Vector2Accumulator.defaultValue"},{"children":null,"id":"Add(Vector2)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Add(Vector2)","nameWithType":"Vector2Accumulator.Add(Vector2)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector2Accumulator","remarks":null,"summary":"\nIncreases the accumulated total by a given value.\n","syntax":{"content":"protected override Vector2 Add(Vector2 value)","parameters":[{"description":"The value to add to the total.","id":"value","type":"Global.Vector2"}],"return":{"description":"The new total value.","type":"Global.Vector2"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Vector2Accumulator.Add(Vector2)"},{"children":null,"id":"Subtract(Vector2)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Subtract(Vector2)","nameWithType":"Vector2Accumulator.Subtract(Vector2)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector2Accumulator","remarks":null,"summary":"\nDecreases the accumulated total by a given value.\n","syntax":{"content":"protected override Vector2 Subtract(Vector2 value)","parameters":[{"description":"The value to subtract from the total.","id":"value","type":"Global.Vector2"}],"return":{"description":"The new total value.","type":"Global.Vector2"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Vector2Accumulator.Subtract(Vector2)"}]},{"items":[{"children":["Zigurous.DataStructures.Vector2IntAccumulator.Add(Vector2Int)","Zigurous.DataStructures.Vector2IntAccumulator.defaultValue","Zigurous.DataStructures.Vector2IntAccumulator.Subtract(Vector2Int)"],"id":"Vector2IntAccumulator","implements":null,"inheritance":["System.Object","Zigurous.DataStructures.ValueAccumulator{Vector2Int}"],"inheritedMembers":["Zigurous.DataStructures.ValueAccumulator{Vector2Int}.values","Zigurous.DataStructures.ValueAccumulator{Vector2Int}.total","Zigurous.DataStructures.ValueAccumulator{Vector2Int}.count","Zigurous.DataStructures.ValueAccumulator{Vector2Int}.GetValue(System.Int32)","Zigurous.DataStructures.ValueAccumulator{Vector2Int}.SetValue(System.Int32,Vector2Int)","Zigurous.DataStructures.ValueAccumulator{Vector2Int}.RemoveValue(System.Int32)","Zigurous.DataStructures.ValueAccumulator{Vector2Int}.Clear"],"name":"Vector2IntAccumulator","nameWithType":"Vector2IntAccumulator","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nAccumulates Vector2Int values into a single total value.\n","syntax":{"content":"public sealed class Vector2IntAccumulator : ValueAccumulator<Vector2Int>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.DataStructures.Vector2IntAccumulator"},{"children":null,"id":"defaultValue","implements":null,"inheritance":null,"inheritedMembers":null,"name":"defaultValue","nameWithType":"Vector2IntAccumulator.defaultValue","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector2IntAccumulator","remarks":null,"summary":"\nThe default value of <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code>.\n","syntax":{"content":"protected override Vector2Int defaultValue { get; }","parameters":[],"return":{"description":null,"type":"Global.Vector2Int"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Vector2IntAccumulator.defaultValue"},{"children":null,"id":"Add(Vector2Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Add(Vector2Int)","nameWithType":"Vector2IntAccumulator.Add(Vector2Int)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector2IntAccumulator","remarks":null,"summary":"\nIncreases the accumulated total by a given value.\n","syntax":{"content":"protected override Vector2Int Add(Vector2Int value)","parameters":[{"description":"The value to add to the total.","id":"value","type":"Global.Vector2Int"}],"return":{"description":"The new total value.","type":"Global.Vector2Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Vector2IntAccumulator.Add(Vector2Int)"},{"children":null,"id":"Subtract(Vector2Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Subtract(Vector2Int)","nameWithType":"Vector2IntAccumulator.Subtract(Vector2Int)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector2IntAccumulator","remarks":null,"summary":"\nDecreases the accumulated total by a given value.\n","syntax":{"content":"protected override Vector2Int Subtract(Vector2Int value)","parameters":[{"description":"The value to subtract from the total.","id":"value","type":"Global.Vector2Int"}],"return":{"description":"The new total value.","type":"Global.Vector2Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Vector2IntAccumulator.Subtract(Vector2Int)"}]},{"items":[{"children":["Zigurous.DataStructures.Vector2Range.#ctor(Vector2,Vector2)","Zigurous.DataStructures.Vector2Range.Clamp(Vector2)","Zigurous.DataStructures.Vector2Range.delta","Zigurous.DataStructures.Vector2Range.Includes(Vector2)","Zigurous.DataStructures.Vector2Range.Includes(Vector2,System.Boolean,System.Boolean)","Zigurous.DataStructures.Vector2Range.InverseLerp(Vector2)","Zigurous.DataStructures.Vector2Range.Lerp(System.Single)","Zigurous.DataStructures.Vector2Range.max","Zigurous.DataStructures.Vector2Range.median","Zigurous.DataStructures.Vector2Range.min","Zigurous.DataStructures.Vector2Range.Random"],"id":"Vector2Range","implements":["Zigurous.DataStructures.INumberRange{Vector2}","Zigurous.DataStructures.IRange{Vector2}"],"inheritance":null,"inheritedMembers":null,"name":"Vector2Range","nameWithType":"Vector2Range","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nA range of Vector2 values.\n","syntax":{"content":"[Serializable]\npublic struct Vector2Range : INumberRange<Vector2>, IRange<Vector2>","parameters":null,"return":null,"typeParameters":null},"type":"Struct","uid":"Zigurous.DataStructures.Vector2Range"},{"children":null,"id":"min","implements":["Zigurous.DataStructures.IRange{Vector2}.min"],"inheritance":null,"inheritedMembers":null,"name":"min","nameWithType":"Vector2Range.min","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector2Range","remarks":null,"summary":"\nThe lower bound of the range.\n","syntax":{"content":"public Vector2 min { get; set; }","parameters":[],"return":{"description":null,"type":"Global.Vector2"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Vector2Range.min"},{"children":null,"id":"max","implements":["Zigurous.DataStructures.IRange{Vector2}.max"],"inheritance":null,"inheritedMembers":null,"name":"max","nameWithType":"Vector2Range.max","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector2Range","remarks":null,"summary":"\nThe upper bound of the range.\n","syntax":{"content":"public Vector2 max { get; set; }","parameters":[],"return":{"description":null,"type":"Global.Vector2"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Vector2Range.max"},{"children":null,"id":"delta","implements":["Zigurous.DataStructures.INumberRange{Vector2}.delta"],"inheritance":null,"inheritedMembers":null,"name":"delta","nameWithType":"Vector2Range.delta","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector2Range","remarks":null,"summary":"\nThe difference between the maximum and minimum values (Read only).\n","syntax":{"content":"public readonly Vector2 delta { get; }","parameters":[],"return":{"description":null,"type":"Global.Vector2"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Vector2Range.delta"},{"children":null,"id":"median","implements":["Zigurous.DataStructures.INumberRange{Vector2}.median"],"inheritance":null,"inheritedMembers":null,"name":"median","nameWithType":"Vector2Range.median","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector2Range","remarks":null,"summary":"\nThe median value of the range (Read only).\n","syntax":{"content":"public readonly Vector2 median { get; }","parameters":[],"return":{"description":null,"type":"Global.Vector2"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Vector2Range.median"},{"children":null,"id":"#ctor(Vector2,Vector2)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Vector2Range(Vector2, Vector2)","nameWithType":"Vector2Range.Vector2Range(Vector2, Vector2)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector2Range","remarks":null,"summary":"\nCreates a new range with the specified values.\n","syntax":{"content":"public Vector2Range(Vector2 min, Vector2 max)","parameters":[{"description":"The lower bound of the range.","id":"min","type":"Global.Vector2"},{"description":"The upper bound of the range.","id":"max","type":"Global.Vector2"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.DataStructures.Vector2Range.#ctor(Vector2,Vector2)"},{"children":null,"id":"Random","implements":["Zigurous.DataStructures.INumberRange{Vector2}.Random"],"inheritance":null,"inheritedMembers":null,"name":"Random()","nameWithType":"Vector2Range.Random()","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector2Range","remarks":null,"summary":"\nReturns a random value in the range.\n","syntax":{"content":"public Vector2 Random()","parameters":null,"return":{"description":"A random value in the range.","type":"Global.Vector2"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Vector2Range.Random"},{"children":null,"id":"Includes(Vector2)","implements":["Zigurous.DataStructures.IRange{Vector2}.Includes(Vector2)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Vector2)","nameWithType":"Vector2Range.Includes(Vector2)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector2Range","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(Vector2 value)","parameters":[{"description":"The value to check.","id":"value","type":"Global.Vector2"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Vector2Range.Includes(Vector2)"},{"children":null,"id":"Includes(Vector2,System.Boolean,System.Boolean)","implements":["Zigurous.DataStructures.IRange{Vector2}.Includes(Vector2,System.Boolean,System.Boolean)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Vector2, Boolean, Boolean)","nameWithType":"Vector2Range.Includes(Vector2, Boolean, Boolean)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector2Range","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(Vector2 value, bool includeMin, bool includeMax)","parameters":[{"description":"The value to check.","id":"value","type":"Global.Vector2"},{"description":"The minimum value is inclusive if true, exclusive if false.","id":"includeMin","type":"System.Boolean"},{"description":"The maximum value is inclusive if true, exclusive if false.","id":"includeMax","type":"System.Boolean"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Vector2Range.Includes(Vector2,System.Boolean,System.Boolean)"},{"children":null,"id":"Clamp(Vector2)","implements":["Zigurous.DataStructures.INumberRange{Vector2}.Clamp(Vector2)"],"inheritance":null,"inheritedMembers":null,"name":"Clamp(Vector2)","nameWithType":"Vector2Range.Clamp(Vector2)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector2Range","remarks":null,"summary":"\nClamps a value to the range.\n","syntax":{"content":"public Vector2 Clamp(Vector2 value)","parameters":[{"description":"The value to clamp.","id":"value","type":"Global.Vector2"}],"return":{"description":"The clamped value.","type":"Global.Vector2"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Vector2Range.Clamp(Vector2)"},{"children":null,"id":"Lerp(System.Single)","implements":["Zigurous.DataStructures.INumberRange{Vector2}.Lerp(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"Lerp(Single)","nameWithType":"Vector2Range.Lerp(Single)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector2Range","remarks":null,"summary":"\nLinearly interpolates between the range by <code data-dev-comment-type=\"paramref\" class=\"paramref\">t</code>.\n","syntax":{"content":"public Vector2 Lerp(float t)","parameters":[{"description":"The interpolant value between [0..1].","id":"t","type":"System.Single"}],"return":{"description":"The interpolated value.","type":"Global.Vector2"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Vector2Range.Lerp(System.Single)"},{"children":null,"id":"InverseLerp(Vector2)","implements":["Zigurous.DataStructures.INumberRange{Vector2}.InverseLerp(Vector2)"],"inheritance":null,"inheritedMembers":null,"name":"InverseLerp(Vector2)","nameWithType":"Vector2Range.InverseLerp(Vector2)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector2Range","remarks":null,"summary":"\nCalculates the linear parameter t that produces the interpolant\nvalue within the range.\n","syntax":{"content":"public float InverseLerp(Vector2 value)","parameters":[{"description":"The value within the range you want to calculate.","id":"value","type":"Global.Vector2"}],"return":{"description":"The interpolant value between [0..1].","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Vector2Range.InverseLerp(Vector2)"}]},{"items":[{"children":["Zigurous.DataStructures.Vector3Accumulator.Add(Vector3)","Zigurous.DataStructures.Vector3Accumulator.defaultValue","Zigurous.DataStructures.Vector3Accumulator.Subtract(Vector3)"],"id":"Vector3Accumulator","implements":null,"inheritance":["System.Object","Zigurous.DataStructures.ValueAccumulator{Vector3}"],"inheritedMembers":["Zigurous.DataStructures.ValueAccumulator{Vector3}.values","Zigurous.DataStructures.ValueAccumulator{Vector3}.total","Zigurous.DataStructures.ValueAccumulator{Vector3}.count","Zigurous.DataStructures.ValueAccumulator{Vector3}.GetValue(System.Int32)","Zigurous.DataStructures.ValueAccumulator{Vector3}.SetValue(System.Int32,Vector3)","Zigurous.DataStructures.ValueAccumulator{Vector3}.RemoveValue(System.Int32)","Zigurous.DataStructures.ValueAccumulator{Vector3}.Clear"],"name":"Vector3Accumulator","nameWithType":"Vector3Accumulator","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nAccumulates Vector3 values into a single total value.\n","syntax":{"content":"public sealed class Vector3Accumulator : ValueAccumulator<Vector3>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.DataStructures.Vector3Accumulator"},{"children":null,"id":"defaultValue","implements":null,"inheritance":null,"inheritedMembers":null,"name":"defaultValue","nameWithType":"Vector3Accumulator.defaultValue","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector3Accumulator","remarks":null,"summary":"\nThe default value of <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code>.\n","syntax":{"content":"protected override Vector3 defaultValue { get; }","parameters":[],"return":{"description":null,"type":"Global.Vector3"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Vector3Accumulator.defaultValue"},{"children":null,"id":"Add(Vector3)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Add(Vector3)","nameWithType":"Vector3Accumulator.Add(Vector3)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector3Accumulator","remarks":null,"summary":"\nIncreases the accumulated total by a given value.\n","syntax":{"content":"protected override Vector3 Add(Vector3 value)","parameters":[{"description":"The value to add to the total.","id":"value","type":"Global.Vector3"}],"return":{"description":"The new total value.","type":"Global.Vector3"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Vector3Accumulator.Add(Vector3)"},{"children":null,"id":"Subtract(Vector3)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Subtract(Vector3)","nameWithType":"Vector3Accumulator.Subtract(Vector3)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector3Accumulator","remarks":null,"summary":"\nDecreases the accumulated total by a given value.\n","syntax":{"content":"protected override Vector3 Subtract(Vector3 value)","parameters":[{"description":"The value to subtract from the total.","id":"value","type":"Global.Vector3"}],"return":{"description":"The new total value.","type":"Global.Vector3"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Vector3Accumulator.Subtract(Vector3)"}]},{"items":[{"children":["Zigurous.DataStructures.Vector3IntAccumulator.Add(Vector3Int)","Zigurous.DataStructures.Vector3IntAccumulator.defaultValue","Zigurous.DataStructures.Vector3IntAccumulator.Subtract(Vector3Int)"],"id":"Vector3IntAccumulator","implements":null,"inheritance":["System.Object","Zigurous.DataStructures.ValueAccumulator{Vector3Int}"],"inheritedMembers":["Zigurous.DataStructures.ValueAccumulator{Vector3Int}.values","Zigurous.DataStructures.ValueAccumulator{Vector3Int}.total","Zigurous.DataStructures.ValueAccumulator{Vector3Int}.count","Zigurous.DataStructures.ValueAccumulator{Vector3Int}.GetValue(System.Int32)","Zigurous.DataStructures.ValueAccumulator{Vector3Int}.SetValue(System.Int32,Vector3Int)","Zigurous.DataStructures.ValueAccumulator{Vector3Int}.RemoveValue(System.Int32)","Zigurous.DataStructures.ValueAccumulator{Vector3Int}.Clear"],"name":"Vector3IntAccumulator","nameWithType":"Vector3IntAccumulator","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nAccumulates Vector3Int values into a single total value.\n","syntax":{"content":"public sealed class Vector3IntAccumulator : ValueAccumulator<Vector3Int>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.DataStructures.Vector3IntAccumulator"},{"children":null,"id":"defaultValue","implements":null,"inheritance":null,"inheritedMembers":null,"name":"defaultValue","nameWithType":"Vector3IntAccumulator.defaultValue","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector3IntAccumulator","remarks":null,"summary":"\nThe default value of <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code>.\n","syntax":{"content":"protected override Vector3Int defaultValue { get; }","parameters":[],"return":{"description":null,"type":"Global.Vector3Int"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Vector3IntAccumulator.defaultValue"},{"children":null,"id":"Add(Vector3Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Add(Vector3Int)","nameWithType":"Vector3IntAccumulator.Add(Vector3Int)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector3IntAccumulator","remarks":null,"summary":"\nIncreases the accumulated total by a given value.\n","syntax":{"content":"protected override Vector3Int Add(Vector3Int value)","parameters":[{"description":"The value to add to the total.","id":"value","type":"Global.Vector3Int"}],"return":{"description":"The new total value.","type":"Global.Vector3Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Vector3IntAccumulator.Add(Vector3Int)"},{"children":null,"id":"Subtract(Vector3Int)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Subtract(Vector3Int)","nameWithType":"Vector3IntAccumulator.Subtract(Vector3Int)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector3IntAccumulator","remarks":null,"summary":"\nDecreases the accumulated total by a given value.\n","syntax":{"content":"protected override Vector3Int Subtract(Vector3Int value)","parameters":[{"description":"The value to subtract from the total.","id":"value","type":"Global.Vector3Int"}],"return":{"description":"The new total value.","type":"Global.Vector3Int"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Vector3IntAccumulator.Subtract(Vector3Int)"}]},{"items":[{"children":["Zigurous.DataStructures.Vector3Range.#ctor(Vector3,Vector3)","Zigurous.DataStructures.Vector3Range.Clamp(Vector3)","Zigurous.DataStructures.Vector3Range.delta","Zigurous.DataStructures.Vector3Range.Includes(Vector3)","Zigurous.DataStructures.Vector3Range.Includes(Vector3,System.Boolean,System.Boolean)","Zigurous.DataStructures.Vector3Range.InverseLerp(Vector3)","Zigurous.DataStructures.Vector3Range.Lerp(System.Single)","Zigurous.DataStructures.Vector3Range.max","Zigurous.DataStructures.Vector3Range.median","Zigurous.DataStructures.Vector3Range.min","Zigurous.DataStructures.Vector3Range.Random"],"id":"Vector3Range","implements":["Zigurous.DataStructures.INumberRange{Vector3}","Zigurous.DataStructures.IRange{Vector3}"],"inheritance":null,"inheritedMembers":null,"name":"Vector3Range","nameWithType":"Vector3Range","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nA range of Vector3 values.\n","syntax":{"content":"[Serializable]\npublic struct Vector3Range : INumberRange<Vector3>, IRange<Vector3>","parameters":null,"return":null,"typeParameters":null},"type":"Struct","uid":"Zigurous.DataStructures.Vector3Range"},{"children":null,"id":"min","implements":["Zigurous.DataStructures.IRange{Vector3}.min"],"inheritance":null,"inheritedMembers":null,"name":"min","nameWithType":"Vector3Range.min","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector3Range","remarks":null,"summary":"\nThe lower bound of the range.\n","syntax":{"content":"public Vector3 min { get; set; }","parameters":[],"return":{"description":null,"type":"Global.Vector3"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Vector3Range.min"},{"children":null,"id":"max","implements":["Zigurous.DataStructures.IRange{Vector3}.max"],"inheritance":null,"inheritedMembers":null,"name":"max","nameWithType":"Vector3Range.max","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector3Range","remarks":null,"summary":"\nThe upper bound of the range.\n","syntax":{"content":"public Vector3 max { get; set; }","parameters":[],"return":{"description":null,"type":"Global.Vector3"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Vector3Range.max"},{"children":null,"id":"delta","implements":["Zigurous.DataStructures.INumberRange{Vector3}.delta"],"inheritance":null,"inheritedMembers":null,"name":"delta","nameWithType":"Vector3Range.delta","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector3Range","remarks":null,"summary":"\nThe difference between the maximum and minimum values (Read only).\n","syntax":{"content":"public readonly Vector3 delta { get; }","parameters":[],"return":{"description":null,"type":"Global.Vector3"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Vector3Range.delta"},{"children":null,"id":"median","implements":["Zigurous.DataStructures.INumberRange{Vector3}.median"],"inheritance":null,"inheritedMembers":null,"name":"median","nameWithType":"Vector3Range.median","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector3Range","remarks":null,"summary":"\nThe median value of the range (Read only).\n","syntax":{"content":"public readonly Vector3 median { get; }","parameters":[],"return":{"description":null,"type":"Global.Vector3"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Vector3Range.median"},{"children":null,"id":"#ctor(Vector3,Vector3)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Vector3Range(Vector3, Vector3)","nameWithType":"Vector3Range.Vector3Range(Vector3, Vector3)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector3Range","remarks":null,"summary":"\nCreates a new range with the specified values.\n","syntax":{"content":"public Vector3Range(Vector3 min, Vector3 max)","parameters":[{"description":"The lower bound of the range.","id":"min","type":"Global.Vector3"},{"description":"The upper bound of the range.","id":"max","type":"Global.Vector3"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.DataStructures.Vector3Range.#ctor(Vector3,Vector3)"},{"children":null,"id":"Random","implements":["Zigurous.DataStructures.INumberRange{Vector3}.Random"],"inheritance":null,"inheritedMembers":null,"name":"Random()","nameWithType":"Vector3Range.Random()","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector3Range","remarks":null,"summary":"\nReturns a random value in the range.\n","syntax":{"content":"public Vector3 Random()","parameters":null,"return":{"description":"A random value in the range.","type":"Global.Vector3"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Vector3Range.Random"},{"children":null,"id":"Includes(Vector3)","implements":["Zigurous.DataStructures.IRange{Vector3}.Includes(Vector3)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Vector3)","nameWithType":"Vector3Range.Includes(Vector3)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector3Range","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(Vector3 value)","parameters":[{"description":"The value to check.","id":"value","type":"Global.Vector3"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Vector3Range.Includes(Vector3)"},{"children":null,"id":"Includes(Vector3,System.Boolean,System.Boolean)","implements":["Zigurous.DataStructures.IRange{Vector3}.Includes(Vector3,System.Boolean,System.Boolean)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Vector3, Boolean, Boolean)","nameWithType":"Vector3Range.Includes(Vector3, Boolean, Boolean)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector3Range","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(Vector3 value, bool includeMin, bool includeMax)","parameters":[{"description":"The value to check.","id":"value","type":"Global.Vector3"},{"description":"The minimum value is inclusive if true, exclusive if false.","id":"includeMin","type":"System.Boolean"},{"description":"The maximum value is inclusive if true, exclusive if false.","id":"includeMax","type":"System.Boolean"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Vector3Range.Includes(Vector3,System.Boolean,System.Boolean)"},{"children":null,"id":"Clamp(Vector3)","implements":["Zigurous.DataStructures.INumberRange{Vector3}.Clamp(Vector3)"],"inheritance":null,"inheritedMembers":null,"name":"Clamp(Vector3)","nameWithType":"Vector3Range.Clamp(Vector3)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector3Range","remarks":null,"summary":"\nClamps a value to the range.\n","syntax":{"content":"public Vector3 Clamp(Vector3 value)","parameters":[{"description":"The value to clamp.","id":"value","type":"Global.Vector3"}],"return":{"description":"The clamped value.","type":"Global.Vector3"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Vector3Range.Clamp(Vector3)"},{"children":null,"id":"Lerp(System.Single)","implements":["Zigurous.DataStructures.INumberRange{Vector3}.Lerp(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"Lerp(Single)","nameWithType":"Vector3Range.Lerp(Single)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector3Range","remarks":null,"summary":"\nLinearly interpolates between the range by <code data-dev-comment-type=\"paramref\" class=\"paramref\">t</code>.\n","syntax":{"content":"public Vector3 Lerp(float t)","parameters":[{"description":"The interpolant value between [0..1].","id":"t","type":"System.Single"}],"return":{"description":"The interpolated value.","type":"Global.Vector3"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Vector3Range.Lerp(System.Single)"},{"children":null,"id":"InverseLerp(Vector3)","implements":["Zigurous.DataStructures.INumberRange{Vector3}.InverseLerp(Vector3)"],"inheritance":null,"inheritedMembers":null,"name":"InverseLerp(Vector3)","nameWithType":"Vector3Range.InverseLerp(Vector3)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector3Range","remarks":null,"summary":"\nCalculates the linear parameter t that produces the interpolant\nvalue within the range.\n","syntax":{"content":"public float InverseLerp(Vector3 value)","parameters":[{"description":"The value within the range you want to calculate.","id":"value","type":"Global.Vector3"}],"return":{"description":"The interpolant value between [0..1].","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Vector3Range.InverseLerp(Vector3)"}]},{"items":[{"children":["Zigurous.DataStructures.Vector4Accumulator.Add(Vector4)","Zigurous.DataStructures.Vector4Accumulator.defaultValue","Zigurous.DataStructures.Vector4Accumulator.Subtract(Vector4)"],"id":"Vector4Accumulator","implements":null,"inheritance":["System.Object","Zigurous.DataStructures.ValueAccumulator{Vector4}"],"inheritedMembers":["Zigurous.DataStructures.ValueAccumulator{Vector4}.values","Zigurous.DataStructures.ValueAccumulator{Vector4}.total","Zigurous.DataStructures.ValueAccumulator{Vector4}.count","Zigurous.DataStructures.ValueAccumulator{Vector4}.GetValue(System.Int32)","Zigurous.DataStructures.ValueAccumulator{Vector4}.SetValue(System.Int32,Vector4)","Zigurous.DataStructures.ValueAccumulator{Vector4}.RemoveValue(System.Int32)","Zigurous.DataStructures.ValueAccumulator{Vector4}.Clear"],"name":"Vector4Accumulator","nameWithType":"Vector4Accumulator","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nAccumulates Vector4 values into a single total value.\n","syntax":{"content":"public sealed class Vector4Accumulator : ValueAccumulator<Vector4>","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.DataStructures.Vector4Accumulator"},{"children":null,"id":"defaultValue","implements":null,"inheritance":null,"inheritedMembers":null,"name":"defaultValue","nameWithType":"Vector4Accumulator.defaultValue","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector4Accumulator","remarks":null,"summary":"\nThe default value of <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code>.\n","syntax":{"content":"protected override Vector4 defaultValue { get; }","parameters":[],"return":{"description":null,"type":"Global.Vector4"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Vector4Accumulator.defaultValue"},{"children":null,"id":"Add(Vector4)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Add(Vector4)","nameWithType":"Vector4Accumulator.Add(Vector4)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector4Accumulator","remarks":null,"summary":"\nIncreases the accumulated total by a given value.\n","syntax":{"content":"protected override Vector4 Add(Vector4 value)","parameters":[{"description":"The value to add to the total.","id":"value","type":"Global.Vector4"}],"return":{"description":"The new total value.","type":"Global.Vector4"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Vector4Accumulator.Add(Vector4)"},{"children":null,"id":"Subtract(Vector4)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Subtract(Vector4)","nameWithType":"Vector4Accumulator.Subtract(Vector4)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector4Accumulator","remarks":null,"summary":"\nDecreases the accumulated total by a given value.\n","syntax":{"content":"protected override Vector4 Subtract(Vector4 value)","parameters":[{"description":"The value to subtract from the total.","id":"value","type":"Global.Vector4"}],"return":{"description":"The new total value.","type":"Global.Vector4"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Vector4Accumulator.Subtract(Vector4)"}]},{"items":[{"children":["Zigurous.DataStructures.Vector4Range.#ctor(Vector4,Vector4)","Zigurous.DataStructures.Vector4Range.Clamp(Vector4)","Zigurous.DataStructures.Vector4Range.delta","Zigurous.DataStructures.Vector4Range.Includes(Vector4)","Zigurous.DataStructures.Vector4Range.Includes(Vector4,System.Boolean,System.Boolean)","Zigurous.DataStructures.Vector4Range.InverseLerp(Vector4)","Zigurous.DataStructures.Vector4Range.Lerp(System.Single)","Zigurous.DataStructures.Vector4Range.max","Zigurous.DataStructures.Vector4Range.median","Zigurous.DataStructures.Vector4Range.min","Zigurous.DataStructures.Vector4Range.Random"],"id":"Vector4Range","implements":["Zigurous.DataStructures.INumberRange{Vector4}","Zigurous.DataStructures.IRange{Vector4}"],"inheritance":null,"inheritedMembers":null,"name":"Vector4Range","nameWithType":"Vector4Range","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nA range of Vector4 values.\n","syntax":{"content":"[Serializable]\npublic struct Vector4Range : INumberRange<Vector4>, IRange<Vector4>","parameters":null,"return":null,"typeParameters":null},"type":"Struct","uid":"Zigurous.DataStructures.Vector4Range"},{"children":null,"id":"min","implements":["Zigurous.DataStructures.IRange{Vector4}.min"],"inheritance":null,"inheritedMembers":null,"name":"min","nameWithType":"Vector4Range.min","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector4Range","remarks":null,"summary":"\nThe lower bound of the range.\n","syntax":{"content":"public Vector4 min { get; set; }","parameters":[],"return":{"description":null,"type":"Global.Vector4"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Vector4Range.min"},{"children":null,"id":"max","implements":["Zigurous.DataStructures.IRange{Vector4}.max"],"inheritance":null,"inheritedMembers":null,"name":"max","nameWithType":"Vector4Range.max","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector4Range","remarks":null,"summary":"\nThe upper bound of the range.\n","syntax":{"content":"public Vector4 max { get; set; }","parameters":[],"return":{"description":null,"type":"Global.Vector4"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Vector4Range.max"},{"children":null,"id":"delta","implements":["Zigurous.DataStructures.INumberRange{Vector4}.delta"],"inheritance":null,"inheritedMembers":null,"name":"delta","nameWithType":"Vector4Range.delta","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector4Range","remarks":null,"summary":"\nThe difference between the maximum and minimum values (Read only).\n","syntax":{"content":"public readonly Vector4 delta { get; }","parameters":[],"return":{"description":null,"type":"Global.Vector4"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Vector4Range.delta"},{"children":null,"id":"median","implements":["Zigurous.DataStructures.INumberRange{Vector4}.median"],"inheritance":null,"inheritedMembers":null,"name":"median","nameWithType":"Vector4Range.median","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector4Range","remarks":null,"summary":"\nThe median value of the range (Read only).\n","syntax":{"content":"public readonly Vector4 median { get; }","parameters":[],"return":{"description":null,"type":"Global.Vector4"},"typeParameters":null},"type":"Property","uid":"Zigurous.DataStructures.Vector4Range.median"},{"children":null,"id":"#ctor(Vector4,Vector4)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Vector4Range(Vector4, Vector4)","nameWithType":"Vector4Range.Vector4Range(Vector4, Vector4)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector4Range","remarks":null,"summary":"\nCreates a new range with the specified values.\n","syntax":{"content":"public Vector4Range(Vector4 min, Vector4 max)","parameters":[{"description":"The lower bound of the range.","id":"min","type":"Global.Vector4"},{"description":"The upper bound of the range.","id":"max","type":"Global.Vector4"}],"return":null,"typeParameters":null},"type":"Constructor","uid":"Zigurous.DataStructures.Vector4Range.#ctor(Vector4,Vector4)"},{"children":null,"id":"Random","implements":["Zigurous.DataStructures.INumberRange{Vector4}.Random"],"inheritance":null,"inheritedMembers":null,"name":"Random()","nameWithType":"Vector4Range.Random()","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector4Range","remarks":null,"summary":"\nReturns a random value in the range.\n","syntax":{"content":"public Vector4 Random()","parameters":null,"return":{"description":"A random value in the range.","type":"Global.Vector4"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Vector4Range.Random"},{"children":null,"id":"Includes(Vector4)","implements":["Zigurous.DataStructures.IRange{Vector4}.Includes(Vector4)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Vector4)","nameWithType":"Vector4Range.Includes(Vector4)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector4Range","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(Vector4 value)","parameters":[{"description":"The value to check.","id":"value","type":"Global.Vector4"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Vector4Range.Includes(Vector4)"},{"children":null,"id":"Includes(Vector4,System.Boolean,System.Boolean)","implements":["Zigurous.DataStructures.IRange{Vector4}.Includes(Vector4,System.Boolean,System.Boolean)"],"inheritance":null,"inheritedMembers":null,"name":"Includes(Vector4, Boolean, Boolean)","nameWithType":"Vector4Range.Includes(Vector4, Boolean, Boolean)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector4Range","remarks":null,"summary":"\nChecks if a value is in the range.\n","syntax":{"content":"public bool Includes(Vector4 value, bool includeMin, bool includeMax)","parameters":[{"description":"The value to check.","id":"value","type":"Global.Vector4"},{"description":"The minimum value is inclusive if true, exclusive if false.","id":"includeMin","type":"System.Boolean"},{"description":"The maximum value is inclusive if true, exclusive if false.","id":"includeMax","type":"System.Boolean"}],"return":{"description":"True if the value is in the range, false otherwise.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Vector4Range.Includes(Vector4,System.Boolean,System.Boolean)"},{"children":null,"id":"Clamp(Vector4)","implements":["Zigurous.DataStructures.INumberRange{Vector4}.Clamp(Vector4)"],"inheritance":null,"inheritedMembers":null,"name":"Clamp(Vector4)","nameWithType":"Vector4Range.Clamp(Vector4)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector4Range","remarks":null,"summary":"\nClamps a value to the range.\n","syntax":{"content":"public Vector4 Clamp(Vector4 value)","parameters":[{"description":"The value to clamp.","id":"value","type":"Global.Vector4"}],"return":{"description":"The clamped value.","type":"Global.Vector4"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Vector4Range.Clamp(Vector4)"},{"children":null,"id":"Lerp(System.Single)","implements":["Zigurous.DataStructures.INumberRange{Vector4}.Lerp(System.Single)"],"inheritance":null,"inheritedMembers":null,"name":"Lerp(Single)","nameWithType":"Vector4Range.Lerp(Single)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector4Range","remarks":null,"summary":"\nLinearly interpolates between the range by <code data-dev-comment-type=\"paramref\" class=\"paramref\">t</code>.\n","syntax":{"content":"public Vector4 Lerp(float t)","parameters":[{"description":"The interpolant value between [0..1].","id":"t","type":"System.Single"}],"return":{"description":"The interpolated value.","type":"Global.Vector4"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Vector4Range.Lerp(System.Single)"},{"children":null,"id":"InverseLerp(Vector4)","implements":["Zigurous.DataStructures.INumberRange{Vector4}.InverseLerp(Vector4)"],"inheritance":null,"inheritedMembers":null,"name":"InverseLerp(Vector4)","nameWithType":"Vector4Range.InverseLerp(Vector4)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.Vector4Range","remarks":null,"summary":"\nCalculates the linear parameter t that produces the interpolant\nvalue within the range.\n","syntax":{"content":"public float InverseLerp(Vector4 value)","parameters":[{"description":"The value within the range you want to calculate.","id":"value","type":"Global.Vector4"}],"return":{"description":"The interpolant value between [0..1].","type":"System.Single"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.Vector4Range.InverseLerp(Vector4)"}]},{"items":[{"children":["Zigurous.DataStructures.ArrayExtensions","Zigurous.DataStructures.ArrayExtensions.Reducer`2","Zigurous.DataStructures.Bitmask","Zigurous.DataStructures.Bool3","Zigurous.DataStructures.ClampedRange","Zigurous.DataStructures.ColorRange","Zigurous.DataStructures.ComparableExtensions","Zigurous.DataStructures.DictionaryExtensions","Zigurous.DataStructures.DoubleAccumulator","Zigurous.DataStructures.EulerRange","Zigurous.DataStructures.FixedUpdateStrategy","Zigurous.DataStructures.FloatAccumulator","Zigurous.DataStructures.FloatRange","Zigurous.DataStructures.GridSize","Zigurous.DataStructures.HashCode","Zigurous.DataStructures.HashSetExtensions","Zigurous.DataStructures.Identifier","Zigurous.DataStructures.IModular`1","Zigurous.DataStructures.IntAccumulator","Zigurous.DataStructures.IntRange","Zigurous.DataStructures.INumberRange`1","Zigurous.DataStructures.IObjectPool`1","Zigurous.DataStructures.IRange`1","Zigurous.DataStructures.LateUpdateStrategy","Zigurous.DataStructures.ListExtensions","Zigurous.DataStructures.ListExtensions.Reducer`2","Zigurous.DataStructures.Modules`1","Zigurous.DataStructures.NormalUpdateStrategy","Zigurous.DataStructures.ObjectPool`1","Zigurous.DataStructures.ObjectPool`1.Generator","Zigurous.DataStructures.Quantity`1","Zigurous.DataStructures.QuaternionAccumulator","Zigurous.DataStructures.Range`1","Zigurous.DataStructures.SingletonBehavior`1","Zigurous.DataStructures.Size","Zigurous.DataStructures.SortedSetExtensions","Zigurous.DataStructures.StringExtensions","Zigurous.DataStructures.UIntRange","Zigurous.DataStructures.UnitIntervalRange","Zigurous.DataStructures.UpdateBehavior","Zigurous.DataStructures.UpdateMode","Zigurous.DataStructures.UpdateStrategy","Zigurous.DataStructures.UpdateStrategy.UpdateAction","Zigurous.DataStructures.ValueAccumulator`1","Zigurous.DataStructures.Vector2Accumulator","Zigurous.DataStructures.Vector2IntAccumulator","Zigurous.DataStructures.Vector2Range","Zigurous.DataStructures.Vector3Accumulator","Zigurous.DataStructures.Vector3IntAccumulator","Zigurous.DataStructures.Vector3Range","Zigurous.DataStructures.Vector4Accumulator","Zigurous.DataStructures.Vector4Range"],"id":"Zigurous.DataStructures","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Zigurous.DataStructures","nameWithType":"Zigurous.DataStructures","namespace":null,"parent":null,"remarks":null,"summary":null,"syntax":null,"type":"Namespace","uid":"Zigurous.DataStructures"}]},{"items":[{"children":["Zigurous.DataStructures.ArrayExtensions.Append``1(``0[],``0)","Zigurous.DataStructures.ArrayExtensions.Concat``1(``0[],``0[])","Zigurous.DataStructures.ArrayExtensions.Contains``1(``0[],``0)","Zigurous.DataStructures.ArrayExtensions.ElementAt``1(``0[],System.Int32)","Zigurous.DataStructures.ArrayExtensions.Filter``1(``0[],Predicate{``0})","Zigurous.DataStructures.ArrayExtensions.First``1(``0[])","Zigurous.DataStructures.ArrayExtensions.First``1(``0[],Predicate{``0})","Zigurous.DataStructures.ArrayExtensions.FirstNonNull``1(``0[])","Zigurous.DataStructures.ArrayExtensions.Flatten``1(``0[0:,0:,0:])","Zigurous.DataStructures.ArrayExtensions.Flatten``1(``0[0:,0:])","Zigurous.DataStructures.ArrayExtensions.For``1(``0[],Action{System.ValueTuple{``0,System.Int32}})","Zigurous.DataStructures.ArrayExtensions.ForEach``1(``0[],Action{``0})","Zigurous.DataStructures.ArrayExtensions.IndexOf``1(``0[],``0)","Zigurous.DataStructures.ArrayExtensions.IsAny``1(``0[],Predicate{``0})","Zigurous.DataStructures.ArrayExtensions.IsEach``1(``0[],Predicate{``0})","Zigurous.DataStructures.ArrayExtensions.IsEmpty(Array)","Zigurous.DataStructures.ArrayExtensions.IsInBounds(Array,System.Int32)","Zigurous.DataStructures.ArrayExtensions.IsNotEmpty(Array)","Zigurous.DataStructures.ArrayExtensions.IsNotInBounds(Array,System.Int32)","Zigurous.DataStructures.ArrayExtensions.Join``1(``0[],System.String,System.Int32,System.Int32)","Zigurous.DataStructures.ArrayExtensions.Last``1(``0[])","Zigurous.DataStructures.ArrayExtensions.Last``1(``0[],Predicate{``0})","Zigurous.DataStructures.ArrayExtensions.LastNonNull``1(``0[])","Zigurous.DataStructures.ArrayExtensions.Map``2(``0[],Converter{``0,``1})","Zigurous.DataStructures.ArrayExtensions.NonNull``1(``0[])","Zigurous.DataStructures.ArrayExtensions.Random``1(``0[])","Zigurous.DataStructures.ArrayExtensions.Reduce``2(``0[],``1,Zigurous.DataStructures.ArrayExtensions.Reducer{``1,``0})","Zigurous.DataStructures.ArrayExtensions.RemoveAt``1(``0[],System.Int32)","Zigurous.DataStructures.ArrayExtensions.Reverse``1(``0[])","Zigurous.DataStructures.ArrayExtensions.Reversed``1(``0[])","Zigurous.DataStructures.ArrayExtensions.Shuffle``1(``0[])","Zigurous.DataStructures.ArrayExtensions.Shuffle``1(``0[],Random)","Zigurous.DataStructures.ArrayExtensions.Slice``1(``0[],System.Int32)","Zigurous.DataStructures.ArrayExtensions.Sort``1(``0[],Comparison{``0})","Zigurous.DataStructures.ArrayExtensions.Where``1(``0[],Predicate{``0})","Zigurous.DataStructures.ArrayExtensions.WrapIndex(Array,System.Int32)"],"id":"ArrayExtensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"ArrayExtensions","nameWithType":"ArrayExtensions","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nExtension methods for arrays.\n","syntax":{"content":"public static class ArrayExtensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.DataStructures.ArrayExtensions"},{"children":null,"id":"Append``1(``0[],``0)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Append<T>(T[], T)","nameWithType":"ArrayExtensions.Append<T>(T[], T)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ArrayExtensions","remarks":null,"summary":"\nAppends an element to the end of the array.\n","syntax":{"content":"public static T[] Append<T>(this T[] array, T element)","parameters":[{"description":"The array to add the element to.","id":"array","type":"{T}[]"},{"description":"The element to add.","id":"element","type":"{T}"}],"return":{"description":"A new array with the added element.","type":"{T}[]"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ArrayExtensions.Append``1(``0[],``0)"},{"children":null,"id":"Concat``1(``0[],``0[])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Concat<T>(T[], T[])","nameWithType":"ArrayExtensions.Concat<T>(T[], T[])","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ArrayExtensions","remarks":null,"summary":"\nConcats an array of elements to the end of the array.\n","syntax":{"content":"public static T[] Concat<T>(this T[] array, T[] elements)","parameters":[{"description":"The array to add the elements to.","id":"array","type":"{T}[]"},{"description":"The elements to add.","id":"elements","type":"{T}[]"}],"return":{"description":"A new array with the added elements.","type":"{T}[]"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ArrayExtensions.Concat``1(``0[],``0[])"},{"children":null,"id":"Contains``1(``0[],``0)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Contains<T>(T[], T)","nameWithType":"ArrayExtensions.Contains<T>(T[], T)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ArrayExtensions","remarks":null,"summary":"\nChecks if the array contains the given element.\n","syntax":{"content":"public static bool Contains<T>(this T[] array, T element)\n    where T : IEquatable<T>","parameters":[{"description":"The array to search in.","id":"array","type":"{T}[]"},{"description":"The element to search for.","id":"element","type":"{T}"}],"return":{"description":"True if the array contains the element, false otherwise.","type":"System.Boolean"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ArrayExtensions.Contains``1(``0[],``0)"},{"children":null,"id":"ElementAt``1(``0[],System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ElementAt<T>(T[], Int32)","nameWithType":"ArrayExtensions.ElementAt<T>(T[], Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ArrayExtensions","remarks":null,"summary":"\nReturns the element at the specified index.\n","syntax":{"content":"public static T ElementAt<T>(this T[] array, int index)","parameters":[{"description":"The array to search in.","id":"array","type":"{T}[]"},{"description":"The index of the element to return.","id":"index","type":"System.Int32"}],"return":{"description":"The element at the specified index, or <code>default(T)</code> if the array is empty.","type":"{T}"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ArrayExtensions.ElementAt``1(``0[],System.Int32)"},{"children":null,"id":"Filter``1(``0[],Predicate{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Filter<T>(T[], Predicate<T>)","nameWithType":"ArrayExtensions.Filter<T>(T[], Predicate<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ArrayExtensions","remarks":null,"summary":"\nFilters the array to only contain elements that satisfy a predicate.\n","syntax":{"content":"public static T[] Filter<T>(this T[] array, Predicate<T> predicate)","parameters":[{"description":"The array to filter.","id":"array","type":"{T}[]"},{"description":"The predicate to use.","id":"predicate","type":"Global.Predicate{{T}}"}],"return":{"description":"A new array with the filtered elements removed.","type":"{T}[]"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ArrayExtensions.Filter``1(``0[],Predicate{``0})"},{"children":null,"id":"First``1(``0[])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"First<T>(T[])","nameWithType":"ArrayExtensions.First<T>(T[])","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ArrayExtensions","remarks":null,"summary":"\nReturns the first element in the array.\n","syntax":{"content":"public static T First<T>(this T[] array)","parameters":[{"description":"The array to get the element from.","id":"array","type":"{T}[]"}],"return":{"description":"The first element in the array, or <code>default(T)</code> if the array is empty.","type":"{T}"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ArrayExtensions.First``1(``0[])"},{"children":null,"id":"First``1(``0[],Predicate{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"First<T>(T[], Predicate<T>)","nameWithType":"ArrayExtensions.First<T>(T[], Predicate<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ArrayExtensions","remarks":null,"summary":"\nReturns the first element in the array that satisfies a predicate.\n","syntax":{"content":"public static T First<T>(this T[] array, Predicate<T> predicate)","parameters":[{"description":"The array to get the element from.","id":"array","type":"{T}[]"},{"description":"The predicate to use.","id":"predicate","type":"Global.Predicate{{T}}"}],"return":{"description":"The first element in the array that satisfies the predicate, or <code>default(T)</code> if no element satisfies the predicate.","type":"{T}"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ArrayExtensions.First``1(``0[],Predicate{``0})"},{"children":null,"id":"FirstNonNull``1(``0[])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"FirstNonNull<T>(T[])","nameWithType":"ArrayExtensions.FirstNonNull<T>(T[])","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ArrayExtensions","remarks":null,"summary":"\nReturns the first non-null element in the array.\n","syntax":{"content":"public static T FirstNonNull<T>(this T[] array)\n    where T : class","parameters":[{"description":"The array to get the element from.","id":"array","type":"{T}[]"}],"return":{"description":"The first non-null element in the array, or <code>default(T)</code> if all elements are null.","type":"{T}"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ArrayExtensions.FirstNonNull``1(``0[])"},{"children":null,"id":"Flatten``1(``0[0:,0:])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Flatten<T>(T[,])","nameWithType":"ArrayExtensions.Flatten<T>(T[,])","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ArrayExtensions","remarks":null,"summary":"\nFlattens a two-dimensional array into a new one-dimensional array.\n","syntax":{"content":"public static T[] Flatten<T>(this T[, ] array)","parameters":[{"description":"The two-dimensional array to flatten.","id":"array","type":"{T}[,]"}],"return":{"description":"A new array with the flattened elements.","type":"{T}[]"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ArrayExtensions.Flatten``1(``0[0:,0:])"},{"children":null,"id":"Flatten``1(``0[0:,0:,0:])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Flatten<T>(T[,,])","nameWithType":"ArrayExtensions.Flatten<T>(T[,,])","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ArrayExtensions","remarks":null,"summary":"\nFlattens a three-dimensional array into a new one-dimensional array.\n","syntax":{"content":"public static T[] Flatten<T>(this T[,, ] array)","parameters":[{"description":"The three-dimensional array to flatten.","id":"array","type":"{T}[,,]"}],"return":{"description":"A new array with the flattened elements.","type":"{T}[]"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ArrayExtensions.Flatten``1(``0[0:,0:,0:])"},{"children":null,"id":"For``1(``0[],Action{System.ValueTuple{``0,System.Int32}})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"For<T>(T[], Action<(T element, Int32 index)>)","nameWithType":"ArrayExtensions.For<T>(T[], Action<(T element, Int32 index)>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ArrayExtensions","remarks":null,"summary":"\nInvokes an action for each element in the array. The element and\nindex are passed as parameters.\n","syntax":{"content":"public static void For<T>(this T[] array, Action<(T element, int index)> action)","parameters":[{"description":"The array to iterate over.","id":"array","type":"{T}[]"},{"description":"The action to invoke.","id":"action","type":"Global.Action{System.ValueTuple{{T},System.Int32}}"}],"return":null,"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ArrayExtensions.For``1(``0[],Action{System.ValueTuple{``0,System.Int32}})"},{"children":null,"id":"ForEach``1(``0[],Action{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ForEach<T>(T[], Action<T>)","nameWithType":"ArrayExtensions.ForEach<T>(T[], Action<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ArrayExtensions","remarks":null,"summary":"\nInvokes an action for each element in the array. The element is\npassed as a parameter.\n","syntax":{"content":"public static void ForEach<T>(this T[] array, Action<T> action)","parameters":[{"description":"The array to iterate over.","id":"array","type":"{T}[]"},{"description":"The action to invoke.","id":"action","type":"Global.Action{{T}}"}],"return":null,"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ArrayExtensions.ForEach``1(``0[],Action{``0})"},{"children":null,"id":"IndexOf``1(``0[],``0)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IndexOf<T>(T[], T)","nameWithType":"ArrayExtensions.IndexOf<T>(T[], T)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ArrayExtensions","remarks":null,"summary":"\nReturns the index of the given element in the array.\n","syntax":{"content":"public static int IndexOf<T>(this T[] array, T element)\n    where T : IEquatable<T>","parameters":[{"description":"The array to search in.","id":"array","type":"{T}[]"},{"description":"The element to search for.","id":"element","type":"{T}"}],"return":{"description":"The index of the element in the array.","type":"System.Int32"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ArrayExtensions.IndexOf``1(``0[],``0)"},{"children":null,"id":"IsAny``1(``0[],Predicate{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsAny<T>(T[], Predicate<T>)","nameWithType":"ArrayExtensions.IsAny<T>(T[], Predicate<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ArrayExtensions","remarks":null,"summary":"\nChecks if any element in the array satisfies a predicate.\n","syntax":{"content":"public static bool IsAny<T>(this T[] array, Predicate<T> predicate)","parameters":[{"description":"The array to search in.","id":"array","type":"{T}[]"},{"description":"The predicate to use.","id":"predicate","type":"Global.Predicate{{T}}"}],"return":{"description":"True if any element satisfies the predicate.","type":"System.Boolean"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ArrayExtensions.IsAny``1(``0[],Predicate{``0})"},{"children":null,"id":"IsEach``1(``0[],Predicate{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsEach<T>(T[], Predicate<T>)","nameWithType":"ArrayExtensions.IsEach<T>(T[], Predicate<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ArrayExtensions","remarks":null,"summary":"\nChecks if each element in the array satisfies a predicate.\n","syntax":{"content":"public static bool IsEach<T>(this T[] array, Predicate<T> predicate)","parameters":[{"description":"The array to search in.","id":"array","type":"{T}[]"},{"description":"The predicate to use.","id":"predicate","type":"Global.Predicate{{T}}"}],"return":{"description":"True if all elements satisfy the predicate.","type":"System.Boolean"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ArrayExtensions.IsEach``1(``0[],Predicate{``0})"},{"children":null,"id":"IsEmpty(Array)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsEmpty(Array)","nameWithType":"ArrayExtensions.IsEmpty(Array)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ArrayExtensions","remarks":null,"summary":"\nChecks if the array is empty.\n","syntax":{"content":"public static bool IsEmpty(this Array array)","parameters":[{"description":"The array to check.","id":"array","type":"Global.Array"}],"return":{"description":"True if the array is empty.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.ArrayExtensions.IsEmpty(Array)"},{"children":null,"id":"IsNotEmpty(Array)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsNotEmpty(Array)","nameWithType":"ArrayExtensions.IsNotEmpty(Array)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ArrayExtensions","remarks":null,"summary":"\nChecks if the array is not empty.\n","syntax":{"content":"public static bool IsNotEmpty(this Array array)","parameters":[{"description":"The array to check.","id":"array","type":"Global.Array"}],"return":{"description":"True if the array is not empty.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.ArrayExtensions.IsNotEmpty(Array)"},{"children":null,"id":"IsInBounds(Array,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsInBounds(Array, Int32)","nameWithType":"ArrayExtensions.IsInBounds(Array, Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ArrayExtensions","remarks":null,"summary":"\nChecks if the specified index is within the bounds of the array.\n","syntax":{"content":"public static bool IsInBounds(this Array array, int index)","parameters":[{"description":"The array to check.","id":"array","type":"Global.Array"},{"description":"The index to check.","id":"index","type":"System.Int32"}],"return":{"description":"True if the index is within the bounds of the array.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.ArrayExtensions.IsInBounds(Array,System.Int32)"},{"children":null,"id":"IsNotInBounds(Array,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsNotInBounds(Array, Int32)","nameWithType":"ArrayExtensions.IsNotInBounds(Array, Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ArrayExtensions","remarks":null,"summary":"\nChecks if the specified index is out of bounds of the array.\n","syntax":{"content":"public static bool IsNotInBounds(this Array array, int index)","parameters":[{"description":"The array to check.","id":"array","type":"Global.Array"},{"description":"The index to check.","id":"index","type":"System.Int32"}],"return":{"description":"True if the index is out of bounds of the array.","type":"System.Boolean"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.ArrayExtensions.IsNotInBounds(Array,System.Int32)"},{"children":null,"id":"Join``1(``0[],System.String,System.Int32,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Join<T>(T[], String, Int32, Int32)","nameWithType":"ArrayExtensions.Join<T>(T[], String, Int32, Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ArrayExtensions","remarks":null,"summary":"\nJoins the elements of the array into a string with a delimiter.\n","syntax":{"content":"public static string Join<T>(this T[] array, string delimiter, int startIndex = 0, int endIndex = 2147483647)","parameters":[{"description":"The array to join.","id":"array","type":"{T}[]"},{"description":"The delimiter to use.","id":"delimiter","type":"System.String"},{"description":"The index to start at.","id":"startIndex","type":"System.Int32"},{"description":"The index to end at.","id":"endIndex","type":"System.Int32"}],"return":{"description":"The joined string.","type":"System.String"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ArrayExtensions.Join``1(``0[],System.String,System.Int32,System.Int32)"},{"children":null,"id":"Last``1(``0[])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Last<T>(T[])","nameWithType":"ArrayExtensions.Last<T>(T[])","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ArrayExtensions","remarks":null,"summary":"\nReturns the last element in the array.\n","syntax":{"content":"public static T Last<T>(this T[] array)","parameters":[{"description":"The array to get the element from.","id":"array","type":"{T}[]"}],"return":{"description":"The last element in the array, or <code>default(T)</code> if the array is empty.","type":"{T}"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ArrayExtensions.Last``1(``0[])"},{"children":null,"id":"Last``1(``0[],Predicate{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Last<T>(T[], Predicate<T>)","nameWithType":"ArrayExtensions.Last<T>(T[], Predicate<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ArrayExtensions","remarks":null,"summary":"\nReturns the last element in the array that satisfies a predicate.\n","syntax":{"content":"public static T Last<T>(this T[] array, Predicate<T> predicate)","parameters":[{"description":"The array to get the element from.","id":"array","type":"{T}[]"},{"description":"The predicate to use.","id":"predicate","type":"Global.Predicate{{T}}"}],"return":{"description":"The last element in the array that satisfies the predicate, or <code>default(T)</code> if no element satisfies the predicate.","type":"{T}"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ArrayExtensions.Last``1(``0[],Predicate{``0})"},{"children":null,"id":"LastNonNull``1(``0[])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"LastNonNull<T>(T[])","nameWithType":"ArrayExtensions.LastNonNull<T>(T[])","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ArrayExtensions","remarks":null,"summary":"\nReturns the last non-null element in the array.\n","syntax":{"content":"public static T LastNonNull<T>(this T[] array)\n    where T : class","parameters":[{"description":"The array to get the element from.","id":"array","type":"{T}[]"}],"return":{"description":"The last non-null element in the array, or <code>default(T)</code> if all elements are null.","type":"{T}"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ArrayExtensions.LastNonNull``1(``0[])"},{"children":null,"id":"Map``2(``0[],Converter{``0,``1})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Map<TInput, TOutput>(TInput[], Converter<TInput, TOutput>)","nameWithType":"ArrayExtensions.Map<TInput, TOutput>(TInput[], Converter<TInput, TOutput>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ArrayExtensions","remarks":null,"summary":"\nMaps the elements of the array to a new array using a converter\nfunction.\n","syntax":{"content":"public static TOutput[] Map<TInput, TOutput>(this TInput[] array, Converter<TInput, TOutput> converter)","parameters":[{"description":"The array to map.","id":"array","type":"{TInput}[]"},{"description":"The converter to use.","id":"converter","type":"Global.Converter{{TInput},{TOutput}}"}],"return":{"description":"A new array with the converted elements.","type":"{TOutput}[]"},"typeParameters":[{"description":"The type of the input array.","id":"TInput"},{"description":"The type of the output array.","id":"TOutput"}]},"type":"Method","uid":"Zigurous.DataStructures.ArrayExtensions.Map``2(``0[],Converter{``0,``1})"},{"children":null,"id":"NonNull``1(``0[])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"NonNull<T>(T[])","nameWithType":"ArrayExtensions.NonNull<T>(T[])","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ArrayExtensions","remarks":null,"summary":"\nFilters out all null elements from the array.\n","syntax":{"content":"public static T[] NonNull<T>(this T[] array)\n    where T : class","parameters":[{"description":"The array to filter.","id":"array","type":"{T}[]"}],"return":{"description":"A new array with all null elements removed.","type":"{T}[]"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ArrayExtensions.NonNull``1(``0[])"},{"children":null,"id":"Random``1(``0[])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Random<T>(T[])","nameWithType":"ArrayExtensions.Random<T>(T[])","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ArrayExtensions","remarks":null,"summary":"\nReturns a random element from the array.\n","syntax":{"content":"public static T Random<T>(this T[] array)","parameters":[{"description":"The array to get the random element from.","id":"array","type":"{T}[]"}],"return":{"description":"A random element from the array, or <code>default(T)</code> if the array is empty.","type":"{T}"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ArrayExtensions.Random``1(``0[])"},{"children":null,"id":"Reduce``2(``0[],``1,Zigurous.DataStructures.ArrayExtensions.Reducer{``1,``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Reduce<TElement, TSum>(TElement[], TSum, ArrayExtensions.Reducer<TSum, TElement>)","nameWithType":"ArrayExtensions.Reduce<TElement, TSum>(TElement[], TSum, ArrayExtensions.Reducer<TSum, TElement>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ArrayExtensions","remarks":null,"summary":"\nReduces the elements of the array to a single value.\n","syntax":{"content":"public static TSum Reduce<TElement, TSum>(this TElement[] array, TSum initialValue, ArrayExtensions.Reducer<TSum, TElement> reducer)","parameters":[{"description":"The array to reduce.","id":"array","type":"{TElement}[]"},{"description":"The initial value to use.","id":"initialValue","type":"{TSum}"},{"description":"The reducer to use.","id":"reducer","type":"Zigurous.DataStructures.ArrayExtensions.Reducer{{TSum},{TElement}}"}],"return":{"description":"The reduced value.","type":"{TSum}"},"typeParameters":[{"description":"The type of elements in the array.","id":"TElement"},{"description":"The type of the reduced value.","id":"TSum"}]},"type":"Method","uid":"Zigurous.DataStructures.ArrayExtensions.Reduce``2(``0[],``1,Zigurous.DataStructures.ArrayExtensions.Reducer{``1,``0})"},{"children":null,"id":"RemoveAt``1(``0[],System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"RemoveAt<T>(T[], Int32)","nameWithType":"ArrayExtensions.RemoveAt<T>(T[], Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ArrayExtensions","remarks":null,"summary":"\nRemoves the element at the specified index from the array.\n","syntax":{"content":"public static T[] RemoveAt<T>(this T[] array, int index)","parameters":[{"description":"The array to remove the element from.","id":"array","type":"{T}[]"},{"description":"The index of the element to remove.","id":"index","type":"System.Int32"}],"return":{"description":"A new array with the element removed.","type":"{T}[]"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ArrayExtensions.RemoveAt``1(``0[],System.Int32)"},{"children":null,"id":"Reverse``1(``0[])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Reverse<T>(T[])","nameWithType":"ArrayExtensions.Reverse<T>(T[])","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ArrayExtensions","remarks":null,"summary":"\nReverses the order of the elements in the array.\n","syntax":{"content":"public static void Reverse<T>(this T[] array)","parameters":[{"description":"The array to reverse.","id":"array","type":"{T}[]"}],"return":null,"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ArrayExtensions.Reverse``1(``0[])"},{"children":null,"id":"Reversed``1(``0[])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Reversed<T>(T[])","nameWithType":"ArrayExtensions.Reversed<T>(T[])","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ArrayExtensions","remarks":null,"summary":"\nReverses the order of the elements in the array.\n","syntax":{"content":"public static T[] Reversed<T>(this T[] array)","parameters":[{"description":"The array to reverse.","id":"array","type":"{T}[]"}],"return":{"description":"A new array with the order of the elements reversed.","type":"{T}[]"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ArrayExtensions.Reversed``1(``0[])"},{"children":null,"id":"Shuffle``1(``0[])","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Shuffle<T>(T[])","nameWithType":"ArrayExtensions.Shuffle<T>(T[])","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ArrayExtensions","remarks":"The shuffle is done using the Fisher-Yates algorithm.","summary":"\nShuffles the array in place.\n","syntax":{"content":"public static void Shuffle<T>(this T[] array)","parameters":[{"description":"The array to shuffle.","id":"array","type":"{T}[]"}],"return":null,"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ArrayExtensions.Shuffle``1(``0[])"},{"children":null,"id":"Shuffle``1(``0[],Random)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Shuffle<T>(T[], Random)","nameWithType":"ArrayExtensions.Shuffle<T>(T[], Random)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ArrayExtensions","remarks":"The shuffle is done using the Fisher-Yates algorithm.","summary":"\nShuffles the array in place using the given random number generator.\n","syntax":{"content":"public static void Shuffle<T>(this T[] array, Random rng)","parameters":[{"description":"The array to shuffle.","id":"array","type":"{T}[]"},{"description":"The random number generator to use.","id":"rng","type":"Global.Random"}],"return":null,"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ArrayExtensions.Shuffle``1(``0[],Random)"},{"children":null,"id":"Slice``1(``0[],System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Slice<T>(T[], Int32)","nameWithType":"ArrayExtensions.Slice<T>(T[], Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ArrayExtensions","remarks":null,"summary":"\nReturns a portion of the array containing a specified amount of\nelements.\n","syntax":{"content":"public static T[] Slice<T>(this T[] array, int amount)","parameters":[{"description":"The array to slice.","id":"array","type":"{T}[]"},{"description":"The amount of elements to slice.","id":"amount","type":"System.Int32"}],"return":{"description":"A new array containing only the sliced elements.","type":"{T}[]"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ArrayExtensions.Slice``1(``0[],System.Int32)"},{"children":null,"id":"Sort``1(``0[],Comparison{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Sort<T>(T[], Comparison<T>)","nameWithType":"ArrayExtensions.Sort<T>(T[], Comparison<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ArrayExtensions","remarks":null,"summary":"\nSorts the elements of the array.\n","syntax":{"content":"public static void Sort<T>(this T[] array, Comparison<T> comparison)","parameters":[{"description":"The array to sort.","id":"array","type":"{T}[]"},{"description":"The comparison to use.","id":"comparison","type":"Global.Comparison{{T}}"}],"return":null,"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ArrayExtensions.Sort``1(``0[],Comparison{``0})"},{"children":null,"id":"Where``1(``0[],Predicate{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Where<T>(T[], Predicate<T>)","nameWithType":"ArrayExtensions.Where<T>(T[], Predicate<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ArrayExtensions","remarks":null,"summary":"\nFilters the array to only contain elements that satisfy a predicate.\n","syntax":{"content":"public static T[] Where<T>(this T[] array, Predicate<T> predicate)","parameters":[{"description":"The array to filter.","id":"array","type":"{T}[]"},{"description":"The predicate to use.","id":"predicate","type":"Global.Predicate{{T}}"}],"return":{"description":"A new array with the filtered elements removed.","type":"{T}[]"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ArrayExtensions.Where``1(``0[],Predicate{``0})"},{"children":null,"id":"WrapIndex(Array,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"WrapIndex(Array, Int32)","nameWithType":"ArrayExtensions.WrapIndex(Array, Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ArrayExtensions","remarks":null,"summary":"\nWraps an index to either end of the array if it is out of bounds.\n","syntax":{"content":"public static int WrapIndex(this Array array, int index)","parameters":[{"description":"The array to wrap.","id":"array","type":"Global.Array"},{"description":"The index to wrap.","id":"index","type":"System.Int32"}],"return":{"description":"The wrapped index.","type":"System.Int32"},"typeParameters":null},"type":"Method","uid":"Zigurous.DataStructures.ArrayExtensions.WrapIndex(Array,System.Int32)"}]},{"items":[{"children":["Zigurous.DataStructures.ListExtensions.Add``1(List{``0},``0,System.Int32)","Zigurous.DataStructures.ListExtensions.CombinedWith``1(List{``0},List{``0})","Zigurous.DataStructures.ListExtensions.Filter``1(List{``0},Predicate{``0})","Zigurous.DataStructures.ListExtensions.First``1(List{``0})","Zigurous.DataStructures.ListExtensions.First``1(List{``0},Predicate{``0})","Zigurous.DataStructures.ListExtensions.FirstNonNull``1(List{``0})","Zigurous.DataStructures.ListExtensions.For``1(List{``0},Action{System.ValueTuple{``0,System.Int32}})","Zigurous.DataStructures.ListExtensions.IsAny``1(List{``0},Predicate{``0})","Zigurous.DataStructures.ListExtensions.IsEach``1(List{``0},Predicate{``0})","Zigurous.DataStructures.ListExtensions.IsEmpty``1(List{``0})","Zigurous.DataStructures.ListExtensions.IsInBounds``1(List{``0},System.Int32)","Zigurous.DataStructures.ListExtensions.IsNotEmpty``1(List{``0})","Zigurous.DataStructures.ListExtensions.IsNotInBounds``1(List{``0},System.Int32)","Zigurous.DataStructures.ListExtensions.ItemAt``1(List{``0},System.Int32)","Zigurous.DataStructures.ListExtensions.Join``1(List{``0},System.String,System.Int32,System.Int32)","Zigurous.DataStructures.ListExtensions.Last``1(List{``0})","Zigurous.DataStructures.ListExtensions.Last``1(List{``0},Predicate{``0})","Zigurous.DataStructures.ListExtensions.LastNonNull``1(List{``0})","Zigurous.DataStructures.ListExtensions.Map``2(List{``0},Converter{``0,``1})","Zigurous.DataStructures.ListExtensions.NonNull``1(List{``0})","Zigurous.DataStructures.ListExtensions.Random``1(List{``0})","Zigurous.DataStructures.ListExtensions.Reduce``2(List{``0},``1,Zigurous.DataStructures.ListExtensions.Reducer{``1,``0})","Zigurous.DataStructures.ListExtensions.RemoveFirst``1(List{``0})","Zigurous.DataStructures.ListExtensions.RemoveLast``1(List{``0})","Zigurous.DataStructures.ListExtensions.Reversed``1(List{``0})","Zigurous.DataStructures.ListExtensions.Shuffle``1(List{``0})","Zigurous.DataStructures.ListExtensions.Shuffle``1(List{``0},Random)","Zigurous.DataStructures.ListExtensions.Where``1(List{``0},Predicate{``0})","Zigurous.DataStructures.ListExtensions.WrapIndex``1(List{``0},System.Int32)"],"id":"ListExtensions","implements":null,"inheritance":["System.Object"],"inheritedMembers":null,"name":"ListExtensions","nameWithType":"ListExtensions","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures","remarks":null,"summary":"\nExtension methods for lists.\n","syntax":{"content":"public static class ListExtensions","parameters":null,"return":null,"typeParameters":null},"type":"Class","uid":"Zigurous.DataStructures.ListExtensions"},{"children":null,"id":"Add``1(List{``0},``0,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Add<T>(List<T>, T, Int32)","nameWithType":"ListExtensions.Add<T>(List<T>, T, Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ListExtensions","remarks":null,"summary":"\nAdds a specified amount of a given value to the list.\n","syntax":{"content":"public static void Add<T>(this List<T> list, T value, int amount)","parameters":[{"description":"The list to add to.","id":"list","type":"Global.List{{T}}"},{"description":"The value to add.","id":"value","type":"{T}"},{"description":"The number of times to add the value.","id":"amount","type":"System.Int32"}],"return":null,"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ListExtensions.Add``1(List{``0},``0,System.Int32)"},{"children":null,"id":"CombinedWith``1(List{``0},List{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"CombinedWith<T>(List<T>, List<T>)","nameWithType":"ListExtensions.CombinedWith<T>(List<T>, List<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ListExtensions","remarks":null,"summary":"\nCombines the list with another.\n","syntax":{"content":"public static List<T> CombinedWith<T>(this List<T> list, List<T> other)","parameters":[{"description":"The first list.","id":"list","type":"Global.List{{T}}"},{"description":"The second list.","id":"other","type":"Global.List{{T}}"}],"return":{"description":"A new list containing the items of both lists.","type":"Global.List{{T}}"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ListExtensions.CombinedWith``1(List{``0},List{``0})"},{"children":null,"id":"ItemAt``1(List{``0},System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"ItemAt<T>(List<T>, Int32)","nameWithType":"ListExtensions.ItemAt<T>(List<T>, Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ListExtensions","remarks":null,"summary":"\nReturns the item at the specified index.\n","syntax":{"content":"public static T ItemAt<T>(this List<T> list, int index)","parameters":[{"description":"The list to get the item from.","id":"list","type":"Global.List{{T}}"},{"description":"The index of the item to get.","id":"index","type":"System.Int32"}],"return":{"description":"The item at the index, or <code>default(T)</code> if the list is empty.","type":"{T}"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ListExtensions.ItemAt``1(List{``0},System.Int32)"},{"children":null,"id":"Filter``1(List{``0},Predicate{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Filter<T>(List<T>, Predicate<T>)","nameWithType":"ListExtensions.Filter<T>(List<T>, Predicate<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ListExtensions","remarks":null,"summary":"\nFilters the list to only contain items that satisfy a predicate.\n","syntax":{"content":"public static List<T> Filter<T>(this List<T> list, Predicate<T> predicate)","parameters":[{"description":"The list to filter.","id":"list","type":"Global.List{{T}}"},{"description":"The predicate to use.","id":"predicate","type":"Global.Predicate{{T}}"}],"return":{"description":"A new list with the filtered items removed.","type":"Global.List{{T}}"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ListExtensions.Filter``1(List{``0},Predicate{``0})"},{"children":null,"id":"First``1(List{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"First<T>(List<T>)","nameWithType":"ListExtensions.First<T>(List<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ListExtensions","remarks":null,"summary":"\nReturns the first item in the list.\n","syntax":{"content":"public static T First<T>(this List<T> list)","parameters":[{"description":"The list to get the item from.","id":"list","type":"Global.List{{T}}"}],"return":{"description":"The first item in the list, or <code>default(T)</code> if the list is empty.","type":"{T}"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ListExtensions.First``1(List{``0})"},{"children":null,"id":"First``1(List{``0},Predicate{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"First<T>(List<T>, Predicate<T>)","nameWithType":"ListExtensions.First<T>(List<T>, Predicate<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ListExtensions","remarks":null,"summary":"\nReturns the first item in the list that satisfies a predicate.\n","syntax":{"content":"public static T First<T>(this List<T> list, Predicate<T> predicate)","parameters":[{"description":"The list to get the item from.","id":"list","type":"Global.List{{T}}"},{"description":"The predicate to use.","id":"predicate","type":"Global.Predicate{{T}}"}],"return":{"description":"The first item in the list that satisfies the predicate, or <code>default(T)</code> if no item satisfies the predicate.","type":"{T}"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ListExtensions.First``1(List{``0},Predicate{``0})"},{"children":null,"id":"FirstNonNull``1(List{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"FirstNonNull<T>(List<T>)","nameWithType":"ListExtensions.FirstNonNull<T>(List<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ListExtensions","remarks":null,"summary":"\nReturns the first non-null item in the list.\n","syntax":{"content":"public static T FirstNonNull<T>(this List<T> list)\n    where T : class","parameters":[{"description":"The list to get the item from.","id":"list","type":"Global.List{{T}}"}],"return":{"description":"The first non-null item in the list, or <code>default(T)</code> if all items are null.","type":"{T}"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ListExtensions.FirstNonNull``1(List{``0})"},{"children":null,"id":"For``1(List{``0},Action{System.ValueTuple{``0,System.Int32}})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"For<T>(List<T>, Action<(T item, Int32 index)>)","nameWithType":"ListExtensions.For<T>(List<T>, Action<(T item, Int32 index)>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ListExtensions","remarks":null,"summary":"\nInvokes an action for each item in the list. The item and index are\npassed as parameters.\n","syntax":{"content":"public static void For<T>(this List<T> list, Action<(T item, int index)> action)","parameters":[{"description":"The list to iterate over.","id":"list","type":"Global.List{{T}}"},{"description":"The action to invoke.","id":"action","type":"Global.Action{System.ValueTuple{{T},System.Int32}}"}],"return":null,"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ListExtensions.For``1(List{``0},Action{System.ValueTuple{``0,System.Int32}})"},{"children":null,"id":"IsAny``1(List{``0},Predicate{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsAny<T>(List<T>, Predicate<T>)","nameWithType":"ListExtensions.IsAny<T>(List<T>, Predicate<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ListExtensions","remarks":null,"summary":"\nChecks if any item in the list satisfies a predicate.\n","syntax":{"content":"public static bool IsAny<T>(this List<T> list, Predicate<T> predicate)","parameters":[{"description":"The list to search in.","id":"list","type":"Global.List{{T}}"},{"description":"The predicate to use.","id":"predicate","type":"Global.Predicate{{T}}"}],"return":{"description":"True if any item satisfies the predicate.","type":"System.Boolean"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ListExtensions.IsAny``1(List{``0},Predicate{``0})"},{"children":null,"id":"IsEach``1(List{``0},Predicate{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsEach<T>(List<T>, Predicate<T>)","nameWithType":"ListExtensions.IsEach<T>(List<T>, Predicate<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ListExtensions","remarks":null,"summary":"\nChecks if each item in the list satisfies a predicate.\n","syntax":{"content":"public static bool IsEach<T>(this List<T> list, Predicate<T> predicate)","parameters":[{"description":"The list to search in.","id":"list","type":"Global.List{{T}}"},{"description":"The predicate to use.","id":"predicate","type":"Global.Predicate{{T}}"}],"return":{"description":"True if all items satisfy the predicate.","type":"System.Boolean"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ListExtensions.IsEach``1(List{``0},Predicate{``0})"},{"children":null,"id":"IsEmpty``1(List{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsEmpty<T>(List<T>)","nameWithType":"ListExtensions.IsEmpty<T>(List<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ListExtensions","remarks":null,"summary":"\nChecks if the list is empty.\n","syntax":{"content":"public static bool IsEmpty<T>(this List<T> list)","parameters":[{"description":"The list to check.","id":"list","type":"Global.List{{T}}"}],"return":{"description":"True if the list is empty.","type":"System.Boolean"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ListExtensions.IsEmpty``1(List{``0})"},{"children":null,"id":"IsNotEmpty``1(List{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsNotEmpty<T>(List<T>)","nameWithType":"ListExtensions.IsNotEmpty<T>(List<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ListExtensions","remarks":null,"summary":"\nChecks if the list is not empty.\n","syntax":{"content":"public static bool IsNotEmpty<T>(this List<T> list)","parameters":[{"description":"The list to check.","id":"list","type":"Global.List{{T}}"}],"return":{"description":"True if the list is not empty.","type":"System.Boolean"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ListExtensions.IsNotEmpty``1(List{``0})"},{"children":null,"id":"IsInBounds``1(List{``0},System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsInBounds<T>(List<T>, Int32)","nameWithType":"ListExtensions.IsInBounds<T>(List<T>, Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ListExtensions","remarks":null,"summary":"\nChecks if the specified index is within the bounds of the list.\n","syntax":{"content":"public static bool IsInBounds<T>(this List<T> list, int index)","parameters":[{"description":"The list to check.","id":"list","type":"Global.List{{T}}"},{"description":"The index to check.","id":"index","type":"System.Int32"}],"return":{"description":"True if the index is within the bounds of the list.","type":"System.Boolean"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ListExtensions.IsInBounds``1(List{``0},System.Int32)"},{"children":null,"id":"IsNotInBounds``1(List{``0},System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"IsNotInBounds<T>(List<T>, Int32)","nameWithType":"ListExtensions.IsNotInBounds<T>(List<T>, Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ListExtensions","remarks":null,"summary":"\nChecks if the specified index is out of bounds of the list.\n","syntax":{"content":"public static bool IsNotInBounds<T>(this List<T> list, int index)","parameters":[{"description":"The list to check.","id":"list","type":"Global.List{{T}}"},{"description":"The index to check.","id":"index","type":"System.Int32"}],"return":{"description":"True if the index is out of bounds of the list.","type":"System.Boolean"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ListExtensions.IsNotInBounds``1(List{``0},System.Int32)"},{"children":null,"id":"Join``1(List{``0},System.String,System.Int32,System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Join<T>(List<T>, String, Int32, Int32)","nameWithType":"ListExtensions.Join<T>(List<T>, String, Int32, Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ListExtensions","remarks":null,"summary":"\nJoins the items of the list into a string with a delimiter.\n","syntax":{"content":"public static string Join<T>(this List<T> list, string delimiter, int startIndex = 0, int endIndex = 2147483647)","parameters":[{"description":null,"id":"list","type":"Global.List{{T}}"},{"description":"The delimiter to use.","id":"delimiter","type":"System.String"},{"description":"The index to start at.","id":"startIndex","type":"System.Int32"},{"description":"The index to end at.","id":"endIndex","type":"System.Int32"}],"return":{"description":"The joined string.","type":"System.String"},"typeParameters":[{"description":"The type of the array.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ListExtensions.Join``1(List{``0},System.String,System.Int32,System.Int32)"},{"children":null,"id":"Last``1(List{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Last<T>(List<T>)","nameWithType":"ListExtensions.Last<T>(List<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ListExtensions","remarks":null,"summary":"\nReturns the last item in the list.\n","syntax":{"content":"public static T Last<T>(this List<T> list)","parameters":[{"description":"The list to get the item from.","id":"list","type":"Global.List{{T}}"}],"return":{"description":"The last item in the list, or <code>default(T)</code> if the list is empty.","type":"{T}"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ListExtensions.Last``1(List{``0})"},{"children":null,"id":"Last``1(List{``0},Predicate{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Last<T>(List<T>, Predicate<T>)","nameWithType":"ListExtensions.Last<T>(List<T>, Predicate<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ListExtensions","remarks":null,"summary":"\nReturns the last item in the list that satisfies a predicate.\n","syntax":{"content":"public static T Last<T>(this List<T> list, Predicate<T> predicate)","parameters":[{"description":"The list to get the item from.","id":"list","type":"Global.List{{T}}"},{"description":"The predicate to use.","id":"predicate","type":"Global.Predicate{{T}}"}],"return":{"description":"The last item in the list that satisfies the predicate, or <code>default(T)</code> if no item satisfies the predicate.","type":"{T}"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ListExtensions.Last``1(List{``0},Predicate{``0})"},{"children":null,"id":"LastNonNull``1(List{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"LastNonNull<T>(List<T>)","nameWithType":"ListExtensions.LastNonNull<T>(List<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ListExtensions","remarks":null,"summary":"\nReturns the last non-null item in the list.\n","syntax":{"content":"public static T LastNonNull<T>(this List<T> list)\n    where T : class","parameters":[{"description":"The list to get the item from.","id":"list","type":"Global.List{{T}}"}],"return":{"description":"The last non-null item in the list, or <code>default(T)</code> if all items are null.","type":"{T}"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ListExtensions.LastNonNull``1(List{``0})"},{"children":null,"id":"Map``2(List{``0},Converter{``0,``1})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Map<TInput, TOutput>(List<TInput>, Converter<TInput, TOutput>)","nameWithType":"ListExtensions.Map<TInput, TOutput>(List<TInput>, Converter<TInput, TOutput>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ListExtensions","remarks":null,"summary":"\nMaps the items of the list to a new list using a converter function.\n","syntax":{"content":"public static List<TOutput> Map<TInput, TOutput>(this List<TInput> list, Converter<TInput, TOutput> converter)","parameters":[{"description":"The list to map.","id":"list","type":"Global.List{{TInput}}"},{"description":"The converter to use.","id":"converter","type":"Global.Converter{{TInput},{TOutput}}"}],"return":{"description":"A new list with the converted items.","type":"Global.List{{TOutput}}"},"typeParameters":[{"description":"The type of the input list.","id":"TInput"},{"description":"The type of the output list.","id":"TOutput"}]},"type":"Method","uid":"Zigurous.DataStructures.ListExtensions.Map``2(List{``0},Converter{``0,``1})"},{"children":null,"id":"NonNull``1(List{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"NonNull<T>(List<T>)","nameWithType":"ListExtensions.NonNull<T>(List<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ListExtensions","remarks":null,"summary":"\nFilters out all null items from the list.\n","syntax":{"content":"public static List<T> NonNull<T>(this List<T> list)\n    where T : class","parameters":[{"description":"The list to filter.","id":"list","type":"Global.List{{T}}"}],"return":{"description":"A new list with all null items removed.","type":"Global.List{{T}}"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ListExtensions.NonNull``1(List{``0})"},{"children":null,"id":"Random``1(List{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Random<T>(List<T>)","nameWithType":"ListExtensions.Random<T>(List<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ListExtensions","remarks":null,"summary":"\nReturns a random item from the list.\n","syntax":{"content":"public static T Random<T>(this List<T> list)","parameters":[{"description":"The list to get the random item from.","id":"list","type":"Global.List{{T}}"}],"return":{"description":"A random item from the list, or <code>default(T)</code> if the list is empty.","type":"{T}"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ListExtensions.Random``1(List{``0})"},{"children":null,"id":"Reduce``2(List{``0},``1,Zigurous.DataStructures.ListExtensions.Reducer{``1,``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Reduce<TItem, TSum>(List<TItem>, TSum, ListExtensions.Reducer<TSum, TItem>)","nameWithType":"ListExtensions.Reduce<TItem, TSum>(List<TItem>, TSum, ListExtensions.Reducer<TSum, TItem>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ListExtensions","remarks":null,"summary":"\nReduces the items of the list to a single value.\n","syntax":{"content":"public static TSum Reduce<TItem, TSum>(this List<TItem> list, TSum initialValue, ListExtensions.Reducer<TSum, TItem> reducer)","parameters":[{"description":"The list to reduce.","id":"list","type":"Global.List{{TItem}}"},{"description":"The initial value to use.","id":"initialValue","type":"{TSum}"},{"description":"The reducer to use.","id":"reducer","type":"Zigurous.DataStructures.ListExtensions.Reducer{{TSum},{TItem}}"}],"return":{"description":"The reduced value.","type":"{TSum}"},"typeParameters":[{"description":"The type of items in the list.","id":"TItem"},{"description":"The type of the reduced value.","id":"TSum"}]},"type":"Method","uid":"Zigurous.DataStructures.ListExtensions.Reduce``2(List{``0},``1,Zigurous.DataStructures.ListExtensions.Reducer{``1,``0})"},{"children":null,"id":"RemoveFirst``1(List{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"RemoveFirst<T>(List<T>)","nameWithType":"ListExtensions.RemoveFirst<T>(List<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ListExtensions","remarks":null,"summary":"\nRemoves the first item in the list.\n","syntax":{"content":"public static void RemoveFirst<T>(this List<T> list)","parameters":[{"description":"The list to remove from.","id":"list","type":"Global.List{{T}}"}],"return":null,"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ListExtensions.RemoveFirst``1(List{``0})"},{"children":null,"id":"RemoveLast``1(List{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"RemoveLast<T>(List<T>)","nameWithType":"ListExtensions.RemoveLast<T>(List<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ListExtensions","remarks":null,"summary":"\nRemoves the last item in the list.\n","syntax":{"content":"public static void RemoveLast<T>(this List<T> list)","parameters":[{"description":"The list to remove from.","id":"list","type":"Global.List{{T}}"}],"return":null,"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ListExtensions.RemoveLast``1(List{``0})"},{"children":null,"id":"Reversed``1(List{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Reversed<T>(List<T>)","nameWithType":"ListExtensions.Reversed<T>(List<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ListExtensions","remarks":null,"summary":"\nReverses the order of the items in the list.\n","syntax":{"content":"public static List<T> Reversed<T>(this List<T> list)","parameters":[{"description":"The list to reverse.","id":"list","type":"Global.List{{T}}"}],"return":{"description":"A new list with the order of the items reversed.","type":"Global.List{{T}}"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ListExtensions.Reversed``1(List{``0})"},{"children":null,"id":"Shuffle``1(List{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Shuffle<T>(List<T>)","nameWithType":"ListExtensions.Shuffle<T>(List<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ListExtensions","remarks":"The shuffle is done using the Fisher-Yates algorithm.","summary":"\nShuffles the list in place.\n","syntax":{"content":"public static void Shuffle<T>(this List<T> list)","parameters":[{"description":"The list to shuffle.","id":"list","type":"Global.List{{T}}"}],"return":null,"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ListExtensions.Shuffle``1(List{``0})"},{"children":null,"id":"Shuffle``1(List{``0},Random)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Shuffle<T>(List<T>, Random)","nameWithType":"ListExtensions.Shuffle<T>(List<T>, Random)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ListExtensions","remarks":"The shuffle is done using the Fisher-Yates algorithm.","summary":"\nShuffles the list in place using the given random number generator.\n","syntax":{"content":"public static void Shuffle<T>(this List<T> list, Random rng)","parameters":[{"description":"The list to shuffle.","id":"list","type":"Global.List{{T}}"},{"description":"The random number generator to use.","id":"rng","type":"Global.Random"}],"return":null,"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ListExtensions.Shuffle``1(List{``0},Random)"},{"children":null,"id":"Where``1(List{``0},Predicate{``0})","implements":null,"inheritance":null,"inheritedMembers":null,"name":"Where<T>(List<T>, Predicate<T>)","nameWithType":"ListExtensions.Where<T>(List<T>, Predicate<T>)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ListExtensions","remarks":null,"summary":"\nFilters the list to only contain items that satisfy a predicate.\n","syntax":{"content":"public static List<T> Where<T>(this List<T> list, Predicate<T> predicate)","parameters":[{"description":"The list to filter.","id":"list","type":"Global.List{{T}}"},{"description":"The predicate to use.","id":"predicate","type":"Global.Predicate{{T}}"}],"return":{"description":"A new list with the filtered items removed.","type":"Global.List{{T}}"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ListExtensions.Where``1(List{``0},Predicate{``0})"},{"children":null,"id":"WrapIndex``1(List{``0},System.Int32)","implements":null,"inheritance":null,"inheritedMembers":null,"name":"WrapIndex<T>(List<T>, Int32)","nameWithType":"ListExtensions.WrapIndex<T>(List<T>, Int32)","namespace":"Zigurous.DataStructures","parent":"Zigurous.DataStructures.ListExtensions","remarks":null,"summary":"\nWraps an index to either end of the list if it is out of bounds.\n","syntax":{"content":"public static int WrapIndex<T>(this List<T> list, int index)","parameters":[{"description":"The list to wrap.","id":"list","type":"Global.List{{T}}"},{"description":"The index to wrap.","id":"index","type":"System.Int32"}],"return":{"description":"The wrapped index.","type":"System.Int32"},"typeParameters":[{"description":"The type of the list.","id":"T"}]},"type":"Method","uid":"Zigurous.DataStructures.ListExtensions.WrapIndex``1(List{``0},System.Int32)"}]}]}}}